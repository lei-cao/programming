"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };
var $unused = function(v) {};

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (high === undefined) {
    high = slice.$length;
  }
  if (max === undefined) {
    max = slice.$capacity;
  }
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = high - low;
  s.$capacity = max - low;
  return s;
};

var $substring = function(str, low, high) {
  if (low < 0 || high < low || high > str.length) {
    $throwRuntimeError("slice bounds out of range");
  }
  return str.substring(low, high);
};

var $sliceToArray = function(slice) {
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, named, pkg, exported, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, pkg, exported, constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(pkgPath, fields) {
      typ.pkgPath = pkgPath;
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.anonymous) {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.named = named;
  typ.pkg = pkg;
  typ.exported = exported;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if (e.typ.named) {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.anonymous) {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, false, "", false, null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, false, "", false, null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, false, "", false, null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(pkgPath, fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, false, "", false, function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(pkgPath, fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
var $curGoroutine = $noGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $noGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $schedule($goroutine);
};

var $scheduled = [];
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
  } finally {
    if ($scheduled.length > 0) {
      setTimeout($runScheduled, 0);
    }
  }
};

var $schedule = function(goroutine) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }
  $scheduled.push(goroutine);
  if ($curGoroutine === $noGoroutine) {
    $runScheduled();
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if ($curGoroutine === $noGoroutine) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  var closedDuringSend;
  chan.$sendQueue.push(function(closed) {
    closedDuringSend = closed;
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (closedDuringSend) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend(false));
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(true); /* will panic */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if ($isASCII(v)) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (!f.exported) {
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var result = v.apply(passThis ? this : undefined, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if ($isASCII(v)) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

/* $isASCII reports whether string s contains only ASCII characters. */
var $isASCII = function(s) {
  for (var i = 0; i < s.length; i++) {
    if (s.charCodeAt(i) >= 128) {
      return false;
    }
  }
  return true;
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, MakeFunc, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	init = function() {
		var e;
		e = new Error.ptr(null);
		$unused(e);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "Object", anonymous: true, exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, TypeAssertionError, errorString, ptrType$4, init, GOROOT, Caller, Goexit, SetFinalizer, KeepAlive, throw$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType$4 = $ptrType(TypeAssertionError);
	init = function() {
		var e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = throw$1;
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
		$unused(e);
	};
	GOROOT = function() {
		var goroot, process;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		goroot = process.env.GOROOT;
		if (!(goroot === undefined)) {
			return $internalize(goroot, $String);
		}
		return "/usr/local/go";
	};
	$pkg.GOROOT = GOROOT;
	Caller = function(skip) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, file, info, line, ok, parts, pc, skip;
		pc = 0;
		file = "";
		line = 0;
		ok = false;
		info = new ($global.Error)().stack.split($externalize("\n", $String))[(skip + 2 >> 0)];
		if (info === undefined) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = 0;
			_tmp$3 = false;
			pc = _tmp;
			file = _tmp$1;
			line = _tmp$2;
			ok = _tmp$3;
			return [pc, file, line, ok];
		}
		parts = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
		_tmp$4 = 0;
		_tmp$5 = $internalize(parts[0], $String);
		_tmp$6 = $parseInt(parts[1]) >> 0;
		_tmp$7 = true;
		pc = _tmp$4;
		file = _tmp$5;
		line = _tmp$6;
		ok = _tmp$7;
		return [pc, file, line, ok];
	};
	$pkg.Caller = Caller;
	Goexit = function() {
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	SetFinalizer = function(x, f) {
		var f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	KeepAlive = function(param) {
		var param;
	};
	$pkg.KeepAlive = KeepAlive;
	throw$1 = function(s) {
		var s;
		$panic(new errorString((s)));
	};
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + (e);
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$4.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	TypeAssertionError.init("runtime", [{prop: "interfaceString", name: "interfaceString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable, ReadRange, WriteRange;
	Acquire = function(addr) {
		var addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
	};
	$pkg.Disable = Disable;
	Enable = function() {
	};
	$pkg.Enable = Enable;
	ReadRange = function(addr, len) {
		var addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, ptrType, CompareAndSwapInt32, CompareAndSwapUint64, CompareAndSwapPointer, AddInt32, LoadInt32, LoadUint32, LoadUint64, LoadPointer, StoreInt32, StoreUint32, StorePointer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = $ifaceNil;
			return;
		}
		this.v = v_;
	});
	ptrType = $ptrType(Value);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	CompareAndSwapUint64 = function(addr, old, new$1) {
		var addr, new$1, old, x;
		if ((x = addr.$get(), (x.$high === old.$high && x.$low === old.$low))) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapUint64 = CompareAndSwapUint64;
	CompareAndSwapPointer = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapPointer = CompareAndSwapPointer;
	AddInt32 = function(addr, delta) {
		var addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadInt32 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadInt32 = LoadInt32;
	LoadUint32 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	LoadUint64 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint64 = LoadUint64;
	LoadPointer = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadPointer = LoadPointer;
	StoreInt32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StoreInt32 = StoreInt32;
	StoreUint32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	StorePointer = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StorePointer = StorePointer;
	Value.ptr.prototype.Load = function() {
		var v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(x) {
		var v, x;
		v = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			$panic(new $String("sync/atomic: store of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !(x.constructor === v.v.constructor)) {
			$panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
		}
		v.v = x;
	};
	Value.prototype.Store = function(x) { return this.$val.Store(x); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	Value.init("sync/atomic", [{prop: "v", name: "v", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, js, race, runtime, atomic, Pool, Map, readOnly, entry, Mutex, Locker, Once, poolLocalInternal, poolLocal, notifyList, RWMutex, rlocker, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$4, ptrType$8, ptrType$9, funcType, funcType$1, ptrType$15, mapType, ptrType$16, funcType$2, ptrType$17, arrayType$2, semWaiters, semAwoken, expunged, allPools, runtime_registerPoolCleanup, runtime_Semacquire, runtime_SemacquireMutex, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, runtime_nanotime, throw$1, newEntry, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$4.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Map = $pkg.Map = $newType(0, $kindStruct, "sync.Map", true, "sync", true, function(mu_, read_, dirty_, misses_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new Mutex.ptr(0, 0);
			this.read = new atomic.Value.ptr($ifaceNil);
			this.dirty = false;
			this.misses = 0;
			return;
		}
		this.mu = mu_;
		this.read = read_;
		this.dirty = dirty_;
		this.misses = misses_;
	});
	readOnly = $pkg.readOnly = $newType(0, $kindStruct, "sync.readOnly", true, "sync", false, function(m_, amended_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = false;
			this.amended = false;
			return;
		}
		this.m = m_;
		this.amended = amended_;
	});
	entry = $pkg.entry = $newType(0, $kindStruct, "sync.entry", true, "sync", false, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = 0;
			return;
		}
		this.p = p_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", true, "sync", true, function(m_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Mutex.ptr(0, 0);
			this.done = 0;
			return;
		}
		this.m = m_;
		this.done = done_;
	});
	poolLocalInternal = $pkg.poolLocalInternal = $newType(0, $kindStruct, "sync.poolLocalInternal", true, "sync", false, function(private$0_, shared_, Mutex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$4.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(poolLocalInternal_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.poolLocalInternal = new poolLocalInternal.ptr($ifaceNil, sliceType$4.nil, new Mutex.ptr(0, 0));
			this.pad = arrayType$2.zero();
			return;
		}
		this.poolLocalInternal = poolLocalInternal_;
		this.pad = pad_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$3 = $ptrType($emptyInterface);
	ptrType$4 = $ptrType(entry);
	ptrType$5 = $ptrType($UnsafePointer);
	ptrType$6 = $ptrType($Int32);
	ptrType$7 = $ptrType(poolLocal);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$8 = $ptrType(rlocker);
	ptrType$9 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	funcType$1 = $funcType([$emptyInterface, $emptyInterface], [$Bool], false);
	ptrType$15 = $ptrType(Map);
	mapType = $mapType($emptyInterface, ptrType$4);
	ptrType$16 = $ptrType(Mutex);
	funcType$2 = $funcType([], [], false);
	ptrType$17 = $ptrType(Once);
	arrayType$2 = $arrayType($Uint8, 100);
	Pool.ptr.prototype.Get = function() {
		var _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var cleanup;
	};
	runtime_Semacquire = function(s) {
		var s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = runtime_SemacquireMutex(s, false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_SemacquireMutex = function(s, lifo) {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _key$1, _key$2, _r, ch, lifo, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _r = $f._r; ch = $f.ch; lifo = $f.lifo; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (((s.$get() - (_entry = semAwoken[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((s.$get() - (_entry = semAwoken[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			if (lifo) {
				_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $appendSlice(new sliceType$1([ch]), (_entry$1 = semWaiters[ptrType$1.keyFor(s)], _entry$1 !== undefined ? _entry$1.v : sliceType$1.nil)) };
			} else {
				_key$1 = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$1)] = { k: _key$1, v: $append((_entry$2 = semWaiters[ptrType$1.keyFor(s)], _entry$2 !== undefined ? _entry$2.v : sliceType$1.nil), ch) };
			}
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
			_key$2 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$2)] = { k: _key$2, v: (_entry$3 = semAwoken[ptrType$1.keyFor(s)], _entry$3 !== undefined ? _entry$3.v : 0) - (1) >>> 0 };
			if ((_entry$4 = semAwoken[ptrType$1.keyFor(s)], _entry$4 !== undefined ? _entry$4.v : 0) === 0) {
				delete semAwoken[ptrType$1.keyFor(s)];
			}
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_SemacquireMutex }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._r = _r; $f.ch = ch; $f.lifo = lifo; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s, handoff) {
		var _entry, _entry$1, _key, _key$1, ch, handoff, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; ch = $f.ch; handoff = $f.handoff; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		_key$1 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$1)] = { k: _key$1, v: (_entry$1 = semAwoken[ptrType$1.keyFor(s)], _entry$1 !== undefined ? _entry$1.v : 0) + (1) >>> 0 };
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f.ch = ch; $f.handoff = handoff; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_notifyListCheck = function(size) {
		var size;
	};
	runtime_canSpin = function(i) {
		var i;
		return false;
	};
	runtime_nanotime = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	throw$1 = function(s) {
		var s;
		$throwRuntimeError($externalize(s, $String));
	};
	newEntry = function(i) {
		var i, i$24ptr;
		return new entry.ptr(((i$24ptr || (i$24ptr = new ptrType$3(function() { return i; }, function($v) { i = $v; })))));
	};
	Map.ptr.prototype.Load = function(key) {
		var _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, e, key, m, ok, read, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; e = $f.e; key = $f.key; m = $f.m; ok = $f.ok; read = $f.read; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $ifaceNil;
		ok = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				_tuple$4 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
				e = _tuple$4[0];
				ok = _tuple$4[1];
				m.missLocked();
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!ok) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			$s = -1; return [value, ok];
		}
		_tuple$5 = e.load();
		value = _tuple$5[0];
		ok = _tuple$5[1];
		$s = -1; return [value, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Load }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.e = e; $f.key = key; $f.m = m; $f.ok = ok; $f.read = read; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Load = function(key) { return this.$val.Load(key); };
	entry.ptr.prototype.load = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, ok, p, value;
		value = $ifaceNil;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === 0 || p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			return [value, ok];
		}
		_tmp$2 = (p).$get();
		_tmp$3 = true;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	entry.prototype.load = function() { return this.$val.load(); };
	Map.ptr.prototype.Store = function(key, value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, e, e$1, e$2, key, m, ok, ok$1, ok$2, read, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; key = $f.key; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; read = $f.read; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = [value];
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok && e.tryStore((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))))) {
			$s = -1; return;
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$2 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$2[0]);
		_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
		e$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		if (ok$1) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e$1 };
			}
			e$1.storeLocked((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
		} else {
			_tuple$4 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
			e$2 = _tuple$4[0];
			ok$2 = _tuple$4[1];
			if (ok$2) {
				e$2.storeLocked((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: newEntry(value[0]) };
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Store }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.key = key; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.read = read; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Store = function(key, value) { return this.$val.Store(key, value); };
	entry.ptr.prototype.tryStore = function(i) {
		var e, i, p;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			return false;
		}
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, (i))) {
				return true;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				return false;
			}
		}
	};
	entry.prototype.tryStore = function(i) { return this.$val.tryStore(i); };
	entry.ptr.prototype.unexpungeLocked = function() {
		var e, wasExpunged;
		wasExpunged = false;
		e = this;
		wasExpunged = atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), expunged, 0);
		return wasExpunged;
	};
	entry.prototype.unexpungeLocked = function() { return this.$val.unexpungeLocked(); };
	entry.ptr.prototype.storeLocked = function(i) {
		var e, i;
		e = this;
		atomic.StorePointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), (i));
	};
	entry.prototype.storeLocked = function(i) { return this.$val.storeLocked(i); };
	Map.ptr.prototype.LoadOrStore = function(key, value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, actual, actual$1, e, e$1, e$2, key, loaded, loaded$1, m, ok, ok$1, ok$2, ok$3, read, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; actual = $f.actual; actual$1 = $f.actual$1; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; key = $f.key; loaded = $f.loaded; loaded$1 = $f.loaded$1; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; read = $f.read; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		actual = $ifaceNil;
		loaded = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			_tuple$2 = e.tryLoadOrStore(value);
			actual$1 = _tuple$2[0];
			loaded$1 = _tuple$2[1];
			ok$1 = _tuple$2[2];
			if (ok$1) {
				_tmp = actual$1;
				_tmp$1 = loaded$1;
				actual = _tmp;
				loaded = _tmp$1;
				$s = -1; return [actual, loaded];
			}
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$3 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$3[0]);
		_tuple$4 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
		e$1 = _tuple$4[0];
		ok$2 = _tuple$4[1];
		if (ok$2) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e$1 };
			}
			_tuple$5 = e$1.tryLoadOrStore(value);
			actual = _tuple$5[0];
			loaded = _tuple$5[1];
		} else {
			_tuple$6 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
			e$2 = _tuple$6[0];
			ok$3 = _tuple$6[1];
			if (ok$3) {
				_tuple$7 = e$2.tryLoadOrStore(value);
				actual = _tuple$7[0];
				loaded = _tuple$7[1];
				m.missLocked();
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: newEntry(value) };
				_tmp$2 = value;
				_tmp$3 = false;
				actual = _tmp$2;
				loaded = _tmp$3;
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = actual;
		_tmp$5 = loaded;
		actual = _tmp$4;
		loaded = _tmp$5;
		$s = -1; return [actual, loaded];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.LoadOrStore }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.actual = actual; $f.actual$1 = actual$1; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.key = key; $f.loaded = loaded; $f.loaded$1 = loaded$1; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.read = read; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.LoadOrStore = function(key, value) { return this.$val.LoadOrStore(key, value); };
	entry.ptr.prototype.tryLoadOrStore = function(i) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, actual, e, i, ic, ic$24ptr, loaded, ok, p;
		actual = $ifaceNil;
		loaded = false;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			_tmp$2 = false;
			actual = _tmp;
			loaded = _tmp$1;
			ok = _tmp$2;
			return [actual, loaded, ok];
		}
		if (!(p === 0)) {
			_tmp$3 = (p).$get();
			_tmp$4 = true;
			_tmp$5 = true;
			actual = _tmp$3;
			loaded = _tmp$4;
			ok = _tmp$5;
			return [actual, loaded, ok];
		}
		ic = i;
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, ((ic$24ptr || (ic$24ptr = new ptrType$3(function() { return ic; }, function($v) { ic = $v; })))))) {
				_tmp$6 = i;
				_tmp$7 = false;
				_tmp$8 = true;
				actual = _tmp$6;
				loaded = _tmp$7;
				ok = _tmp$8;
				return [actual, loaded, ok];
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				_tmp$9 = $ifaceNil;
				_tmp$10 = false;
				_tmp$11 = false;
				actual = _tmp$9;
				loaded = _tmp$10;
				ok = _tmp$11;
				return [actual, loaded, ok];
			}
			if (!(p === 0)) {
				_tmp$12 = (p).$get();
				_tmp$13 = true;
				_tmp$14 = true;
				actual = _tmp$12;
				loaded = _tmp$13;
				ok = _tmp$14;
				return [actual, loaded, ok];
			}
		}
	};
	entry.prototype.tryLoadOrStore = function(i) { return this.$val.tryLoadOrStore(i); };
	Map.ptr.prototype.Delete = function(key) {
		var _entry, _entry$1, _tuple, _tuple$1, _tuple$2, _tuple$3, e, key, m, ok, read, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; e = $f.e; key = $f.key; m = $f.m; ok = $f.ok; read = $f.read; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				delete m.dirty[$emptyInterface.keyFor(key)];
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (ok) {
			e.delete$();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Delete }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.e = e; $f.key = key; $f.m = m; $f.ok = ok; $f.read = read; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Delete = function(key) { return this.$val.Delete(key); };
	entry.ptr.prototype.delete$ = function() {
		var e, hadValue, p;
		hadValue = false;
		e = this;
		while (true) {
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === 0 || p === expunged) {
				hadValue = false;
				return hadValue;
			}
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, 0)) {
				hadValue = true;
				return hadValue;
			}
		}
	};
	entry.prototype.delete$ = function() { return this.$val.delete$(); };
	Map.ptr.prototype.Range = function(f) {
		var _entry, _i, _keys, _r, _ref, _tuple, _tuple$1, _tuple$2, e, f, k, m, ok, read, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; e = $f.e; f = $f.f; k = $f.k; m = $f.m; ok = $f.ok; read = $f.read; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		/* */ if (read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$1[0]);
			if (read.amended) {
				readOnly.copy(read, new readOnly.ptr(m.dirty, false));
				m.read.Store(new read.constructor.elem(read));
				m.dirty = false;
				m.misses = 0;
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_ref = read.m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 5:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 6; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 5; continue;
			}
			k = _entry.k;
			e = _entry.v;
			_tuple$2 = e.load();
			v = _tuple$2[0];
			ok = _tuple$2[1];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				_i++;
				/* continue; */ $s = 5; continue;
			/* } */ case 8:
			_r = f(k, v); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!_r) { */ case 9:
				/* break; */ $s = 6; continue;
			/* } */ case 10:
			_i++;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Range }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.e = e; $f.f = f; $f.k = k; $f.m = m; $f.ok = ok; $f.read = read; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Range = function(f) { return this.$val.Range(f); };
	Map.ptr.prototype.missLocked = function() {
		var m, x;
		m = this;
		m.misses = m.misses + (1) >> 0;
		if (m.misses < $keys(m.dirty).length) {
			return;
		}
		m.read.Store((x = new readOnly.ptr(m.dirty, false), new x.constructor.elem(x)));
		m.dirty = false;
		m.misses = 0;
	};
	Map.prototype.missLocked = function() { return this.$val.missLocked(); };
	Map.ptr.prototype.dirtyLocked = function() {
		var _entry, _i, _key, _keys, _ref, _tuple, e, k, m, read, x;
		m = this;
		if (!(m.dirty === false)) {
			return;
		}
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		m.dirty = (x = $keys(read.m).length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = read.m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			e = _entry.v;
			if (!e.tryExpungeLocked()) {
				_key = k; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e };
			}
			_i++;
		}
	};
	Map.prototype.dirtyLocked = function() { return this.$val.dirtyLocked(); };
	entry.ptr.prototype.tryExpungeLocked = function() {
		var e, isExpunged, p;
		isExpunged = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		while (true) {
			if (!(p === 0)) { break; }
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, expunged)) {
				isExpunged = true;
				return isExpunged;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		}
		isExpunged = p === expunged;
		return isExpunged;
	};
	entry.prototype.tryExpungeLocked = function() { return this.$val.tryExpungeLocked(); };
	Mutex.ptr.prototype.Lock = function() {
		var awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; awoke = $f.awoke; delta = $f.delta; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; queueLifo = $f.queueLifo; starving = $f.starving; waitStartTime = $f.waitStartTime; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire((m));
			}
			$s = -1; return;
		}
		waitStartTime = new $Int64(0, 0);
		starving = false;
		awoke = false;
		iter = 0;
		old = m.state;
		/* while (true) { */ case 1:
			/* */ if (((old & 5) === 1) && runtime_canSpin(iter)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((old & 5) === 1) && runtime_canSpin(iter)) { */ case 3:
				if (!awoke && ((old & 2) === 0) && !(((old >> 3 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
					awoke = true;
				}
				runtime_doSpin();
				iter = iter + (1) >> 0;
				old = m.state;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			new$1 = old;
			if ((old & 4) === 0) {
				new$1 = new$1 | (1);
			}
			if (!(((old & 5) === 0))) {
				new$1 = new$1 + (8) >> 0;
			}
			if (starving && !(((old & 1) === 0))) {
				new$1 = new$1 | (4);
			}
			if (awoke) {
				if ((new$1 & 2) === 0) {
					throw$1("sync: inconsistent mutex state");
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 5) === 0) {
					/* break; */ $s = 2; continue;
				}
				queueLifo = !((waitStartTime.$high === 0 && waitStartTime.$low === 0));
				if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) {
					waitStartTime = runtime_nanotime();
				}
				$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), queueLifo); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				starving = starving || (x = (x$1 = runtime_nanotime(), new $Int64(x$1.$high - waitStartTime.$high, x$1.$low - waitStartTime.$low)), (x.$high > 0 || (x.$high === 0 && x.$low > 1000000)));
				old = m.state;
				if (!(((old & 4) === 0))) {
					if (!(((old & 3) === 0)) || ((old >> 3 >> 0) === 0)) {
						throw$1("sync: inconsistent mutex state");
					}
					delta = -7;
					if (!starving || ((old >> 3 >> 0) === 1)) {
						delta = delta - (4) >> 0;
					}
					atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), delta);
					/* break; */ $s = 2; continue;
				}
				awoke = true;
				iter = 0;
				$s = 7; continue;
			/* } else { */ case 6:
				old = m.state;
			/* } */ case 7:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire((m));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.awoke = awoke; $f.delta = delta; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.queueLifo = queueLifo; $f.starving = starving; $f.waitStartTime = waitStartTime; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			$unused(m.state);
			race.Release((m));
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			throw$1("sync: unlock of unlocked mutex");
		}
		/* */ if ((new$1 & 4) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((new$1 & 4) === 0) { */ case 1:
			old = new$1;
			/* while (true) { */ case 4:
				if (((old >> 3 >> 0) === 0) || !(((old & 7) === 0))) {
					$s = -1; return;
				}
				new$1 = ((old - 8 >> 0)) | 2;
				/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 6:
					$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), false); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 7:
				old = m.state;
			/* } */ $s = 4; continue; case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), true); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = this;
		if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {
			$s = -1; return;
		}
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? ($throwRuntimeError("index out of range"), undefined) : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < ((p.localSize >> 0)))) { break; }
				l = indexLocal(p.local, i$1);
				l.poolLocalInternal.private$0 = $ifaceNil;
				_ref$1 = l.poolLocalInternal.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.poolLocalInternal.shared, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.poolLocalInternal.shared = sliceType$4.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var i, l, lp;
		lp = (((l) + ($imul(((i >>> 0)), 128) >>> 0) >>> 0));
		return ($pointerOfStructConversion(lp, ptrType$7));
	};
	init$1 = function() {
		var n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.ReleaseMerge(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				race.Enable();
				throw$1("sync: RUnlock of unlocked RWMutex");
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))), false); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Acquire(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Release(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Release(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			race.Enable();
			throw$1("sync: Unlock of unlocked RWMutex");
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((r >> 0)))) { break; } */ if(!(i < ((r >> 0)))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))), false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var rw;
		rw = this;
		return ($pointerOfStructConversion(rw, ptrType$8));
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$9)).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$9)).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$7], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$7], false)}];
	ptrType$15.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [], false)}, {prop: "LoadOrStore", name: "LoadOrStore", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Range", name: "Range", pkg: "", typ: $funcType([funcType$1], [], false)}, {prop: "missLocked", name: "missLocked", pkg: "sync", typ: $funcType([], [], false)}, {prop: "dirtyLocked", name: "dirtyLocked", pkg: "sync", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "load", name: "load", pkg: "sync", typ: $funcType([], [$emptyInterface, $Bool], false)}, {prop: "tryStore", name: "tryStore", pkg: "sync", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "unexpungeLocked", name: "unexpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "storeLocked", name: "storeLocked", pkg: "sync", typ: $funcType([ptrType$3], [], false)}, {prop: "tryLoadOrStore", name: "tryLoadOrStore", pkg: "sync", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool, $Bool], false)}, {prop: "delete$", name: "delete", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "tryExpungeLocked", name: "tryExpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}];
	ptrType$16.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$17.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$2], [], false)}];
	ptrType$9.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$8.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("sync", [{prop: "local", name: "local", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "store", name: "store", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: funcType, tag: ""}]);
	Map.init("sync", [{prop: "mu", name: "mu", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "read", name: "read", anonymous: false, exported: false, typ: atomic.Value, tag: ""}, {prop: "dirty", name: "dirty", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "misses", name: "misses", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	readOnly.init("sync", [{prop: "m", name: "m", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "amended", name: "amended", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	entry.init("sync", [{prop: "p", name: "p", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init("sync", [{prop: "m", name: "m", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "done", name: "done", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	poolLocalInternal.init("sync", [{prop: "private$0", name: "private", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: Mutex, tag: ""}]);
	poolLocal.init("sync", [{prop: "poolLocalInternal", name: "poolLocalInternal", anonymous: true, exported: false, typ: poolLocalInternal, tag: ""}, {prop: "pad", name: "pad", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	RWMutex.init("sync", [{prop: "w", name: "w", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	rlocker.init("sync", [{prop: "w", name: "w", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		semAwoken = {};
		expunged = (new Uint8Array(8));
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, atomic, Reader, Writer, ReadCloser, ReaderFrom, WriterTo, RuneScanner, stringWriter, sliceType, errWhence, errOffset, WriteString, ReadAtLeast, ReadFull;
	errors = $packages["errors"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	ReadCloser = $pkg.ReadCloser = $newType(8, $kindInterface, "io.ReadCloser", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	stringWriter = $pkg.stringWriter = $newType(8, $kindInterface, "io.stringWriter", true, "io", false, null);
	sliceType = $sliceType($Uint8);
	WriteString = function(w, s) {
		var _r, _r$1, _tuple, _tuple$1, _tuple$2, err, n, ok, s, sw, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; n = $f.n; ok = $f.ok; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_tuple = $assertType(w, stringWriter, true);
		sw = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = sw.WriteString(s); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_r$1 = w.Write((new sliceType($stringToBytes(s)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: WriteString }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.n = n; $f.ok = ok; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.WriteString = WriteString;
	ReadAtLeast = function(r, buf, min) {
		var _r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buf = $f.buf; err = $f.err; min = $f.min; n = $f.n; nn = $f.nn; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		if (buf.$length < min) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrShortBuffer;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(n < min && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!(n < min && $interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			nn = 0;
			_r = r.Read($subslice(buf, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			nn = _tuple[0];
			err = _tuple[1];
			n = n + (nn) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadAtLeast }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.min = min; $f.n = n; $f.nn = nn; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadAtLeast = ReadAtLeast;
	ReadFull = function(r, buf) {
		var _r, _tuple, buf, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = ReadAtLeast(r, buf, buf.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadFull }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadFull = ReadFull;
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReadCloser.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	stringWriter.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, math, zero, posInf, negInf, nan, buf, Ceil, Copysign, Cos, Exp, Floor, Hypot, Inf, IsInf, IsNaN, Log, NaN, Pow, Sin, Sincos, Sqrt, Tan, init, Float32bits, Float32frombits, Float64bits, Float64frombits, Abs, hypot, Nextafter32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	Ceil = function(x) {
		var x;
		return $parseFloat(math.ceil(x));
	};
	$pkg.Ceil = Ceil;
	Copysign = function(x, y) {
		var x, y;
		if (!((x < 0 || (1 / x === negInf)) === (y < 0 || (1 / y === negInf)))) {
			return -x;
		}
		return x;
	};
	$pkg.Copysign = Copysign;
	Cos = function(x) {
		var x;
		return $parseFloat(math.cos(x));
	};
	$pkg.Cos = Cos;
	Exp = function(x) {
		var x;
		return $parseFloat(math.exp(x));
	};
	$pkg.Exp = Exp;
	Floor = function(x) {
		var x;
		return $parseFloat(math.floor(x));
	};
	$pkg.Floor = Floor;
	Hypot = function(p, q) {
		var p, q;
		return hypot(p, q);
	};
	$pkg.Hypot = Hypot;
	Inf = function(sign) {
		var sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	IsNaN = function(f) {
		var f, is;
		is = false;
		is = !((f === f));
		return is;
	};
	$pkg.IsNaN = IsNaN;
	Log = function(x) {
		var x;
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	$pkg.Log = Log;
	NaN = function() {
		return nan;
	};
	$pkg.NaN = NaN;
	Pow = function(x, y) {
		var x, y;
		if ((x === 1) || ((x === -1) && ((y === posInf) || (y === negInf)))) {
			return 1;
		}
		return $parseFloat(math.pow(x, y));
	};
	$pkg.Pow = Pow;
	Sin = function(x) {
		var x;
		return $parseFloat(math.sin(x));
	};
	$pkg.Sin = Sin;
	Sincos = function(x) {
		var _tmp, _tmp$1, cos$1, sin$1, x;
		sin$1 = 0;
		cos$1 = 0;
		_tmp = Sin(x);
		_tmp$1 = Cos(x);
		sin$1 = _tmp;
		cos$1 = _tmp$1;
		return [sin$1, cos$1];
	};
	$pkg.Sincos = Sincos;
	Sqrt = function(x) {
		var x;
		return $parseFloat(math.sqrt(x));
	};
	$pkg.Sqrt = Sqrt;
	Tan = function(x) {
		var x;
		return $parseFloat(math.tan(x));
	};
	$pkg.Tan = Tan;
	init = function() {
		var ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64((new $Uint64(0, buf.uint32array[1])), 32), x$1 = (new $Uint64(0, buf.uint32array[0])), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var b;
		buf.uint32array[0] = ((b.$low >>> 0));
		buf.uint32array[1] = (($shiftRightUint64(b, 32).$low >>> 0));
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	Abs = function(x) {
		var x, x$1;
		return Float64frombits((x$1 = Float64bits(x), new $Uint64(x$1.$high & ~2147483648, (x$1.$low & ~0) >>> 0)));
	};
	$pkg.Abs = Abs;
	hypot = function(p, q) {
		var _tmp, _tmp$1, p, q;
		if (IsInf(p, 0) || IsInf(q, 0)) {
			return Inf(1);
		} else if (IsNaN(p) || IsNaN(q)) {
			return NaN();
		}
		if (p < 0) {
			p = -p;
		}
		if (q < 0) {
			q = -q;
		}
		if (p < q) {
			_tmp = q;
			_tmp$1 = p;
			p = _tmp;
			q = _tmp$1;
		}
		if (p === 0) {
			return 0;
		}
		q = q / p;
		return p * Sqrt(1 + q * q);
	};
	Nextafter32 = function(x, y) {
		var r, x, y;
		r = 0;
		if (IsNaN((x)) || IsNaN((y))) {
			r = ($fround(NaN()));
		} else if ((x === y)) {
			r = x;
		} else if ((x === 0)) {
			r = ($fround(Copysign((Float32frombits(1)), (y))));
		} else if ((y > x) === (x > 0)) {
			r = Float32frombits(Float32bits(x) + 1 >>> 0);
		} else {
			r = Float32frombits(Float32bits(x) - 1 >>> 0);
		}
		return r;
	};
	$pkg.Nextafter32 = Nextafter32;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, errors, js, race, runtime, sync, SockaddrDatalink, mmapper, Errno, Sockaddr, SockaddrInet4, SockaddrInet6, SockaddrUnix, Timespec, Stat_t, RawSockaddrInet4, RawSockaddrInet6, RawSockaddrUnix, RawSockaddrDatalink, RawSockaddr, RawSockaddrAny, _Socklen, Linger, Iovec, IPMreq, IPv6Mreq, Msghdr, sliceType, sliceType$1, ptrType$2, arrayType, arrayType$1, ptrType$11, arrayType$3, arrayType$4, arrayType$5, arrayType$6, arrayType$10, ptrType$16, arrayType$11, ptrType$17, ptrType$18, structType, ptrType$20, ptrType$21, ptrType$27, mapType, funcType$2, funcType$3, ptrType$28, ptrType$29, ptrType$30, ptrType$31, arrayType$15, ptrType$32, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, freebsdConfArch, minRoutingSockaddrLen, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors$1, init, printWarning, printToConsole, Exit, indexByte, runtime_envs, syscall, Syscall, Syscall6, RawSyscall, BytePtrFromString, readInt, readIntBE, readIntLE, ParseDirent, copyenv, Getenv, CloseOnExec, SetNonblock, msanRead, msanWrite, rsaAlignOf, itoa, uitoa, ReadDirent, anyToSockaddr, Accept, Recvmsg, SendmsgN, direntIno, direntReclen, direntNamlen, errnoErr, Read, Write, Recvfrom, Sendto, SetsockoptByte, SetsockoptInt, SetsockoptInet4Addr, SetsockoptIPMreq, SetsockoptIPv6Mreq, SetsockoptLinger, accept, setsockopt, Shutdown, recvfrom, sendto, recvmsg, sendmsg, fcntl, Chmod, Close, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Getpid, Lstat, Mkdir, Open, Pread, Pwrite, read, Rename, Seek, Stat, write, mmap, munmap;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	SockaddrDatalink = $pkg.SockaddrDatalink = $newType(0, $kindStruct, "syscall.SockaddrDatalink", true, "syscall", true, function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Index = 0;
			this.Type = 0;
			this.Nlen = 0;
			this.Alen = 0;
			this.Slen = 0;
			this.Data = arrayType$3.zero();
			this.raw = new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero());
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Index = Index_;
		this.Type = Type_;
		this.Nlen = Nlen_;
		this.Alen = Alen_;
		this.Slen = Slen_;
		this.Data = Data_;
		this.raw = raw_;
	});
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Sockaddr = $pkg.Sockaddr = $newType(8, $kindInterface, "syscall.Sockaddr", true, "syscall", true, null);
	SockaddrInet4 = $pkg.SockaddrInet4 = $newType(0, $kindStruct, "syscall.SockaddrInet4", true, "syscall", true, function(Port_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.Addr = arrayType$1.zero();
			this.raw = new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero());
			return;
		}
		this.Port = Port_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrInet6 = $pkg.SockaddrInet6 = $newType(0, $kindStruct, "syscall.SockaddrInet6", true, "syscall", true, function(Port_, ZoneId_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.ZoneId = 0;
			this.Addr = arrayType.zero();
			this.raw = new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0);
			return;
		}
		this.Port = Port_;
		this.ZoneId = ZoneId_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrUnix = $pkg.SockaddrUnix = $newType(0, $kindStruct, "syscall.SockaddrUnix", true, "syscall", true, function(Name_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.raw = new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero());
			return;
		}
		this.Name = Name_;
		this.raw = raw_;
	});
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", true, "syscall", true, function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = 0;
			this.Mode = 0;
			this.Nlink = 0;
			this.Ino = new $Uint64(0, 0);
			this.Uid = 0;
			this.Gid = 0;
			this.Rdev = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.Atimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Birthtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Size = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Blksize = 0;
			this.Flags = 0;
			this.Gen = 0;
			this.Lspare = 0;
			this.Qspare = arrayType$15.zero();
			return;
		}
		this.Dev = Dev_;
		this.Mode = Mode_;
		this.Nlink = Nlink_;
		this.Ino = Ino_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.Rdev = Rdev_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Atimespec = Atimespec_;
		this.Mtimespec = Mtimespec_;
		this.Ctimespec = Ctimespec_;
		this.Birthtimespec = Birthtimespec_;
		this.Size = Size_;
		this.Blocks = Blocks_;
		this.Blksize = Blksize_;
		this.Flags = Flags_;
		this.Gen = Gen_;
		this.Lspare = Lspare_;
		this.Qspare = Qspare_;
	});
	RawSockaddrInet4 = $pkg.RawSockaddrInet4 = $newType(0, $kindStruct, "syscall.RawSockaddrInet4", true, "syscall", true, function(Len_, Family_, Port_, Addr_, Zero_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Port = 0;
			this.Addr = arrayType$1.zero();
			this.Zero = arrayType$6.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Port = Port_;
		this.Addr = Addr_;
		this.Zero = Zero_;
	});
	RawSockaddrInet6 = $pkg.RawSockaddrInet6 = $newType(0, $kindStruct, "syscall.RawSockaddrInet6", true, "syscall", true, function(Len_, Family_, Port_, Flowinfo_, Addr_, Scope_id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Port = 0;
			this.Flowinfo = 0;
			this.Addr = arrayType.zero();
			this.Scope_id = 0;
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Port = Port_;
		this.Flowinfo = Flowinfo_;
		this.Addr = Addr_;
		this.Scope_id = Scope_id_;
	});
	RawSockaddrUnix = $pkg.RawSockaddrUnix = $newType(0, $kindStruct, "syscall.RawSockaddrUnix", true, "syscall", true, function(Len_, Family_, Path_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Path = arrayType$11.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Path = Path_;
	});
	RawSockaddrDatalink = $pkg.RawSockaddrDatalink = $newType(0, $kindStruct, "syscall.RawSockaddrDatalink", true, "syscall", true, function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Index = 0;
			this.Type = 0;
			this.Nlen = 0;
			this.Alen = 0;
			this.Slen = 0;
			this.Data = arrayType$3.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Index = Index_;
		this.Type = Type_;
		this.Nlen = Nlen_;
		this.Alen = Alen_;
		this.Slen = Slen_;
		this.Data = Data_;
	});
	RawSockaddr = $pkg.RawSockaddr = $newType(0, $kindStruct, "syscall.RawSockaddr", true, "syscall", true, function(Len_, Family_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Data = arrayType$4.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Data = Data_;
	});
	RawSockaddrAny = $pkg.RawSockaddrAny = $newType(0, $kindStruct, "syscall.RawSockaddrAny", true, "syscall", true, function(Addr_, Pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Addr = new RawSockaddr.ptr(0, 0, arrayType$4.zero());
			this.Pad = arrayType$5.zero();
			return;
		}
		this.Addr = Addr_;
		this.Pad = Pad_;
	});
	_Socklen = $pkg._Socklen = $newType(4, $kindUint32, "syscall._Socklen", true, "syscall", false, null);
	Linger = $pkg.Linger = $newType(0, $kindStruct, "syscall.Linger", true, "syscall", true, function(Onoff_, Linger_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Onoff = 0;
			this.Linger = 0;
			return;
		}
		this.Onoff = Onoff_;
		this.Linger = Linger_;
	});
	Iovec = $pkg.Iovec = $newType(0, $kindStruct, "syscall.Iovec", true, "syscall", true, function(Base_, Len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Base = ptrType$2.nil;
			this.Len = new $Uint64(0, 0);
			return;
		}
		this.Base = Base_;
		this.Len = Len_;
	});
	IPMreq = $pkg.IPMreq = $newType(0, $kindStruct, "syscall.IPMreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType$1.zero();
			this.Interface = arrayType$1.zero();
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	IPv6Mreq = $pkg.IPv6Mreq = $newType(0, $kindStruct, "syscall.IPv6Mreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType.zero();
			this.Interface = 0;
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	Msghdr = $pkg.Msghdr = $newType(0, $kindStruct, "syscall.Msghdr", true, "syscall", true, function(Name_, Namelen_, Pad_cgo_0_, Iov_, Iovlen_, Pad_cgo_1_, Control_, Controllen_, Flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = ptrType$2.nil;
			this.Namelen = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.Iov = ptrType$18.nil;
			this.Iovlen = 0;
			this.Pad_cgo_1 = arrayType$1.zero();
			this.Control = ptrType$2.nil;
			this.Controllen = 0;
			this.Flags = 0;
			return;
		}
		this.Name = Name_;
		this.Namelen = Namelen_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Iov = Iov_;
		this.Iovlen = Iovlen_;
		this.Pad_cgo_1 = Pad_cgo_1_;
		this.Control = Control_;
		this.Controllen = Controllen_;
		this.Flags = Flags_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	arrayType = $arrayType($Uint8, 16);
	arrayType$1 = $arrayType($Uint8, 4);
	ptrType$11 = $ptrType(SockaddrDatalink);
	arrayType$3 = $arrayType($Int8, 12);
	arrayType$4 = $arrayType($Int8, 14);
	arrayType$5 = $arrayType($Int8, 92);
	arrayType$6 = $arrayType($Int8, 8);
	arrayType$10 = $arrayType($Uint8, 32);
	ptrType$16 = $ptrType($Uint16);
	arrayType$11 = $arrayType($Int8, 104);
	ptrType$17 = $ptrType(_Socklen);
	ptrType$18 = $ptrType(Iovec);
	structType = $structType("syscall", [{prop: "addr", name: "addr", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$20 = $ptrType($Int64);
	ptrType$21 = $ptrType($Int32);
	ptrType$27 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType$2 = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$3 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$28 = $ptrType(SockaddrInet4);
	ptrType$29 = $ptrType(SockaddrInet6);
	ptrType$30 = $ptrType(SockaddrUnix);
	ptrType$31 = $ptrType(Timespec);
	arrayType$15 = $arrayType($Int64, 2);
	ptrType$32 = $ptrType(Msghdr);
	init = function() {
		$flushConsole = (function() {
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize(($bytesToString(lineBuffer)), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = indexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize(($bytesToString($subslice(lineBuffer, 0, i))), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	Exit = function(code) {
		var code;
		Syscall(1, ((code >>> 0)), 0, 0);
	};
	$pkg.Exit = Exit;
	indexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	runtime_envs = function() {
		var envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = (($parseInt(array.length) >>> 0));
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 1) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = ((minusOne >>> 0));
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = ((minusOne >>> 0));
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	RawSyscall = function(trap, a1, a2, a3) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		printWarning();
		_tmp$3 = ((minusOne >>> 0));
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.RawSyscall = RawSyscall;
	BytePtrFromString = function(s) {
		var _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = (new sliceType($stringToBytes(s)));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [((array)), $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	readInt = function(b, off, size) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, off, ok, size, u;
		u = new $Uint64(0, 0);
		ok = false;
		if (b.$length < (((off + size >>> 0) >> 0))) {
			_tmp = new $Uint64(0, 0);
			_tmp$1 = false;
			u = _tmp;
			ok = _tmp$1;
			return [u, ok];
		}
		if (false) {
			_tmp$2 = readIntBE($subslice(b, off), size);
			_tmp$3 = true;
			u = _tmp$2;
			ok = _tmp$3;
			return [u, ok];
		}
		_tmp$4 = readIntLE($subslice(b, off), size);
		_tmp$5 = true;
		u = _tmp$4;
		ok = _tmp$5;
		return [u, ok];
	};
	readIntBE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), x$1 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), x$5 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$15 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	readIntLE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$1 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$5 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$15 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	ParseDirent = function(buf, max, names) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, buf, c, consumed, count, i, ino, max, name, names, namlen, newnames, ok, origlen, rec, reclen, x, x$1, x$2;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		count = 0;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			_tuple = direntReclen(buf);
			reclen = _tuple[0];
			ok = _tuple[1];
			if (!ok || (x = (new $Uint64(0, buf.$length)), (reclen.$high > x.$high || (reclen.$high === x.$high && reclen.$low > x.$low)))) {
				_tmp = origlen;
				_tmp$1 = count;
				_tmp$2 = names;
				consumed = _tmp;
				count = _tmp$1;
				newnames = _tmp$2;
				return [consumed, count, newnames];
			}
			rec = $subslice(buf, 0, $flatten64(reclen));
			buf = $subslice(buf, $flatten64(reclen));
			_tuple$1 = direntIno(rec);
			ino = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				break;
			}
			if ((ino.$high === 0 && ino.$low === 0)) {
				continue;
			}
			_tuple$2 = direntNamlen(rec);
			namlen = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok || (x$1 = new $Uint64(0 + namlen.$high, 21 + namlen.$low), x$2 = (new $Uint64(0, rec.$length)), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				break;
			}
			name = $subslice(rec, 21, $flatten64(new $Uint64(0 + namlen.$high, 21 + namlen.$low)));
			_ref = name;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (c === 0) {
					name = $subslice(name, 0, i);
					break;
				}
				_i++;
			}
			if (($bytesToString(name)) === "." || ($bytesToString(name)) === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, ($bytesToString(name)));
		}
		_tmp$3 = origlen - buf.$length >> 0;
		_tmp$4 = count;
		_tmp$5 = names;
		consumed = _tmp$3;
		count = _tmp$4;
		newnames = _tmp$5;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	copyenv = function() {
		var _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;
		env = {};
		_ref = envs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < s.length)) { break; }
				if (s.charCodeAt(j) === 61) {
					key = $substring(s, 0, j);
					_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
					ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: i };
					} else {
						((i < 0 || i >= envs.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs.$array[envs.$offset + i] = "");
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = function(key) {
		var _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; found = $f.found; i = $f.i; i$1 = $f.i$1; key = $f.key; ok = $f.ok; s = $f.s; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		value = "";
		found = false;
		$r = envOnce.Do(copyenv); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (key.length === 0) {
			_tmp = "";
			_tmp$1 = false;
			value = _tmp;
			found = _tmp$1;
			$s = -1; return [value, found];
		}
		$r = envLock.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			_tmp$2 = "";
			_tmp$3 = false;
			value = _tmp$2;
			found = _tmp$3;
			$s = -1; return [value, found];
		}
		s = ((i < 0 || i >= envs.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs.$array[envs.$offset + i]);
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			if (s.charCodeAt(i$1) === 61) {
				_tmp$4 = $substring(s, (i$1 + 1 >> 0));
				_tmp$5 = true;
				value = _tmp$4;
				found = _tmp$5;
				$s = -1; return [value, found];
			}
			i$1 = i$1 + (1) >> 0;
		}
		_tmp$6 = "";
		_tmp$7 = false;
		value = _tmp$6;
		found = _tmp$7;
		$s = -1; return [value, found];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [value, found]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Getenv }; } $f._entry = _entry; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.found = found; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.ok = ok; $f.s = s; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Getenv = Getenv;
	CloseOnExec = function(fd) {
		var fd;
		fcntl(fd, 2, 1);
	};
	$pkg.CloseOnExec = CloseOnExec;
	SetNonblock = function(fd, nonblocking) {
		var _tuple, _tuple$1, err, fd, flag, nonblocking;
		err = $ifaceNil;
		_tuple = fcntl(fd, 3, 0);
		flag = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		if (nonblocking) {
			flag = flag | (4);
		} else {
			flag = (flag & ~(4)) >> 0;
		}
		_tuple$1 = fcntl(fd, 4, flag);
		err = _tuple$1[1];
		err = err;
		return err;
	};
	$pkg.SetNonblock = SetNonblock;
	msanRead = function(addr, len) {
		var addr, len;
	};
	msanWrite = function(addr, len) {
		var addr, len;
	};
	rsaAlignOf = function(salen) {
		var salen, salign;
		salign = 8;
		if (true) {
			salign = 4;
		} else if (false) {
			salign = 8;
		} else if (false) {
			if (freebsdConfArch === "amd64") {
				salign = 8;
			}
		}
		if (salen === 0) {
			return salign;
		}
		return (((salen + salign >> 0) - 1 >> 0)) & (~((salign - 1 >> 0)) >> 0);
	};
	itoa = function(val) {
		var val;
		if (val < 0) {
			return "-" + uitoa(((-val >>> 0)));
		}
		return uitoa(((val >>> 0)));
	};
	uitoa = function(val) {
		var _q, _r, buf, i, val;
		buf = arrayType$10.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((val + 48 >>> 0) << 24 >>> 24)));
		return ($bytesToString($subslice(new sliceType(buf), i)));
	};
	Timespec.ptr.prototype.Unix = function() {
		var _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = (ts.Sec);
		_tmp$1 = (ts.Nsec);
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = $mul64((ts.Sec), new $Int64(0, 1000000000)), x$1 = (ts.Nsec), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = function(fd, buf) {
		var _tuple, base, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		base = ((new Uint8Array(8)));
		_tuple = Getdirentries(fd, buf, base);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	SockaddrInet4.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 16;
		sa.raw.Family = 2;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(16);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrInet4.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrInet6.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 28;
		sa.raw.Family = 30;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		sa.raw.Scope_id = sa.ZoneId;
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(28);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrInet6.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrUnix.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, n, name, sa, x;
		sa = this;
		name = sa.Name;
		n = name.length;
		if (n >= 104 || (n === 0)) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = (((3 + n >> 0) << 24 >>> 24));
		sa.raw.Family = 1;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			(x = sa.raw.Path, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = ((name.charCodeAt(i) << 24 >> 24))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(106);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrUnix.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrDatalink.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, sa, x, x$1;
		sa = this;
		if (sa.Index === 0) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = sa.Len;
		sa.raw.Family = 18;
		sa.raw.Index = sa.Index;
		sa.raw.Type = sa.Type;
		sa.raw.Nlen = sa.Nlen;
		sa.raw.Alen = sa.Alen;
		sa.raw.Slen = sa.Slen;
		i = 0;
		while (true) {
			if (!(i < 12)) { break; }
			(x$1 = sa.raw.Data, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = sa.Data, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(20);
		return [(_array), 20, $ifaceNil];
	};
	SockaddrDatalink.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	anyToSockaddr = function(rsa) {
		var _1, _array, _array$1, _array$2, _array$3, _array$4, _array$5, _array$6, _array$7, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7, _view, _view$1, _view$2, _view$3, _view$4, _view$5, _view$6, _view$7, bytes, i, i$1, i$2, i$3, n, p, p$1, pp, pp$1, pp$2, pp$3, rsa, sa, sa$1, sa$2, sa$3, x, x$1, x$2, x$3, x$4, x$5, x$6;
		_1 = rsa.Addr.Family;
		if (_1 === (18)) {
			_array$1 = new Uint8Array(108);
			pp = ((_array = (_array$1), _struct = new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero()), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Index = _view.getUint16(2, true), _struct.Type = _view.getUint8(4, true), _struct.Nlen = _view.getUint8(5, true), _struct.Alen = _view.getUint8(6, true), _struct.Slen = _view.getUint8(7, true), _struct.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct));
			_struct$1 = rsa, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$1.getUint8(0, true), _struct$1.Addr.Family = _view$1.getUint8(1, true), _struct$1.Addr.Data = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 16, _array$1.buffer.byteLength));
			sa = new SockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero(), new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero()));
			sa.Len = pp.Len;
			sa.Family = pp.Family;
			sa.Index = pp.Index;
			sa.Type = pp.Type;
			sa.Nlen = pp.Nlen;
			sa.Alen = pp.Alen;
			sa.Slen = pp.Slen;
			i = 0;
			while (true) {
				if (!(i < 12)) { break; }
				(x$1 = sa.Data, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = pp.Data, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
				i = i + (1) >> 0;
			}
			return [sa, $ifaceNil];
		} else if (_1 === (1)) {
			_array$3 = new Uint8Array(108);
			pp$1 = ((_array$2 = (_array$3), _struct$2 = new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero()), _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$2.getUint8(0, true), _struct$2.Family = _view$2.getUint8(1, true), _struct$2.Path = new ($nativeArray($kindInt8))(_array$2.buffer, $min(_array$2.byteOffset + 2, _array$2.buffer.byteLength)), _struct$2));
			_struct$3 = rsa, _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Addr.Len = _view$3.getUint8(0, true), _struct$3.Addr.Family = _view$3.getUint8(1, true), _struct$3.Addr.Data = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 2, _array$3.buffer.byteLength)), _struct$3.Pad = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 16, _array$3.buffer.byteLength));
			if (pp$1.Len < 2 || pp$1.Len > 106) {
				return [$ifaceNil, new Errno(22)];
			}
			sa$1 = new SockaddrUnix.ptr("", new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero()));
			n = ((pp$1.Len >> 0)) - 2 >> 0;
			i$1 = 0;
			while (true) {
				if (!(i$1 < n)) { break; }
				if ((x$2 = pp$1.Path, ((i$1 < 0 || i$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i$1])) === 0) {
					n = i$1;
					break;
				}
				i$1 = i$1 + (1) >> 0;
			}
			bytes = $subslice(new sliceType((($sliceToArray(new sliceType(pp$1.Path))))), 0, n);
			sa$1.Name = ($bytesToString(bytes));
			return [sa$1, $ifaceNil];
		} else if (_1 === (2)) {
			_array$5 = new Uint8Array(108);
			pp$2 = ((_array$4 = (_array$5), _struct$4 = new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero()), _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Len = _view$4.getUint8(0, true), _struct$4.Family = _view$4.getUint8(1, true), _struct$4.Port = _view$4.getUint16(2, true), _struct$4.Addr = new ($nativeArray($kindUint8))(_array$4.buffer, $min(_array$4.byteOffset + 4, _array$4.buffer.byteLength)), _struct$4.Zero = new ($nativeArray($kindInt8))(_array$4.buffer, $min(_array$4.byteOffset + 8, _array$4.buffer.byteLength)), _struct$4));
			_struct$5 = rsa, _view$5 = new DataView(_array$5.buffer, _array$5.byteOffset), _struct$5.Addr.Len = _view$5.getUint8(0, true), _struct$5.Addr.Family = _view$5.getUint8(1, true), _struct$5.Addr.Data = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 2, _array$5.buffer.byteLength)), _struct$5.Pad = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 16, _array$5.buffer.byteLength));
			sa$2 = new SockaddrInet4.ptr(0, arrayType$1.zero(), new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero()));
			p = (((pp$2.$ptr_Port || (pp$2.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$2)))));
			sa$2.Port = ((((p.nilCheck, p[0]) >> 0)) << 8 >> 0) + (((p.nilCheck, p[1]) >> 0)) >> 0;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 4)) { break; }
				(x$4 = sa$2.Addr, ((i$2 < 0 || i$2 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[i$2] = (x$3 = pp$2.Addr, ((i$2 < 0 || i$2 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i$2]))));
				i$2 = i$2 + (1) >> 0;
			}
			return [sa$2, $ifaceNil];
		} else if (_1 === (30)) {
			_array$7 = new Uint8Array(108);
			pp$3 = ((_array$6 = (_array$7), _struct$6 = new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0), _view$6 = new DataView(_array$6.buffer, _array$6.byteOffset), _struct$6.Len = _view$6.getUint8(0, true), _struct$6.Family = _view$6.getUint8(1, true), _struct$6.Port = _view$6.getUint16(2, true), _struct$6.Flowinfo = _view$6.getUint32(4, true), _struct$6.Addr = new ($nativeArray($kindUint8))(_array$6.buffer, $min(_array$6.byteOffset + 8, _array$6.buffer.byteLength)), _struct$6.Scope_id = _view$6.getUint32(24, true), _struct$6));
			_struct$7 = rsa, _view$7 = new DataView(_array$7.buffer, _array$7.byteOffset), _struct$7.Addr.Len = _view$7.getUint8(0, true), _struct$7.Addr.Family = _view$7.getUint8(1, true), _struct$7.Addr.Data = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 2, _array$7.buffer.byteLength)), _struct$7.Pad = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 16, _array$7.buffer.byteLength));
			sa$3 = new SockaddrInet6.ptr(0, 0, arrayType.zero(), new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0));
			p$1 = (((pp$3.$ptr_Port || (pp$3.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$3)))));
			sa$3.Port = ((((p$1.nilCheck, p$1[0]) >> 0)) << 8 >> 0) + (((p$1.nilCheck, p$1[1]) >> 0)) >> 0;
			sa$3.ZoneId = pp$3.Scope_id;
			i$3 = 0;
			while (true) {
				if (!(i$3 < 16)) { break; }
				(x$6 = sa$3.Addr, ((i$3 < 0 || i$3 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i$3] = (x$5 = pp$3.Addr, ((i$3 < 0 || i$3 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i$3]))));
				i$3 = i$3 + (1) >> 0;
			}
			return [sa$3, $ifaceNil];
		}
		return [$ifaceNil, new Errno(47)];
	};
	Accept = function(fd) {
		var _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, err, fd, len, len$24ptr, nfd, rsa, sa;
		nfd = 0;
		sa = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		len = 108;
		_tuple = accept(fd, rsa, (len$24ptr || (len$24ptr = new ptrType$17(function() { return len; }, function($v) { len = $v; }))));
		nfd = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [nfd, sa, err];
		}
		if (true && (len === 0)) {
			Close(nfd);
			_tmp = 0;
			_tmp$1 = $ifaceNil;
			_tmp$2 = new Errno(53);
			nfd = _tmp;
			sa = _tmp$1;
			err = _tmp$2;
			return [nfd, sa, err];
		}
		_tuple$1 = anyToSockaddr(rsa);
		sa = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			Close(nfd);
			nfd = 0;
		}
		return [nfd, sa, err];
	};
	$pkg.Accept = Accept;
	Recvmsg = function(fd, p, oob, flags) {
		var _array, _struct, _tuple, _tuple$1, _view, dummy, dummy$24ptr, err, fd, flags, from, iov, msg, n, oob, oobn, p, recvflags, rsa;
		n = 0;
		oobn = 0;
		recvflags = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		msg = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$1.zero(), ptrType$18.nil, 0, arrayType$1.zero(), ptrType$2.nil, 0, 0);
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		_array = new Uint8Array(108);
		msg.Name = ((_array));
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		msg.Namelen = 108;
		iov = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov.Base = (($sliceToArray(p)));
			iov.SetLen(p.$length);
		}
		dummy = 0;
		if (oob.$length > 0) {
			if (p.$length === 0) {
				iov.Base = (dummy$24ptr || (dummy$24ptr = new ptrType$2(function() { return dummy; }, function($v) { dummy = $v; })));
				iov.SetLen(1);
			}
			msg.Control = (($sliceToArray(oob)));
			msg.SetControllen(oob.$length);
		}
		msg.Iov = iov;
		msg.Iovlen = 1;
		_tuple = recvmsg(fd, msg, flags);
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, oobn, recvflags, from, err];
		}
		oobn = ((msg.Controllen >> 0));
		recvflags = ((msg.Flags >> 0));
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa);
			from = _tuple$1[0];
			err = _tuple$1[1];
		}
		return [n, oobn, recvflags, from, err];
	};
	$pkg.Recvmsg = Recvmsg;
	SendmsgN = function(fd, p, oob, to, flags) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, dummy, err, fd, flags, iov, msg, n, oob, p, ptr, salen, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dummy = $f.dummy; err = $f.err; fd = $f.fd; flags = $f.flags; iov = $f.iov; msg = $f.msg; n = $f.n; oob = $f.oob; p = $f.p; ptr = $f.ptr; salen = $f.salen; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dummy = [dummy];
		iov = [iov];
		msg = [msg];
		n = 0;
		err = $ifaceNil;
		ptr = 0;
		salen = 0;
		/* */ if (!($interfaceIsEqual(to, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(to, $ifaceNil))) { */ case 1:
			_r = to.sockaddr(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			ptr = _tuple[0];
			salen = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		msg[0] = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$1.zero(), ptrType$18.nil, 0, arrayType$1.zero(), ptrType$2.nil, 0, 0);
		msg[0].Name = ((ptr));
		msg[0].Namelen = ((salen >>> 0));
		iov[0] = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov[0].Base = (($sliceToArray(p)));
			iov[0].SetLen(p.$length);
		}
		dummy[0] = 0;
		if (oob.$length > 0) {
			if (p.$length === 0) {
				iov[0].Base = (dummy.$ptr || (dummy.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dummy)));
				iov[0].SetLen(1);
			}
			msg[0].Control = (($sliceToArray(oob)));
			msg[0].SetControllen(oob.$length);
		}
		msg[0].Iov = iov[0];
		msg[0].Iovlen = 1;
		_tuple$1 = sendmsg(fd, msg[0], flags);
		n = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = 0;
			_tmp$3 = err;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		if (oob.$length > 0 && (p.$length === 0)) {
			n = 0;
		}
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: SendmsgN }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dummy = dummy; $f.err = err; $f.fd = fd; $f.flags = flags; $f.iov = iov; $f.msg = msg; $f.n = n; $f.oob = oob; $f.p = p; $f.ptr = ptr; $f.salen = salen; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SendmsgN = SendmsgN;
	direntIno = function(buf) {
		var buf;
		return readInt(buf, 0, 8);
	};
	direntReclen = function(buf) {
		var buf;
		return readInt(buf, 16, 2);
	};
	direntNamlen = function(buf) {
		var buf;
		return readInt(buf, 18, 2);
	};
	Iovec.ptr.prototype.SetLen = function(length) {
		var iov, length;
		iov = this;
		iov.Len = (new $Uint64(0, length));
	};
	Iovec.prototype.SetLen = function(length) { return this.$val.SetLen(length); };
	Msghdr.ptr.prototype.SetControllen = function(length) {
		var length, msghdr;
		msghdr = this;
		msghdr.Controllen = ((length >>> 0));
	};
	Msghdr.prototype.SetControllen = function(length) { return this.$val.SetControllen(length); };
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			$s = -1; return [data, err];
		}
		_r = m.mmap(0, ((length >>> 0)), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			$s = -1; return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		$s = -1; return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		_r = m.munmap((($sliceToArray(b))), ((b.$length >>> 0))); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			$s = -1; return err;
		}
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		$s = -1; return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val;
		if (0 <= ((e >> 0)) && ((e >> 0)) < 106) {
			s = ((e < 0 || e >= errors$1.length) ? ($throwRuntimeError("index out of range"), undefined) : errors$1[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa(((e >> 0)));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 54) || (e === 53) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (35)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange(($sliceToArray(p)), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire(((ioSync$24ptr || (ioSync$24ptr = new ptrType$20(function() { return ioSync; }, function($v) { ioSync = $v; })))));
			}
		}
		if (false && n > 0) {
			msanWrite(($sliceToArray(p)), n);
		}
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge(((ioSync$24ptr || (ioSync$24ptr = new ptrType$20(function() { return ioSync; }, function($v) { ioSync = $v; })))));
		}
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false && n > 0) {
			race.ReadRange(($sliceToArray(p)), n);
		}
		if (false && n > 0) {
			msanRead(($sliceToArray(p)), n);
		}
		return [n, err];
	};
	$pkg.Write = Write;
	Recvfrom = function(fd, p, flags) {
		var _tuple, _tuple$1, err, fd, flags, from, len, len$24ptr, n, p, rsa;
		n = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		len = 108;
		_tuple = recvfrom(fd, p, flags, rsa, (len$24ptr || (len$24ptr = new ptrType$17(function() { return len; }, function($v) { len = $v; }))));
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, from, err];
		}
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa);
			from = _tuple$1[0];
			err = _tuple$1[1];
		}
		return [n, from, err];
	};
	$pkg.Recvfrom = Recvfrom;
	Sendto = function(fd, p, flags, to) {
		var _r, _tuple, err, fd, flags, n, p, ptr, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; fd = $f.fd; flags = $f.flags; n = $f.n; p = $f.p; ptr = $f.ptr; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = to.sockaddr(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ptr = _tuple[0];
		n = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		err = sendto(fd, p, flags, ptr, n);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sendto }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.flags = flags; $f.n = n; $f.p = p; $f.ptr = ptr; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sendto = Sendto;
	SetsockoptByte = function(fd, level, opt, value) {
		var err, fd, level, opt, value, value$24ptr;
		err = $ifaceNil;
		err = setsockopt(fd, level, opt, ((value$24ptr || (value$24ptr = new ptrType$2(function() { return value; }, function($v) { value = $v; })))), 1);
		return err;
	};
	$pkg.SetsockoptByte = SetsockoptByte;
	SetsockoptInt = function(fd, level, opt, value) {
		var err, fd, level, n, n$24ptr, opt, value;
		err = $ifaceNil;
		n = ((value >> 0));
		err = setsockopt(fd, level, opt, ((n$24ptr || (n$24ptr = new ptrType$21(function() { return n; }, function($v) { n = $v; })))), 4);
		return err;
	};
	$pkg.SetsockoptInt = SetsockoptInt;
	SetsockoptInet4Addr = function(fd, level, opt, value) {
		var err, fd, level, opt, value;
		err = $ifaceNil;
		err = setsockopt(fd, level, opt, ($sliceToArray(new sliceType(value))), 4);
		return err;
	};
	$pkg.SetsockoptInet4Addr = SetsockoptInet4Addr;
	SetsockoptIPMreq = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, (_array), 8);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 4, _array.buffer.byteLength));
		return err;
	};
	$pkg.SetsockoptIPMreq = SetsockoptIPMreq;
	SetsockoptIPv6Mreq = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(20);
		err = setsockopt(fd, level, opt, (_array), 20);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = _view.getUint32(16, true);
		return err;
	};
	$pkg.SetsockoptIPv6Mreq = SetsockoptIPv6Mreq;
	SetsockoptLinger = function(fd, level, opt, l) {
		var _array, _struct, _view, err, fd, l, level, opt;
		err = $ifaceNil;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, (_array), 8);
		_struct = l, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Onoff = _view.getInt32(0, true), _struct.Linger = _view.getInt32(4, true);
		return err;
	};
	$pkg.SetsockoptLinger = SetsockoptLinger;
	accept = function(s, rsa, addrlen) {
		var _array, _struct, _tuple, _view, addrlen, e1, err, fd, r0, rsa, s;
		fd = 0;
		err = $ifaceNil;
		_array = new Uint8Array(108);
		_tuple = Syscall(30, ((s >>> 0)), ((_array)), ((addrlen)));
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	setsockopt = function(s, level, name, val, vallen) {
		var _tuple, e1, err, level, name, s, val, vallen;
		err = $ifaceNil;
		_tuple = Syscall6(105, ((s >>> 0)), ((level >>> 0)), ((name >>> 0)), (val), (vallen), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	Shutdown = function(s, how) {
		var _tuple, e1, err, how, s;
		err = $ifaceNil;
		_tuple = Syscall(134, ((s >>> 0)), ((how >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Shutdown = Shutdown;
	recvfrom = function(fd, p, flags, from, fromlen) {
		var _array, _p0, _struct, _tuple, _view, e1, err, fd, flags, from, fromlen, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_array = new Uint8Array(108);
		_tuple = Syscall6(29, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((flags >>> 0)), ((_array)), ((fromlen)));
		_struct = from, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	sendto = function(s, buf, flags, to, addrlen) {
		var _p0, _tuple, addrlen, buf, e1, err, flags, s, to;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(133, ((s >>> 0)), (_p0), ((buf.$length >>> 0)), ((flags >>> 0)), (to), ((addrlen >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	recvmsg = function(s, msg, flags) {
		var _array, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s;
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(36);
		_tuple = Syscall(27, ((s >>> 0)), ((_array)), ((flags >>> 0)));
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = _view.getInt32(16, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct.Controllen = _view.getUint32(28, true), _struct.Flags = _view.getInt32(32, true);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	sendmsg = function(s, msg, flags) {
		var _array, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s;
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(36);
		_tuple = Syscall(28, ((s >>> 0)), ((_array)), ((flags >>> 0)));
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = _view.getInt32(16, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct.Controllen = _view.getUint32(28, true), _struct.Flags = _view.getInt32(32, true);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	fcntl = function(fd, cmd, arg) {
		var _tuple, arg, cmd, e1, err, fd, r0, val;
		val = 0;
		err = $ifaceNil;
		_tuple = Syscall(92, ((fd >>> 0)), ((cmd >>> 0)), ((arg >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		val = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [val, err];
	};
	Chmod = function(path, mode) {
		var _p0, _tuple, _tuple$1, e1, err, mode, path;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = Syscall(15, ((_p0)), ((mode >>> 0)), 0);
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Chmod = Chmod;
	Close = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(6, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Fchdir = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(13, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(124, ((fd >>> 0)), ((mode >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(123, ((fd >>> 0)), ((uid >>> 0)), ((gid >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, ((fd >>> 0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Fsync = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(95, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Ftruncate = function(fd, length) {
		var _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(201, ((fd >>> 0)), ((length.$low >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Getdirentries = function(fd, buf, basep) {
		var _p0, _tuple, basep, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(344, ((fd >>> 0)), (_p0), ((buf.$length >>> 0)), ((basep)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Getdirentries = Getdirentries;
	Getpid = function() {
		var _tuple, pid, r0;
		pid = 0;
		_tuple = RawSyscall(20, 0, 0, 0);
		r0 = _tuple[0];
		pid = ((r0 >> 0));
		return pid;
	};
	$pkg.Getpid = Getpid;
	Lstat = function(path, stat) {
		var _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, ((_p0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Mkdir = function(path, mode) {
		var _p0, _tuple, _tuple$1, e1, err, mode, path;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = Syscall(136, ((_p0)), ((mode >>> 0)), 0);
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Mkdir = Mkdir;
	Open = function(path, mode, perm) {
		var _p0, _tuple, _tuple$1, e1, err, fd, mode, path, perm, r0;
		fd = 0;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [fd, err];
		}
		_tuple$1 = Syscall(5, ((_p0)), ((mode >>> 0)), ((perm >>> 0)));
		r0 = _tuple$1[0];
		e1 = _tuple$1[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	$pkg.Open = Open;
	Pread = function(fd, p, offset) {
		var _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(153, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((offset.$low >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(154, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((offset.$low >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	read = function(fd, p) {
		var _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(3, ((fd >>> 0)), (_p0), ((p.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	Rename = function(from, to) {
		var _p0, _p1, _tuple, _tuple$1, _tuple$2, e1, err, from, to;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(from);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_p1 = ptrType$2.nil;
		_tuple$1 = BytePtrFromString(to);
		_p1 = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$2 = Syscall(128, ((_p0)), ((_p1)), 0);
		e1 = _tuple$2[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Rename = Rename;
	Seek = function(fd, offset, whence) {
		var _tuple, e1, err, fd, newoffset, offset, r0, whence;
		newoffset = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(199, ((fd >>> 0)), ((offset.$low >>> 0)), ((whence >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		newoffset = (new $Int64(0, r0.constructor === Number ? r0 : 1));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [newoffset, err];
	};
	$pkg.Seek = Seek;
	Stat = function(path, stat) {
		var _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(338, ((_p0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Stat = Stat;
	write = function(fd, p) {
		var _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(4, ((fd >>> 0)), (_p0), ((p.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var _tuple, addr, e1, err, fd, flag, length, pos, prot, r0, ret;
		ret = 0;
		err = $ifaceNil;
		_tuple = Syscall6(197, (addr), (length), ((prot >>> 0)), ((flag >>> 0)), ((fd >>> 0)), ((pos.$low >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		ret = (r0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(73, (addr), (length), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	ptrType$11.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$27.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$28.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$29.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$30.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$31.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	ptrType$18.methods = [{prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$32.methods = [{prop: "SetControllen", name: "SetControllen", pkg: "", typ: $funcType([$Int], [], false)}];
	SockaddrDatalink.init("syscall", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Nlen", name: "Nlen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Alen", name: "Alen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Slen", name: "Slen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$3, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrDatalink, tag: ""}]);
	mmapper.init("syscall", [{prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", anonymous: false, exported: false, typ: funcType$2, tag: ""}, {prop: "munmap", name: "munmap", anonymous: false, exported: false, typ: funcType$3, tag: ""}]);
	Sockaddr.init([{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}]);
	SockaddrInet4.init("syscall", [{prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrInet4, tag: ""}]);
	SockaddrInet6.init("syscall", [{prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "ZoneId", name: "ZoneId", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrInet6, tag: ""}]);
	SockaddrUnix.init("syscall", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrUnix, tag: ""}]);
	Timespec.init("", [{prop: "Sec", name: "Sec", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", anonymous: false, exported: true, typ: $Int64, tag: ""}]);
	Stat_t.init("", [{prop: "Dev", name: "Dev", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Mode", name: "Mode", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Nlink", name: "Nlink", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Ino", name: "Ino", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Uid", name: "Uid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Atimespec", name: "Atimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Mtimespec", name: "Mtimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Ctimespec", name: "Ctimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Birthtimespec", name: "Birthtimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Size", name: "Size", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gen", name: "Gen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Lspare", name: "Lspare", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Qspare", name: "Qspare", anonymous: false, exported: true, typ: arrayType$15, tag: ""}]);
	RawSockaddrInet4.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Zero", name: "Zero", anonymous: false, exported: true, typ: arrayType$6, tag: ""}]);
	RawSockaddrInet6.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Flowinfo", name: "Flowinfo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "Scope_id", name: "Scope_id", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	RawSockaddrUnix.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: arrayType$11, tag: ""}]);
	RawSockaddrDatalink.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Nlen", name: "Nlen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Alen", name: "Alen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Slen", name: "Slen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$3, tag: ""}]);
	RawSockaddr.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$4, tag: ""}]);
	RawSockaddrAny.init("", [{prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: RawSockaddr, tag: ""}, {prop: "Pad", name: "Pad", anonymous: false, exported: true, typ: arrayType$5, tag: ""}]);
	Linger.init("", [{prop: "Onoff", name: "Onoff", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Linger", name: "Linger", anonymous: false, exported: true, typ: $Int32, tag: ""}]);
	Iovec.init("", [{prop: "Base", name: "Base", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint64, tag: ""}]);
	IPMreq.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: arrayType$1, tag: ""}]);
	IPv6Mreq.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	Msghdr.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Namelen", name: "Namelen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Iov", name: "Iov", anonymous: false, exported: true, typ: ptrType$18, tag: ""}, {prop: "Iovlen", name: "Iovlen", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Pad_cgo_1", name: "Pad_cgo_1", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Control", name: "Control", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Controllen", name: "Controllen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		envOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		envLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		env = false;
		freebsdConfArch = "";
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(35);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors$1 = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		minRoutingSockaddrLen = rsaAlignOf(0);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Mutex, Once, ptrType$1, funcType$1, ptrType$4;
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(locked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			return;
		}
		this.locked = locked_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	ptrType$1 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$4 = $ptrType(Once);
	Mutex.ptr.prototype.Lock = function() {
		var m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			$s = -1; return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	Mutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "locked", name: "locked", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$2, arrayType$3, ptrType$4, ptrType$7, zoneSources, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, errLocation, badData, init, initLocal, runtimeNano, now, indexByte, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, lessThanHalf, absDate, daysIn, Now, unixTime, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(wall_, ext_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wall = new $Uint64(0, 0);
			this.ext = new $Int64(0, 0);
			this.loc = ptrType$2.nil;
			return;
		}
		this.wall = wall_;
		this.ext = ext_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(Location);
	arrayType$3 = $arrayType($Uint8, 32);
	ptrType$4 = $ptrType(ParseError);
	ptrType$7 = $ptrType(Time);
	init = function() {
		$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
	};
	initLocal = function() {
		var d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = indexByte(s, 40);
		j = indexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = $substring(s, (i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	runtimeNano = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var _tmp, _tmp$1, _tmp$2, mono, n, nsec, sec, x;
		sec = new $Int64(0, 0);
		nsec = 0;
		mono = new $Int64(0, 0);
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false);
		_tmp$1 = (((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		_tmp$2 = n;
		sec = _tmp;
		nsec = _tmp$1;
		mono = _tmp$2;
		return [sec, nsec, mono];
	};
	indexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	startsWithLowerCase = function(str) {
		var c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = ((layout.charCodeAt(i) >> 0));
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 21;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 522;
					_tmp$20 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = $substring(layout, 0, i);
				_tmp$22 = 259;
				_tmp$23 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = $substring(layout, 0, i);
					_tmp$25 = 273;
					_tmp$26 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = $substring(layout, 0, i);
				_tmp$28 = 263;
				_tmp$29 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = $substring(layout, 0, i);
					_tmp$34 = 264;
					_tmp$35 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$36 = $substring(layout, 0, i);
				_tmp$37 = 523;
				_tmp$38 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$39 = $substring(layout, 0, i);
				_tmp$40 = 525;
				_tmp$41 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 527;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = $substring(layout, 0, i);
					_tmp$46 = 531;
					_tmp$47 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = $substring(layout, 0, i);
					_tmp$49 = 532;
					_tmp$50 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 28;
					_tmp$53 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 31;
					_tmp$56 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 27;
					_tmp$59 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 30;
					_tmp$62 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 23;
					_tmp$68 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 26;
					_tmp$71 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 22;
					_tmp$74 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 25;
					_tmp$77 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === (46)) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = $substring(layout, 0, i);
						_tmp$82 = std$1;
						_tmp$83 = $substring(layout, j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var _q, b, buf, i, q, u, w, width, x;
		u = ((x >>> 0));
		if (x < 0) {
			b = $append(b, 45);
			u = ((-x >>> 0));
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) << 24 >>> 24)));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple = leadingInt(s);
		q = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		x = (((q.$low + ((q.$high >> 31) * 4294967296)) >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var _q, _r, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = ((((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; buf = $f.buf; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; s = $f.s; sign = $f.sign; t = $f.t; wid = $f.wid; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			m2 = ((x$2 = t.ext, new $Uint64(x$2.$high, x$2.$low)));
			sign = 43;
			if ((x$3 = t.ext, (x$3.$high < 0 || (x$3.$high === 0 && x$3.$low < 0)))) {
				sign = 45;
				m2 = new $Uint64(-m2.$high, -m2.$low);
			}
			_tmp = $div64(m2, new $Uint64(0, 1000000000), false);
			_tmp$1 = $div64(m2, new $Uint64(0, 1000000000), true);
			m1 = _tmp;
			m2 = _tmp$1;
			_tmp$2 = $div64(m1, new $Uint64(0, 1000000000), false);
			_tmp$3 = $div64(m1, new $Uint64(0, 1000000000), true);
			m0 = _tmp$2;
			m1 = _tmp$3;
			buf = sliceType$3.nil;
			buf = $appendSlice(buf, " m=");
			buf = $append(buf, sign);
			wid = 0;
			if (!((m0.$high === 0 && m0.$low === 0))) {
				buf = appendInt(buf, ((m0.$low >> 0)), 0);
				wid = 9;
			}
			buf = appendInt(buf, ((m1.$low >> 0)), wid);
			buf = $append(buf, 46);
			buf = appendInt(buf, ((m2.$low >> 0)), 9);
			s = s + (($bytesToString(buf)));
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.buf = buf; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.s = s; $f.sign = sign; $f.t = t; $f.wid = wid; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var _r, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f._r = _r; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var _1, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		abs = _tuple[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$2 = absDate(abs, true);
				year = _tuple$2[0];
				month = _tuple$2[1];
				day = _tuple$2[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$3 = absClock(abs);
				hour = _tuple$3[0];
				min = _tuple$3[1];
				sec = _tuple$3[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$1 = y % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (273)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, ((month >> 0)), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, ((month >> 0)), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (522)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (523)) {
					hr = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (524)) {
					hr$1 = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (525)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (526)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (531)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (532)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (30)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31))) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$4 = zone$1 % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$5 = absoffset % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (21)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$6 = zone$2 % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (32)) || (_1 === (33))) {
					b = formatNano(b, (($clone(t, Time).Nanosecond() >>> 0)), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(s, 1), $ifaceNil];
		}
		return [($imul((((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(s, 2), $ifaceNil];
	};
	cutspace = function(s) {
		var s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var _r, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f._r = _r; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var _1, _2, _3, _4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$2.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple = nextStdChunk(layout);
			prefix = _tuple[0];
			std = _tuple[1];
			suffix = _tuple[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$1 = skip(value, prefix);
			value = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$2 = atoi(p);
					year = _tuple$2[0];
					err = _tuple$2[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (273)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
				} else if (_1 === (258)) {
					_tuple$4 = lookup(shortMonthNames, value);
					month = _tuple$4[0];
					value = _tuple$4[1];
					err = _tuple$4[2];
					month = month + (1) >> 0;
				} else if (_1 === (257)) {
					_tuple$5 = lookup(longMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
					month = month + (1) >> 0;
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$6 = getnum(value, std === 260);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$7 = lookup(shortDayNames, value);
					value = _tuple$7[1];
					err = _tuple$7[2];
				} else if (_1 === (261)) {
					_tuple$8 = lookup(longDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$9 = getnum(value, std === 265);
					day = _tuple$9[0];
					value = _tuple$9[1];
					err = _tuple$9[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_1 === (522)) {
					_tuple$10 = getnum(value, false);
					hour = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (523)) || (_1 === (524))) {
					_tuple$11 = getnum(value, std === 524);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$12 = getnum(value, std === 526);
					min = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$13 = getnum(value, std === 528);
					sec = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
						break;
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$14 = nextStdChunk(layout);
						std = _tuple$14[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$15 = parseNanoseconds(value, n);
						nsec = _tuple$15[0];
						rangeErrString = _tuple$15[1];
						err = _tuple$15[2];
						value = $substring(value, n);
					}
				} else if (_1 === (531)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (532)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (29)) || (_1 === (30)) || (_1 === (28)) || (_1 === (31))) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$16 = atoi(hour$1);
					hr = _tuple$16[0];
					err = _tuple$16[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$17 = atoi(min$1);
						mm = _tuple$17[0];
						err = _tuple$17[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(seconds);
						ss = _tuple$18[0];
						err = _tuple$18[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (21)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$19 = parseTimeZone(value);
					n$1 = _tuple$19[0];
					ok = _tuple$19[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (32)) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$20 = parseNanoseconds(value, ndigit);
					nsec = _tuple$20[0];
					rangeErrString = _tuple$20[1];
					err = _tuple$20[2];
					value = $substring(value, ndigit);
				} else if (_1 === (33)) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$21 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, (1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day < 1 || day > daysIn(((month >> 0)), year)) {
			$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$2.nil)) { */ case 1:
			_r = Date(year, ((month >> 0)), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [_r, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$1 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			t = $clone(_r$1, Time);
			t.addSec((x = (new $Int64(0, zoneOffset)), new $Int64(-x.$high, -x.$low)));
			_r$2 = local.lookup(t.unixSec()); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$22 = _r$2;
			name = _tuple$22[0];
			offset = _tuple$22[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.setLoc(local);
				$s = -1; return [t, $ifaceNil];
			}
			t.setLoc(FixedZone(zoneName, zoneOffset));
			$s = -1; return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$3 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			t$1 = $clone(_r$3, Time);
			_r$4 = local.lookupName(zoneName, t$1.unixSec()); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$23 = _r$4;
			offset$1 = _tuple$23[0];
			ok$1 = _tuple$23[1];
			if (ok$1) {
				t$1.addSec((x$1 = (new $Int64(0, offset$1)), new $Int64(-x$1.$high, -x$1.$low)));
				t$1.setLoc(local);
				$s = -1; return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$24 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$24[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.setLoc(FixedZone(zoneName, offset$1));
			$s = -1; return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$5 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return [_r$5, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var _tuple, err, rem, sign, value, x;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple = leadingInt($substring(value, 1));
		x = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var _tuple, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple = atoi($substring(value, 1, nbytes));
		ns = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = (new $Int64(0, c)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	Time.ptr.prototype.nsec = function() {
		var t, x;
		t = this;
		return (((x = t.wall, new $Uint64(x.$high & 0, (x.$low & 1073741823) >>> 0)).$low >> 0));
	};
	Time.prototype.nsec = function() { return this.$val.nsec(); };
	Time.ptr.prototype.sec = function() {
		var t, x, x$1, x$2, x$3;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$2 = ((x$3 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$3.$high, x$3.$low))), new $Int64(13 + x$2.$high, 3618733952 + x$2.$low));
		}
		return (t.ext);
	};
	Time.prototype.sec = function() { return this.$val.sec(); };
	Time.ptr.prototype.unixSec = function() {
		var t, x;
		t = this;
		return (x = t.sec(), new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.unixSec = function() { return this.$val.unixSec(); };
	Time.ptr.prototype.addSec = function(d) {
		var d, dsec, sec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			sec = ((x$2 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$2.$high, x$2.$low)));
			dsec = new $Int64(sec.$high + d.$high, sec.$low + d.$low);
			if ((0 < dsec.$high || (0 === dsec.$high && 0 <= dsec.$low)) && (dsec.$high < 1 || (dsec.$high === 1 && dsec.$low <= 4294967295))) {
				t.wall = (x$3 = (x$4 = (x$5 = t.wall, new $Uint64(x$5.$high & 0, (x$5.$low & 1073741823) >>> 0)), x$6 = $shiftLeft64((new $Uint64(dsec.$high, dsec.$low)), 30), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0)), new $Uint64(x$3.$high | 2147483648, (x$3.$low | 0) >>> 0));
				return;
			}
			t.stripMono();
		}
		t.ext = (x$7 = t.ext, x$8 = d, new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
	};
	Time.prototype.addSec = function(d) { return this.$val.addSec(d); };
	Time.ptr.prototype.setLoc = function(loc) {
		var loc, t;
		t = this;
		if (loc === utcLoc) {
			loc = ptrType$2.nil;
		}
		t.stripMono();
		t.loc = loc;
	};
	Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
	Time.ptr.prototype.stripMono = function() {
		var t, x, x$1, x$2, x$3;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			t.ext = t.sec();
			t.wall = (x$2 = t.wall, x$3 = new $Uint64(0, 1073741823), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		}
	};
	Time.prototype.stripMono = function() { return this.$val.stripMono(); };
	Time.ptr.prototype.After = function(u) {
		var t, ts, u, us, x, x$1, x$2, x$3, x$4, x$5;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high > x$5.$high || (x$4.$high === x$5.$high && x$4.$low > x$5.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high > us.$high || (ts.$high === us.$high && ts.$low > us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() > u.nsec();
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var t, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high < x$5.$high || (x$4.$high === x$5.$high && x$4.$low < x$5.$low)));
		}
		return (x$6 = t.sec(), x$7 = u.sec(), (x$6.$high < x$7.$high || (x$6.$high === x$7.$high && x$6.$low < x$7.$low))) || (x$8 = t.sec(), x$9 = u.sec(), (x$8.$high === x$9.$high && x$8.$low === x$9.$low)) && t.nsec() < u.nsec();
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var t, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high === x$5.$high && x$4.$low === x$5.$low));
		}
		return (x$6 = t.sec(), x$7 = u.sec(), (x$6.$high === x$7.$high && x$6.$low === x$7.$low)) && (t.nsec() === u.nsec());
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var buf, m, n, x;
		m = this.$val;
		if (1 <= m && m <= 12) {
			return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? ($throwRuntimeError("index out of range"), undefined) : months[x]));
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, m)));
		return "%!Month(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? ($throwRuntimeError("index out of range"), undefined) : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var t, x;
		t = this;
		return (x = t.sec(), (x.$high === 0 && x.$low === 0)) && (t.nsec() === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var _r, _r$1, _tuple, l, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { */ case 6:
				sec = (x$2 = (new $Int64(0, l.cacheZone.offset)), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				offset = _tuple[1];
				sec = (x$3 = (new $Int64(0, offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return ((x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var _r, _r$1, _tuple, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$1 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				name = _tuple[0];
				offset = _tuple[1];
			/* } */ case 9:
			sec = (x$2 = (new $Int64(0, offset)), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = ((x$3 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$3.$high, x$3.$low)));
		$s = -1; return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var _r, _tuple, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		$s = -1; return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var _r, _tuple, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		$s = -1; return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var _r, _tuple, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		month = _tuple[1];
		$s = -1; return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f._r = _r; $f._tuple = _tuple; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var _r, _tuple, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		day = _tuple[2];
		$s = -1; return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absWeekday(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return (((_q = ((sec.$low >> 0)) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
	};
	Time.ptr.prototype.ISOWeek = function() {
		var _q, _r, _r$1, _r$2, _r$3, _r$4, _tuple, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		_r$2 = $clone(t, Time).Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		wday = (_r$1 = (((_r$2 + 6 >> 0) >> 0)) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$3 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$4 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		$s = -1; return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var _r, _r$1, _tuple, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absClock(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		hour = _tuple[0];
		min = _tuple[1];
		sec = _tuple[2];
		$s = -1; return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (($div64(abs, new $Uint64(0, 86400), true).$low >> 0));
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 3600), true).$low >> 0)) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($div64(_r, new $Uint64(0, 60), true).$low >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var t;
		t = this;
		return ((t.nsec() >> 0));
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var _r, _tuple, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		yday = _tuple[3];
		$s = -1; return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var _tuple, _tuple$1, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$3.zero();
		w = 32;
		u = (new $Uint64(d.$high, d.$low));
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
			}
			_tuple = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple[0];
			u = _tuple[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
		}
		return ($bytesToString($subslice(new sliceType$3(buf), w)));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (((digit.$low << 24 >>> 24)) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return (new $Int64(d.$high, d.$low));
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return ($flatten64(sec)) + ($flatten64(nsec)) / 1e+09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return ($flatten64(min)) + ($flatten64(nsec)) / 6e+10;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return ($flatten64(hour)) + ($flatten64(nsec)) / 3.6e+12;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Duration.prototype.Truncate = function(m) {
		var d, m, x;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		return (x = $div64(d, m, true), new Duration(d.$high - x.$high, d.$low - x.$low));
	};
	$ptrType(Duration).prototype.Truncate = function(m) { return this.$get().Truncate(m); };
	lessThanHalf = function(x, y) {
		var x, x$1, x$2, x$3, x$4, y;
		return (x$1 = (x$2 = (new $Uint64(x.$high, x.$low)), x$3 = (new $Uint64(x.$high, x.$low)), new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), x$4 = (new $Uint64(y.$high, y.$low)), (x$1.$high < x$4.$high || (x$1.$high === x$4.$high && x$1.$low < x$4.$low)));
	};
	Duration.prototype.Round = function(m) {
		var d, d1, d1$1, m, r, x, x$1;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		r = $div64(d, m, true);
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
			r = new Duration(-r.$high, -r.$low);
			if (lessThanHalf(r, m)) {
				return new Duration(d.$high + r.$high, d.$low + r.$low);
			}
			d1 = (x = new Duration(d.$high - m.$high, d.$low - m.$low), new Duration(x.$high + r.$high, x.$low + r.$low));
			if ((d1.$high < d.$high || (d1.$high === d.$high && d1.$low < d.$low))) {
				return d1;
			}
			return new Duration(-2147483648, 0);
		}
		if (lessThanHalf(r, m)) {
			return new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		d1$1 = (x$1 = new Duration(d.$high + m.$high, d.$low + m.$low), new Duration(x$1.$high - r.$high, x$1.$low - r.$low));
		if ((d1$1.$high > d.$high || (d1$1.$high === d.$high && d1$1.$low > d.$low))) {
			return d1$1;
		}
		return new Duration(2147483647, 4294967295);
	};
	$ptrType(Duration).prototype.Round = function(m) { return this.$get().Round(m); };
	Time.ptr.prototype.Add = function(d) {
		var d, dsec, nsec, t, te, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		dsec = ((x = $div64(d, new Duration(0, 1000000000), false), new $Int64(x.$high, x.$low)));
		nsec = t.nsec() + (((x$1 = $div64(d, new Duration(0, 1000000000), true), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0)) >> 0;
		if (nsec >= 1000000000) {
			dsec = (x$2 = new $Int64(0, 1), new $Int64(dsec.$high + x$2.$high, dsec.$low + x$2.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			dsec = (x$3 = new $Int64(0, 1), new $Int64(dsec.$high - x$3.$high, dsec.$low - x$3.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.wall = (x$4 = (x$5 = t.wall, new $Uint64(x$5.$high & ~0, (x$5.$low & ~1073741823) >>> 0)), x$6 = (new $Uint64(0, nsec)), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0));
		t.addSec(dsec);
		if (!((x$7 = (x$8 = t.wall, new $Uint64(x$8.$high & 2147483648, (x$8.$low & 0) >>> 0)), (x$7.$high === 0 && x$7.$low === 0)))) {
			te = (x$9 = t.ext, x$10 = (new $Int64(d.$high, d.$low)), new $Int64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (x$11 = (t.ext), (te.$high > x$11.$high || (te.$high === x$11.$high && te.$low > x$11.$low))) || (d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (x$12 = (t.ext), (te.$high < x$12.$high || (te.$high === x$12.$high && te.$low < x$12.$low)))) {
				t.stripMono();
			} else {
				t.ext = te;
			}
		}
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var d, d$1, t, te, u, ue, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			te = (t.ext);
			ue = (u.ext);
			d = ((x$4 = new $Int64(te.$high - ue.$high, te.$low - ue.$low), new Duration(x$4.$high, x$4.$low)));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (te.$high > ue.$high || (te.$high === ue.$high && te.$low > ue.$low))) {
				return new Duration(2147483647, 4294967295);
			}
			if ((d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (te.$high < ue.$high || (te.$high === ue.$high && te.$low < ue.$low))) {
				return new Duration(-2147483648, 0);
			}
			return d;
		}
		d$1 = (x$5 = $mul64(((x$6 = (x$7 = t.sec(), x$8 = u.sec(), new $Int64(x$7.$high - x$8.$high, x$7.$low - x$8.$low)), new Duration(x$6.$high, x$6.$low))), new Duration(0, 1000000000)), x$9 = (new Duration(0, (t.nsec() - u.nsec() >> 0))), new Duration(x$5.$high + x$9.$high, x$5.$low + x$9.$low));
		if ($clone($clone(u, Time).Add(d$1), Time).Equal($clone(t, Time))) {
			return d$1;
		} else if ($clone(t, Time).Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		_r$1 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		_r$2 = Date(year + years >> 0, month + ((months$1 >> 0)) >> 0, day + days$1 >> 0, hour, min, sec, ((t.nsec() >> 0)), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var _r, _r$1, _tuple, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absDate(_r, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		$s = -1; return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = (((x$9 = (x$10 = (new $Int64(y.$high, y.$low)), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0));
		yday = ((d.$low >> 0));
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = (((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		end = (((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$11])) >> 0));
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = ((((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0));
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x])) >> 0) >> 0));
	};
	Now = function() {
		var _tuple, mono, nsec, sec, x, x$1, x$2, x$3, x$4;
		_tuple = now();
		sec = _tuple[0];
		nsec = _tuple[1];
		mono = _tuple[2];
		sec = (x = new $Int64(0, 2682288000), new $Int64(sec.$high + x.$high, sec.$low + x.$low));
		if (!((x$1 = $shiftRightUint64((new $Uint64(sec.$high, sec.$low)), 33), (x$1.$high === 0 && x$1.$low === 0)))) {
			return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 13, sec.$low + 3618733952), $pkg.Local);
		}
		return new Time.ptr((x$2 = (x$3 = $shiftLeft64((new $Uint64(sec.$high, sec.$low)), 30), new $Uint64(2147483648 | x$3.$high, (0 | x$3.$low) >>> 0)), x$4 = (new $Uint64(0, nsec)), new $Uint64(x$2.$high | x$4.$high, (x$2.$low | x$4.$low) >>> 0)), mono, $pkg.Local);
	};
	$pkg.Now = Now;
	unixTime = function(sec, nsec) {
		var nsec, sec;
		return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 14, sec.$low + 2006054656), $pkg.Local);
	};
	Time.ptr.prototype.UTC = function() {
		var t;
		t = this;
		t.setLoc(utcLoc);
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var t;
		t = this;
		t.setLoc($pkg.Local);
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var loc, t;
		t = this;
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.setLoc(loc);
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var l, t;
		t = this;
		l = t.loc;
		if (l === ptrType$2.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var _r, _tuple, name, offset, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; name = $f.name; offset = $f.offset; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = this;
		_r = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		$s = -1; return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f._r = _r; $f._tuple = _tuple; $f.name = name; $f.offset = offset; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var t;
		t = this;
		return t.unixSec();
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var t, x, x$1;
		t = this;
		return (x = $mul64((t.unixSec()), new $Int64(0, 1000000000)), x$1 = (new $Int64(0, t.nsec())), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var _q, _r, _r$1, _tuple, enc, nsec, offset, offsetMin, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; enc = $f.enc; nsec = $f.nsec; offset = $f.offset; offsetMin = $f.offsetMin; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		offsetMin = 0;
		/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			offset = _tuple[1];
			if (!(((_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0))) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = ((offset << 16 >> 16));
		/* } */ case 3:
		sec = t.sec();
		nsec = t.nsec();
		enc = new sliceType$3([1, (($shiftRightInt64(sec, 56).$low << 24 >>> 24)), (($shiftRightInt64(sec, 48).$low << 24 >>> 24)), (($shiftRightInt64(sec, 40).$low << 24 >>> 24)), (($shiftRightInt64(sec, 32).$low << 24 >>> 24)), (($shiftRightInt64(sec, 24).$low << 24 >>> 24)), (($shiftRightInt64(sec, 16).$low << 24 >>> 24)), (($shiftRightInt64(sec, 8).$low << 24 >>> 24)), ((sec.$low << 24 >>> 24)), (((nsec >> 24 >> 0) << 24 >>> 24)), (((nsec >> 16 >> 0) << 24 >>> 24)), (((nsec >> 8 >> 0) << 24 >>> 24)), ((nsec << 24 >>> 24)), (((offsetMin >> 8 << 16 >> 16) << 24 >>> 24)), ((offsetMin << 24 >>> 24))]);
		$s = -1; return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.enc = enc; $f.nsec = nsec; $f.offset = offset; $f.offsetMin = offsetMin; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data) {
		var _r, _tuple, buf, data, localoff, nsec, offset, sec, t, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; data = $f.data; localoff = $f.localoff; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7]))), x$7 = $shiftLeft64((new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6]))), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5]))), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4]))), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]))), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]))), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]))), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		nsec = (((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0)) | ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0)) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
		Time.copy(t, new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil));
		t.wall = (new $Uint64(0, nsec));
		t.ext = sec;
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.setLoc(utcLoc);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $pkg.Local.lookup(t.unixSec()); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			localoff = _tuple[1];
			if (offset === localoff) {
				t.setLoc($pkg.Local);
			} else {
				t.setLoc(FixedZone("", offset));
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.data = data; $f.localoff = localoff; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data) { return this.$val.UnmarshalBinary(data); };
	Time.ptr.prototype.GobEncode = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data) {
		var _r, data, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.UnmarshalBinary(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f._r = _r; $f.data = data; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data) { return this.$val.GobDecode(data); };
	Time.ptr.prototype.MarshalJSON = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data) {
		var _r, _tuple, data, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (($bytesToString(data)) === "null") {
			$s = -1; return $ifaceNil;
		}
		err = $ifaceNil;
		_r = Parse("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data) { return this.$val.UnmarshalJSON(data); };
	Time.ptr.prototype.MarshalText = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return [_r$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data) {
		var _r, _tuple, data, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r = Parse("2006-01-02T15:04:05Z07:00", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data) { return this.$val.UnmarshalText(data); };
	Unix = function(sec, nsec) {
		var n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return unixTime(sec, (((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0)));
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var _r, _r$1, _r$2, year;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, t, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; t = $f.t; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = ((month >> 0)) - 1 >> 0;
		_tuple = norm(year, m, 12);
		year = _tuple[0];
		m = _tuple[1];
		month = ((m >> 0)) + 1 >> 0;
		_tuple$1 = norm(sec, nsec, 1000000000);
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		_tuple$2 = norm(min, sec, 60);
		min = _tuple$2[0];
		sec = _tuple$2[1];
		_tuple$3 = norm(hour, min, 60);
		hour = _tuple$3[0];
		min = _tuple$3[1];
		_tuple$4 = norm(day, hour, 24);
		day = _tuple$4[0];
		hour = _tuple$4[1];
		y = ((x = (x$1 = (new $Int64(0, year)), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low)));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = (new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$9])))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = (new $Uint64(0, (day - 1 >> 0))), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = (new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0))), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = (new $Int64(abs.$high, abs.$low)), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$5 = _r;
		offset = _tuple$5[1];
		start = _tuple$5[3];
		end = _tuple$5[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = (new $Int64(0, offset)), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$1 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$6 = _r$1;
					offset = _tuple$6[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$2 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = (new $Int64(0, offset)), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		t = $clone(unixTime(unix, ((nsec >> 0))), Time);
		t.setLoc(loc);
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.t = t; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		if (lessThanHalf(r, d)) {
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		}
		return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, sec$1, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = t.nsec();
		sec = t.sec();
		if ((sec.$high < 0 || (sec.$high === 0 && sec.$low < 0))) {
			neg = true;
			sec = new $Int64(-sec.$high, -sec.$low);
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				sec = (x = new $Int64(0, 1), new $Int64(sec.$high - x.$high, sec.$low - x.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$1 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$1.$high === 0 && x$1.$low === 0))) {
			qmod2 = (((_q = nsec / (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
			r = (new Duration(0, (_r = nsec % (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
		} else if ((x$2 = $div64(d, new Duration(0, 1000000000), true), (x$2.$high === 0 && x$2.$low === 0))) {
			d1 = ((x$3 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$3.$high, x$3.$low)));
			qmod2 = (((x$4 = $div64(sec, d1, false), x$4.$low + ((x$4.$high >> 31) * 4294967296)) >> 0)) & 1;
			r = (x$5 = $mul64(((x$6 = $div64(sec, d1, true), new Duration(x$6.$high, x$6.$low))), new Duration(0, 1000000000)), x$7 = (new Duration(0, nsec)), new Duration(x$5.$high + x$7.$high, x$5.$low + x$7.$low));
		} else {
			sec$1 = (new $Uint64(sec.$high, sec.$low));
			tmp = $mul64(($shiftRightUint64(sec$1, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec$1.$high & 0, (sec$1.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$8 = new $Uint64(0, 1), new $Uint64(u1.$high + x$8.$high, u1.$low + x$8.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$9 = (new $Uint64(0, nsec)), new $Uint64(u0.$high + x$9.$high, u0.$low + x$9.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$10 = new $Uint64(0, 1), new $Uint64(u1.$high + x$10.$high, u1.$low + x$10.$low));
			}
			d1$1 = (new $Uint64(d.$high, d.$low));
			while (true) {
				if (!(!((x$11 = $shiftRightUint64(d1$1, 63), (x$11.$high === 0 && x$11.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high - x$12.$high, u1.$low - x$12.$low));
					}
					u1 = (x$13 = d1$1, new $Uint64(u1.$high - x$13.$high, u1.$low - x$13.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$14 = (new $Uint64(d.$high, d.$low)), (d0.$high === x$14.$high && d0.$low === x$14.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$15 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$15.$high, (d0.$low | x$15.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = (new Duration(u0.$high, u0.$low));
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$2.nil) {
			$s = -1; return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var _q, _r, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			$s = -1; return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			$s = -1; return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			$s = -1; return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
		$s = -1; return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f._q = _q; $f._r = _r; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).isDST) {
			zi = (((x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index >> 0)) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; i = $f.i; i$1 = $f.i$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		ok = false;
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$1 = l.lookup((x$1 = (new $Int64(0, zone$1.offset)), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				nam = _tuple[0];
				offset$1 = _tuple[1];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = true;
					offset = _tmp;
					ok = _tmp$1;
					$s = -1; return [offset, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$2 = zone$2.offset;
				_tmp$3 = true;
				offset = _tmp$2;
				ok = _tmp$3;
				$s = -1; return [offset, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.i = i; $f.i$1 = i$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$2], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$7.methods = [{prop: "nsec", name: "nsec", pkg: "time", typ: $funcType([], [$Int32], false)}, {prop: "sec", name: "sec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "unixSec", name: "unixSec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "addSec", name: "addSec", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$2], [], false)}, {prop: "stripMono", name: "stripMono", pkg: "time", typ: $funcType([], [], false)}, {prop: "setMono", name: "setMono", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "mono", name: "mono", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Duration], false)}];
	ptrType$2.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool], false)}];
	ParseError.init("", [{prop: "Layout", name: "Layout", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", anonymous: false, exported: true, typ: $String, tag: ""}]);
	Time.init("time", [{prop: "wall", name: "wall", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "ext", name: "ext", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "loc", name: "loc", anonymous: false, exported: false, typ: ptrType$2, tag: ""}]);
	Location.init("time", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		zoneSources = new sliceType$2([runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		errLocation = errors.New("time: invalid location name");
		badData = errors.New("malformed time zone information");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/poll"] = (function() {
	var $pkg = {}, $init, errors, io, runtime, atomic, syscall, time, pollDesc, TimeoutError, fdMutex, FD, ptrType, chanType, sliceType, ptrType$1, arrayType, sliceType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$2, ptrType$8, funcType, funcType$1, ptrType$9, ptrType$10, ptrType$11, sliceType$3, ptrType$12, semWaiters, runtime_Semacquire, runtime_Semrelease, errClosing, consume, accept;
	errors = $packages["errors"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	pollDesc = $pkg.pollDesc = $newType(0, $kindStruct, "poll.pollDesc", true, "internal/poll", false, function(closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.closing = false;
			return;
		}
		this.closing = closing_;
	});
	TimeoutError = $pkg.TimeoutError = $newType(0, $kindStruct, "poll.TimeoutError", true, "internal/poll", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	fdMutex = $pkg.fdMutex = $newType(0, $kindStruct, "poll.fdMutex", true, "internal/poll", false, function(state_, rsema_, wsema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = new $Uint64(0, 0);
			this.rsema = 0;
			this.wsema = 0;
			return;
		}
		this.state = state_;
		this.rsema = rsema_;
		this.wsema = wsema_;
	});
	FD = $pkg.FD = $newType(0, $kindStruct, "poll.FD", true, "internal/poll", true, function(fdmu_, Sysfd_, pd_, iovecs_, csema_, IsStream_, ZeroReadIsEOF_, isFile_, isBlocking_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fdmu = new fdMutex.ptr(new $Uint64(0, 0), 0, 0);
			this.Sysfd = 0;
			this.pd = new pollDesc.ptr(false);
			this.iovecs = ptrType$2.nil;
			this.csema = 0;
			this.IsStream = false;
			this.ZeroReadIsEOF = false;
			this.isFile = false;
			this.isBlocking = false;
			return;
		}
		this.fdmu = fdmu_;
		this.Sysfd = Sysfd_;
		this.pd = pd_;
		this.iovecs = iovecs_;
		this.csema = csema_;
		this.IsStream = IsStream_;
		this.ZeroReadIsEOF = ZeroReadIsEOF_;
		this.isFile = isFile_;
		this.isBlocking = isBlocking_;
	});
	ptrType = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType = $sliceType(chanType);
	ptrType$1 = $ptrType($Uint64);
	arrayType = $arrayType($Uint8, 4);
	sliceType$1 = $sliceType(syscall.Iovec);
	ptrType$2 = $ptrType(sliceType$1);
	ptrType$3 = $ptrType($Uint8);
	ptrType$4 = $ptrType(FD);
	ptrType$5 = $ptrType(pollDesc);
	ptrType$6 = $ptrType(TimeoutError);
	ptrType$7 = $ptrType(fdMutex);
	sliceType$2 = $sliceType($Uint8);
	ptrType$8 = $ptrType(syscall.Stat_t);
	funcType = $funcType([$Uintptr], [], false);
	funcType$1 = $funcType([$Uintptr], [$Bool], false);
	ptrType$9 = $ptrType(syscall.Linger);
	ptrType$10 = $ptrType(syscall.IPMreq);
	ptrType$11 = $ptrType(syscall.IPv6Mreq);
	sliceType$3 = $sliceType(sliceType$2);
	ptrType$12 = $ptrType(sliceType$3);
	pollDesc.ptr.prototype.init = function(fd) {
		var fd, pd;
		pd = this;
		return $ifaceNil;
	};
	pollDesc.prototype.init = function(fd) { return this.$val.init(fd); };
	pollDesc.ptr.prototype.close = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.close = function() { return this.$val.close(); };
	pollDesc.ptr.prototype.evict = function() {
		var pd;
		pd = this;
		pd.closing = true;
	};
	pollDesc.prototype.evict = function() { return this.$val.evict(); };
	pollDesc.ptr.prototype.prepare = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $ifaceNil;
	};
	pollDesc.prototype.prepare = function(mode, isFile) { return this.$val.prepare(mode, isFile); };
	pollDesc.ptr.prototype.prepareRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(114, isFile);
	};
	pollDesc.prototype.prepareRead = function(isFile) { return this.$val.prepareRead(isFile); };
	pollDesc.ptr.prototype.prepareWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(119, isFile);
	};
	pollDesc.prototype.prepareWrite = function(isFile) { return this.$val.prepareWrite(isFile); };
	pollDesc.ptr.prototype.wait = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $pkg.ErrTimeout;
	};
	pollDesc.prototype.wait = function(mode, isFile) { return this.$val.wait(mode, isFile); };
	pollDesc.ptr.prototype.waitRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(114, isFile);
	};
	pollDesc.prototype.waitRead = function(isFile) { return this.$val.waitRead(isFile); };
	pollDesc.ptr.prototype.waitWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(119, isFile);
	};
	pollDesc.prototype.waitWrite = function(isFile) { return this.$val.waitWrite(isFile); };
	pollDesc.ptr.prototype.pollable = function() {
		return true;
	};
	pollDesc.prototype.pollable = function() { return this.$val.pollable(); };
	FD.ptr.prototype.SetDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	FD.ptr.prototype.SetReadDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	FD.ptr.prototype.SetWriteDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	runtime_Semacquire = function(s) {
		var _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : sliceType.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	errClosing = function(isFile) {
		var isFile;
		if (isFile) {
			return $pkg.ErrFileClosing;
		}
		return $pkg.ErrNetClosing;
	};
	TimeoutError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "i/o timeout";
	};
	TimeoutError.prototype.Error = function() { return this.$val.Error(); };
	TimeoutError.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return true;
	};
	TimeoutError.prototype.Timeout = function() { return this.$val.Timeout(); };
	TimeoutError.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return true;
	};
	TimeoutError.prototype.Temporary = function() { return this.$val.Temporary(); };
	consume = function(v, n) {
		var ln0, n, v, x, x$1, x$2, x$3;
		while (true) {
			if (!(v.$get().$length > 0)) { break; }
			ln0 = (new $Int64(0, (x = v.$get(), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).$length));
			if ((ln0.$high > n.$high || (ln0.$high === n.$high && ln0.$low > n.$low))) {
				(x$2 = v.$get(), (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0] = $subslice((x$1 = v.$get(), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $flatten64(n))));
				return;
			}
			n = (x$3 = ln0, new $Int64(n.$high - x$3.$high, n.$low - x$3.$low));
			v.$set($subslice((v.$get()), 1));
		}
	};
	fdMutex.ptr.prototype.incref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(old.$high + 0, old.$low + 8);
			if ((x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return true;
			}
		}
	};
	fdMutex.prototype.incref = function() { return this.$val.incref(); };
	fdMutex.ptr.prototype.increfAndClose = function() {
		var mu, new$1, old, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; mu = $f.mu; new$1 = $f.new$1; old = $f.old; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = (x$1 = new $Uint64(old.$high | 0, (old.$low | 1) >>> 0), new $Uint64(x$1.$high + 0, x$1.$low + 8));
			if ((x$2 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$2.$high === 0 && x$2.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$3 = new $Uint64(2147483647, 4286578688), new $Uint64(new$1.$high & ~x$3.$high, (new$1.$low & ~x$3.$low) >>> 0));
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* while (true) { */ case 5:
					/* if (!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { break; } */ if(!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { $s = 6; continue; }
					old = (x$5 = new $Uint64(0, 8388608), new $Uint64(old.$high - x$5.$high, old.$low - x$5.$low));
					$r = runtime_Semrelease((mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ $s = 5; continue; case 6:
				/* while (true) { */ case 8:
					/* if (!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { break; } */ if(!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { $s = 9; continue; }
					old = (x$7 = new $Uint64(2048, 0), new $Uint64(old.$high - x$7.$high, old.$low - x$7.$low));
					$r = runtime_Semrelease((mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ $s = 8; continue; case 9:
				$s = -1; return true;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.increfAndClose }; } $f.mu = mu; $f.new$1 = new$1; $f.old = old; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.increfAndClose = function() { return this.$val.increfAndClose(); };
	fdMutex.ptr.prototype.decref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x.$high === 0 && x.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = new $Uint64(old.$high - 0, old.$low - 8);
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return (x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$1.$high === 0 && x$1.$low === 1));
			}
		}
	};
	fdMutex.prototype.decref = function() { return this.$val.decref(); };
	fdMutex.ptr.prototype.rwlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; mu = $f.mu; mutexBit = $f.mutexBit; mutexMask = $f.mutexMask; mutexSema = $f.mutexSema; mutexWait = $f.mutexWait; new$1 = $f.new$1; old = $f.old; read = $f.read; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = new $Uint64(0, 0);
			if ((x$1 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				new$1 = (x$2 = new $Uint64(old.$high | mutexBit.$high, (old.$low | mutexBit.$low) >>> 0), new $Uint64(x$2.$high + 0, x$2.$low + 8));
				if ((x$3 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$3.$high === 0 && x$3.$low === 0))) {
					$panic(new $String("inconsistent poll.fdMutex"));
				}
			} else {
				new$1 = new $Uint64(old.$high + mutexWait.$high, old.$low + mutexWait.$low);
				if ((x$4 = new $Uint64(new$1.$high & mutexMask.$high, (new$1.$low & mutexMask.$low) >>> 0), (x$4.$high === 0 && x$4.$low === 0))) {
					$panic(new $String("inconsistent poll.fdMutex"));
				}
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				if ((x$5 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0))) {
					$s = -1; return true;
				}
				$r = runtime_Semacquire(mutexSema); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.rwlock }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.mu = mu; $f.mutexBit = mutexBit; $f.mutexMask = mutexMask; $f.mutexSema = mutexSema; $f.mutexWait = mutexWait; $f.new$1 = new$1; $f.old = old; $f.read = read; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.rwlock = function(read) { return this.$val.rwlock(read); };
	fdMutex.ptr.prototype.rwunlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; mu = $f.mu; mutexBit = $f.mutexBit; mutexMask = $f.mutexMask; mutexSema = $f.mutexSema; mutexWait = $f.mutexWait; new$1 = $f.new$1; old = $f.old; read = $f.read; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x.$high === 0 && x.$low === 0)) || (x$1 = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$2 = new $Uint64(old.$high & ~mutexBit.$high, (old.$low & ~mutexBit.$low) >>> 0), new $Uint64(x$2.$high - 0, x$2.$low - 8));
			if (!((x$3 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$3.$high === 0 && x$3.$low === 0)))) {
				new$1 = (x$4 = mutexWait, new $Uint64(new$1.$high - x$4.$high, new$1.$low - x$4.$low));
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* */ if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { */ case 5:
					$r = runtime_Semrelease(mutexSema); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				$s = -1; return (x$6 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$6.$high === 0 && x$6.$low === 1));
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.rwunlock }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.mu = mu; $f.mutexBit = mutexBit; $f.mutexMask = mutexMask; $f.mutexSema = mutexSema; $f.mutexWait = mutexWait; $f.new$1 = new$1; $f.old = old; $f.read = read; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.rwunlock = function(read) { return this.$val.rwunlock(read); };
	FD.ptr.prototype.incref = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.incref()) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.incref = function() { return this.$val.incref(); };
	FD.ptr.prototype.decref = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.decref()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.decref()) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.decref }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.decref = function() { return this.$val.decref(); };
	FD.ptr.prototype.readLock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.readLock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.readLock = function() { return this.$val.readLock(); };
	FD.ptr.prototype.readUnlock = function() {
		var _r, _r$1, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.readUnlock }; } $f._r = _r; $f._r$1 = _r$1; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.readUnlock = function() { return this.$val.readUnlock(); };
	FD.ptr.prototype.writeLock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.writeLock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.writeLock = function() { return this.$val.writeLock(); };
	FD.ptr.prototype.writeUnlock = function() {
		var _r, _r$1, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.writeUnlock }; } $f._r = _r; $f._r$1 = _r$1; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.writeUnlock = function() { return this.$val.writeUnlock(); };
	FD.ptr.prototype.eofError = function(n, err) {
		var err, fd, n;
		fd = this;
		if ((n === 0) && $interfaceIsEqual(err, $ifaceNil) && fd.ZeroReadIsEOF) {
			return io.EOF;
		}
		return err;
	};
	FD.prototype.eofError = function(n, err) { return this.$val.eofError(n, err); };
	FD.ptr.prototype.Fchmod = function(mode) {
		var err, fd, mode, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; mode = $f.mode; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchmod(fd.Sysfd, mode);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchmod }; } $f.err = err; $f.fd = fd; $f.mode = mode; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchmod = function(mode) { return this.$val.Fchmod(mode); };
	FD.ptr.prototype.Fchown = function(uid, gid) {
		var err, fd, gid, uid, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; gid = $f.gid; uid = $f.uid; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchown(fd.Sysfd, uid, gid);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchown }; } $f.err = err; $f.fd = fd; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchown = function(uid, gid) { return this.$val.Fchown(uid, gid); };
	FD.ptr.prototype.Ftruncate = function(size) {
		var err, fd, size, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; size = $f.size; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Ftruncate(fd.Sysfd, size);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Ftruncate }; } $f.err = err; $f.fd = fd; $f.size = size; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Ftruncate = function(size) { return this.$val.Ftruncate(size); };
	FD.ptr.prototype.Fsync = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fsync(fd.Sysfd);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fsync }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fsync = function() { return this.$val.Fsync(); };
	FD.ptr.prototype.Init = function(net, pollable) {
		var fd, net, pollable;
		fd = this;
		if (net === "file") {
			fd.isFile = true;
		}
		if (!pollable) {
			fd.isBlocking = true;
			return $ifaceNil;
		}
		return fd.pd.init(fd);
	};
	FD.prototype.Init = function(net, pollable) { return this.$val.Init(net, pollable); };
	FD.ptr.prototype.destroy = function() {
		var _r, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		fd.pd.close();
		_r = $pkg.CloseFunc(fd.Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		fd.Sysfd = -1;
		$r = runtime_Semrelease((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.destroy }; } $f._r = _r; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.destroy = function() { return this.$val.destroy(); };
	FD.ptr.prototype.Close = function() {
		var _r, _r$1, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.increfAndClose(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		fd.pd.evict();
		_r$1 = fd.decref(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		/* */ if (!fd.isBlocking) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!fd.isBlocking) { */ case 5:
			$r = runtime_Semacquire((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Close }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Close = function() { return this.$val.Close(); };
	FD.ptr.prototype.Shutdown = function(how) {
		var err, fd, how, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; how = $f.how; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Shutdown(fd.Sysfd, how);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Shutdown }; } $f.err = err; $f.fd = fd; $f.how = how; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Shutdown = function(how) { return this.$val.Shutdown(how); };
	FD.ptr.prototype.SetBlocking = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		fd.isBlocking = true;
		$s = -1; return syscall.SetNonblock(fd.Sysfd, false);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetBlocking }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetBlocking = function() { return this.$val.SetBlocking(); };
	FD.ptr.prototype.Read = function(p) {
		var _r, _tuple, err, err$1, err$2, fd, n, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		if (p.$length === 0) {
			$s = -1; return [0, $ifaceNil];
		}
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		while (true) {
			_tuple = syscall.Read(fd.Sysfd, p);
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
				if (true && $interfaceIsEqual(err$2, new syscall.Errno(4))) {
					continue;
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, err$2];
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Read }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Read = function(p) { return this.$val.Read(p); };
	FD.ptr.prototype.Pread = function(p, off) {
		var _r, _tuple, err, err$1, fd, n, off, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; off = $f.off; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		_tuple = syscall.Pread(fd.Sysfd, p, off);
		n = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			n = 0;
		}
		_r = fd.decref(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		err$1 = fd.eofError(n, err$1);
		$s = -1; return [n, err$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pread }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.off = off; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Pread = function(p, off) { return this.$val.Pread(p, off); };
	FD.ptr.prototype.ReadFrom = function(p) {
		var _r, _tuple, err, err$1, err$2, fd, n, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, $ifaceNil, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, $ifaceNil, err$1];
		}
		while (true) {
			_tuple = syscall.Recvfrom(fd.Sysfd, p, 0);
			n = _tuple[0];
			sa = _tuple[1];
			err$2 = _tuple[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, sa, err$2];
		}
		$s = -1; return [0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadFrom }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadFrom = function(p) { return this.$val.ReadFrom(p); };
	FD.ptr.prototype.ReadMsg = function(p, oob) {
		var _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; flags = $f.flags; n = $f.n; oob = $f.oob; oobn = $f.oobn; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, 0, 0, $ifaceNil, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, 0, 0, $ifaceNil, err$1];
		}
		while (true) {
			_tuple = syscall.Recvmsg(fd.Sysfd, p, oob, 0);
			n = _tuple[0];
			oobn = _tuple[1];
			flags = _tuple[2];
			sa = _tuple[3];
			err$2 = _tuple[4];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, oobn, flags, sa, err$2];
		}
		$s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadMsg }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.flags = flags; $f.n = n; $f.oob = oob; $f.oobn = oobn; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadMsg = function(p, oob) { return this.$val.ReadMsg(p, oob); };
	FD.ptr.prototype.Write = function(p) {
		var _r, _tuple, err, err$1, err$2, fd, max, n, nn, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		nn = 0;
		while (true) {
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_tuple = syscall.Write(fd.Sysfd, $subslice(p, nn, max));
			n = _tuple[0];
			err$2 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				$s = -1; return [nn, err$2];
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [nn, err$2];
			}
			if (n === 0) {
				$s = -1; return [nn, io.ErrUnexpectedEOF];
			}
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Write }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Write = function(p) { return this.$val.Write(p); };
	FD.ptr.prototype.Pwrite = function(p, off) {
		var _tuple, err, err$1, fd, max, n, nn, off, p, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; off = $f.off; p = $f.p; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		nn = 0;
		while (true) {
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_tuple = syscall.Pwrite(fd.Sysfd, $subslice(p, nn, max), (x = (new $Int64(0, nn)), new $Int64(off.$high + x.$high, off.$low + x.$low)));
			n = _tuple[0];
			err$1 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				$s = -1; return [nn, err$1];
			}
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [nn, err$1];
			}
			if (n === 0) {
				$s = -1; return [nn, io.ErrUnexpectedEOF];
			}
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pwrite }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.off = off; $f.p = p; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Pwrite = function(p, off) { return this.$val.Pwrite(p, off); };
	FD.ptr.prototype.WriteTo = function(p, sa) {
		var _r, _r$1, err, err$1, err$2, fd, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		/* while (true) { */ case 2:
			_r$1 = syscall.Sendto(fd.Sysfd, p, 0, sa); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err$2 = _r$1;
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 2; continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [0, err$2];
			}
			$s = -1; return [p.$length, $ifaceNil];
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteTo }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteTo = function(p, sa) { return this.$val.WriteTo(p, sa); };
	FD.ptr.prototype.WriteMsg = function(p, oob, sa) {
		var _r, _r$1, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; oob = $f.oob; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, 0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, 0, err$1];
		}
		/* while (true) { */ case 2:
			_r$1 = syscall.SendmsgN(fd.Sysfd, p, oob, sa, 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 2; continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [n, 0, err$2];
			}
			$s = -1; return [n, oob.$length, err$2];
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteMsg }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.oob = oob; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteMsg = function(p, oob, sa) { return this.$val.WriteMsg(p, oob, sa); };
	FD.ptr.prototype.Accept = function() {
		var _1, _r, _r$1, _tuple, err, err$1, err$2, errcall, fd, rsa, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; errcall = $f.errcall; fd = $f.fd; rsa = $f.rsa; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "", err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "", err$1];
		}
		/* while (true) { */ case 2:
			_r$1 = accept(fd.Sysfd); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			s = _tuple[0];
			rsa = _tuple[1];
			errcall = _tuple[2];
			err$2 = _tuple[3];
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				$s = -1; return [s, rsa, "", err$2];
			}
			_1 = err$2;
			if ($interfaceIsEqual(_1, new syscall.Errno((35)))) {
				if (fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 2; continue;
					}
				}
			} else if ($interfaceIsEqual(_1, new syscall.Errno((53)))) {
				/* continue; */ $s = 2; continue;
			}
			$s = -1; return [-1, $ifaceNil, errcall, err$2];
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [0, $ifaceNil, "", $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Accept }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.errcall = errcall; $f.fd = fd; $f.rsa = rsa; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Accept = function() { return this.$val.Accept(); };
	FD.ptr.prototype.Seek = function(offset, whence) {
		var err, fd, offset, whence, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; offset = $f.offset; whence = $f.whence; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Seek(fd.Sysfd, offset, whence);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Seek }; } $f.err = err; $f.fd = fd; $f.offset = offset; $f.whence = whence; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	FD.ptr.prototype.ReadDirent = function(buf) {
		var _tuple, buf, err, err$1, fd, n, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; buf = $f.buf; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		while (true) {
			_tuple = syscall.ReadDirent(fd.Sysfd, buf);
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$1, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$1 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$1, $ifaceNil)) {
						continue;
					}
				}
			}
			$s = -1; return [n, err$1];
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadDirent }; } $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadDirent = function(buf) { return this.$val.ReadDirent(buf); };
	FD.ptr.prototype.Fchdir = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchdir(fd.Sysfd);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchdir }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchdir = function() { return this.$val.Fchdir(); };
	FD.ptr.prototype.Fstat = function(s) {
		var err, fd, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fstat(fd.Sysfd, s);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fstat }; } $f.err = err; $f.fd = fd; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fstat = function(s) { return this.$val.Fstat(s); };
	FD.ptr.prototype.WaitWrite = function() {
		var fd;
		fd = this;
		return fd.pd.waitWrite(fd.isFile);
	};
	FD.prototype.WaitWrite = function() { return this.$val.WaitWrite(); };
	FD.ptr.prototype.WriteOnce = function(p) {
		var _r, err, fd, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; fd = $f.fd; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		$s = -1; return syscall.Write(fd.Sysfd, p);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteOnce }; } $f._r = _r; $f.err = err; $f.fd = fd; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteOnce = function(p) { return this.$val.WriteOnce(p); };
	FD.ptr.prototype.RawControl = function(f) {
		var err, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$r = f(((fd.Sysfd >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawControl }; } $f.err = err; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawControl = function(f) { return this.$val.RawControl(f); };
	FD.ptr.prototype.RawRead = function(f) {
		var _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* while (true) { */ case 2:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return $ifaceNil;
			/* } */ case 5:
			err$2 = fd.pd.waitRead(fd.isFile);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawRead }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawRead = function(f) { return this.$val.RawRead(f); };
	FD.ptr.prototype.RawWrite = function(f) {
		var _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* while (true) { */ case 2:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return $ifaceNil;
			/* } */ case 5:
			err$2 = fd.pd.waitWrite(fd.isFile);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawWrite }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawWrite = function(f) { return this.$val.RawWrite(f); };
	FD.ptr.prototype.SetsockoptInt = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptInt(fd.Sysfd, level, name, arg);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInt }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInt = function(level, name, arg) { return this.$val.SetsockoptInt(level, name, arg); };
	FD.ptr.prototype.SetsockoptInet4Addr = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptInet4Addr(fd.Sysfd, level, name, $clone(arg, arrayType));
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInet4Addr }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInet4Addr = function(level, name, arg) { return this.$val.SetsockoptInet4Addr(level, name, arg); };
	FD.ptr.prototype.SetsockoptLinger = function(level, name, l) {
		var err, fd, l, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; l = $f.l; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptLinger(fd.Sysfd, level, name, l);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptLinger }; } $f.err = err; $f.fd = fd; $f.l = l; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptLinger = function(level, name, l) { return this.$val.SetsockoptLinger(level, name, l); };
	FD.ptr.prototype.SetsockoptByte = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptByte(fd.Sysfd, level, name, arg);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptByte }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptByte = function(level, name, arg) { return this.$val.SetsockoptByte(level, name, arg); };
	FD.ptr.prototype.SetsockoptIPMreq = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPMreq(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPMreq }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPMreq = function(level, name, mreq) { return this.$val.SetsockoptIPMreq(level, name, mreq); };
	FD.ptr.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPv6Mreq(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPv6Mreq }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) { return this.$val.SetsockoptIPv6Mreq(level, name, mreq); };
	accept = function(s) {
		var _r, _r$1, _tuple, err, ns, s, sa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; ns = $f.ns; s = $f.s; sa = $f.sa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.AcceptFunc(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ns = _tuple[0];
		sa = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			syscall.CloseOnExec(ns);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "accept", err];
		}
		err = syscall.SetNonblock(ns, true);
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = $pkg.CloseFunc(ns); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return [-1, $ifaceNil, "setnonblock", err];
		/* } */ case 3:
		$s = -1; return [ns, sa, "", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: accept }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.ns = ns; $f.s = s; $f.sa = sa; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.ptr.prototype.Writev = function(v) {
		var _i, _r, _ref, _tuple, chunk, e0, err, err$1, err$2, fd, iovecs, maxVec, n, v, wrote, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; chunk = $f.chunk; e0 = $f.e0; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; iovecs = $f.iovecs; maxVec = $f.maxVec; n = $f.n; v = $f.v; wrote = $f.wrote; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		iovecs = [iovecs];
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err$1];
		}
		iovecs[0] = sliceType$1.nil;
		if (!(fd.iovecs === ptrType$2.nil)) {
			iovecs[0] = fd.iovecs.$get();
		}
		maxVec = 1024;
		n = new $Int64(0, 0);
		err$2 = $ifaceNil;
		/* while (true) { */ case 2:
			/* if (!(v.$get().$length > 0)) { break; } */ if(!(v.$get().$length > 0)) { $s = 3; continue; }
			iovecs[0] = $subslice(iovecs[0], 0, 0);
			_ref = v.$get();
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				chunk = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (chunk.$length === 0) {
					_i++;
					/* continue; */ $s = 4; continue;
				}
				iovecs[0] = $append(iovecs[0], new syscall.Iovec.ptr($indexPtr(chunk.$array, chunk.$offset + 0, ptrType$3), new $Uint64(0, 0)));
				if (fd.IsStream && chunk.$length > 1073741824) {
					(x = iovecs[0].$length - 1 >> 0, ((x < 0 || x >= iovecs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs[0].$array[iovecs[0].$offset + x])).SetLen(1073741824);
					/* break; */ $s = 5; continue;
				}
				(x$1 = iovecs[0].$length - 1 >> 0, ((x$1 < 0 || x$1 >= iovecs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs[0].$array[iovecs[0].$offset + x$1])).SetLen(chunk.$length);
				if (iovecs[0].$length === maxVec) {
					/* break; */ $s = 5; continue;
				}
				_i++;
			/* } */ $s = 4; continue; case 5:
			if (iovecs[0].$length === 0) {
				/* break; */ $s = 3; continue;
			}
			fd.iovecs = (iovecs.$ptr || (iovecs.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, iovecs)));
			_tuple = syscall.Syscall(121, ((fd.Sysfd >>> 0)), (($sliceToArray(iovecs[0]))), ((iovecs[0].$length >>> 0)));
			wrote = _tuple[0];
			e0 = _tuple[2];
			if (wrote === 4294967295) {
				wrote = 0;
			}
			$r = $pkg.TestHookDidWritev(((wrote >> 0))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = (x$2 = (new $Int64(0, wrote.constructor === Number ? wrote : 1)), new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			consume(v, (new $Int64(0, wrote.constructor === Number ? wrote : 1)));
			if (e0 === 35) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 2; continue;
				}
			} else if (!((e0 === 0))) {
				err$2 = new syscall.Errno((e0));
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				/* break; */ $s = 3; continue;
			}
			if ((n.$high === 0 && n.$low === 0)) {
				err$2 = io.ErrUnexpectedEOF;
				/* break; */ $s = 3; continue;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [n, err$2];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Writev }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.chunk = chunk; $f.e0 = e0; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.iovecs = iovecs; $f.maxVec = maxVec; $f.n = n; $f.v = v; $f.wrote = wrote; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Writev = function(v) { return this.$val.Writev(v); };
	ptrType$5.methods = [{prop: "init", name: "init", pkg: "internal/poll", typ: $funcType([ptrType$4], [$error], false)}, {prop: "close", name: "close", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "evict", name: "evict", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "prepare", name: "prepare", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "prepareRead", name: "prepareRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "prepareWrite", name: "prepareWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "wait", name: "wait", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "waitRead", name: "waitRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitWrite", name: "waitWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitCanceled", name: "waitCanceled", pkg: "internal/poll", typ: $funcType([$Int], [], false)}, {prop: "pollable", name: "pollable", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}];
	ptrType$6.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$7.methods = [{prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "increfAndClose", name: "increfAndClose", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "rwlock", name: "rwlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}, {prop: "rwunlock", name: "rwunlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}];
	ptrType$4.methods = [{prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readLock", name: "readLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readUnlock", name: "readUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "writeLock", name: "writeLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "writeUnlock", name: "writeUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "eofError", name: "eofError", pkg: "internal/poll", typ: $funcType([$Int, $error], [$error], false)}, {prop: "Fchmod", name: "Fchmod", pkg: "", typ: $funcType([$Uint32], [$error], false)}, {prop: "Fchown", name: "Fchown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Ftruncate", name: "Ftruncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Fsync", name: "Fsync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([$String, $Bool], [$error], false)}, {prop: "destroy", name: "destroy", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Shutdown", name: "Shutdown", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "SetBlocking", name: "SetBlocking", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "Pread", name: "Pread", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([sliceType$2], [$Int, syscall.Sockaddr, $error], false)}, {prop: "ReadMsg", name: "ReadMsg", pkg: "", typ: $funcType([sliceType$2, sliceType$2], [$Int, $Int, $Int, syscall.Sockaddr, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "Pwrite", name: "Pwrite", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([sliceType$2, syscall.Sockaddr], [$Int, $error], false)}, {prop: "WriteMsg", name: "WriteMsg", pkg: "", typ: $funcType([sliceType$2, sliceType$2, syscall.Sockaddr], [$Int, $Int, $error], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([], [$Int, syscall.Sockaddr, $String, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "ReadDirent", name: "ReadDirent", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "Fchdir", name: "Fchdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fstat", name: "Fstat", pkg: "", typ: $funcType([ptrType$8], [$error], false)}, {prop: "WaitWrite", name: "WaitWrite", pkg: "", typ: $funcType([], [$error], false)}, {prop: "WriteOnce", name: "WriteOnce", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "RawControl", name: "RawControl", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "RawRead", name: "RawRead", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "RawWrite", name: "RawWrite", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "SetsockoptInt", name: "SetsockoptInt", pkg: "", typ: $funcType([$Int, $Int, $Int], [$error], false)}, {prop: "SetsockoptInet4Addr", name: "SetsockoptInet4Addr", pkg: "", typ: $funcType([$Int, $Int, arrayType], [$error], false)}, {prop: "SetsockoptLinger", name: "SetsockoptLinger", pkg: "", typ: $funcType([$Int, $Int, ptrType$9], [$error], false)}, {prop: "SetsockoptByte", name: "SetsockoptByte", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [$error], false)}, {prop: "SetsockoptIPMreq", name: "SetsockoptIPMreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$10], [$error], false)}, {prop: "SetsockoptIPv6Mreq", name: "SetsockoptIPv6Mreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$11], [$error], false)}, {prop: "Writev", name: "Writev", pkg: "", typ: $funcType([ptrType$12], [$Int64, $error], false)}];
	pollDesc.init("internal/poll", [{prop: "closing", name: "closing", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	TimeoutError.init("", []);
	fdMutex.init("internal/poll", [{prop: "state", name: "state", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "rsema", name: "rsema", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "wsema", name: "wsema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	FD.init("internal/poll", [{prop: "fdmu", name: "fdmu", anonymous: false, exported: false, typ: fdMutex, tag: ""}, {prop: "Sysfd", name: "Sysfd", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "pd", name: "pd", anonymous: false, exported: false, typ: pollDesc, tag: ""}, {prop: "iovecs", name: "iovecs", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "csema", name: "csema", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "IsStream", name: "IsStream", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "ZeroReadIsEOF", name: "ZeroReadIsEOF", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "isFile", name: "isFile", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "isBlocking", name: "isBlocking", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		semWaiters = {};
		$pkg.ErrNetClosing = errors.New("use of closed network connection");
		$pkg.ErrFileClosing = errors.New("use of closed file");
		$pkg.ErrNoDeadline = errors.New("file type does not support deadline");
		$pkg.ErrTimeout = new TimeoutError.ptr();
		$pkg.TestHookDidWritev = (function(wrote) {
			var wrote;
		});
		$pkg.CloseFunc = syscall.Close;
		$pkg.AcceptFunc = syscall.Accept;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/testlog"] = (function() {
	var $pkg = {}, $init, atomic, Interface, ptrType, logger, Logger, Getenv, Open, Stat;
	atomic = $packages["sync/atomic"];
	Interface = $pkg.Interface = $newType(8, $kindInterface, "testlog.Interface", true, "internal/testlog", true, null);
	ptrType = $ptrType(Interface);
	Logger = function() {
		var impl;
		impl = logger.Load();
		if ($interfaceIsEqual(impl, $ifaceNil)) {
			return $ifaceNil;
		}
		return $assertType(impl, ptrType).$get();
	};
	$pkg.Logger = Logger;
	Getenv = function(name) {
		var log, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; log = $f.log; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Getenv(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Getenv }; } $f.log = log; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Getenv = Getenv;
	Open = function(name) {
		var log, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; log = $f.log; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Open(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Open }; } $f.log = log; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Open = Open;
	Stat = function(name) {
		var log, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; log = $f.log; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Stat(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stat }; } $f.log = log; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stat = Stat;
	Interface.init([{prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Getenv", name: "Getenv", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Open", name: "Open", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([$String], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = atomic.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		logger = new atomic.Value.ptr($ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, poll, testlog, io, runtime, sync, atomic, syscall, time, timeout, PathError, SyscallError, LinkError, file, dirInfo, File, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, arrayType, sliceType$5, ptrType$12, ptrType$13, funcType$1, ptrType$15, arrayType$3, arrayType$5, ptrType$16, errFinished, lstat, useSyscallwd, runtime_args, init, runtime_beforeExit, Getenv, NewSyscallError, IsExist, IsNotExist, underlyingError, wrapSyscallError, isExist, isNotExist, Getpid, Mkdir, Create, OpenFile, Rename, TempDir, Chmod, sigpipe, syscallMode, chmod, fixLongPath, rename, NewFile, newFile, epipecheck, openFileNolog, tempDir, init$1, useSyscallwdDarwin, IsPathSeparator, basename, init$2, Exit, Stat, Lstat, fillFileStatFromSys, timespecToTime, statNolog, lstatNolog;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	poll = $packages["internal/poll"];
	testlog = $packages["internal/testlog"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	timeout = $pkg.timeout = $newType(8, $kindInterface, "os.timeout", true, "os", false, null);
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", true, "os", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(pfd_, name_, dirinfo_, nonblock_, stdoutOrErr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pfd = new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), 0, new poll.pollDesc.ptr(false), ptrType$12.nil, 0, false, false, false, false);
			this.name = "";
			this.dirinfo = ptrType$1.nil;
			this.nonblock = false;
			this.stdoutOrErr = false;
			return;
		}
		this.pfd = pfd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.nonblock = nonblock_;
		this.stdoutOrErr = stdoutOrErr_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$2.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$13.nil;
			return;
		}
		this.file = file_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", true, "os", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", true, "os", true, null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil);
			this.sys = new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero());
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(File);
	sliceType$1 = $sliceType(FileInfo);
	ptrType$1 = $ptrType(dirInfo);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(PathError);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	arrayType = $arrayType($Uint8, 4);
	sliceType$5 = $sliceType(syscall.Iovec);
	ptrType$12 = $ptrType(sliceType$5);
	ptrType$13 = $ptrType(file);
	funcType$1 = $funcType([ptrType$13], [$error], false);
	ptrType$15 = $ptrType(time.Location);
	arrayType$3 = $arrayType($Int64, 2);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$16 = $ptrType(fileStat);
	runtime_args = function() {
		return $pkg.Args;
	};
	init = function() {
		var argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	runtime_beforeExit = function() {
	};
	File.ptr.prototype.Readdir = function(n) {
		var _r, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [sliceType$1.nil, $pkg.ErrInvalid];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f._r = _r; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var _r, _tmp, _tmp$1, _tuple, err, f, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			$s = -1; return [names, err];
		}
		_r = f.readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdirnames }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	File.ptr.prototype.readdir = function(n) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$1.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_r = f.Readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$1, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = lstat(dirname + "/" + filename); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				$s = -1; return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 2; continue; case 3:
		if ((fi.$length === 0) && $interfaceIsEqual(err, $ifaceNil) && n > 0) {
			err = io.EOF;
		}
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		$s = -1; return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.readdirnames = function(n) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, d, err, errno, f, n, names, nb, nc, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; errno = $f.errno; f = $f.f; n = $f.n; names = $f.names; nb = $f.nb; nc = $f.nc; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType$1.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$2.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$2, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		/* while (true) { */ case 1:
			/* if (!(!((n === 0)))) { break; } */ if(!(!((n === 0)))) { $s = 2; continue; }
			/* */ if (d.bufp >= d.nbuf) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.bufp >= d.nbuf) { */ case 3:
				d.bufp = 0;
				errno = $ifaceNil;
				_r = f.file.pfd.ReadDirent(d.buf); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				runtime.KeepAlive(f);
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = wrapSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					$s = -1; return [names, err];
				}
				if (d.nbuf <= 0) {
					/* break; */ $s = 2; continue;
				}
			/* } */ case 4:
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$1 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$1[0];
			nc = _tuple$1[1];
			names = _tuple$1[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			$s = -1; return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdirnames }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.errno = errno; $f.f = f; $f.n = n; $f.names = names; $f.nb = nb; $f.nc = nc; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	Getenv = function(key) {
		var _r, _tuple, key, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; key = $f.key; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = testlog.Getenv(key); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = syscall.Getenv(key); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		v = _tuple[0];
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Getenv }; } $f._r = _r; $f._tuple = _tuple; $f.key = key; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Getenv = Getenv;
	PathError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	PathError.ptr.prototype.Timeout = function() {
		var _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Timeout }; } $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Timeout = function() { return this.$val.Timeout(); };
	SyscallError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Timeout = function() {
		var _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Timeout }; } $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Timeout = function() { return this.$val.Timeout(); };
	NewSyscallError = function(syscall$1, err) {
		var err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsExist = function(err) {
		var err;
		return isExist(err);
	};
	$pkg.IsExist = IsExist;
	IsNotExist = function(err) {
		var err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	underlyingError = function(err) {
		var _ref, err, err$1, err$2, err$3;
		_ref = err;
		if ($assertType(_ref, ptrType$2, true)[1]) {
			err$1 = _ref.$val;
			return err$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			err$2 = _ref.$val;
			return err$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			err$3 = _ref.$val;
			return err$3.Err;
		}
		return err;
	};
	wrapSyscallError = function(name, err) {
		var _tuple, err, name, ok;
		_tuple = $assertType(err, syscall.Errno, true);
		ok = _tuple[1];
		if (ok) {
			err = NewSyscallError(name, err);
		}
		return err;
	};
	isExist = function(err) {
		var err;
		err = underlyingError(err);
		return $interfaceIsEqual(err, new syscall.Errno(17)) || $interfaceIsEqual(err, new syscall.Errno(66)) || $interfaceIsEqual(err, $pkg.ErrExist);
	};
	isNotExist = function(err) {
		var err;
		err = underlyingError(err);
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	Getpid = function() {
		return syscall.Getpid();
	};
	$pkg.Getpid = Getpid;
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("read", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new PathError.ptr("readat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pread(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("read", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.ReadAt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = f.wrapErr("write", e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new PathError.ptr("writeat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pwrite(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("write", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteAt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; offset = $f.offset; r = $f.r; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("seek");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		_r = f.seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$1.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = f.wrapErr("seek", e);
			ret = _tmp$2;
			err = _tmp$3;
			$s = -1; return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Seek }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.offset = offset; $f.r = r; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var _r, _tuple, err, f, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.Write((new sliceType$2($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteString }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Mkdir = function(name, perm) {
		var e, name, perm;
		e = syscall.Mkdir(fixLongPath(name), syscallMode(perm));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("mkdir", name, e);
		}
		if (true && !((((perm & 1048576) >>> 0) === 0))) {
			Chmod(name, perm);
		}
		return $ifaceNil;
	};
	$pkg.Mkdir = Mkdir;
	Create = function(name) {
		var _r, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = OpenFile(name, 1538, 438); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Create }; } $f._r = _r; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Create = Create;
	OpenFile = function(name, flag, perm) {
		var _r, flag, name, perm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; flag = $f.flag; name = $f.name; perm = $f.perm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = testlog.Open(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = openFileNolog(name, flag, perm); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OpenFile }; } $f._r = _r; $f.flag = flag; $f.name = name; $f.perm = perm; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.OpenFile = OpenFile;
	Rename = function(oldpath, newpath) {
		var _r, newpath, oldpath, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; newpath = $f.newpath; oldpath = $f.oldpath; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = rename(oldpath, newpath); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rename }; } $f._r = _r; $f.newpath = newpath; $f.oldpath = oldpath; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Rename = Rename;
	File.ptr.prototype.wrapErr = function(op, err) {
		var err, f, op;
		f = this;
		if ($interfaceIsEqual(err, $ifaceNil) || $interfaceIsEqual(err, io.EOF)) {
			return err;
		}
		if ($interfaceIsEqual(err, poll.ErrFileClosing)) {
			err = $pkg.ErrClosed;
		}
		return new PathError.ptr(op, f.file.name, err);
	};
	File.prototype.wrapErr = function(op, err) { return this.$val.wrapErr(op, err); };
	TempDir = function() {
		var _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = tempDir(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TempDir }; } $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TempDir = TempDir;
	Chmod = function(name, mode) {
		var mode, name;
		return chmod(name, mode);
	};
	$pkg.Chmod = Chmod;
	File.ptr.prototype.Chmod = function(mode) {
		var _r, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.chmod(mode); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chmod }; } $f._r = _r; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.SetDeadline = function(t) {
		var f, t;
		f = this;
		return f.setDeadline($clone(t, time.Time));
	};
	File.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	File.ptr.prototype.SetReadDeadline = function(t) {
		var f, t;
		f = this;
		return f.setReadDeadline($clone(t, time.Time));
	};
	File.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	File.ptr.prototype.SetWriteDeadline = function(t) {
		var f, t;
		f = this;
		return f.setWriteDeadline($clone(t, time.Time));
	};
	File.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var i, o;
		o = 0;
		o = (o | (((new FileMode(i).Perm() >>> 0)))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	chmod = function(name, mode) {
		var e, mode, name;
		e = syscall.Chmod(fixLongPath(name), syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", name, e);
		}
		return $ifaceNil;
	};
	File.ptr.prototype.chmod = function(mode) {
		var _r, e, err, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chmod");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchmod(syscallMode(mode)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chmod", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.chmod }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.chmod = function(mode) { return this.$val.chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var _r, e, err, f, gid, uid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; gid = $f.gid; uid = $f.uid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chown");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchown(uid, gid); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chown", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chown }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var _r, e, err, f, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("truncate");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Ftruncate(size); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("truncate", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Truncate }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var _r, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("sync");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fsync(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("sync", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Sync }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Chdir = function() {
		var _r, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chdir");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchdir(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chdir", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chdir }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	File.ptr.prototype.setDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetDeadline($clone(t, time.Time));
	};
	File.prototype.setDeadline = function(t) { return this.$val.setDeadline(t); };
	File.ptr.prototype.setReadDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetReadDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetReadDeadline($clone(t, time.Time));
	};
	File.prototype.setReadDeadline = function(t) { return this.$val.setReadDeadline(t); };
	File.ptr.prototype.setWriteDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetWriteDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetWriteDeadline($clone(t, time.Time));
	};
	File.prototype.setWriteDeadline = function(t) { return this.$val.setWriteDeadline(t); };
	File.ptr.prototype.checkValid = function(op) {
		var f, op;
		f = this;
		if (f === ptrType.nil) {
			return $pkg.ErrInvalid;
		}
		return $ifaceNil;
	};
	File.prototype.checkValid = function(op) { return this.$val.checkValid(op); };
	fixLongPath = function(path) {
		var path;
		return path;
	};
	rename = function(oldname, newname) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _v, err, err$1, fi, newname, ok, oldname, pe, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; err = $f.err; err$1 = $f.err$1; fi = $f.fi; newname = $f.newname; ok = $f.ok; oldname = $f.oldname; pe = $f.pe; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Lstat(newname); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fi = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) { _v = false; $s = 4; continue s; }
		_r$1 = fi.IsDir(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$2 = Lstat(oldname); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tuple$2 = $assertType(err$1, ptrType$2, true);
				pe = _tuple$2[0];
				ok = _tuple$2[1];
				if (ok) {
					err$1 = pe.Err;
				}
				$s = -1; return new LinkError.ptr("rename", oldname, newname, err$1);
			}
			$s = -1; return new LinkError.ptr("rename", oldname, newname, new syscall.Errno(17));
		/* } */ case 3:
		err = syscall.Rename(oldname, newname);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return new LinkError.ptr("rename", oldname, newname, err);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rename }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f.err = err; $f.err$1 = err$1; $f.fi = fi; $f.newname = newname; $f.ok = ok; $f.oldname = oldname; $f.pe = pe; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.ptr.prototype.Fd = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return 4294967295;
		}
		/* */ if (f.file.nonblock) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.file.nonblock) { */ case 1:
			_r = f.file.pfd.SetBlocking(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return ((f.file.pfd.Sysfd >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Fd }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var fd, name;
		return newFile(fd, name, 0);
	};
	$pkg.NewFile = NewFile;
	newFile = function(fd, name, kind) {
		var err, err$1, f, fd, fdi, kind, name, pollable;
		fdi = ((fd >> 0));
		if (fdi < 0) {
			return ptrType.nil;
		}
		f = new File.ptr(new file.ptr(new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), fdi, new poll.pollDesc.ptr(false), ptrType$12.nil, 0, true, true, false, false), name, ptrType$1.nil, false, (fdi === 1) || (fdi === 2)));
		if (false && (kind === 1)) {
			kind = 0;
		}
		pollable = (kind === 1) || (kind === 2);
		err = f.file.pfd.Init("file", pollable);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
		} else if (pollable) {
			err$1 = syscall.SetNonblock(fdi, true);
			if ($interfaceIsEqual(err$1, $ifaceNil)) {
				f.file.nonblock = true;
			}
		}
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$13, "close")));
		return f;
	};
	epipecheck = function(file$1, e) {
		var e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && file$1.file.stdoutOrErr) {
			sigpipe();
		}
	};
	openFileNolog = function(name, flag, perm) {
		var _r, _tuple, _tuple$1, chmod$1, e, err, flag, name, perm, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; chmod$1 = $f.chmod$1; e = $f.e; err = $f.err; flag = $f.flag; name = $f.name; perm = $f.perm; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		chmod$1 = false;
		/* */ if (true && !(((flag & 512) === 0)) && !((((perm & 1048576) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (true && !(((flag & 512) === 0)) && !((((perm & 1048576) >>> 0) === 0))) { */ case 1:
			_r = Stat(name); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			err = _tuple[1];
			if (IsNotExist(err)) {
				chmod$1 = true;
			}
		/* } */ case 2:
		r = 0;
		while (true) {
			e = $ifaceNil;
			_tuple$1 = syscall.Open(name, flag | 16777216, syscallMode(perm));
			r = _tuple$1[0];
			e = _tuple$1[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				break;
			}
			if (true && $interfaceIsEqual(e, new syscall.Errno(4))) {
				continue;
			}
			$s = -1; return [ptrType.nil, new PathError.ptr("open", name, e)];
		}
		if (chmod$1) {
			Chmod(name, perm);
		}
		if (false) {
			syscall.CloseOnExec(r);
		}
		$s = -1; return [newFile(((r >>> 0)), name, 1), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: openFileNolog }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.chmod$1 = chmod$1; $f.e = e; $f.err = err; $f.flag = flag; $f.name = name; $f.perm = perm; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.ptr.prototype.Close = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return $pkg.ErrInvalid;
		}
		_r = f.file.close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Close }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var _r, e, err, file$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; file$1 = $f.file$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		file$1 = this;
		if (file$1 === ptrType$13.nil) {
			$s = -1; return new syscall.Errno(22);
		}
		err = $ifaceNil;
		_r = file$1.pfd.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, poll.ErrFileClosing)) {
				e = $pkg.ErrClosed;
			}
			err = new PathError.ptr("close", file$1.name, e);
		}
		runtime.SetFinalizer(file$1, $ifaceNil);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: file.ptr.prototype.close }; } $f._r = _r; $f.e = e; $f.err = err; $f.file$1 = file$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.read = function(b) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Pread(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pread }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Pwrite(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pwrite }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var _r, _tmp, _tmp$1, _tuple, err, f, offset, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; offset = $f.offset; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ret = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = ret;
		_tmp$1 = err;
		ret = _tmp;
		err = _tmp$1;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.seek }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.offset = offset; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	tempDir = function() {
		var _r, dir, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; dir = $f.dir; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Getenv("TMPDIR"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		dir = _r;
		if (dir === "") {
			if (false) {
				dir = "/data/local/tmp";
			} else {
				dir = "/tmp";
			}
		}
		$s = -1; return dir;
		/* */ } return; } if ($f === undefined) { $f = { $blk: tempDir }; } $f._r = _r; $f.dir = dir; $f.$s = $s; $f.$r = $r; return $f;
	};
	init$1 = function() {
		useSyscallwd = useSyscallwdDarwin;
	};
	useSyscallwdDarwin = function(err) {
		var err;
		return !($interfaceIsEqual(err, new syscall.Errno(45)));
	};
	IsPathSeparator = function(c) {
		var c;
		return 47 === c;
	};
	$pkg.IsPathSeparator = IsPathSeparator;
	basename = function(name) {
		var i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$2 = function() {
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	Exit = function(code) {
		var code;
		if (code === 0) {
			runtime_beforeExit();
		}
		syscall.Exit(code);
	};
	$pkg.Exit = Exit;
	Stat = function(name) {
		var name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = testlog.Stat(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return statNolog(name);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stat }; } $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stat = Stat;
	Lstat = function(name) {
		var name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = testlog.Stat(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return lstatNolog(name);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Lstat }; } $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Lstat = Lstat;
	fillFileStatFromSys = function(fs, name) {
		var _1, fs, name;
		fs.name = basename(name);
		fs.size = fs.sys.Size;
		time.Time.copy(fs.modTime, timespecToTime($clone(fs.sys.Mtimespec, syscall.Timespec)));
		fs.mode = ((((fs.sys.Mode & 511) >>> 0) >>> 0));
		_1 = (fs.sys.Mode & 61440) >>> 0;
		if ((_1 === (24576)) || (_1 === (57344))) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((fs.sys.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((fs.sys.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((fs.sys.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var ts;
		return time.Unix((ts.Sec), (ts.Nsec));
	};
	File.ptr.prototype.Stat = function() {
		var _r, err, f, fs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; f = $f.f; fs = $f.fs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fs = [fs];
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero()));
		_r = f.file.pfd.Fstat(fs[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs[0], f.file.name);
		$s = -1; return [fs[0], $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Stat }; } $f._r = _r; $f.err = err; $f.f = f; $f.fs = fs; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	statNolog = function(name) {
		var err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero()));
		err = syscall.Stat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	lstatNolog = function(name) {
		var err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero()));
		err = syscall.Lstat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	FileMode.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$5.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = (((31 - i >> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c << 24 >>> 24)));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = (((8 - i$1 >> 0) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c$1 << 24 >>> 24)));
			} else {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return ($bytesToString($subslice(new sliceType$2(buf), 0, w)));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "wrapErr", name: "wrapErr", pkg: "os", typ: $funcType([$String, $error], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "chmod", name: "chmod", pkg: "os", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "setDeadline", name: "setDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setReadDeadline", name: "setReadDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setWriteDeadline", name: "setWriteDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "checkValid", name: "checkValid", pkg: "os", typ: $funcType([$String], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$16.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	timeout.init([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	PathError.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	file.init("os", [{prop: "pfd", name: "pfd", anonymous: false, exported: false, typ: poll.FD, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "nonblock", name: "nonblock", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "stdoutOrErr", name: "stdoutOrErr", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	dirInfo.init("os", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "nbuf", name: "nbuf", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	File.init("os", [{prop: "file", name: "file", anonymous: true, exported: false, typ: ptrType$13, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init("os", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", anonymous: false, exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", anonymous: false, exported: false, typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = poll.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = testlog.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.ErrClosed = errors.New("file already closed");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile(((syscall.Stdin >>> 0)), "/dev/stdin");
		$pkg.Stdout = NewFile(((syscall.Stdout >>> 0)), "/dev/stdout");
		$pkg.Stderr = NewFile(((syscall.Stderr >>> 0)), "/dev/stderr");
		useSyscallwd = (function(param) {
			var param;
			return true;
		});
		lstat = Lstat;
		init();
		init$1();
		init$2();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, FullRune, DecodeRune, DecodeRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	FullRune = function(p) {
		var accept, n, p, x, x$1, x$2;
		n = p.$length;
		if (n === 0) {
			return false;
		}
		x$1 = (x = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), ((x < 0 || x >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[x]));
		if (n >= ((((x$1 & 7) >>> 0) >> 0))) {
			return true;
		}
		accept = $clone((x$2 = x$1 >>> 4 << 24 >>> 24, ((x$2 < 0 || x$2 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$2])), acceptRange);
		if (n > 1 && ((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]) < accept.lo || accept.hi < (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]))) {
			return true;
		} else if (n > 2 && ((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) < 128 || 191 < (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]))) {
			return true;
		}
		return false;
	};
	$pkg.FullRune = FullRune;
	DecodeRune = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[p0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((p0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((b1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((p0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((p0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((b2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((s.charCodeAt(0) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((s0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((s1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((s0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((s0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((s2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	RuneLen = function(r) {
		var r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var i, p, r;
		i = ((r >>> 0));
		if (i <= 127) {
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((r << 24 >>> 24)));
			return 1;
		} else if (i <= 2047) {
			$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | (((r >> 6 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | (((r >> 18 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	ValidRune = function(r) {
		var r;
		if (0 <= r && r < 55296) {
			return true;
		} else if (57343 < r && r <= 1114111) {
			return true;
		}
		return false;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", anonymous: false, exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType$3, sliceType$4, sliceType$5, arrayType, sliceType$6, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatInt, Itoa, small, formatBits, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, AppendQuote, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	decimal.ptr.prototype.String = function() {
		var a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return ($bytesToString($subslice(buf, 0, w)));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = (((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0));
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = (((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0));
			dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((dig + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = (((dig$1 + 48 >>> 0) << 24 >>> 24))));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? ((((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0)) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = (((rem + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((rem$1 + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, ((k >>> 0)));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, ((-k >>> 0)));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = (new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - ((flt.mantbits >> 0)) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, ((-f.exp >>> 0)))), ((-f.exp >>> 0))), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, (((-f.exp >>> 0))));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = (((f.exp - exp >> 0) >>> 0));
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = (new $Uint64(0, ((f.mant.$low >>> 0))));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = (new $Uint64(0, ((g.mant.$low >>> 0))));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = (new $Uint64(0, ((cross1.$low >>> 0)))), x$6 = (new $Uint64(0, ((cross2.$low >>> 0)))), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply($clone(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : smallPowersOfTen[adjExp]), extFloat));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = ((63 - flt.mantbits >>> 0) + 1 >>> 0) + (((denormalExp - f.exp >> 0) >>> 0)) >>> 0;
		} else {
			extrabits = 63 - flt.mantbits >>> 0;
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = (new $Int64(halfway.$high, halfway.$low)), x$7 = (new $Int64(0, errors$1)), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = (new $Int64(mant_extra.$high, mant_extra.$low)), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = (new $Int64(mant_extra.$high, mant_extra.$low)), x$10 = (x$11 = (new $Int64(halfway.$high, halfway.$low)), x$12 = (new $Int64(0, errors$1)), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		b.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = ((-f.exp >>> 0));
		integer = (($shiftRightUint64(f.mant, shift).$low >>> 0));
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = (new $Uint64(0, integer)), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$4]));
			integer = (_q = integer / (((pow10.$low >>> 0))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, ((pow10.$low >>> 0))) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[pos] = (((v + 48 >>> 0) << 24 >>> 24)));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + nd] = ((new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24))));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64((new $Uint64(0, rest)), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, ((((f.exp - upper.exp >> 0) >>> 0))));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, ((((lower.exp - upper.exp >> 0) >>> 0))));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = ((-upper.exp >>> 0));
		integer = (($shiftRightUint64(upper.mant, shift).$low >>> 0));
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = (new $Uint64(0, integer)), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$17]));
			digit = (_q = integer / ((pow$1.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$2] = (((digit + 48 >>> 0) << 24 >>> 24))));
			integer = integer - (($imul(digit, ((pow$1.$low >>> 0))) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = (($shiftRightUint64(fraction, shift).$low >> 0));
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = (((digit$1 + 48 >> 0) << 24 >>> 24))));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64((new $Uint64(0, digit$1)), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits = (new $Uint64(0, math.Float32bits(($fround(val)))));
			flt = float32info;
		} else if (_1 === (64)) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = (($shiftRightUint64(bits, flt.mantbits).$low >> 0)) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - ((flt.mantbits >> 0)) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - ((flt.mantbits >> 0)) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - ((flt.mantbits >> 0)) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, ((exp << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$1 = (((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var ch, d, dst, i, j, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - (((flt.mantbits >> 0))) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, (new $Uint64(0, exp)), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = function(i, base) {
		var _tuple, base, i, s;
		if (true && (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)));
		}
		_tuple = formatBits(sliceType$6.nil, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var i;
		return FormatInt((new $Int64(0, i)), 10);
	};
	$pkg.Itoa = Itoa;
	small = function(i) {
		var i, off;
		off = 0;
		if (i < 10) {
			off = 1;
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", (($imul(i, 2)) + off >> 0), (($imul(i, 2)) + 2 >> 0));
	};
	formatBits = function(dst, u, base, neg, append_) {
		var _q, _q$1, _r, _r$1, a, append_, b, b$1, base, d, dst, i, is, is$1, is$2, j, m, neg, q, q$1, s, s$1, u, us, us$1, x, x$1, x$2, x$3, x$4, x$5;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 1000000000)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = (((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0));
					j = 4;
					while (true) {
						if (!(j > 0)) { break; }
						is = (_r = us % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
						us = (_q = us / (100), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						i = i - (2) >> 0;
						(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$1] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 1 >>> 0))));
						(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 0 >>> 0))));
						j = j - (1) >> 0;
					}
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(((us * 2 >>> 0) + 1 >>> 0)));
					u = q;
				}
			}
			us$1 = ((u.$low >>> 0));
			while (true) {
				if (!(us$1 >= 100)) { break; }
				is$1 = (_r$1 = us$1 % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
				us$1 = (_q$1 = us$1 / (100), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				i = i - (2) >> 0;
				(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$3] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 1 >>> 0))));
				(x$4 = i + 0 >> 0, ((x$4 < 0 || x$4 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$4] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 0 >>> 0))));
			}
			is$2 = us$1 * 2 >>> 0;
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$2 + 1 >>> 0)));
			if (us$1 >= 10) {
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(is$2));
			}
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? ($throwRuntimeError("index out of range"), undefined) : shifts[base]);
			if (s$1 > 0) {
				b = (new $Uint64(0, base));
				m = ((base >>> 0)) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((u.$low >>> 0)) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			} else {
				b$1 = (new $Uint64(0, base));
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$1 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((x$5 = $mul64(q$1, b$1), new $Uint64(u.$high - x$5.$high, u.$low - x$5.$low)).$low >>> 0))));
					u = q$1;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = ($bytesToString($subslice(new sliceType$6(a), i)));
		return [d, s];
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _tuple, buf, graphicOnly, quote, r, s, width;
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = ((s.charCodeAt(0) >> 0));
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1;
		runeTmp = arrayType$4.zero();
		if ((r === ((quote >> 0))) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, ((r << 24 >>> 24)));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, ((r << 24 >>> 24)));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24)) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((((r << 24 >>> 24)) & 15) >>> 0)));
			} else if (r > 1114111) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s$1 >>> 0)), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	AppendQuote = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	AppendQuoteToASCII = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = ((b >> 0));
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = ((s.charCodeAt(0) >> 0));
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = ((c$1 >> 0)) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = ((s.charCodeAt(j$1) >> 0)) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = ((c$1 >> 0));
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var _1, _q, _tuple, _tuple$1, buf, buf$1, c, err, i, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
		n = s.length;
		if (n < 2) {
			return ["", $pkg.ErrSyntax];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			return ["", $pkg.ErrSyntax];
		}
		s = $substring(s, 1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				return ["", $pkg.ErrSyntax];
			}
			if (contains(s, 13)) {
				buf = $makeSlice(sliceType$6, 0, (s.length - 1 >> 0));
				i = 0;
				while (true) {
					if (!(i < s.length)) { break; }
					if (!((s.charCodeAt(i) === 13))) {
						buf = $append(buf, s.charCodeAt(i));
					}
					i = i + (1) >> 0;
				}
				return [($bytesToString(buf)), $ifaceNil];
			}
			return [s, $ifaceNil];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			return ["", $pkg.ErrSyntax];
		}
		if (contains(s, 10)) {
			return ["", $pkg.ErrSyntax];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_1 = quote;
			if (_1 === (34)) {
				return [s, $ifaceNil];
			} else if (_1 === (39)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					return [s, $ifaceNil];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf$1 = $append(buf$1, ((c << 24 >>> 24)));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				return ["", $pkg.ErrSyntax];
			}
		}
		return [($bytesToString(buf$1)), $ifaceNil];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = ((r << 16 >>> 16));
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = ((r >>> 0));
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, ((r << 16 >>> 16)));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === ((r << 16 >>> 16))));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = ((r << 16 >>> 16));
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	decimal.init("strconv", [{prop: "d", name: "d", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "nd", name: "nd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", anonymous: false, exported: false, typ: $String, tag: ""}]);
	extFloat.init("strconv", [{prop: "mant", name: "mant", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2154, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2557, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3328, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8383, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11218, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11849, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12590, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40938, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2143, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2816, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7674, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66349, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72192, 72263, 72272, 72323, 72326, 72354, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 72960, 73014, 73018, 73031, 73040, 73049, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94177, 94208, 100332, 100352, 101106, 110592, 110878, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127584, 127589, 127744, 128724, 128736, 128748, 128752, 128760, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129280, 129291, 129296, 129356, 129360, 129387, 129408, 129431, 129472, 129472, 129488, 129510, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 6813, 7177, 7223, 7336, 7431, 7434, 7483, 7486, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63807]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, arrayType, sliceType, sliceType$1, ptrType, sliceType$2, sliceType$3, _L, _M, _N, _P, _S, _CaseRanges, properties, to, IsPrint, In, is16, is32, Is, To, ToLower;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", true, "unicode", true, function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", true, "unicode", false, null);
	arrayType = $arrayType($Int32, 3);
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	ptrType = $ptrType(RangeTable);
	sliceType$2 = $sliceType(ptrType);
	sliceType$3 = $sliceType(CaseRange);
	to = function(_case, r, caseRange) {
		var _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseRange.$array[caseRange.$offset + m]);
			if (((cr.Lo >> 0)) <= r && r <= ((cr.Hi >> 0))) {
				delta = ((x = cr.Delta, ((_case < 0 || _case >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[_case])));
				if (delta > 1114111) {
					return ((cr.Lo >> 0)) + ((((((r - ((cr.Lo >> 0)) >> 0)) & ~1) >> 0) | (((_case & 1) >> 0)))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < ((cr.Lo >> 0))) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsPrint = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return !(((((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 128) >>> 0) === 0));
		}
		return In(r, $pkg.PrintRanges);
	};
	$pkg.IsPrint = IsPrint;
	In = function(r, ranges) {
		var _i, _ref, inside, r, ranges;
		_ref = ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inside = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.In = In;
	is16 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (range_.Stride === 1) || ((_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (range_.Stride === 1) || ((_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = function(rangeTab, r) {
		var r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >> 0))) {
			return is16(r16, ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	$pkg.Is = Is;
	To = function(_case, r) {
		var _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToLower = function(r) {
		var r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	RangeTable.init("", [{prop: "R16", name: "R16", anonymous: false, exported: true, typ: sliceType, tag: ""}, {prop: "R32", name: "R32", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Range16.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	Range32.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	CaseRange.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", anonymous: false, exported: true, typ: d, tag: ""}]);
	d.init($Int32, 3);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2144, 2154, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2230, 2237, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2556, 2565, 9), new Range16.ptr(2566, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3200, 3205, 5), new Range16.ptr(3206, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3406, 17), new Range16.ptr(3412, 3414, 1), new Range16.ptr(3423, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6276, 1), new Range16.ptr(6279, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7296, 7304, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12590, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40938, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42926, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43877, 1), new Range16.ptr(43888, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66349, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(66776, 66811, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70656, 70708, 1), new Range32.ptr(70727, 70730, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72192, 257), new Range32.ptr(72203, 72242, 1), new Range32.ptr(72250, 72272, 22), new Range32.ptr(72284, 72323, 1), new Range32.ptr(72326, 72329, 1), new Range32.ptr(72384, 72440, 1), new Range32.ptr(72704, 72712, 1), new Range32.ptr(72714, 72750, 1), new Range32.ptr(72768, 72818, 50), new Range32.ptr(72819, 72847, 1), new Range32.ptr(72960, 72966, 1), new Range32.ptr(72968, 72969, 1), new Range32.ptr(72971, 73008, 1), new Range32.ptr(73030, 73728, 698), new Range32.ptr(73729, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(94176, 94177, 1), new Range32.ptr(94208, 100332, 1), new Range32.ptr(100352, 101106, 1), new Range32.ptr(110592, 110878, 1), new Range32.ptr(110960, 111355, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(125184, 125251, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(183984, 191456, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_M = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1161, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2260, 2273, 1), new Range16.ptr(2275, 2307, 1), new Range16.ptr(2362, 2364, 1), new Range16.ptr(2366, 2383, 1), new Range16.ptr(2385, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2435, 1), new Range16.ptr(2492, 2494, 2), new Range16.ptr(2495, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2509, 1), new Range16.ptr(2519, 2530, 11), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2563, 1), new Range16.ptr(2620, 2622, 2), new Range16.ptr(2623, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2691, 1), new Range16.ptr(2748, 2750, 2), new Range16.ptr(2751, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2786, 2787, 1), new Range16.ptr(2810, 2815, 1), new Range16.ptr(2817, 2819, 1), new Range16.ptr(2876, 2878, 2), new Range16.ptr(2879, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3006, 60), new Range16.ptr(3007, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3031, 3072, 41), new Range16.ptr(3073, 3075, 1), new Range16.ptr(3134, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3203, 1), new Range16.ptr(3260, 3262, 2), new Range16.ptr(3263, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3328, 3331, 1), new Range16.ptr(3387, 3388, 1), new Range16.ptr(3390, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3405, 1), new Range16.ptr(3415, 3426, 11), new Range16.ptr(3427, 3458, 31), new Range16.ptr(3459, 3530, 71), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3544, 2), new Range16.ptr(3545, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3633, 3636, 3), new Range16.ptr(3637, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3953, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4139, 101), new Range16.ptr(4140, 4158, 1), new Range16.ptr(4182, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4194, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4237, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4253, 1), new Range16.ptr(4957, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6277, 6278, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6679, 6683, 1), new Range16.ptr(6741, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6846, 1), new Range16.ptr(6912, 6916, 1), new Range16.ptr(6964, 6980, 1), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7042, 1), new Range16.ptr(7073, 7085, 1), new Range16.ptr(7142, 7155, 1), new Range16.ptr(7204, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7400, 1), new Range16.ptr(7405, 7410, 5), new Range16.ptr(7411, 7412, 1), new Range16.ptr(7415, 7417, 1), new Range16.ptr(7616, 7673, 1), new Range16.ptr(7675, 7679, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12335, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42610, 1), new Range16.ptr(42612, 42621, 1), new Range16.ptr(42654, 42655, 1), new Range16.ptr(42736, 42737, 1), new Range16.ptr(43010, 43014, 4), new Range16.ptr(43019, 43043, 24), new Range16.ptr(43044, 43047, 1), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43205, 1), new Range16.ptr(43232, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43347, 1), new Range16.ptr(43392, 43395, 1), new Range16.ptr(43443, 43456, 1), new Range16.ptr(43493, 43561, 68), new Range16.ptr(43562, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43644, 43645, 1), new Range16.ptr(43696, 43698, 2), new Range16.ptr(43699, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43755, 42), new Range16.ptr(43756, 43759, 1), new Range16.ptr(43765, 43766, 1), new Range16.ptr(44003, 44010, 1), new Range16.ptr(44012, 44013, 1), new Range16.ptr(64286, 65024, 738), new Range16.ptr(65025, 65039, 1), new Range16.ptr(65056, 65071, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69632, 1306), new Range32.ptr(69633, 69634, 1), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69762, 1), new Range32.ptr(69808, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70018, 1), new Range32.ptr(70067, 70080, 1), new Range32.ptr(70090, 70092, 1), new Range32.ptr(70188, 70199, 1), new Range32.ptr(70206, 70367, 161), new Range32.ptr(70368, 70378, 1), new Range32.ptr(70400, 70403, 1), new Range32.ptr(70460, 70462, 2), new Range32.ptr(70463, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70502, 3), new Range32.ptr(70503, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70709, 70726, 1), new Range32.ptr(70832, 70851, 1), new Range32.ptr(71087, 71093, 1), new Range32.ptr(71096, 71104, 1), new Range32.ptr(71132, 71133, 1), new Range32.ptr(71216, 71232, 1), new Range32.ptr(71339, 71351, 1), new Range32.ptr(71453, 71467, 1), new Range32.ptr(72193, 72202, 1), new Range32.ptr(72243, 72249, 1), new Range32.ptr(72251, 72254, 1), new Range32.ptr(72263, 72273, 10), new Range32.ptr(72274, 72283, 1), new Range32.ptr(72330, 72345, 1), new Range32.ptr(72751, 72758, 1), new Range32.ptr(72760, 72767, 1), new Range32.ptr(72850, 72871, 1), new Range32.ptr(72873, 72886, 1), new Range32.ptr(73009, 73014, 1), new Range32.ptr(73018, 73020, 2), new Range32.ptr(73021, 73023, 2), new Range32.ptr(73024, 73029, 1), new Range32.ptr(73031, 92912, 19881), new Range32.ptr(92913, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94033, 94078, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119141, 119145, 1), new Range32.ptr(119149, 119154, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(121344, 121398, 1), new Range32.ptr(121403, 121452, 1), new Range32.ptr(121461, 121476, 15), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1), new Range32.ptr(122880, 122886, 1), new Range32.ptr(122888, 122904, 1), new Range32.ptr(122907, 122913, 1), new Range32.ptr(122915, 122916, 1), new Range32.ptr(122918, 122922, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(125252, 125258, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_N = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3046, 3058, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3416, 3422, 1), new Range16.ptr(3430, 3448, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3891, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(5870, 5872, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(8304, 8308, 4), new Range16.ptr(8309, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8578, 1), new Range16.ptr(8581, 8585, 1), new Range16.ptr(9312, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12295, 778), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(12690, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(42726, 42735, 1), new Range16.ptr(43056, 43061, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65856, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(66720, 66729, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67835, 67839, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68028, 68029, 1), new Range32.ptr(68032, 68047, 1), new Range32.ptr(68050, 68095, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(68858, 68863, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70736, 70745, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71483, 1), new Range32.ptr(71904, 71922, 1), new Range32.ptr(72784, 72812, 1), new Range32.ptr(73040, 73049, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(125264, 125273, 1), new Range32.ptr(127232, 127244, 1)]), 4);
		_P = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 42, 1), new Range16.ptr(44, 47, 1), new Range16.ptr(58, 59, 1), new Range16.ptr(63, 64, 1), new Range16.ptr(91, 93, 1), new Range16.ptr(95, 123, 28), new Range16.ptr(125, 161, 36), new Range16.ptr(167, 171, 4), new Range16.ptr(182, 183, 1), new Range16.ptr(187, 191, 4), new Range16.ptr(894, 903, 9), new Range16.ptr(1370, 1375, 1), new Range16.ptr(1417, 1418, 1), new Range16.ptr(1470, 1472, 2), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2557, 2800, 243), new Range16.ptr(3572, 3663, 91), new Range16.ptr(3674, 3675, 1), new Range16.ptr(3844, 3858, 1), new Range16.ptr(3860, 3898, 38), new Range16.ptr(3899, 3901, 1), new Range16.ptr(3973, 4048, 75), new Range16.ptr(4049, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5120, 5741, 621), new Range16.ptr(5742, 5787, 45), new Range16.ptr(5788, 5867, 79), new Range16.ptr(5868, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8208, 829), new Range16.ptr(8209, 8231, 1), new Range16.ptr(8240, 8259, 1), new Range16.ptr(8261, 8273, 1), new Range16.ptr(8275, 8286, 1), new Range16.ptr(8317, 8318, 1), new Range16.ptr(8333, 8334, 1), new Range16.ptr(8968, 8971, 1), new Range16.ptr(9001, 9002, 1), new Range16.ptr(10088, 10101, 1), new Range16.ptr(10181, 10182, 1), new Range16.ptr(10214, 10223, 1), new Range16.ptr(10627, 10648, 1), new Range16.ptr(10712, 10715, 1), new Range16.ptr(10748, 10749, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11822, 1), new Range16.ptr(11824, 11849, 1), new Range16.ptr(12289, 12291, 1), new Range16.ptr(12296, 12305, 1), new Range16.ptr(12308, 12319, 1), new Range16.ptr(12336, 12349, 13), new Range16.ptr(12448, 12539, 91), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43260, 43310, 50), new Range16.ptr(43311, 43359, 48), new Range16.ptr(43457, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 64830, 20819), new Range16.ptr(64831, 65040, 209), new Range16.ptr(65041, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65121, 1), new Range16.ptr(65123, 65128, 5), new Range16.ptr(65130, 65131, 1), new Range16.ptr(65281, 65283, 1), new Range16.ptr(65285, 65290, 1), new Range16.ptr(65292, 65295, 1), new Range16.ptr(65306, 65307, 1), new Range16.ptr(65311, 65312, 1), new Range16.ptr(65339, 65341, 1), new Range16.ptr(65343, 65371, 28), new Range16.ptr(65373, 65375, 2), new Range16.ptr(65376, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70089, 1), new Range32.ptr(70093, 70107, 14), new Range32.ptr(70109, 70111, 1), new Range32.ptr(70200, 70205, 1), new Range32.ptr(70313, 70731, 418), new Range32.ptr(70732, 70735, 1), new Range32.ptr(70747, 70749, 2), new Range32.ptr(70854, 71105, 251), new Range32.ptr(71106, 71127, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(71264, 71276, 1), new Range32.ptr(71484, 71486, 1), new Range32.ptr(72255, 72262, 1), new Range32.ptr(72346, 72348, 1), new Range32.ptr(72350, 72354, 1), new Range32.ptr(72769, 72773, 1), new Range32.ptr(72816, 72817, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827), new Range32.ptr(121479, 121483, 1), new Range32.ptr(125278, 125279, 1)]), 11);
		_S = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 43, 7), new Range16.ptr(60, 62, 1), new Range16.ptr(94, 96, 2), new Range16.ptr(124, 126, 2), new Range16.ptr(162, 166, 1), new Range16.ptr(168, 169, 1), new Range16.ptr(172, 174, 2), new Range16.ptr(175, 177, 1), new Range16.ptr(180, 184, 4), new Range16.ptr(215, 247, 32), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 1014, 113), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1423, 1), new Range16.ptr(1542, 1544, 1), new Range16.ptr(1547, 1550, 3), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2554, 2555, 1), new Range16.ptr(2801, 2928, 127), new Range16.ptr(3059, 3066, 1), new Range16.ptr(3199, 3407, 208), new Range16.ptr(3449, 3647, 198), new Range16.ptr(3841, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6107, 6464, 357), new Range16.ptr(6622, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8125, 8127, 2), new Range16.ptr(8128, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8352, 8383, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8472, 1), new Range16.ptr(8478, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8512, 5), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8522, 8525, 1), new Range16.ptr(8527, 8586, 59), new Range16.ptr(8587, 8592, 5), new Range16.ptr(8593, 8967, 1), new Range16.ptr(8972, 9000, 1), new Range16.ptr(9003, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 10087, 1), new Range16.ptr(10132, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11218, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43065, 1), new Range16.ptr(43639, 43641, 1), new Range16.ptr(43867, 64297, 20430), new Range16.ptr(64434, 64449, 1), new Range16.ptr(65020, 65021, 1), new Range16.ptr(65122, 65124, 2), new Range16.ptr(65125, 65126, 1), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65532, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65934, 1), new Range32.ptr(65936, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 71487, 3191), new Range32.ptr(92988, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(120832, 121343, 1), new Range32.ptr(121399, 121402, 1), new Range32.ptr(121453, 121460, 1), new Range32.ptr(121462, 121475, 1), new Range32.ptr(121477, 121478, 1), new Range32.ptr(126704, 126705, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127404, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127547, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127584, 127589, 1), new Range32.ptr(127744, 128724, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128760, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129280, 129291, 1), new Range32.ptr(129296, 129342, 1), new Range32.ptr(129344, 129356, 1), new Range32.ptr(129360, 129387, 1), new Range32.ptr(129408, 129431, 1), new Range32.ptr(129472, 129488, 16), new Range32.ptr(129489, 129510, 1)]), 10);
		$pkg.L = _L;
		$pkg.M = _M;
		$pkg.N = _N;
		$pkg.P = _P;
		$pkg.S = _S;
		$pkg.PrintRanges = new sliceType$2([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(618, 618, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new CaseRange.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(7296, 7296, $toNativeArray($kindInt32, [-6254, 0, -6254])), new CaseRange.ptr(7297, 7297, $toNativeArray($kindInt32, [-6253, 0, -6253])), new CaseRange.ptr(7298, 7298, $toNativeArray($kindInt32, [-6244, 0, -6244])), new CaseRange.ptr(7299, 7300, $toNativeArray($kindInt32, [-6242, 0, -6242])), new CaseRange.ptr(7301, 7301, $toNativeArray($kindInt32, [-6243, 0, -6243])), new CaseRange.ptr(7302, 7302, $toNativeArray($kindInt32, [-6236, 0, -6236])), new CaseRange.ptr(7303, 7303, $toNativeArray($kindInt32, [-6181, 0, -6181])), new CaseRange.ptr(7304, 7304, $toNativeArray($kindInt32, [35266, 0, 35266])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42926, 42926, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new CaseRange.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new CaseRange.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new CaseRange.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(66736, 66771, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66776, 66811, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(125184, 125217, $toNativeArray($kindInt32, [0, 34, 0])), new CaseRange.ptr(125218, 125251, $toNativeArray($kindInt32, [-34, 0, -34]))]);
		$pkg.CaseRanges = _CaseRanges;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, unicode, utf8, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, typeAlg, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, sliceType$1, ptrType$1, sliceType$2, sliceType$3, ptrType$2, funcType$1, sliceType$4, ptrType$3, ptrType$4, sliceType$5, sliceType$6, sliceType$7, ptrType$5, ptrType$6, structType$3, sliceType$8, sliceType$9, sliceType$10, sliceType$11, ptrType$7, ptrType$8, sliceType$13, sliceType$14, ptrType$9, sliceType$15, ptrType$15, sliceType$17, ptrType$16, funcType$3, funcType$4, funcType$5, ptrType$17, arrayType$12, ptrType$18, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, methodCache, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, PtrTo, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, _$2_, moff_, _$4_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this._$2 = 0;
			this.moff = 0;
			this._$4 = 0;
			this._methods = sliceType$5.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this._$2 = _$2_;
		this.moff = moff_;
		this._$4 = _$4_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$4.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$3.nil;
			this.gcdata = ptrType$4.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$4.nil);
			this.methods = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offsetAnon_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$4.nil);
			this.typ = ptrType$1.nil;
			this.offsetAnon = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offsetAnon = offsetAnon_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$4.nil);
			this.fields = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$13.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$9.nil;
			this.index = sliceType$13.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$3], [ptrType$2], true);
	sliceType$4 = $sliceType($String);
	ptrType$3 = $ptrType(typeAlg);
	ptrType$4 = $ptrType($Uint8);
	sliceType$5 = $sliceType(method);
	sliceType$6 = $sliceType(imethod);
	sliceType$7 = $sliceType(structField);
	ptrType$5 = $ptrType(uncommonType);
	ptrType$6 = $ptrType(nameData);
	structType$3 = $structType("reflect", [{prop: "str", name: "str", anonymous: false, exported: false, typ: $String, tag: ""}]);
	sliceType$8 = $sliceType(ptrType$2);
	sliceType$9 = $sliceType(Value);
	sliceType$10 = $sliceType(Type);
	sliceType$11 = $sliceType(sliceType$8);
	ptrType$7 = $ptrType(interfaceType);
	ptrType$8 = $ptrType(imethod);
	sliceType$13 = $sliceType($Int);
	sliceType$14 = $sliceType(fieldScan);
	ptrType$9 = $ptrType(structType);
	sliceType$15 = $sliceType($Uint8);
	ptrType$15 = $ptrType($UnsafePointer);
	sliceType$17 = $sliceType($Int32);
	ptrType$16 = $ptrType(funcType);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	ptrType$17 = $ptrType(structField);
	arrayType$12 = $arrayType($Uintptr, 2);
	ptrType$18 = $ptrType(ValueError);
	init = function() {
		var used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, 0, sliceType$5.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$6.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$7.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$4.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _i$4, _key, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, offsetAnon, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), ptrType$3.nil, ptrType$4.nil, newNameOff($clone(newName(internalStr(typ.string), "", !!(typ.exported)), name)), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = $makeSlice(sliceType$5, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					method.copy(((i < 0 || i >= reflectMethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", internalStr(m.pkg) === ""), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					_i++;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), 0, 0, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$6, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", internalStr(m$1.pkg) === ""), name)), newTypeOff(reflectType(m$1.typ))));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$7, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					offsetAnon = ((i$4 >>> 0)) << 1 >>> 0;
					if (!!(f.anonymous)) {
						offsetAnon = (offsetAnon | (1)) >>> 0;
					}
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), !!(f.exported)), name), reflectType(f.typ), offsetAnon));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", false), name), reflectFields));
			}
		}
		return ((typ.reflectType));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	rtype.ptr.prototype.uncommon = function() {
		var _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$5.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var n;
		n = this;
		return "";
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, exported) {
		var _key, b, exported, n, tag;
		b = $newDataPointer(0, ptrType$4);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$4.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$3.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$8, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$8, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$8), $externalize(jsOut, sliceType$8), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	makeInt = function(f, bits, t) {
		var _1, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			(ptr).$set(((bits.$low << 24 >> 24)));
		} else if (_1 === (4)) {
			(ptr).$set(((bits.$low << 16 >> 16)));
		} else if ((_1 === (2)) || (_1 === (5))) {
			(ptr).$set(((bits.$low >> 0)));
		} else if (_1 === (6)) {
			(ptr).$set((new $Int64(bits.$high, bits.$low)));
		} else if (_1 === (8)) {
			(ptr).$set(((bits.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(ptr).$set(((bits.$low << 16 >>> 16)));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			(ptr).$set(((bits.$low >>> 0)));
		} else if (_1 === (11)) {
			(ptr).$set((bits));
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapassign = function(t, m, key, val) {
		var _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var m, t;
		return ((new mapIter.ptr(t, m, $keys(m), 0)));
	};
	mapiterkey = function(it) {
		var _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = ((it));
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return ($newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var it, iter;
		iter = ((it));
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		srcVal = $clone(v, Value).object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 6; continue; }
			/* */ if (_1 === (22)) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (23)) { */ case 6:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 11; continue;
			/* } else if (_1 === (22)) { */ case 7:
				_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$3 === 25) { */ case 12:
					_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
						val = srcVal;
						/* break; */ $s = 4; continue;
					/* } */ case 17:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 4; continue;
				/* } */ case 13:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 11; continue;
			/* } else if (_1 === (25)) { */ case 8:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 11; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { */ case 9:
				val = v.ptr;
				$s = 11; continue;
			/* } else { */ case 10:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 11:
		case 4:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$6, (val), (((new flag(v.flag).ro() | ((v.flag & 128) >>> 0)) >>> 0) | ((_r$7 >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	methodReceiver = function(op, v, i) {
		var _$38, _r, fn, i, m, m$1, ms, op, prop, rcvr, t, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _$38 = $f._$38; _r = $f._r; fn = $f.fn; i = $f.i; m = $f.m; m$1 = $f.m$1; ms = $f.ms; op = $f.op; prop = $f.prop; rcvr = $f.rcvr; t = $f.t; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_$38 = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		prop = "";
		/* */ if (v.typ.Kind() === 20) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.typ.Kind() === 20) { */ case 1:
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = tt.rtype.typeOff(m.typ);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
			$s = 3; continue;
		/* } else { */ case 2:
			_r = v.typ.exportedMethods(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ms = _r;
			if (((i >>> 0)) >= ((ms.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = v.typ.typeOff(m$1.mtyp);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		/* } */ case 3:
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		$s = -1; return [_$38, t, fn];
		/* */ } return; } if ($f === undefined) { $f = { $blk: methodReceiver }; } $f._$38 = _$38; $f._r = _r; $f.fn = fn; $f.i = i; $f.m = m; $f.m$1 = m$1; $f.ms = ms; $f.op = op; $f.prop = prop; $f.rcvr = rcvr; $f.t = t; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	valueInterface = function(v, safe) {
		var _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var _r, _r$1, _r$2, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_r = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8)));
		}; })(fn, rcvr));
		_r$1 = $clone(v, Value).Type(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.common(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$2, (fv), (new flag(v.flag).ro() | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var _1, _r, _r$1, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 7:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
					_r$1 = t.Field(i).Type.Comparable(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$1) { */ case 9:
						$s = -1; return false;
					/* } */ case 10:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		methods = _r;
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$10, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$10, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), (fn), fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var _r, _r$1, _r$2, _r$3, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				_r$3 = dst.NumMethod(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$3 === 0) { */ case 10:
					(target).$set(x);
					$s = 12; continue;
				/* } else { */ case 11:
					ifaceE2I(dst, x, target);
				/* } */ case 12:
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.call = function(op, in$1) {
		var _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$1.nil;
		fn = 0;
		rcvr = null;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			t = v.typ;
			fn = ($clone(v, Value).object());
			rcvr = undefined;
		/* } */ case 3:
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($clone(x, Value).Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 5:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 6; continue; }
			_r$1 = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tmp = _r$1;
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r$2 = xt.AssignableTo(targ); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!_r$2) { */ case 8:
				_r$3 = xt.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = targ.String(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$3 + " as type " + _r$4));
			/* } */ case 9:
			i = i + (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 13:
			m = in$1.$length - n >> 0;
			_r$5 = MakeSlice(t.In(n), m, m); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			slice = _r$5;
			_r$6 = t.In(n).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			elem = _r$6;
			i$1 = 0;
			/* while (true) { */ case 17:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 18; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
				_r$7 = $clone(x$2, Value).Type(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				xt$1 = _r$7;
				_r$8 = xt$1.AssignableTo(elem); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				/* */ if (!_r$8) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (!_r$8) { */ case 20:
					_r$9 = xt$1.String(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$10 = elem.String(); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$9 + " as type " + _r$10 + " in " + op));
				/* } */ case 21:
				_r$11 = $clone(slice, Value).Index(i$1); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				$r = $clone(_r$11, Value).Set($clone(x$2, Value)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$9, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 14:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 27:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 28; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$12 = t.In(i$2).common(); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_arg$1 = _r$12;
			_arg$2 = 0;
			_r$13 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = $clone(_r$13, Value).object(); /* */ $s = 31; case 31: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_arg$3 = _r$14;
			_r$15 = unwrapJsObject(_arg, _arg$3); /* */ $s = 32; case 32: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$15;
			_i$1++;
		/* } */ $s = 27; continue; case 28:
		_r$16 = callHelper(new sliceType$3([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 33; case 33: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		results = _r$16;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 35; continue; }
			/* */ if (_1 === (1)) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (_1 === (0)) { */ case 35:
				$s = -1; return sliceType$9.nil;
			/* } else if (_1 === (1)) { */ case 36:
				_r$17 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 39; case 39: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				$s = -1; return new sliceType$9([$clone(_r$17, Value)]);
			/* } else { */ case 37:
				ret = $makeSlice(sliceType$9, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 40:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 41; continue; }
					i$3 = _i$2;
					_r$18 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$18);
					_i$2++;
				/* } */ $s = 40; continue; case 41:
				$s = -1; return ret;
			/* } */ case 38:
		case 34:
		$s = -1; return sliceType$9.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, new flag(v.flag).ro()); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.anon()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (((((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (((384 | new flag(v.flag).ro()) >>> 0) | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 10:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 11:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((new flag(v.flag).ro() | 8) >>> 0) | 128) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), fl$2);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys($clone(v, Value).object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), new flag(v.flag).ro()); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), new flag(v.flag).ro()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(ch, nb, val) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$11([new sliceType$8([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(ch, val, nb) {
		var _r, ch, comms, nb, selectRes, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$11([new sliceType$8([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	structField.ptr.prototype.offset = function() {
		var f;
		f = this;
		return f.offsetAnon >>> 1 >>> 0;
	};
	structField.prototype.offset = function() { return this.$val.offset(); };
	structField.ptr.prototype.anon = function() {
		var f;
		f = this;
		return !((((f.offsetAnon & 1) >>> 0) === 0));
	};
	structField.prototype.anon = function() { return this.$val.anon(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if (((k >> 0)) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa(((k >> 0)));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul(((t.size >> 0)), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var t;
		t = this;
		return ((t.align >> 0));
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return ((t.fieldAlign >> 0));
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tuple, _tuple$1, allExported, allm, found, m, m$1, methods, methodsi, name$1, name$2, t, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; allExported = $f.allExported; allm = $f.allm; found = $f.found; m = $f.m; m$1 = $f.m$1; methods = $f.methods; methodsi = $f.methodsi; name$1 = $f.name$1; name$2 = $f.name$2; t = $f.t; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = methodCache.Load(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		methodsi = _tuple[0];
		found = _tuple[1];
		if (found) {
			$s = -1; return $assertType(methodsi, sliceType$5);
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			$s = -1; return sliceType$5.nil;
		}
		allm = ut.methods();
		allExported = true;
		_ref = allm;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
			name$1 = $clone(t.nameOff(m.name), name);
			if (!$clone(name$1, name).isExported()) {
				allExported = false;
				break;
			}
			_i++;
		}
		methods = sliceType$5.nil;
		if (allExported) {
			methods = allm;
		} else {
			methods = $makeSlice(sliceType$5, 0, allm.$length);
			_ref$1 = allm;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				m$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), method);
				name$2 = $clone(t.nameOff(m$1.name), name);
				if ($clone(name$2, name).isExported()) {
					methods = $append(methods, m$1);
				}
				_i$1++;
			}
			methods = $subslice(methods, 0, methods.$length, methods.$length);
		}
		_r$1 = methodCache.LoadOrStore(t, methods); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		methodsi = _tuple$1[0];
		$s = -1; return $assertType(methodsi, sliceType$5);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.exportedMethods }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.allExported = allExported; $f.allm = allm; $f.found = found; $f.m = m; $f.m$1 = m$1; $f.methods = methods; $f.methodsi = methodsi; $f.name$1 = name$1; $f.name$2 = name$2; $f.t = t; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var _r, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			$s = -1; return tt.NumMethod();
		}
		if (((t.tflag & 1) >>> 0) === 0) {
			$s = -1; return 0;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.$length;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.NumMethod }; } $f._r = _r; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, eidx, i, m, name$1, ok, p, pname, t, tt, ut, utmethods, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; eidx = $f.eidx; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pname = $f.pname; t = $f.t; tt = $f.tt; ut = $f.ut; utmethods = $f.utmethods; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
		}
		utmethods = ut.methods();
		eidx = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((ut.mcount >> 0)))) { break; } */ if(!(i < ((ut.mcount >> 0)))) { $s = 2; continue; }
			p = $clone(((i < 0 || i >= utmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : utmethods.$array[utmethods.$offset + i]), method);
			pname = $clone(t.nameOff(p.name), name);
			/* */ if ($clone(pname, name).isExported()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(pname, name).isExported()) { */ case 3:
				/* */ if ($clone(pname, name).name() === name$1) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ($clone(pname, name).name() === name$1) { */ case 5:
					_r = t.Method(eidx); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp$2 = $clone(_r, Method);
					_tmp$3 = true;
					Method.copy(m, _tmp$2);
					ok = _tmp$3;
					$s = -1; return [m, ok];
				/* } */ case 6:
				eidx = eidx + (1) >> 0;
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.eidx = eidx; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pname = pname; $f.t = t; $f.tt = tt; $f.ut = ut; $f.utmethods = utmethods; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var i, s, t;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === 46) {
				break;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = (t.kindType);
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var _r, name$1, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa(((d >> 0)));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		if (!$clone(pname, name).isExported()) {
			m.PkgPath = $clone(pname, name).pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$7.nil) {
			return [m, ok];
		}
		p = ptrType$8.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructTag.prototype.Get = function(key) {
		var _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var f, i, p, t, tag, x;
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		f.Name = $clone(p.name, name).name();
		f.Anonymous = p.anon();
		if (!$clone(p.name, name).isExported()) {
			f.PkgPath = $clone(t.pkgPath, name).name();
		}
		tag = $clone(p.name, name).tag();
		if (!(tag === "")) {
			f.Tag = (tag);
		}
		f.Offset = p.offset();
		f.Index = new sliceType$13([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		ok = false;
		t = this;
		current = new sliceType$14([]);
		next = new sliceType$14([new fieldScan.ptr(t, sliceType$13.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$9.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$9.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$9.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					fname = $clone(f.name, name).name();
					ntyp = ptrType$1.nil;
					/* */ if (f.anon()) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (f.anon()) { */ case 9:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (ntyp.Kind() === 22) { */ case 11:
							_r = ntyp.Elem().common(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 12:
					/* } */ case 10:
					_r$1 = match(fname); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_r$1) { */ case 14:
						if ((_entry$1 = count[ptrType$9.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
						}
						StructField.copy(result, t$1.Field(i));
						result.Index = sliceType$13.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 15:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = (ntyp.kindType);
					if ((_entry$2 = nextCount[ptrType$9.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$9.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$9.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$13.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name$1, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		if (!(name$1[0] === "")) {
			_ref = t.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if ($clone(tf.name, name).name() === name$1[0]) {
					_tmp = $clone(t.Field(i), StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
				}
				if (tf.anon()) {
					hasAnon = true;
				}
				_i++;
			}
		}
		if (!hasAnon) {
			$s = -1; return [f, present];
		}
		_r = t.FieldByNameFunc((function(name$1) { return function(s) {
			var s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$s = -1; return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r || implements$1(uu, t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.AssignableTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$5.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var T, V, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: directlyAssignable }; } $f.T = T; $f.V = V; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; cmpTags = $f.cmpTags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalType }; } $f.T = T; $f.V = V; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f.cmpTags = cmpTags; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; cmpTags = $f.cmpTags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; kind = $f.kind; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; tf = $f.tf; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; vf = $f.vf; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$s = -1; return _v;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.ChanDir() === 3)) { _v$1 = false; $s = 14; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 14:
				/* */ if (_v$1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_v$1) { */ case 12:
					$s = -1; return true;
				/* } */ case 13:
				if (!(V.ChanDir() === T.ChanDir())) { _v$2 = false; $s = 16; continue s; }
				_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 16:
				$s = -1; return _v$2;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 18:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 19; continue; }
					_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$3) { */ case 20:
						$s = -1; return false;
					/* } */ case 21:
					i = i + (1) >> 0;
				/* } */ $s = 18; continue; case 19:
				i$1 = 0;
				/* while (true) { */ case 23:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 24; continue; }
					_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!_r$4) { */ case 25:
						$s = -1; return false;
					/* } */ case 26:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 23; continue; case 24:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!(_r$5)) { _v$3 = false; $s = 28; continue s; }
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$3 = _r$6; case 28:
				$s = -1; return _v$3;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				if (!($clone(t$2.pkgPath, name).name() === $clone(v$2.pkgPath, name).name())) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!_r$8) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!_r$8) { */ case 34:
						$s = -1; return false;
					/* } */ case 35:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offsetAnon === vf.offsetAnon))) {
						$s = -1; return false;
					}
					_i++;
				/* } */ $s = 32; continue; case 33:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalUnderlyingType }; } $f.T = T; $f.V = V; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.cmpTags = cmpTags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.kind = kind; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.tf = tf; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.vf = vf; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	flag.prototype.ro = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0))) {
			return 32;
		}
		return 0;
	};
	$ptrType(flag).prototype.ro = function() { return new flag(this.$get()).ro(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, (new flag(v.flag).ro() | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(1);
		return (v.ptr).$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return ((x = (v.ptr).$get(), new $Complex128(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if ($clone(v, Value).IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = $clone(v, Value).Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return ((v.ptr).$get());
		} else if (_1 === (14)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (3)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (4)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (5)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (6)) {
			return (p).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = new flag((((v.flag | key.flag) >>> 0))).ro();
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		if (!ifaceIndir(typ)) {
			$s = -1; return new Value.ptr(typ, (e).$get(), fl);
		}
		c = unsafe_New(typ);
		typedmemmove(typ, c, e);
		$s = -1; return new Value.ptr(typ, c, (fl | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (new flag(v.flag).ro() | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$9, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, (key).$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var _r, _v, fl, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; fl = $f.fl; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) { _v = true; $s = 3; continue s; }
		_r = v.typ.NumMethod(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = ((i >>> 0)) >= ((_r >>> 0)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect: Method index out of range"));
		/* } */ case 2:
		if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | ((((((i >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		$s = -1; return new Value.ptr(v.typ, v.ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Method }; } $f._r = _r; $f._v = _v; $f.fl = fl; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return 0;
		}
		_r = v.typ.NumMethod(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.NumMethod }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var _r, _r$1, _tuple, m, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r$1 = $clone(v, Value).Method(m.Index); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, ((t.Kind() >>> 0)));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		_r = chanrecv($clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = ((x.$ptr_ptr || (x.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x))));
		}
		_r$1 = chansend($clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$s = -1; return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		(v.ptr).$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		(v.ptr).$set(x);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			(v.ptr).$set((new $Complex64(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			(v.ptr).$set(($fround(x)));
		} else if (_1 === (14)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (3)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
		} else if (_1 === (4)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16)));
		} else if (_1 === (5)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (6)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, $clone(v, Value).pointer(), k);
			$s = -1; return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = $clone(val, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		$r = mapassign(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (8)) {
			(v.ptr).$set(((x.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(v.ptr).$set(((x.$low << 16 >>> 16)));
		} else if (_1 === (10)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (11)) {
			(v.ptr).$set(x);
		} else if (_1 === (12)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		(v.ptr).$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		(v.ptr).$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var _1, _r, _r$1, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (0)) {
			$s = -1; return "<invalid Value>";
		} else if (_1 === (24)) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).Type(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.String(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return "<" + _r$1 + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var _r, f, i, m, m$1, ms, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; i = $f.i; m = $f.m; m$1 = $f.m$1; ms = $f.ms; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			$s = -1; return v.typ;
		}
		i = ((v.flag >> 0)) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (((i >>> 0)) >= ((tt.methods.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			$s = -1; return v.typ.typeOff(m.typ);
		}
		_r = v.typ.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ms = _r;
		if (((i >>> 0)) >= ((ms.$length >>> 0))) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
		$s = -1; return v.typ.typeOff(m$1.mtyp);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Type }; } $f._r = _r; $f.f = f; $f.i = i; $f.m = m; $f.m$1 = m$1; $f.ms = ms; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (8)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (9)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (10)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (11)) {
			return (p).$get();
		} else if (_1 === (12)) {
			return ((x = (p).$get(), new $Uint64(0, x.constructor === Number ? x : 1)));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return (v.ptr);
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	New = function(typ) {
		var _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.Convert = function(t) {
		var _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		_r$4 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_r$4) { */ case 21:
			$s = -1; return cvtDirect;
		/* } */ case 22:
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
		_r$5 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg = _r$5;
		_r$6 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_r$7 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v$2 = _r$7; case 26:
		/* */ if (_v$2) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_v$2) { */ case 24:
			$s = -1; return cvtDirect;
		/* } */ case 25:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
			}
			$s = -1; return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			(ptr).$set(($fround(v)));
		} else if (_1 === (8)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			(ptr).$set((new $Complex64(v.$real, v.$imag)));
		} else if (_1 === (16)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$clone(ret, Value).SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = (new $Int64(0, $clone(v, Value).Float())), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), (new $Uint64(0, $clone(v, Value).Float())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Int())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Uint())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), $clone(v, Value).Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeComplex(new flag(v.flag).ro(), $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString(new flag(v.flag).ro(), ($encodeRune($clone(v, Value).Int().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString(new flag(v.flag).ro(), ($encodeRune($clone(v, Value).Uint().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($bytesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$15($stringToBytes(_r)));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($runesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$17($stringToRunes(_r)));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			(target).$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$4, target, (((new flag(v.flag).ro() | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(v, Value).IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (new flag(v.flag).ro())) >>> 0;
			$s = -1; return ret;
		/* } */ case 2:
		_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$5.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}];
	ptrType$16.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int, $String], [ptrType$4], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$17.methods = [{prop: "offset", name: "offset", pkg: "reflect", typ: $funcType([], [$Uintptr], false)}, {prop: "anon", name: "anon", pkg: "reflect", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$2], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$9], [sliceType$9], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$12], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$17], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$17], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "ro", name: "ro", pkg: "reflect", typ: $funcType([], [flag], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_$2", name: "_", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_$4", name: "_", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", anonymous: false, exported: false, typ: sliceType$5, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", anonymous: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", anonymous: false, exported: false, typ: ptrType$4, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("reflect", [{prop: "t", name: "t", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", anonymous: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "gcdata", name: "gcdata", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "str", name: "str", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", anonymous: false, exported: false, typ: typeOff, tag: ""}]);
	typeAlg.init("reflect", [{prop: "hash", name: "hash", anonymous: false, exported: false, typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", anonymous: false, exported: false, typ: funcType$5, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", anonymous: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", anonymous: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", anonymous: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"interface\""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", anonymous: false, exported: false, typ: sliceType$6, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offsetAnon", name: "offsetAnon", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"struct\""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", anonymous: false, exported: false, typ: sliceType$7, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", anonymous: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", anonymous: false, exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", anonymous: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: sliceType$13, tag: ""}, {prop: "Anonymous", name: "Anonymous", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: sliceType$13, tag: ""}]);
	Value.init("reflect", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", anonymous: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", anonymous: false, exported: true, typ: Kind, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		methodCache = new sync.Map.ptr(new sync.Mutex.ptr(0, 0), new $packages["sync/atomic"].Value.ptr($ifaceNil), false, 0);
		initialized = false;
		uncommonTypeMap = {};
		nameMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		kindNames = new sliceType$4(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, scanError, ss, ssave, sliceType, ptrType, ptrType$1, arrayType, arrayType$1, sliceType$1, sliceType$2, arrayType$2, ptrType$2, ptrType$5, ptrType$25, funcType, ppFree, space, ssFree, complexError, boolError, newPrinter, Fprintf, Printf, Sprintf, Errorf, Sprint, Fprintln, Println, Sprintln, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
	});
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType = $arrayType($Uint8, 68);
	arrayType$1 = $arrayType($Uint16, 2);
	sliceType$1 = $sliceType(arrayType$1);
	sliceType$2 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 5);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	fmt.ptr.prototype.clearflags = function() {
		var f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? ($throwRuntimeError("index out of range"), undefined) : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.Write(b);
		} else {
			f.buf.Write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.WriteString(s);
		} else {
			f.buf.WriteString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.fmt_unicode = function(u) {
		var buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint(((u.$low >> 0)))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen(((u.$low >> 0)))) >> 0;
			utf8.EncodeRune($subslice(buf, i), ((u.$low >> 0)));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmt_unicode = function(u) { return this.$val.fmt_unicode(u); };
	fmt.ptr.prototype.fmt_integer = function(u, base, isSigned, digits) {
		var _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = (new $Int64(u.$high, u.$low)), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24)));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmt_integer = function(u, base, isSigned, digits) { return this.$val.fmt_integer(u, base, isSigned, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var digits, f, s;
		f = this;
		f.fmt_sbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var b, digits, f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var buf, f, s;
		f = this;
		s = f.truncate(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_c = function(c) {
		var buf, c, f, r, w;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmt_c = function(c) { return this.$val.fmt_c(c); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var buf, c, f, r;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	fmt.ptr.prototype.fmt_float = function(v, size, verb, prec) {
		var _1, _2, digits, f, hasDecimalPoint, i, num, oldZero, prec, size, tail, tailBuf, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, ((verb << 24 >>> 24)), prec, size);
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.sharp && !((verb === 98))) {
			digits = 0;
			_1 = verb;
			if ((_1 === (118)) || (_1 === (103)) || (_1 === (71))) {
				digits = prec;
				if (digits === -1) {
					digits = 6;
				}
			}
			tailBuf = arrayType$2.zero();
			tail = $subslice(new sliceType$2(tailBuf), 0, 0);
			hasDecimalPoint = false;
			i = 1;
			while (true) {
				if (!(i < num.$length)) { break; }
				_2 = ((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]);
				if (_2 === (46)) {
					hasDecimalPoint = true;
				} else if ((_2 === (101)) || (_2 === (69))) {
					tail = $appendSlice(tail, $subslice(num, i));
					num = $subslice(num, 0, i);
				} else {
					digits = digits - (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (!hasDecimalPoint) {
				num = $append(num, 46);
			}
			while (true) {
				if (!(digits > 0)) { break; }
				num = $append(num, 48);
				digits = digits - (1) >> 0;
			}
			num = $appendSlice(num, tail);
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.WriteByte((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.Write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmt_float = function(v, size, verb, prec) { return this.$val.fmt_float(v, size, verb, prec); };
	$ptrType(buffer).prototype.Write = function(p) {
		var b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), ((r << 24 >>> 24))));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var p;
		p = this;
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	pp.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, err, p, ret, s;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(s);
		_tmp = s.length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Fprintf = function(w, format, a) {
		var _r, _r$1, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Printf = function(format, a) {
		var _r, _tuple, a, err, format, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprintf(os.Stdout, format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Printf = Printf;
	Sprintf = function(format, a) {
		var _r, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f._r = _r; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var _r, _r$1, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Sprint = function(a) {
		var _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprint = Sprint;
	Fprintln = function(w, a) {
		var _r, _r$1, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintln(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintln }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintln = Fprintln;
	Println = function(a) {
		var _r, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprintln(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Println }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Println = Println;
	Sprintln = function(a) {
		var _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintln(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintln }; } $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintln = Sprintln;
	getField = function(v, i) {
		var _r, _r$1, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(v, reflect.Value).Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { */ case 2:
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + (((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0)) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var _r, _r$1, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(v, reflect.Value).IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			$s = -1; return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r = $clone(v, reflect.Value).Type(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.String(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var _r, _r$1, _r$2, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if ($clone(p.value, reflect.Value).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if ($clone(p.value, reflect.Value).IsValid()) { */ case 3:
				_r$1 = $clone(p.value, reflect.Value).Type(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printValue($clone(p.value, reflect.Value), 118, 0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		p.erroring = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmt_integer(v, 16, false, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var _1, isSigned, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; isSigned = $f.isSigned; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if (_1 === (111)) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmt_integer(v, 2, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (111)) { */ case 5:
				p.fmt.fmt_integer(v, 8, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmt_c(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				/* */ if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(v);
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmt_unicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInteger }; } $f._1 = _1; $f.isSigned = isSigned; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var _1, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmt_float(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { */ case 3:
				p.fmt.fmt_float(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmt_float(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmt_float(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat }; } $f._1 = _1; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var _1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; oldPlus = $f.oldPlus; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f.oldPlus = oldPlus; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; i = $f.i; i$1 = $f.i$1; p = $f.p; typeString = $f.typeString; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						p.fmt0x64((new $Uint64(0, c)), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						p.fmt.fmt_integer((new $Uint64(0, c$1)), 10, false, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(($bytesToString(v)));
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_bx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_bx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(($bytesToString(v)));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r, reflect.Value), verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.typeString = typeString; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var _1, _2, _r, _r$1, p, u, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; p = $f.p; u = $f.u; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		u = 0;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = $clone(value, reflect.Value).Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
					_r = $clone(value, reflect.Value).Type(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = _r.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("nil");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger((new $Uint64(0, u.constructor === Number ? u : 1)), false, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.u = u; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var _r, arg, err, oldFlags, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arg = $f.arg; err = $f.err; oldFlags = $f.oldFlags; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if (($clone(v, reflect.Value).Kind() === 22) && $clone(v, reflect.Value).IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
				$s = -1; return;
			}
			if (p.panicking) {
				$panic(err);
			}
			oldFlags = $clone(p.fmt.fmtFlags, fmtFlags);
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(PANIC=");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
			fmtFlags.copy(p.fmt.fmtFlags, oldFlags);
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f._r = _r; $f.arg = arg; $f.err = err; $f.oldFlags = oldFlags; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			$s = -1; return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$1 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$1 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$2 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		$s = -1; return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; arg = $f.arg; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer($clone(_r$1, reflect.Value), 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat((f$1), 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex((new $Complex128(f$3.$real, f$3.$imag)), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$5)), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$6)), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$7)), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$8)), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(f$9.$high, f$9.$low)), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$10)), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$11)), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$12)), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$13)), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$15.constructor === Number ? f$15 : 1)), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			/* */ if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { */ case 55:
				_r$2 = $clone(f$18, reflect.Value).Interface(); /* */ $s = 57; case 57: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				p.arg = _r$2;
				_r$3 = p.handleMethods(verb); /* */ $s = 60; case 60: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (_r$3) { */ case 58:
					$s = -1; return;
				/* } */ case 59:
			/* } */ case 56:
			$r = p.printValue($clone(f$18, reflect.Value), verb, 0); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$4 = p.handleMethods(verb); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (!_r$4) { */ case 62:
				_r$5 = reflect.ValueOf(f$19); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r$5, reflect.Value), verb, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.arg = arg; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var _1, _2, _3, _4, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, keys, name, p, t, value, value$1, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; key = $f.key; keys = $f.keys; name = $f.name; p = $f.p; t = $f.t; value = $f.value; value$1 = $f.value$1; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { */ case 1:
			_r = $clone(value, reflect.Value).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool($clone(f, reflect.Value).Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger(((x = $clone(f, reflect.Value).Int(), new $Uint64(x.$high, x.$low))), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger($clone(f, reflect.Value).Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = $clone(f, reflect.Value).String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = $clone(f, reflect.Value).Type(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = _r$3.String(); /* */ $s = 46; case 46: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$4); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if ($clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("map[");
				/* } */ case 44:
				_r$5 = $clone(f, reflect.Value).MapKeys(); /* */ $s = 48; case 48: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				keys = _r$5;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 49:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 50; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					$r = p.printValue($clone(key, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$6 = $clone(f, reflect.Value).MapIndex($clone(key, reflect.Value)); /* */ $s = 52; case 52: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$6, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 49; continue; case 50:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 54; continue; }
				/* */ $s = 55; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 54:
					_r$7 = $clone(f, reflect.Value).Type(); /* */ $s = 56; case 56: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$8 = _r$7.String(); /* */ $s = 57; case 57: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$8); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 55:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				i$1 = 0;
				/* while (true) { */ case 59:
					/* if (!(i$1 < $clone(f, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(f, reflect.Value).NumField())) { $s = 60; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 61; continue; }
					/* */ $s = 62; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 61:
						_r$9 = $clone(f, reflect.Value).Type(); /* */ $s = 63; case 63: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$10 = _r$9.Field(i$1); /* */ $s = 64; case 64: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						name = _r$10.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 62:
					_r$11 = getField($clone(f, reflect.Value), i$1); /* */ $s = 65; case 65: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$11, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 59; continue; case 60:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$12 = $clone(f, reflect.Value).Elem(); /* */ $s = 67; case 67: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				value$1 = _r$12;
				/* */ if (!$clone(value$1, reflect.Value).IsValid()) { $s = 68; continue; }
				/* */ $s = 69; continue;
				/* if (!$clone(value$1, reflect.Value).IsValid()) { */ case 68:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 71; continue; }
					/* */ $s = 72; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 71:
						_r$13 = $clone(f, reflect.Value).Type(); /* */ $s = 74; case 74: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_r$14 = _r$13.String(); /* */ $s = 75; case 75: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$14); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = 73; continue;
					/* } else { */ case 72:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					/* } */ case 73:
					$s = 70; continue;
				/* } else { */ case 69:
					$r = p.printValue($clone(value$1, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 70:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 79; continue; }
					/* */ $s = 80; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 79:
						_r$15 = $clone(f, reflect.Value).Type(); /* */ $s = 81; case 81: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						t = _r$15;
						_r$16 = t.Elem(); /* */ $s = 84; case 84: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_r$17 = _r$16.Kind(); /* */ $s = 85; case 85: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						/* */ if (_r$17 === 8) { $s = 82; continue; }
						/* */ $s = 83; continue;
						/* if (_r$17 === 8) { */ case 82:
							bytes = sliceType$2.nil;
							/* */ if ($clone(f, reflect.Value).Kind() === 23) { $s = 86; continue; }
							/* */ if ($clone(f, reflect.Value).CanAddr()) { $s = 87; continue; }
							/* */ $s = 88; continue;
							/* if ($clone(f, reflect.Value).Kind() === 23) { */ case 86:
								_r$18 = $clone(f, reflect.Value).Bytes(); /* */ $s = 90; case 90: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
								bytes = _r$18;
								$s = 89; continue;
							/* } else if ($clone(f, reflect.Value).CanAddr()) { */ case 87:
								_r$19 = $clone(f, reflect.Value).Slice(0, $clone(f, reflect.Value).Len()); /* */ $s = 91; case 91: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
								_r$20 = $clone(_r$19, reflect.Value).Bytes(); /* */ $s = 92; case 92: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
								bytes = _r$20;
								$s = 89; continue;
							/* } else { */ case 88:
								bytes = $makeSlice(sliceType$2, $clone(f, reflect.Value).Len());
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 93:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 94; continue; }
									i$2 = _i$1;
									_r$21 = $clone(f, reflect.Value).Index(i$2); /* */ $s = 95; case 95: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
									_r$22 = $clone(_r$21, reflect.Value).Uint(); /* */ $s = 96; case 96: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i$2] = ((_r$22.$low << 24 >>> 24)));
									_i$1++;
								/* } */ $s = 93; continue; case 94:
							/* } */ case 89:
							_arg = bytes;
							_arg$1 = verb;
							_r$23 = t.String(); /* */ $s = 97; case 97: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
							_arg$2 = _r$23;
							$r = p.fmtBytes(_arg, _arg$1, _arg$2); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 83:
					/* } */ case 80:
				case 78:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 99; continue; }
				/* */ $s = 100; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 99:
					_r$24 = $clone(f, reflect.Value).Type(); /* */ $s = 102; case 102: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_r$25 = _r$24.String(); /* */ $s = 103; case 103: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$25); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (($clone(f, reflect.Value).Kind() === 23) && $clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					i$3 = 0;
					/* while (true) { */ case 105:
						/* if (!(i$3 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$3 < $clone(f, reflect.Value).Len())) { $s = 106; continue; }
						if (i$3 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						_r$26 = $clone(f, reflect.Value).Index(i$3); /* */ $s = 107; case 107: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$26, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 108; case 108: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$3 = i$3 + (1) >> 0;
					/* } */ $s = 105; continue; case 106:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
					$s = 101; continue;
				/* } else { */ case 100:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					i$4 = 0;
					/* while (true) { */ case 109:
						/* if (!(i$4 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$4 < $clone(f, reflect.Value).Len())) { $s = 110; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						_r$27 = $clone(f, reflect.Value).Index(i$4); /* */ $s = 111; case 111: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$27, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 112; case 112: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					/* } */ $s = 109; continue; case 110:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				/* } */ case 101:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { $s = 113; continue; }
				/* */ $s = 114; continue;
				/* if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { */ case 113:
						_r$28 = $clone(f, reflect.Value).Elem(); /* */ $s = 116; case 116: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
						a = _r$28;
						_4 = $clone(a, reflect.Value).Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 117; continue; }
						/* */ $s = 118; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 117:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							$r = p.printValue($clone(a, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 119; case 119: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 118:
					case 115:
				/* } */ case 114:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 120; case 120: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 121; case 121: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType($clone(f, reflect.Value)); /* */ $s = 122; case 122: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.key = key; $f.keys = keys; $f.name = name; $f.p = p; $f.t = t; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = $clone(v, reflect.Value).Int();
						if ((x = (new $Int64(0, (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)))), (x.$high === n.$high && x.$low === n.$low))) {
							num = (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0));
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = $clone(v, reflect.Value).Uint();
						if ((x$1 = (new $Int64(n$1.$high, n$1.$low)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = (new $Uint64(0, ((n$1.$low >> 0)))), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = ((n$1.$low >> 0));
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var _1, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, size, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; i$1 = $f.i$1; lasti = $f.lasti; p = $f.p; size = $f.size; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), ((c >> 0))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tmp = ((format.charCodeAt(i) >> 0));
			_tmp$1 = 1;
			verb = _tmp;
			size = _tmp$1;
			if (verb >= 128) {
				_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
				verb = _tuple$7[0];
				size = _tuple$7[1];
			}
			i = i + (size) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			/* } */ $s = 37; continue; case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.i$1 = i$1; $f.lasti = lasti; $f.p = p; $f.size = size; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a) {
		var _i, _r, _ref, _v, a, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _v = $f._v; a = $f.a; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 3; continue s; }
			_r = reflect.TypeOf(arg).Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === 24; case 3:
			isString = _v;
			if (argNum > 0 && !isString && !prevString) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			prevString = isString;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._v = _v; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a) { return this.$val.doPrint(a); };
	pp.ptr.prototype.doPrintln = function(a) {
		var _i, _ref, a, arg, argNum, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; a = $f.a; arg = $f.arg; argNum = $f.argNum; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (argNum > 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintln }; } $f._i = _i; $f._ref = _ref; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintln = function(a) { return this.$val.doPrintln(a); };
	ss.ptr.prototype.Read = function(buf) {
		var _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var _r, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var _r, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var _r, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$s = -1; return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f._r = _r; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = ((r << 16 >>> 16));
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var r;
		return !isSpace(r);
	};
	ss.ptr.prototype.free = function(old) {
		var old, s;
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.SkipSpace = function() {
		var _r, _r$1, _r$2, _v, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$2 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var _r, _r$1, _r$2, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.SkipSpace(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var _r, _r$1, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f._r = _r; $f._r$1 = _r$1; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmt_unicode", name: "fmt_unicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_integer", name: "fmt_integer", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_c", name: "fmt_c", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_float", name: "fmt_float", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType], [$Int, $error], false)}];
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "fmtFlags", anonymous: true, exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", anonymous: false, exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", anonymous: false, exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	scanError.init("fmt", [{prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", anonymous: false, exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "ssave", anonymous: true, exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ppFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero()), false, false, false, false);
		}));
		space = new sliceType$1([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/color"] = (function() {
	var $pkg = {}, $init, Color, RGBA, RGBA64, NRGBA, NRGBA64, Alpha, Alpha16, Gray, Gray16, Model, modelFunc, Palette, YCbCr, NYCbCrA, CMYK, ptrType, funcType, ModelFunc, rgbaModel, rgba64Model, nrgbaModel, nrgba64Model, alphaModel, alpha16Model, grayModel, gray16Model, sqDiff, RGBToYCbCr, yCbCrModel, nYCbCrAModel, RGBToCMYK, CMYKToRGB, cmykModel;
	Color = $pkg.Color = $newType(8, $kindInterface, "color.Color", true, "image/color", true, null);
	RGBA = $pkg.RGBA = $newType(0, $kindStruct, "color.RGBA", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	RGBA64 = $pkg.RGBA64 = $newType(0, $kindStruct, "color.RGBA64", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	NRGBA = $pkg.NRGBA = $newType(0, $kindStruct, "color.NRGBA", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	NRGBA64 = $pkg.NRGBA64 = $newType(0, $kindStruct, "color.NRGBA64", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	Alpha = $pkg.Alpha = $newType(0, $kindStruct, "color.Alpha", true, "image/color", true, function(A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.A = 0;
			return;
		}
		this.A = A_;
	});
	Alpha16 = $pkg.Alpha16 = $newType(0, $kindStruct, "color.Alpha16", true, "image/color", true, function(A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.A = 0;
			return;
		}
		this.A = A_;
	});
	Gray = $pkg.Gray = $newType(0, $kindStruct, "color.Gray", true, "image/color", true, function(Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			return;
		}
		this.Y = Y_;
	});
	Gray16 = $pkg.Gray16 = $newType(0, $kindStruct, "color.Gray16", true, "image/color", true, function(Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			return;
		}
		this.Y = Y_;
	});
	Model = $pkg.Model = $newType(8, $kindInterface, "color.Model", true, "image/color", true, null);
	modelFunc = $pkg.modelFunc = $newType(0, $kindStruct, "color.modelFunc", true, "image/color", false, function(f_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = $throwNilPointerError;
			return;
		}
		this.f = f_;
	});
	Palette = $pkg.Palette = $newType(12, $kindSlice, "color.Palette", true, "image/color", true, null);
	YCbCr = $pkg.YCbCr = $newType(0, $kindStruct, "color.YCbCr", true, "image/color", true, function(Y_, Cb_, Cr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			this.Cb = 0;
			this.Cr = 0;
			return;
		}
		this.Y = Y_;
		this.Cb = Cb_;
		this.Cr = Cr_;
	});
	NYCbCrA = $pkg.NYCbCrA = $newType(0, $kindStruct, "color.NYCbCrA", true, "image/color", true, function(YCbCr_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.YCbCr = new YCbCr.ptr(0, 0, 0);
			this.A = 0;
			return;
		}
		this.YCbCr = YCbCr_;
		this.A = A_;
	});
	CMYK = $pkg.CMYK = $newType(0, $kindStruct, "color.CMYK", true, "image/color", true, function(C_, M_, Y_, K_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.C = 0;
			this.M = 0;
			this.Y = 0;
			this.K = 0;
			return;
		}
		this.C = C_;
		this.M = M_;
		this.Y = Y_;
		this.K = K_;
	});
	ptrType = $ptrType(modelFunc);
	funcType = $funcType([Color], [Color], false);
	RGBA.ptr.prototype.RGBA = function() {
		var a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		r = ((c.R >>> 0));
		r = (r | ((r << 8 >>> 0))) >>> 0;
		g = ((c.G >>> 0));
		g = (g | ((g << 8 >>> 0))) >>> 0;
		b = ((c.B >>> 0));
		b = (b | ((b << 8 >>> 0))) >>> 0;
		a = ((c.A >>> 0));
		a = (a | ((a << 8 >>> 0))) >>> 0;
		return [r, g, b, a];
	};
	RGBA.prototype.RGBA = function() { return this.$val.RGBA(); };
	RGBA64.ptr.prototype.RGBA = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		_tmp = ((c.R >>> 0));
		_tmp$1 = ((c.G >>> 0));
		_tmp$2 = ((c.B >>> 0));
		_tmp$3 = ((c.A >>> 0));
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	RGBA64.prototype.RGBA = function() { return this.$val.RGBA(); };
	NRGBA.ptr.prototype.RGBA = function() {
		var _q, _q$1, _q$2, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		r = ((c.R >>> 0));
		r = (r | ((r << 8 >>> 0))) >>> 0;
		r = $imul(r, (((c.A >>> 0)))) >>> 0;
		r = (_q = r / (255), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = ((c.G >>> 0));
		g = (g | ((g << 8 >>> 0))) >>> 0;
		g = $imul(g, (((c.A >>> 0)))) >>> 0;
		g = (_q$1 = g / (255), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = ((c.B >>> 0));
		b = (b | ((b << 8 >>> 0))) >>> 0;
		b = $imul(b, (((c.A >>> 0)))) >>> 0;
		b = (_q$2 = b / (255), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		a = ((c.A >>> 0));
		a = (a | ((a << 8 >>> 0))) >>> 0;
		return [r, g, b, a];
	};
	NRGBA.prototype.RGBA = function() { return this.$val.RGBA(); };
	NRGBA64.ptr.prototype.RGBA = function() {
		var _q, _q$1, _q$2, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		r = ((c.R >>> 0));
		r = $imul(r, (((c.A >>> 0)))) >>> 0;
		r = (_q = r / (65535), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = ((c.G >>> 0));
		g = $imul(g, (((c.A >>> 0)))) >>> 0;
		g = (_q$1 = g / (65535), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = ((c.B >>> 0));
		b = $imul(b, (((c.A >>> 0)))) >>> 0;
		b = (_q$2 = b / (65535), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		a = ((c.A >>> 0));
		return [r, g, b, a];
	};
	NRGBA64.prototype.RGBA = function() { return this.$val.RGBA(); };
	Alpha.ptr.prototype.RGBA = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		a = ((c.A >>> 0));
		a = (a | ((a << 8 >>> 0))) >>> 0;
		_tmp = a;
		_tmp$1 = a;
		_tmp$2 = a;
		_tmp$3 = a;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Alpha.prototype.RGBA = function() { return this.$val.RGBA(); };
	Alpha16.ptr.prototype.RGBA = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		a = ((c.A >>> 0));
		_tmp = a;
		_tmp$1 = a;
		_tmp$2 = a;
		_tmp$3 = a;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Alpha16.prototype.RGBA = function() { return this.$val.RGBA(); };
	Gray.ptr.prototype.RGBA = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r, y;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		y = ((c.Y >>> 0));
		y = (y | ((y << 8 >>> 0))) >>> 0;
		_tmp = y;
		_tmp$1 = y;
		_tmp$2 = y;
		_tmp$3 = 65535;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Gray.prototype.RGBA = function() { return this.$val.RGBA(); };
	Gray16.ptr.prototype.RGBA = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r, y;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		y = ((c.Y >>> 0));
		_tmp = y;
		_tmp$1 = y;
		_tmp$2 = y;
		_tmp$3 = 65535;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Gray16.prototype.RGBA = function() { return this.$val.RGBA(); };
	ModelFunc = function(f) {
		var f;
		return new modelFunc.ptr(f);
	};
	$pkg.ModelFunc = ModelFunc;
	modelFunc.ptr.prototype.Convert = function(c) {
		var _r, c, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.f(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: modelFunc.ptr.prototype.Convert }; } $f._r = _r; $f.c = c; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	modelFunc.prototype.Convert = function(c) { return this.$val.Convert(c); };
	rgbaModel = function(c) {
		var _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, RGBA, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		$s = -1; return (x = new RGBA.ptr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), (((a >>> 8 >>> 0) << 24 >>> 24))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: rgbaModel }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	rgba64Model = function(c) {
		var _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, RGBA64, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		$s = -1; return (x = new RGBA64.ptr(((r << 16 >>> 16)), ((g << 16 >>> 16)), ((b << 16 >>> 16)), ((a << 16 >>> 16))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: rgba64Model }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	nrgbaModel = function(c) {
		var _q, _q$1, _q$2, _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, NRGBA, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		if (a === 65535) {
			$s = -1; return (x = new NRGBA.ptr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), 255), new x.constructor.elem(x));
		}
		if (a === 0) {
			$s = -1; return (x$1 = new NRGBA.ptr(0, 0, 0, 0), new x$1.constructor.elem(x$1));
		}
		r = (_q = (($imul(r, 65535) >>> 0)) / a, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = (($imul(g, 65535) >>> 0)) / a, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = (($imul(b, 65535) >>> 0)) / a, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		$s = -1; return (x$2 = new NRGBA.ptr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), (((a >>> 8 >>> 0) << 24 >>> 24))), new x$2.constructor.elem(x$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: nrgbaModel }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	nrgba64Model = function(c) {
		var _q, _q$1, _q$2, _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, NRGBA64, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		if (a === 65535) {
			$s = -1; return (x = new NRGBA64.ptr(((r << 16 >>> 16)), ((g << 16 >>> 16)), ((b << 16 >>> 16)), 65535), new x.constructor.elem(x));
		}
		if (a === 0) {
			$s = -1; return (x$1 = new NRGBA64.ptr(0, 0, 0, 0), new x$1.constructor.elem(x$1));
		}
		r = (_q = (($imul(r, 65535) >>> 0)) / a, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = (($imul(g, 65535) >>> 0)) / a, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = (($imul(b, 65535) >>> 0)) / a, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		$s = -1; return (x$2 = new NRGBA64.ptr(((r << 16 >>> 16)), ((g << 16 >>> 16)), ((b << 16 >>> 16)), ((a << 16 >>> 16))), new x$2.constructor.elem(x$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: nrgba64Model }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	alphaModel = function(c) {
		var _r, _tuple, _tuple$1, a, c, ok, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; c = $f.c; ok = $f.ok; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Alpha, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		a = _tuple$1[3];
		$s = -1; return (x = new Alpha.ptr((((a >>> 8 >>> 0) << 24 >>> 24))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: alphaModel }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.c = c; $f.ok = ok; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	alpha16Model = function(c) {
		var _r, _tuple, _tuple$1, a, c, ok, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; c = $f.c; ok = $f.ok; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Alpha16, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		a = _tuple$1[3];
		$s = -1; return (x = new Alpha16.ptr(((a << 16 >>> 16))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: alpha16Model }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.c = c; $f.ok = ok; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	grayModel = function(c) {
		var _r, _tuple, _tuple$1, b, c, g, ok, r, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Gray, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		y = ((((($imul(19595, r) >>> 0) + ($imul(38470, g) >>> 0) >>> 0) + ($imul(7471, b) >>> 0) >>> 0) + 32768 >>> 0)) >>> 24 >>> 0;
		$s = -1; return (x = new Gray.ptr(((y << 24 >>> 24))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: grayModel }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	gray16Model = function(c) {
		var _r, _tuple, _tuple$1, b, c, g, ok, r, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Gray16, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		y = ((((($imul(19595, r) >>> 0) + ($imul(38470, g) >>> 0) >>> 0) + ($imul(7471, b) >>> 0) >>> 0) + 32768 >>> 0)) >>> 16 >>> 0;
		$s = -1; return (x = new Gray16.ptr(((y << 16 >>> 16))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: gray16Model }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Palette.prototype.Convert = function(c) {
		var _r, c, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.$length === 0) {
			$s = -1; return $ifaceNil;
		}
		_r = p.Index(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (x = _r, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Palette.prototype.Convert }; } $f._r = _r; $f.c = c; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Palette).prototype.Convert = function(c) { return this.$get().Convert(c); };
	Palette.prototype.Index = function(c) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, bestSum, c, ca, cb, cg, cr, i, p, ret, sum, v, va, vb, vg, vr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bestSum = $f.bestSum; c = $f.c; ca = $f.ca; cb = $f.cb; cg = $f.cg; cr = $f.cr; i = $f.i; p = $f.p; ret = $f.ret; sum = $f.sum; v = $f.v; va = $f.va; vb = $f.vb; vg = $f.vg; vr = $f.vr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cr = _tuple[0];
		cg = _tuple[1];
		cb = _tuple[2];
		ca = _tuple[3];
		_tmp = 0;
		_tmp$1 = 4294967295;
		ret = _tmp;
		bestSum = _tmp$1;
		_ref = p;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = v.RGBA(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			vr = _tuple$1[0];
			vg = _tuple$1[1];
			vb = _tuple$1[2];
			va = _tuple$1[3];
			sum = ((sqDiff(cr, vr) + sqDiff(cg, vg) >>> 0) + sqDiff(cb, vb) >>> 0) + sqDiff(ca, va) >>> 0;
			if (sum < bestSum) {
				if (sum === 0) {
					$s = -1; return i;
				}
				_tmp$2 = i;
				_tmp$3 = sum;
				ret = _tmp$2;
				bestSum = _tmp$3;
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Palette.prototype.Index }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bestSum = bestSum; $f.c = c; $f.ca = ca; $f.cb = cb; $f.cg = cg; $f.cr = cr; $f.i = i; $f.p = p; $f.ret = ret; $f.sum = sum; $f.v = v; $f.va = va; $f.vb = vb; $f.vg = vg; $f.vr = vr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Palette).prototype.Index = function(c) { return this.$get().Index(c); };
	sqDiff = function(x, y) {
		var d, x, y;
		d = x - y >>> 0;
		return (($imul(d, d) >>> 0)) >>> 2 >>> 0;
	};
	RGBToYCbCr = function(r, g, b) {
		var b, b1, cb, cr, g, g1, r, r1, yy;
		r1 = ((r >> 0));
		g1 = ((g >> 0));
		b1 = ((b >> 0));
		yy = ((((($imul(19595, r1)) + ($imul(38470, g1)) >> 0) + ($imul(7471, b1)) >> 0) + 32768 >> 0)) >> 16 >> 0;
		cb = ((($imul(-11056, r1)) - ($imul(21712, g1)) >> 0) + ($imul(32768, b1)) >> 0) + 8421376 >> 0;
		if (((((cb >>> 0)) & 4278190080) >>> 0) === 0) {
			cb = (cb >> $min((16), 31)) >> 0;
		} else {
			cb = ~((cb >> 31 >> 0)) >> 0;
		}
		cr = ((($imul(32768, r1)) - ($imul(27440, g1)) >> 0) - ($imul(5328, b1)) >> 0) + 8421376 >> 0;
		if (((((cr >>> 0)) & 4278190080) >>> 0) === 0) {
			cr = (cr >> $min((16), 31)) >> 0;
		} else {
			cr = ~((cr >> 31 >> 0)) >> 0;
		}
		return [((yy << 24 >>> 24)), ((cb << 24 >>> 24)), ((cr << 24 >>> 24))];
	};
	$pkg.RGBToYCbCr = RGBToYCbCr;
	YCbCr.ptr.prototype.RGBA = function() {
		var b, c, cb1, cr1, g, r, yy1;
		c = this;
		yy1 = $imul(((c.Y >> 0)), 65793);
		cb1 = ((c.Cb >> 0)) - 128 >> 0;
		cr1 = ((c.Cr >> 0)) - 128 >> 0;
		r = yy1 + ($imul(91881, cr1)) >> 0;
		if (((((r >>> 0)) & 4278190080) >>> 0) === 0) {
			r = (r >> $min((8), 31)) >> 0;
		} else {
			r = (~((r >> 31 >> 0)) >> 0) & 65535;
		}
		g = (yy1 - ($imul(22554, cb1)) >> 0) - ($imul(46802, cr1)) >> 0;
		if (((((g >>> 0)) & 4278190080) >>> 0) === 0) {
			g = (g >> $min((8), 31)) >> 0;
		} else {
			g = (~((g >> 31 >> 0)) >> 0) & 65535;
		}
		b = yy1 + ($imul(116130, cb1)) >> 0;
		if (((((b >>> 0)) & 4278190080) >>> 0) === 0) {
			b = (b >> $min((8), 31)) >> 0;
		} else {
			b = (~((b >> 31 >> 0)) >> 0) & 65535;
		}
		return [((r >>> 0)), ((g >>> 0)), ((b >>> 0)), 65535];
	};
	YCbCr.prototype.RGBA = function() { return this.$val.RGBA(); };
	yCbCrModel = function(c) {
		var _r, _tuple, _tuple$1, _tuple$2, b, c, g, ok, r, u, v, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; u = $f.u; v = $f.v; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, YCbCr, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		_tuple$2 = RGBToYCbCr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)));
		y = _tuple$2[0];
		u = _tuple$2[1];
		v = _tuple$2[2];
		$s = -1; return (x = new YCbCr.ptr(y, u, v), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: yCbCrModel }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.u = u; $f.v = v; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	NYCbCrA.ptr.prototype.RGBA = function() {
		var _q, _q$1, _q$2, a, b, c, cb1, cr1, g, r, yy1;
		c = this;
		yy1 = $imul(((c.YCbCr.Y >> 0)), 65793);
		cb1 = ((c.YCbCr.Cb >> 0)) - 128 >> 0;
		cr1 = ((c.YCbCr.Cr >> 0)) - 128 >> 0;
		r = yy1 + ($imul(91881, cr1)) >> 0;
		if (((((r >>> 0)) & 4278190080) >>> 0) === 0) {
			r = (r >> $min((8), 31)) >> 0;
		} else {
			r = (~((r >> 31 >> 0)) >> 0) & 65535;
		}
		g = (yy1 - ($imul(22554, cb1)) >> 0) - ($imul(46802, cr1)) >> 0;
		if (((((g >>> 0)) & 4278190080) >>> 0) === 0) {
			g = (g >> $min((8), 31)) >> 0;
		} else {
			g = (~((g >> 31 >> 0)) >> 0) & 65535;
		}
		b = yy1 + ($imul(116130, cb1)) >> 0;
		if (((((b >>> 0)) & 4278190080) >>> 0) === 0) {
			b = (b >> $min((8), 31)) >> 0;
		} else {
			b = (~((b >> 31 >> 0)) >> 0) & 65535;
		}
		a = $imul(((c.A >>> 0)), 257) >>> 0;
		return [(_q = ($imul(((r >>> 0)), a) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ($imul(((g >>> 0)), a) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")), (_q$2 = ($imul(((b >>> 0)), a) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")), a];
	};
	NYCbCrA.prototype.RGBA = function() { return this.$val.RGBA(); };
	nYCbCrAModel = function(c) {
		var _q, _q$1, _q$2, _r, _ref, _tuple, _tuple$1, a, b, c, c$1, c$2, g, r, u, v, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; c$1 = $f.c$1; c$2 = $f.c$2; g = $f.g; r = $f.r; u = $f.u; v = $f.v; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = c;
		if ($assertType(_ref, NYCbCrA, true)[1]) {
			c$1 = $clone(_ref.$val, NYCbCrA);
			$s = -1; return new c$1.constructor.elem(c$1);
		} else if ($assertType(_ref, YCbCr, true)[1]) {
			c$2 = $clone(_ref.$val, YCbCr);
			$s = -1; return (x = new NYCbCrA.ptr($clone(c$2, YCbCr), 255), new x.constructor.elem(x));
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		g = _tuple[1];
		b = _tuple[2];
		a = _tuple[3];
		if (!((a === 0))) {
			r = (_q = (($imul(r, 65535) >>> 0)) / a, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			g = (_q$1 = (($imul(g, 65535) >>> 0)) / a, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			b = (_q$2 = (($imul(b, 65535) >>> 0)) / a, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		_tuple$1 = RGBToYCbCr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)));
		y = _tuple$1[0];
		u = _tuple$1[1];
		v = _tuple$1[2];
		$s = -1; return (x$1 = new NYCbCrA.ptr(new YCbCr.ptr(y, u, v), (((a >>> 8 >>> 0) << 24 >>> 24))), new x$1.constructor.elem(x$1));
		/* */ } return; } if ($f === undefined) { $f = { $blk: nYCbCrAModel }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.c$1 = c$1; $f.c$2 = c$2; $f.g = g; $f.r = r; $f.u = u; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBToCMYK = function(r, g, b) {
		var _q, _q$1, _q$2, b, bb, c, g, gg, m, r, rr, w, y;
		rr = ((r >>> 0));
		gg = ((g >>> 0));
		bb = ((b >>> 0));
		w = rr;
		if (w < gg) {
			w = gg;
		}
		if (w < bb) {
			w = bb;
		}
		if (w === 0) {
			return [0, 0, 0, 255];
		}
		c = (_q = ($imul(((w - rr >>> 0)), 255) >>> 0) / w, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		m = (_q$1 = ($imul(((w - gg >>> 0)), 255) >>> 0) / w, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		y = (_q$2 = ($imul(((w - bb >>> 0)), 255) >>> 0) / w, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		return [((c << 24 >>> 24)), ((m << 24 >>> 24)), ((y << 24 >>> 24)), (((255 - w >>> 0) << 24 >>> 24))];
	};
	$pkg.RGBToCMYK = RGBToCMYK;
	CMYKToRGB = function(c, m, y, k) {
		var _q, _q$1, _q$2, b, c, g, k, m, r, w, y;
		w = 65535 - ($imul(((k >>> 0)), 257) >>> 0) >>> 0;
		r = (_q = ($imul(((65535 - ($imul(((c >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = ($imul(((65535 - ($imul(((m >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = ($imul(((65535 - ($imul(((y >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		return [(((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24))];
	};
	$pkg.CMYKToRGB = CMYKToRGB;
	CMYK.ptr.prototype.RGBA = function() {
		var _q, _q$1, _q$2, b, c, g, r, w;
		c = this;
		w = 65535 - ($imul(((c.K >>> 0)), 257) >>> 0) >>> 0;
		r = (_q = ($imul(((65535 - ($imul(((c.C >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = ($imul(((65535 - ($imul(((c.M >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = ($imul(((65535 - ($imul(((c.Y >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		return [r, g, b, 65535];
	};
	CMYK.prototype.RGBA = function() { return this.$val.RGBA(); };
	cmykModel = function(c) {
		var _r, _tuple, _tuple$1, _tuple$2, b, c, cc, g, kk, mm, ok, r, x, yy, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; c = $f.c; cc = $f.cc; g = $f.g; kk = $f.kk; mm = $f.mm; ok = $f.ok; r = $f.r; x = $f.x; yy = $f.yy; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, CMYK, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		_tuple$2 = RGBToCMYK((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)));
		cc = _tuple$2[0];
		mm = _tuple$2[1];
		yy = _tuple$2[2];
		kk = _tuple$2[3];
		$s = -1; return (x = new CMYK.ptr(cc, mm, yy, kk), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: cmykModel }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.c = c; $f.cc = cc; $f.g = g; $f.kk = kk; $f.mm = mm; $f.ok = ok; $f.r = r; $f.x = x; $f.yy = yy; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBA.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	RGBA64.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	NRGBA.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	NRGBA64.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Alpha.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Alpha16.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Gray.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Gray16.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	ptrType.methods = [{prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Color], [Color], false)}];
	Palette.methods = [{prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Color], [Color], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([Color], [$Int], false)}];
	YCbCr.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	NYCbCrA.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	CMYK.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Color.init([{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}]);
	RGBA.init("", [{prop: "R", name: "R", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "G", name: "G", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "B", name: "B", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	RGBA64.init("", [{prop: "R", name: "R", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "G", name: "G", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "B", name: "B", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	NRGBA.init("", [{prop: "R", name: "R", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "G", name: "G", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "B", name: "B", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	NRGBA64.init("", [{prop: "R", name: "R", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "G", name: "G", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "B", name: "B", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	Alpha.init("", [{prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	Alpha16.init("", [{prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	Gray.init("", [{prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	Gray16.init("", [{prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	Model.init([{prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Color], [Color], false)}]);
	modelFunc.init("image/color", [{prop: "f", name: "f", anonymous: false, exported: false, typ: funcType, tag: ""}]);
	Palette.init(Color);
	YCbCr.init("", [{prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Cb", name: "Cb", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Cr", name: "Cr", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	NYCbCrA.init("", [{prop: "YCbCr", name: "YCbCr", anonymous: true, exported: true, typ: YCbCr, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	CMYK.init("", [{prop: "C", name: "C", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "M", name: "M", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "K", name: "K", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$pkg.RGBAModel = ModelFunc(rgbaModel);
		$pkg.RGBA64Model = ModelFunc(rgba64Model);
		$pkg.NRGBAModel = ModelFunc(nrgbaModel);
		$pkg.NRGBA64Model = ModelFunc(nrgba64Model);
		$pkg.AlphaModel = ModelFunc(alphaModel);
		$pkg.Alpha16Model = ModelFunc(alpha16Model);
		$pkg.GrayModel = ModelFunc(grayModel);
		$pkg.Gray16Model = ModelFunc(gray16Model);
		$pkg.Black = new Gray16.ptr(0);
		$pkg.White = new Gray16.ptr(65535);
		$pkg.Transparent = new Alpha16.ptr(0);
		$pkg.Opaque = new Alpha16.ptr(65535);
		$pkg.YCbCrModel = ModelFunc(yCbCrModel);
		$pkg.NYCbCrAModel = ModelFunc(nYCbCrAModel);
		$pkg.CMYKModel = ModelFunc(cmykModel);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/affine"] = (function() {
	var $pkg = {}, $init, color, math, ColorM, sliceType, ptrType, ptrType$1, colorMIdentityBody, colorMIdentityTranslate, rgbToYCbCr, yCbCrToRgb, mulSquare, clamp;
	color = $packages["image/color"];
	math = $packages["math"];
	ColorM = $pkg.ColorM = $newType(0, $kindStruct, "affine.ColorM", true, "github.com/hajimehoshi/ebiten/internal/affine", true, function(body_, translate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.body = sliceType.nil;
			this.translate = sliceType.nil;
			return;
		}
		this.body = body_;
		this.translate = translate_;
	});
	sliceType = $sliceType($Float32);
	ptrType = $ptrType(ColorM);
	ptrType$1 = $ptrType(sliceType);
	mulSquare = function(lhs, rhs, dim) {
		var dim, e, i, j, k, lhs, result, rhs, x, x$1, x$2;
		result = $makeSlice(sliceType, lhs.$length);
		i = 0;
		while (true) {
			if (!(i < dim)) { break; }
			j = 0;
			while (true) {
				if (!(j < dim)) { break; }
				e = 0;
				k = 0;
				while (true) {
					if (!(k < dim)) { break; }
					e = $fround(e + ($fround((x = ($imul(i, dim)) + k >> 0, ((x < 0 || x >= lhs.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + x])) * (x$1 = ($imul(k, dim)) + j >> 0, ((x$1 < 0 || x$1 >= rhs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhs.$array[rhs.$offset + x$1])))));
					k = k + (1) >> 0;
				}
				(x$2 = ($imul(i, dim)) + j >> 0, ((x$2 < 0 || x$2 >= result.$length) ? ($throwRuntimeError("index out of range"), undefined) : result.$array[result.$offset + x$2] = e));
				j = j + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return result;
	};
	clamp = function(x) {
		var x;
		if (x > 1) {
			return 1;
		}
		if (x < 0) {
			return 0;
		}
		return x;
	};
	ColorM.ptr.prototype.isInited = function() {
		var c;
		c = this;
		return !(c === ptrType.nil) && (!(c.body === sliceType.nil) || !(c.translate === sliceType.nil));
	};
	ColorM.prototype.isInited = function() { return this.$val.isInited(); };
	ColorM.ptr.prototype.ScaleOnly = function() {
		var _i, _i$1, _ref, _ref$1, c, e, e$1, i;
		c = this;
		if (c === ptrType.nil) {
			return true;
		}
		if (!(c.body === sliceType.nil)) {
			_ref = c.body;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if ((i === 0) || (i === 5) || (i === 10) || (i === 15)) {
					_i++;
					continue;
				}
				if (!((e === 0))) {
					return false;
				}
				_i++;
			}
		}
		if (!(c.translate === sliceType.nil)) {
			_ref$1 = c.translate;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				e$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (!((e$1 === 0))) {
					return false;
				}
				_i$1++;
			}
		}
		return true;
	};
	ColorM.prototype.ScaleOnly = function() { return this.$val.ScaleOnly(); };
	ColorM.ptr.prototype.Apply = function(clr) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, a, af, af2, b, bf, bf2, c, clr, eb, et, g, gf, gf2, r, rf, rf2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; a = $f.a; af = $f.af; af2 = $f.af2; b = $f.b; bf = $f.bf; bf2 = $f.bf2; c = $f.c; clr = $f.clr; eb = $f.eb; et = $f.et; g = $f.g; gf = $f.gf; gf2 = $f.gf2; r = $f.r; rf = $f.rf; rf2 = $f.rf2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (!c.isInited()) {
			$s = -1; return clr;
		}
		_r = clr.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		g = _tuple[1];
		b = _tuple[2];
		a = _tuple[3];
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 0;
		rf = _tmp;
		gf = _tmp$1;
		bf = _tmp$2;
		af = _tmp$3;
		if (a > 0) {
			rf = $fround((r) / (a));
			gf = $fround((g) / (a));
			bf = $fround((b) / (a));
			af = $fround((a) / 65535);
		}
		eb = c.body;
		if (eb === sliceType.nil) {
			eb = colorMIdentityBody;
		}
		et = c.translate;
		if (et === sliceType.nil) {
			et = colorMIdentityTranslate;
		}
		rf2 = $fround($fround($fround($fround($fround((0 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 0]) * rf) + $fround((4 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 4]) * gf)) + $fround((8 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 8]) * bf)) + $fround((12 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 12]) * af)) + (0 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 0]));
		gf2 = $fround($fround($fround($fround($fround((1 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 1]) * rf) + $fround((5 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 5]) * gf)) + $fround((9 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 9]) * bf)) + $fround((13 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 13]) * af)) + (1 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 1]));
		bf2 = $fround($fround($fround($fround($fround((2 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 2]) * rf) + $fround((6 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 6]) * gf)) + $fround((10 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 10]) * bf)) + $fround((14 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 14]) * af)) + (2 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 2]));
		af2 = $fround($fround($fround($fround($fround((3 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 3]) * rf) + $fround((7 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 7]) * gf)) + $fround((11 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 11]) * bf)) + $fround((15 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 15]) * af)) + (3 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 3]));
		rf2 = clamp(rf2);
		gf2 = clamp(gf2);
		bf2 = clamp(bf2);
		af2 = clamp(af2);
		$s = -1; return (x = new color.NRGBA64.ptr((($fround(rf2 * 65535) >> 0)), (($fround(gf2 * 65535) >> 0)), (($fround(bf2 * 65535) >> 0)), (($fround(af2 * 65535) >> 0))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ColorM.ptr.prototype.Apply }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.a = a; $f.af = af; $f.af2 = af2; $f.b = b; $f.bf = bf; $f.bf2 = bf2; $f.c = c; $f.clr = clr; $f.eb = eb; $f.et = et; $f.g = g; $f.gf = gf; $f.gf2 = gf2; $f.r = r; $f.rf = rf; $f.rf2 = rf2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ColorM.prototype.Apply = function(clr) { return this.$val.Apply(clr); };
	ColorM.ptr.prototype.UnsafeElements = function() {
		var c, eb, et;
		c = this;
		if (!c.isInited()) {
			return [colorMIdentityBody, colorMIdentityTranslate];
		}
		eb = c.body;
		if (eb === sliceType.nil) {
			eb = colorMIdentityBody;
		}
		et = c.translate;
		if (et === sliceType.nil) {
			et = colorMIdentityTranslate;
		}
		return [eb, et];
	};
	ColorM.prototype.UnsafeElements = function() { return this.$val.UnsafeElements(); };
	ColorM.ptr.prototype.SetElement = function(i, j, element) {
		var c, element, i, j, newC, x, x$1, x$2;
		c = this;
		newC = new ColorM.ptr($makeSlice(sliceType, 16), $makeSlice(sliceType, 4));
		$copySlice(newC.body, colorMIdentityBody);
		$copySlice(newC.translate, colorMIdentityTranslate);
		if (c.isInited()) {
			if (!(c.body === sliceType.nil)) {
				$copySlice(newC.body, c.body);
			}
			if (!(c.translate === sliceType.nil)) {
				$copySlice(newC.translate, c.translate);
			}
		}
		if (j < 4) {
			(x = newC.body, x$1 = i + ($imul(j, 4)) >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = element));
		} else {
			(x$2 = newC.translate, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i] = element));
		}
		return newC;
	};
	ColorM.prototype.SetElement = function(i, j, element) { return this.$val.SetElement(i, j, element); };
	ColorM.ptr.prototype.Equals = function(other) {
		var _i, _i$1, _ref, _ref$1, c, i, i$1, lhsb, lhsb$24ptr, lhst, lhst$24ptr, other, rhsb, rhsb$24ptr, rhst, rhst$24ptr;
		c = this;
		if (!c.isInited() && !other.isInited()) {
			return true;
		}
		lhsb = colorMIdentityBody;
		lhst = colorMIdentityTranslate;
		rhsb = colorMIdentityBody;
		rhst = colorMIdentityTranslate;
		if (other.isInited()) {
			if (!(other.body === sliceType.nil)) {
				lhsb = other.body;
			}
			if (!(other.translate === sliceType.nil)) {
				lhst = other.translate;
			}
		}
		if (c.isInited()) {
			if (!(c.body === sliceType.nil)) {
				rhsb = c.body;
			}
			if (!(c.translate === sliceType.nil)) {
				rhst = c.translate;
			}
		}
		if ((lhsb$24ptr || (lhsb$24ptr = new ptrType$1(function() { return lhsb; }, function($v) { lhsb = $subslice(new sliceType($v.$array), $v.$offset, $v.$offset + $v.$length); }))) === (rhsb$24ptr || (rhsb$24ptr = new ptrType$1(function() { return rhsb; }, function($v) { rhsb = $subslice(new sliceType($v.$array), $v.$offset, $v.$offset + $v.$length); }))) && (lhst$24ptr || (lhst$24ptr = new ptrType$1(function() { return lhst; }, function($v) { lhst = $subslice(new sliceType($v.$array), $v.$offset, $v.$offset + $v.$length); }))) === (rhst$24ptr || (rhst$24ptr = new ptrType$1(function() { return rhst; }, function($v) { rhst = $subslice(new sliceType($v.$array), $v.$offset, $v.$offset + $v.$length); })))) {
			return true;
		}
		_ref = lhsb;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (!((((i < 0 || i >= lhsb.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + i]) === ((i < 0 || i >= rhsb.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhsb.$array[rhsb.$offset + i])))) {
				return false;
			}
			_i++;
		}
		_ref$1 = lhst;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			if (!((((i$1 < 0 || i$1 >= lhst.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + i$1]) === ((i$1 < 0 || i$1 >= rhst.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + i$1])))) {
				return false;
			}
			_i$1++;
		}
		return true;
	};
	ColorM.prototype.Equals = function(other) { return this.$val.Equals(other); };
	ColorM.ptr.prototype.Concat = function(other) {
		var c, lhsb, lhst, other, rhsb, rhst;
		c = this;
		if (!c.isInited()) {
			return other;
		}
		if (!other.isInited()) {
			return c;
		}
		lhsb = colorMIdentityBody;
		lhst = colorMIdentityTranslate;
		rhsb = colorMIdentityBody;
		rhst = colorMIdentityTranslate;
		if (other.isInited()) {
			if (!(other.body === sliceType.nil)) {
				lhsb = other.body;
			}
			if (!(other.translate === sliceType.nil)) {
				lhst = other.translate;
			}
		}
		if (c.isInited()) {
			if (!(c.body === sliceType.nil)) {
				rhsb = c.body;
			}
			if (!(c.translate === sliceType.nil)) {
				rhst = c.translate;
			}
		}
		return new ColorM.ptr(mulSquare(rhsb, lhsb, 4), new sliceType([$fround($fround($fround($fround($fround((0 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 0]) * (0 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 0])) + $fround((4 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 4]) * (1 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 1]))) + $fround((8 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 8]) * (2 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 2]))) + $fround((12 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 12]) * (3 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 3]))) + (0 >= lhst.$length ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + 0])), $fround($fround($fround($fround($fround((1 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 1]) * (0 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 0])) + $fround((5 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 5]) * (1 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 1]))) + $fround((9 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 9]) * (2 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 2]))) + $fround((13 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 13]) * (3 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 3]))) + (1 >= lhst.$length ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + 1])), $fround($fround($fround($fround($fround((2 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 2]) * (0 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 0])) + $fround((6 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 6]) * (1 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 1]))) + $fround((10 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 10]) * (2 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 2]))) + $fround((14 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 14]) * (3 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 3]))) + (2 >= lhst.$length ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + 2])), $fround($fround($fround($fround($fround((3 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 3]) * (0 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 0])) + $fround((7 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 7]) * (1 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 1]))) + $fround((11 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 11]) * (2 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 2]))) + $fround((15 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 15]) * (3 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 3]))) + (3 >= lhst.$length ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + 3]))]));
	};
	ColorM.prototype.Concat = function(other) { return this.$val.Concat(other); };
	ColorM.ptr.prototype.Add = function(other) {
		var _i, _i$1, _ref, _ref$1, c, i, i$1, lhsb, lhst, newC, other, rhsb, rhst, x, x$1;
		c = this;
		lhsb = colorMIdentityBody;
		lhst = colorMIdentityTranslate;
		rhsb = colorMIdentityBody;
		rhst = colorMIdentityTranslate;
		if (other.isInited()) {
			if (!(other.body === sliceType.nil)) {
				lhsb = other.body;
			}
			if (!(other.translate === sliceType.nil)) {
				lhst = other.translate;
			}
		}
		if (c.isInited()) {
			if (!(c.body === sliceType.nil)) {
				rhsb = c.body;
			}
			if (!(c.translate === sliceType.nil)) {
				rhst = c.translate;
			}
		}
		newC = new ColorM.ptr($makeSlice(sliceType, 16), $makeSlice(sliceType, 4));
		_ref = lhsb;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			(x = newC.body, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = $fround(((i < 0 || i >= lhsb.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + i]) + ((i < 0 || i >= rhsb.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhsb.$array[rhsb.$offset + i]))));
			_i++;
		}
		_ref$1 = lhst;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			(x$1 = newC.translate, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1] = $fround(((i$1 < 0 || i$1 >= lhst.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + i$1]) + ((i$1 < 0 || i$1 >= rhst.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + i$1]))));
			_i$1++;
		}
		return newC;
	};
	ColorM.prototype.Add = function(other) { return this.$val.Add(other); };
	ColorM.ptr.prototype.Scale = function(r, g, b, a) {
		var _index, _index$1, _index$2, _index$3, a, b, c, eb, et, g, i, r, x, x$1, x$2, x$3;
		c = this;
		if (!c.isInited()) {
			return new ColorM.ptr(new sliceType([r, 0, 0, 0, 0, g, 0, 0, 0, 0, b, 0, 0, 0, 0, a]), sliceType.nil);
		}
		eb = $makeSlice(sliceType, colorMIdentityBody.$length);
		if (!(c.body === sliceType.nil)) {
			$copySlice(eb, c.body);
			i = 0;
			while (true) {
				if (!(i < 4)) { break; }
				_index = $imul(i, 4);
				((_index < 0 || _index >= eb.$length) ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + _index] = $fround(((_index < 0 || _index >= eb.$length) ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + _index]) * (r)));
				_index$1 = ($imul(i, 4)) + 1 >> 0;
				((_index$1 < 0 || _index$1 >= eb.$length) ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + _index$1] = $fround(((_index$1 < 0 || _index$1 >= eb.$length) ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + _index$1]) * (g)));
				_index$2 = ($imul(i, 4)) + 2 >> 0;
				((_index$2 < 0 || _index$2 >= eb.$length) ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + _index$2] = $fround(((_index$2 < 0 || _index$2 >= eb.$length) ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + _index$2]) * (b)));
				_index$3 = ($imul(i, 4)) + 3 >> 0;
				((_index$3 < 0 || _index$3 >= eb.$length) ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + _index$3] = $fround(((_index$3 < 0 || _index$3 >= eb.$length) ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + _index$3]) * (a)));
				i = i + (1) >> 0;
			}
		} else {
			(0 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 0] = r);
			(5 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 5] = g);
			(10 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 10] = b);
			(15 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 15] = a);
		}
		et = $makeSlice(sliceType, colorMIdentityTranslate.$length);
		if (!(c.translate === sliceType.nil)) {
			(0 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 0] = $fround((x = c.translate, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) * r));
			(1 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 1] = $fround((x$1 = c.translate, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])) * g));
			(2 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 2] = $fround((x$2 = c.translate, (2 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 2])) * b));
			(3 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 3] = $fround((x$3 = c.translate, (3 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 3])) * a));
		}
		return new ColorM.ptr(eb, et);
	};
	ColorM.prototype.Scale = function(r, g, b, a) { return this.$val.Scale(r, g, b, a); };
	ColorM.ptr.prototype.Translate = function(r, g, b, a) {
		var a, b, c, es, g, r;
		c = this;
		if (!c.isInited()) {
			return new ColorM.ptr(sliceType.nil, new sliceType([r, g, b, a]));
		}
		es = $makeSlice(sliceType, colorMIdentityTranslate.$length);
		if (!(c.translate === sliceType.nil)) {
			$copySlice(es, c.translate);
		}
		(0 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 0] = $fround((0 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 0]) + (r)));
		(1 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 1] = $fround((1 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 1]) + (g)));
		(2 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 2] = $fround((2 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 2]) + (b)));
		(3 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 3] = $fround((3 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 3]) + (a)));
		return new ColorM.ptr(c.body, es);
	};
	ColorM.prototype.Translate = function(r, g, b, a) { return this.$val.Translate(r, g, b, a); };
	ColorM.ptr.prototype.ChangeHSV = function(hueTheta, saturationScale, valueScale) {
		var _tmp, _tmp$1, _tuple, c, c32, cos, hueTheta, s, s32, saturationScale, sin, v, valueScale;
		c = this;
		_tuple = math.Sincos(hueTheta);
		sin = _tuple[0];
		cos = _tuple[1];
		_tmp = ($fround(sin));
		_tmp$1 = ($fround(cos));
		s32 = _tmp;
		c32 = _tmp$1;
		c = c.Concat(rgbToYCbCr);
		c = c.Concat(new ColorM.ptr(new sliceType([1, 0, 0, 0, 0, c32, s32, 0, 0, -s32, c32, 0, 0, 0, 0, 1]), sliceType.nil));
		s = saturationScale;
		v = valueScale;
		c = c.Scale(v, $fround(s * v), $fround(s * v), 1);
		c = c.Concat(yCbCrToRgb);
		return c;
	};
	ColorM.prototype.ChangeHSV = function(hueTheta, saturationScale, valueScale) { return this.$val.ChangeHSV(hueTheta, saturationScale, valueScale); };
	ptrType.methods = [{prop: "isInited", name: "isInited", pkg: "github.com/hajimehoshi/ebiten/internal/affine", typ: $funcType([], [$Bool], false)}, {prop: "ScaleOnly", name: "ScaleOnly", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Apply", name: "Apply", pkg: "", typ: $funcType([color.Color], [color.Color], false)}, {prop: "UnsafeElements", name: "UnsafeElements", pkg: "", typ: $funcType([], [sliceType, sliceType], false)}, {prop: "SetElement", name: "SetElement", pkg: "", typ: $funcType([$Int, $Int, $Float32], [ptrType], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([ptrType], [$Bool], false)}, {prop: "Concat", name: "Concat", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32], [ptrType], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32], [ptrType], false)}, {prop: "ChangeHSV", name: "ChangeHSV", pkg: "", typ: $funcType([$Float64, $Float32, $Float32], [ptrType], false)}];
	ColorM.init("github.com/hajimehoshi/ebiten/internal/affine", [{prop: "body", name: "body", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "translate", name: "translate", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = color.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		colorMIdentityBody = new sliceType([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
		colorMIdentityTranslate = new sliceType([0, 0, 0, 0]);
		rgbToYCbCr = new ColorM.ptr(new sliceType([0.29899999499320984, -0.16869999468326569, 0.5, 0, 0.5870000123977661, -0.3312999904155731, -0.4187000095844269, 0, 0.11400000005960464, 0.5, -0.08129999786615372, 0, 0, 0, 0, 1]), sliceType.nil);
		yCbCrToRgb = new ColorM.ptr(new sliceType([1, 1, 1, 0, 0, -0.3441399931907654, 1.7719999551773071, 0, 1.4019999504089355, -0.714139997959137, 0, 0, 0, 0, 0, 1]), sliceType.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherwasm/js"] = (function() {
	var $pkg = {}, $init, js, reflect, Type, Callback, Value, TypedArray, ValueError, sliceType, ptrType, sliceType$1, funcType, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, sliceType$8, sliceType$9, sliceType$10, ptrType$1, ptrType$2, id, instanceOf, getValueType, Global, Null, Undefined, funcToValue, NewCallback, NewEventCallback, init, ValueOf, convertArgs, TypedArrayOf;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	reflect = $packages["reflect"];
	Type = $pkg.Type = $newType(4, $kindInt, "js.Type", true, "github.com/gopherjs/gopherwasm/js", true, null);
	Callback = $pkg.Callback = $newType(0, $kindStruct, "js.Callback", true, "github.com/gopherjs/gopherwasm/js", true, function(Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new Value.ptr(null);
			return;
		}
		this.Value = Value_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "js.Value", true, "github.com/gopherjs/gopherwasm/js", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = null;
			return;
		}
		this.v = v_;
	});
	TypedArray = $pkg.TypedArray = $newType(0, $kindStruct, "js.TypedArray", true, "github.com/gopherjs/gopherwasm/js", true, function(Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new Value.ptr(null);
			return;
		}
		this.Value = Value_;
	});
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "js.ValueError", true, "github.com/gopherjs/gopherwasm/js", true, function(Method_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Type = 0;
			return;
		}
		this.Method = Method_;
		this.Type = Type_;
	});
	sliceType = $sliceType(Value);
	ptrType = $ptrType(js.Object);
	sliceType$1 = $sliceType(ptrType);
	funcType = $funcType([sliceType$1], [], true);
	sliceType$2 = $sliceType($emptyInterface);
	sliceType$3 = $sliceType($Int8);
	sliceType$4 = $sliceType($Int16);
	sliceType$5 = $sliceType($Int32);
	sliceType$6 = $sliceType($Uint8);
	sliceType$7 = $sliceType($Uint16);
	sliceType$8 = $sliceType($Uint32);
	sliceType$9 = $sliceType($Float32);
	sliceType$10 = $sliceType($Float64);
	ptrType$1 = $ptrType(TypedArray);
	ptrType$2 = $ptrType(ValueError);
	Type.prototype.String = function() {
		var _1, t;
		t = this.$val;
		_1 = t;
		if (_1 === (0)) {
			return "undefined";
		} else if (_1 === (1)) {
			return "null";
		} else if (_1 === (2)) {
			return "boolean";
		} else if (_1 === (3)) {
			return "number";
		} else if (_1 === (4)) {
			return "string";
		} else if (_1 === (5)) {
			return "symbol";
		} else if (_1 === (6)) {
			return "object";
		} else if (_1 === (7)) {
			return "function";
		} else {
			$panic(new $String("bad type"));
		}
	};
	$ptrType(Type).prototype.String = function() { return new Type(this.$get()).String(); };
	Global = function() {
		return new Value.ptr($global);
	};
	$pkg.Global = Global;
	Null = function() {
		return new Value.ptr(null);
	};
	$pkg.Null = Null;
	Undefined = function() {
		return new Value.ptr(undefined);
	};
	$pkg.Undefined = Undefined;
	funcToValue = function(flags, f) {
		var f, flags;
		return new Value.ptr(id($externalize((function(args) {
			var args, e;
			if (args.$length > 0) {
				e = (0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]);
				if (!(((flags & 1) === 0))) {
					e.preventDefault();
				}
				if (!(((flags & 2) === 0))) {
					e.stopPropagation();
				}
				if (!(((flags & 4) === 0))) {
					e.stopImmediatePropagation();
				}
			}
			$go((function $b() {
				var _i, _ref, arg, newArgs, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; arg = $f.arg; newArgs = $f.newArgs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				newArgs = new sliceType([]);
				_ref = args;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					newArgs = $append(newArgs, new Value.ptr(arg));
					_i++;
				}
				$r = f(newArgs); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._i = _i; $f._ref = _ref; $f.arg = arg; $f.newArgs = newArgs; $f.$s = $s; $f.$r = $r; return $f;
			}), []);
		}), funcType)));
	};
	NewCallback = function(f) {
		var f;
		return new Callback.ptr($clone(funcToValue(0, f), Value));
	};
	$pkg.NewCallback = NewCallback;
	NewEventCallback = function(flags, fn) {
		var f, flags, fn;
		f = (function $b(args) {
			var args, e, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; args = $f.args; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			e = $clone((0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]), Value);
			$r = fn($clone(e, Value)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.args = args; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
		});
		return new Callback.ptr($clone(funcToValue(flags, f), Value));
	};
	$pkg.NewEventCallback = NewEventCallback;
	Callback.ptr.prototype.Release = function() {
		var c;
		c = this;
		Value.copy(c.Value, Null());
	};
	Callback.prototype.Release = function() { return this.$val.Release(); };
	init = function() {
		if (!($global === null)) {
			id = $global.eval($externalize("(function(x) { return x; })", $String));
			instanceOf = $global.eval($externalize("(function(x, y) { return x instanceof y; })", $String));
			getValueType = $global.eval($externalize("(function(x) {\n  if (typeof(x) === \"undefined\") {\n    return 0; // TypeUndefined\n  }\n  if (x === null) {\n    return 1; // TypeNull\n  }\n  if (typeof(x) === \"boolean\") {\n    return 2; // TypeBoolean\n  }\n  if (typeof(x) === \"number\") {\n    return 3; // TypeNumber\n  }\n  if (typeof(x) === \"string\") {\n    return 4; // TypeString\n  }\n  if (typeof(x) === \"symbol\") {\n    return 5; // TypeSymbol\n  }\n  if (typeof(x) === \"function\") {\n    return 7; // TypeFunction\n  }\n  return 6; // TypeObject\n})", $String));
		}
	};
	ValueOf = function(x) {
		var _r, _ref, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _ref = $f._ref; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = x;
		/* */ if ($assertType(_ref, Value, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, Callback, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, TypedArray, true)[1]) { $s = 3; continue; }
		/* */ if (_ref === $ifaceNil) { $s = 4; continue; }
		/* */ if ($assertType(_ref, $Bool, true)[1] || $assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int8, true)[1] || $assertType(_ref, $Int16, true)[1] || $assertType(_ref, $Int32, true)[1] || $assertType(_ref, $Int64, true)[1] || $assertType(_ref, $Uint, true)[1] || $assertType(_ref, $Uint8, true)[1] || $assertType(_ref, $Uint16, true)[1] || $assertType(_ref, $Uint32, true)[1] || $assertType(_ref, $Uint64, true)[1] || $assertType(_ref, $Float32, true)[1] || $assertType(_ref, $Float64, true)[1] || $assertType(_ref, $UnsafePointer, true)[1] || $assertType(_ref, $String, true)[1]) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($assertType(_ref, Value, true)[1]) { */ case 1:
			x$1 = $clone(_ref.$val, Value);
			$s = -1; return x$1;
		/* } else if ($assertType(_ref, Callback, true)[1]) { */ case 2:
			x$2 = $clone(_ref.$val, Callback);
			$s = -1; return x$2.Value;
		/* } else if ($assertType(_ref, TypedArray, true)[1]) { */ case 3:
			x$3 = $clone(_ref.$val, TypedArray);
			$s = -1; return x$3.Value;
		/* } else if (_ref === $ifaceNil) { */ case 4:
			x$4 = _ref;
			$s = -1; return Null();
		/* } else if ($assertType(_ref, $Bool, true)[1] || $assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int8, true)[1] || $assertType(_ref, $Int16, true)[1] || $assertType(_ref, $Int32, true)[1] || $assertType(_ref, $Int64, true)[1] || $assertType(_ref, $Uint, true)[1] || $assertType(_ref, $Uint8, true)[1] || $assertType(_ref, $Uint16, true)[1] || $assertType(_ref, $Uint32, true)[1] || $assertType(_ref, $Uint64, true)[1] || $assertType(_ref, $Float32, true)[1] || $assertType(_ref, $Float64, true)[1] || $assertType(_ref, $UnsafePointer, true)[1] || $assertType(_ref, $String, true)[1]) { */ case 5:
			x$5 = _ref;
			$s = -1; return new Value.ptr(id($externalize(x$5, $emptyInterface)));
		/* } else { */ case 6:
			x$6 = _ref;
			_r = reflect.TypeOf(x$6).String(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String("invalid arg: " + _r));
		/* } */ case 7:
		$s = -1; return new Value.ptr(null);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f._r = _r; $f._ref = _ref; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	Value.ptr.prototype.Bool = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 2))) {
			$panic(new ValueError.ptr("Value.Bool", vType));
		}
		return !!(v.v);
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	convertArgs = function(args) {
		var _i, _r, _ref, arg, args, newArgs, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; arg = $f.arg; args = $f.args; newArgs = $f.newArgs; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		newArgs = new sliceType$2([]);
		_ref = args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = $clone(_r, Value);
			newArgs = $append(newArgs, new $jsObjectPtr(v.v));
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return newArgs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertArgs }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.arg = arg; $f.args = args; $f.newArgs = newArgs; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.ptr.prototype.Call = function(m, args) {
		var _r, args, m, obj, propType, v, vType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; args = $f.args; m = $f.m; obj = $f.obj; propType = $f.propType; v = $f.v; vType = $f.vType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 6)) && !((vType === 7))) {
			$panic(new ValueError.ptr("Value.Call", vType));
		}
		propType = $clone($clone(v, Value).Get(m), Value).Type();
		if (!((propType === 7))) {
			$panic(new $String("js: Value.Call: property " + m + " is not a function, got " + new Type(propType).String()));
		}
		_r = convertArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr((obj = v.v, obj[$externalize(m, $String)].apply(obj, $externalize(_r, sliceType$2))));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f._r = _r; $f.args = args; $f.m = m; $f.obj = obj; $f.propType = propType; $f.v = v; $f.vType = vType; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(m, args) { return this.$val.Call(m, args); };
	Value.ptr.prototype.Float = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 3))) {
			$panic(new ValueError.ptr("Value.Float", vType));
		}
		return $parseFloat(v.v);
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Get = function(p) {
		var p, v;
		v = this;
		return new Value.ptr(v.v[$externalize(p, $String)]);
	};
	Value.prototype.Get = function(p) { return this.$val.Get(p); };
	Value.ptr.prototype.Index = function(i) {
		var i, v;
		v = this;
		return new Value.ptr(v.v[i]);
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.Int = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 3))) {
			$panic(new ValueError.ptr("Value.Int", vType));
		}
		return $parseInt(v.v) >> 0;
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.Invoke = function(args) {
		var _r, args, v, vType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; args = $f.args; v = $f.v; vType = $f.vType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 7))) {
			$panic(new ValueError.ptr("Value.Invoke", vType));
		}
		_r = convertArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(v.v.apply(undefined, $externalize(_r, sliceType$2)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Invoke }; } $f._r = _r; $f.args = args; $f.v = v; $f.vType = vType; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Value.ptr.prototype.Length = function() {
		var v;
		v = this;
		return $parseInt(v.v.length);
	};
	Value.prototype.Length = function() { return this.$val.Length(); };
	Value.ptr.prototype.New = function(args) {
		var _r, args, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; args = $f.args; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = convertArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(new ($global.Function.prototype.bind.apply(v.v, [undefined].concat($externalize(_r, sliceType$2)))));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.New }; } $f._r = _r; $f.args = args; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.New = function(args) { return this.$val.New(args); };
	Value.ptr.prototype.Set = function(p, x) {
		var p, v, x;
		v = this;
		v.v[$externalize(p, $String)] = $externalize(x, $emptyInterface);
	};
	Value.prototype.Set = function(p, x) { return this.$val.Set(p, x); };
	Value.ptr.prototype.SetIndex = function(i, x) {
		var i, v, x;
		v = this;
		v.v[i] = $externalize(x, $emptyInterface);
	};
	Value.prototype.SetIndex = function(i, x) { return this.$val.SetIndex(i, x); };
	Value.ptr.prototype.String = function() {
		var v;
		v = this;
		return $internalize(v.v, $String);
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.InstanceOf = function(t) {
		var t, v;
		v = this;
		return !!(instanceOf($externalize(v, Value), $externalize(t, Value)));
	};
	Value.prototype.InstanceOf = function(t) { return this.$val.InstanceOf(t); };
	Value.ptr.prototype.Type = function() {
		var v;
		v = this;
		return ((($parseInt(getValueType($externalize(v, Value))) >> 0) >> 0));
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	TypedArrayOf = function(slice) {
		var _ref, slice, slice$1, slice$2;
		_ref = slice;
		if ($assertType(_ref, sliceType$3, true)[1] || $assertType(_ref, sliceType$4, true)[1] || $assertType(_ref, sliceType$5, true)[1] || $assertType(_ref, sliceType$6, true)[1] || $assertType(_ref, sliceType$7, true)[1] || $assertType(_ref, sliceType$8, true)[1] || $assertType(_ref, sliceType$9, true)[1] || $assertType(_ref, sliceType$10, true)[1]) {
			slice$1 = _ref;
			return new TypedArray.ptr(new Value.ptr(id($externalize(slice$1, $emptyInterface))));
		} else {
			slice$2 = _ref;
			$panic(new $String("TypedArrayOf: not a supported slice"));
		}
	};
	$pkg.TypedArrayOf = TypedArrayOf;
	TypedArray.ptr.prototype.Release = function() {
		var t;
		t = this;
		Value.copy(t.Value, Null());
	};
	TypedArray.prototype.Release = function() { return this.$val.Release(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "syscall/js: call of " + e.Method + " on " + new Type(e.Type).String();
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	Type.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Callback.methods = [{prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}];
	Value.methods = [{prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType$2], [Value], true)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType$2], [Value], true)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType$2], [Value], true)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "InstanceOf", name: "InstanceOf", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}];
	ptrType$1.methods = [{prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}];
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Callback.init("", [{prop: "Value", name: "Value", anonymous: true, exported: true, typ: Value, tag: ""}]);
	Value.init("github.com/gopherjs/gopherwasm/js", [{prop: "v", name: "v", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	TypedArray.init("", [{prop: "Value", name: "Value", anonymous: true, exported: true, typ: Value, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		id = null;
		instanceOf = null;
		getValueType = null;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/clock"] = (function() {
	var $pkg = {}, $init, js, sync, time, sliceType, lastSystemTime, currentFPS, currentTPS, lastUpdated, fpsCount, tpsCount, started, onStart, m, calcCountFromTPS, updateFPSAndTPS, Update, now;
	js = $packages["github.com/gopherjs/gopherwasm/js"];
	sync = $packages["sync"];
	time = $packages["time"];
	sliceType = $sliceType($emptyInterface);
	calcCountFromTPS = function(tps, now$1) {
		var count, diff, now$1, syncWithSystemClock, tps, x, x$1, x$2, x$3;
		if ((tps.$high === 0 && tps.$low === 0)) {
			return 0;
		}
		if ((tps.$high < 0 || (tps.$high === 0 && tps.$low < 0))) {
			$panic(new $String("clock: tps must >= 0"));
		}
		if ((lastSystemTime.$high === 0 && lastSystemTime.$low === 0)) {
			lastSystemTime = now$1;
		}
		diff = new $Int64(now$1.$high - lastSystemTime.$high, now$1.$low - lastSystemTime.$low);
		if ((diff.$high < 0 || (diff.$high === 0 && diff.$low < 0))) {
			return 0;
		}
		count = 0;
		syncWithSystemClock = false;
		if ((diff.$high > 0 || (diff.$high === 0 && diff.$low > 83333333))) {
			syncWithSystemClock = true;
		} else {
			count = (((x = $div64($mul64(diff, tps), new $Int64(0, 1000000000), false), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		}
		if ((count === 0) && (x$1 = $div64($div64(new $Int64(0, 1000000000), tps, false), new $Int64(0, 2), false), (x$1.$high < diff.$high || (x$1.$high === diff.$high && x$1.$low < diff.$low)))) {
			count = 1;
		}
		if ((count === 2) && (x$2 = $div64($mul64($div64(new $Int64(0, 1000000000), tps, false), new $Int64(0, 3)), new $Int64(0, 2), false), (x$2.$high > diff.$high || (x$2.$high === diff.$high && x$2.$low > diff.$low)))) {
			count = 1;
		}
		if (syncWithSystemClock) {
			lastSystemTime = now$1;
		} else {
			lastSystemTime = (x$3 = $div64($mul64((new $Int64(0, count)), new $Int64(0, 1000000000)), tps, false), new $Int64(lastSystemTime.$high + x$3.$high, lastSystemTime.$low + x$3.$low));
		}
		return count;
	};
	updateFPSAndTPS = function(now$1, count) {
		var count, now$1, x, x$1;
		if ((lastUpdated.$high === 0 && lastUpdated.$low === 0)) {
			lastUpdated = now$1;
		}
		fpsCount = fpsCount + (1) >> 0;
		tpsCount = tpsCount + (count) >> 0;
		if ((x = ((x$1 = new $Int64(now$1.$high - lastUpdated.$high, now$1.$low - lastUpdated.$low), new time.Duration(x$1.$high, x$1.$low))), (0 > x.$high || (0 === x.$high && 1000000000 > x.$low)))) {
			return;
		}
		currentFPS = (fpsCount) * 1e+09 / ($flatten64(new $Int64(now$1.$high - lastUpdated.$high, now$1.$low - lastUpdated.$low)));
		currentTPS = (tpsCount) * 1e+09 / ($flatten64(new $Int64(now$1.$high - lastUpdated.$high, now$1.$low - lastUpdated.$low)));
		lastUpdated = now$1;
		fpsCount = 0;
		tpsCount = 0;
	};
	Update = function(tps) {
		var _r, c, n, tps, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; n = $f.n; tps = $f.tps; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m, "Unlock"), []]);
		/* */ if (!started) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!started) { */ case 2:
			/* */ if (!(onStart === $throwNilPointerError)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(onStart === $throwNilPointerError)) { */ case 4:
				$r = onStart(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			started = true;
		/* } */ case 3:
		_r = now(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		c = 0;
		if (tps === -1) {
			c = 1;
		} else if (tps > 0) {
			c = calcCountFromTPS((new $Int64(0, tps)), n);
		}
		updateFPSAndTPS(n, c);
		$s = -1; return c;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return 0; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Update }; } $f._r = _r; $f.c = c; $f.n = n; $f.tps = tps; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Update = Update;
	now = function() {
		var _r, _r$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone($clone(js.Global(), js.Value).Get("performance"), js.Value).Call("now", new sliceType([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, js.Value).Float(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (new $Int64(0, _r$1 * 1e+06));
		/* */ } return; } if ($f === undefined) { $f = { $blk: now }; } $f._r = _r; $f._r$1 = _r$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lastSystemTime = new $Int64(0, 0);
		currentFPS = 0;
		currentTPS = 0;
		lastUpdated = new $Int64(0, 0);
		started = false;
		onStart = $throwNilPointerError;
		m = new sync.Mutex.ptr(0, 0);
		fpsCount = 0;
		tpsCount = 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/devicescale"] = (function() {
	var $pkg = {}, $init, js, sync, scale, m, DeviceScale, impl;
	js = $packages["github.com/gopherjs/gopherwasm/js"];
	sync = $packages["sync"];
	DeviceScale = function() {
		var $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m, "Unlock"), []]);
		if (scale === 0) {
			scale = impl();
		}
		$s = -1; return scale;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return 0; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: DeviceScale }; } $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.DeviceScale = DeviceScale;
	impl = function() {
		var ratio;
		ratio = $clone($clone($clone(js.Global(), js.Value).Get("window"), js.Value).Get("devicePixelRatio"), js.Value).Float();
		if (ratio === 0) {
			ratio = 1;
		}
		return ratio;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		m = new sync.Mutex.ptr(0, 0);
		scale = 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/math"] = (function() {
	var $pkg = {}, $init, NextPowerOf2Int;
	NextPowerOf2Int = function(x) {
		var r, x, y;
		if (x <= 0) {
			$panic(new $String("x must be positive"));
		}
		r = 1;
		while (true) {
			if (!(r < x)) { break; }
			r = (y = (1), y < 32 ? (r << y) : 0) >> 0;
		}
		return r;
	};
	$pkg.NextPowerOf2Int = NextPowerOf2Int;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/opengl"] = (function() {
	var $pkg = {}, $init, errors, fmt, js, math, reflect, Context, Texture, Framebuffer, Shader, Buffer, uniformLocation, attribLocation, programID, Program, context, locationCache, ShaderType, BufferType, Mode, CompositeMode, DataType, ptrType, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType$5, sliceType$4, ptrType$6, mapType, mapType$1, mapType$2, mapType$3, zeroPlus, oneMinus, zero, one, srcAlpha, dstAlpha, oneMinusSrcAlpha, oneMinusDstAlpha, theContext, blend, clampToEdge, colorAttachment0, compileStatus, framebuffer, framebufferBinding, framebufferComplete, linkStatus, maxTextureSize, nearest, noError, texture2d, textureMagFilter, textureMinFilter, textureWrapS, textureWrapT, rgba, unpackAlignment, unsignedByte, unsignedShort, float32Array, GetContext, getProgramID, init, Init, newLocationCache, operations;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	js = $packages["github.com/gopherjs/gopherwasm/js"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	Context = $pkg.Context = $newType(0, $kindStruct, "opengl.Context", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, function(locationCache_, screenFramebuffer_, lastFramebuffer_, lastTexture_, lastViewportWidth_, lastViewportHeight_, lastCompositeMode_, maxTextureSize_, context_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locationCache = ptrType$5.nil;
			this.screenFramebuffer = new Framebuffer.ptr(null);
			this.lastFramebuffer = new Framebuffer.ptr(null);
			this.lastTexture = new Texture.ptr(null);
			this.lastViewportWidth = 0;
			this.lastViewportHeight = 0;
			this.lastCompositeMode = 0;
			this.maxTextureSize = 0;
			this.context = new context.ptr(new js.Value.ptr(null), new js.Value.ptr(null), 0);
			return;
		}
		this.locationCache = locationCache_;
		this.screenFramebuffer = screenFramebuffer_;
		this.lastFramebuffer = lastFramebuffer_;
		this.lastTexture = lastTexture_;
		this.lastViewportWidth = lastViewportWidth_;
		this.lastViewportHeight = lastViewportHeight_;
		this.lastCompositeMode = lastCompositeMode_;
		this.maxTextureSize = maxTextureSize_;
		this.context = context_;
	});
	Texture = $pkg.Texture = $newType(0, $kindStruct, "opengl.Texture", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = null;
			return;
		}
		this.v = v_;
	});
	Framebuffer = $pkg.Framebuffer = $newType(0, $kindStruct, "opengl.Framebuffer", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = null;
			return;
		}
		this.v = v_;
	});
	Shader = $pkg.Shader = $newType(0, $kindStruct, "opengl.Shader", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = null;
			return;
		}
		this.v = v_;
	});
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "opengl.Buffer", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = null;
			return;
		}
		this.v = v_;
	});
	uniformLocation = $pkg.uniformLocation = $newType(0, $kindStruct, "opengl.uniformLocation", true, "github.com/hajimehoshi/ebiten/internal/opengl", false, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = null;
			return;
		}
		this.v = v_;
	});
	attribLocation = $pkg.attribLocation = $newType(4, $kindInt, "opengl.attribLocation", true, "github.com/hajimehoshi/ebiten/internal/opengl", false, null);
	programID = $pkg.programID = $newType(4, $kindInt, "opengl.programID", true, "github.com/hajimehoshi/ebiten/internal/opengl", false, null);
	Program = $pkg.Program = $newType(0, $kindStruct, "opengl.Program", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, function(value_, id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = new js.Value.ptr(null);
			this.id = 0;
			return;
		}
		this.value = value_;
		this.id = id_;
	});
	context = $pkg.context = $newType(0, $kindStruct, "opengl.context", true, "github.com/hajimehoshi/ebiten/internal/opengl", false, function(gl_, loseContext_, lastProgramID_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.gl = new js.Value.ptr(null);
			this.loseContext = new js.Value.ptr(null);
			this.lastProgramID = 0;
			return;
		}
		this.gl = gl_;
		this.loseContext = loseContext_;
		this.lastProgramID = lastProgramID_;
	});
	locationCache = $pkg.locationCache = $newType(0, $kindStruct, "opengl.locationCache", true, "github.com/hajimehoshi/ebiten/internal/opengl", false, function(uniformLocationCache_, attribLocationCache_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.uniformLocationCache = false;
			this.attribLocationCache = false;
			return;
		}
		this.uniformLocationCache = uniformLocationCache_;
		this.attribLocationCache = attribLocationCache_;
	});
	ShaderType = $pkg.ShaderType = $newType(4, $kindInt, "opengl.ShaderType", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	BufferType = $pkg.BufferType = $newType(4, $kindInt, "opengl.BufferType", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	Mode = $pkg.Mode = $newType(4, $kindInt, "opengl.Mode", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	CompositeMode = $pkg.CompositeMode = $newType(4, $kindInt, "opengl.CompositeMode", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	DataType = $pkg.DataType = $newType(4, $kindInt, "opengl.DataType", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	ptrType = $ptrType(Context);
	sliceType = $sliceType($Float32);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($Uint16);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$5 = $ptrType(locationCache);
	sliceType$4 = $sliceType(Shader);
	ptrType$6 = $ptrType($packages["github.com/gopherjs/gopherjs/js"].Object);
	mapType = $mapType($String, uniformLocation);
	mapType$1 = $mapType(programID, mapType);
	mapType$2 = $mapType($String, attribLocation);
	mapType$3 = $mapType(programID, mapType$2);
	GetContext = function() {
		return theContext;
	};
	$pkg.GetContext = GetContext;
	Context.ptr.prototype.BindTexture = function(t) {
		var c, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if ($equal(c.lastTexture, t, Texture)) {
			$s = -1; return;
		}
		$r = c.bindTextureImpl($clone(t, Texture)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		Texture.copy(c.lastTexture, t);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.BindTexture }; } $f.c = c; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.BindTexture = function(t) { return this.$val.BindTexture(t); };
	Context.ptr.prototype.bindFramebuffer = function(f) {
		var c, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if ($equal(c.lastFramebuffer, f, Framebuffer)) {
			$s = -1; return;
		}
		$r = c.bindFramebufferImpl($clone(f, Framebuffer)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		Framebuffer.copy(c.lastFramebuffer, f);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.bindFramebuffer }; } $f.c = c; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.bindFramebuffer = function(f) { return this.$val.bindFramebuffer(f); };
	Context.ptr.prototype.SetViewport = function(f, width, height) {
		var c, f, height, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; f = $f.f; height = $f.height; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.bindFramebuffer($clone(f, Framebuffer)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!((c.lastViewportWidth === width)) || !((c.lastViewportHeight === height))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((c.lastViewportWidth === width)) || !((c.lastViewportHeight === height))) { */ case 2:
			$r = c.setViewportImpl(width, height); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			c.lastViewportWidth = width;
			c.lastViewportHeight = height;
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.SetViewport }; } $f.c = c; $f.f = f; $f.height = height; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.SetViewport = function(f, width, height) { return this.$val.SetViewport(f, width, height); };
	Context.ptr.prototype.ScreenFramebuffer = function() {
		var c;
		c = this;
		return c.screenFramebuffer;
	};
	Context.prototype.ScreenFramebuffer = function() { return this.$val.ScreenFramebuffer(); };
	Context.ptr.prototype.ResetViewportSize = function() {
		var c;
		c = this;
		c.lastViewportWidth = 0;
		c.lastViewportHeight = 0;
	};
	Context.prototype.ResetViewportSize = function() { return this.$val.ResetViewportSize(); };
	Context.ptr.prototype.MaxTextureSize = function() {
		var _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (c.maxTextureSize === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (c.maxTextureSize === 0) { */ case 1:
			_r = c.maxTextureSizeImpl(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c.maxTextureSize = _r;
		/* } */ case 2:
		$s = -1; return c.maxTextureSize;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.MaxTextureSize }; } $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.MaxTextureSize = function() { return this.$val.MaxTextureSize(); };
	getProgramID = function(p) {
		var p;
		return p.id;
	};
	init = function() {
		var c;
		c = $clone($clone($clone(js.Global(), js.Value).Get("WebGLRenderingContext"), js.Value).Get("prototype"), js.Value);
		$pkg.VertexShader = (($clone($clone(c, js.Value).Get("VERTEX_SHADER"), js.Value).Int() >> 0));
		$pkg.FragmentShader = (($clone($clone(c, js.Value).Get("FRAGMENT_SHADER"), js.Value).Int() >> 0));
		$pkg.ArrayBuffer = (($clone($clone(c, js.Value).Get("ARRAY_BUFFER"), js.Value).Int() >> 0));
		$pkg.ElementArrayBuffer = (($clone($clone(c, js.Value).Get("ELEMENT_ARRAY_BUFFER"), js.Value).Int() >> 0));
		$pkg.DynamicDraw = (($clone($clone(c, js.Value).Get("DYNAMIC_DRAW"), js.Value).Int() >> 0));
		$pkg.Triangles = (($clone($clone(c, js.Value).Get("TRIANGLES"), js.Value).Int() >> 0));
		$pkg.Lines = (($clone($clone(c, js.Value).Get("LINES"), js.Value).Int() >> 0));
		$pkg.Short = (($clone($clone(c, js.Value).Get("SHORT"), js.Value).Int() >> 0));
		$pkg.Float = (($clone($clone(c, js.Value).Get("FLOAT"), js.Value).Int() >> 0));
		zero = (($clone($clone(c, js.Value).Get("ZERO"), js.Value).Int() >> 0));
		one = (($clone($clone(c, js.Value).Get("ONE"), js.Value).Int() >> 0));
		srcAlpha = (($clone($clone(c, js.Value).Get("SRC_ALPHA"), js.Value).Int() >> 0));
		dstAlpha = (($clone($clone(c, js.Value).Get("DST_ALPHA"), js.Value).Int() >> 0));
		oneMinusSrcAlpha = (($clone($clone(c, js.Value).Get("ONE_MINUS_SRC_ALPHA"), js.Value).Int() >> 0));
		oneMinusDstAlpha = (($clone($clone(c, js.Value).Get("ONE_MINUS_DST_ALPHA"), js.Value).Int() >> 0));
		js.Value.copy(blend, $clone(c, js.Value).Get("BLEND"));
		js.Value.copy(clampToEdge, $clone(c, js.Value).Get("CLAMP_TO_EDGE"));
		js.Value.copy(compileStatus, $clone(c, js.Value).Get("COMPILE_STATUS"));
		js.Value.copy(colorAttachment0, $clone(c, js.Value).Get("COLOR_ATTACHMENT0"));
		js.Value.copy(framebuffer, $clone(c, js.Value).Get("FRAMEBUFFER"));
		js.Value.copy(framebufferBinding, $clone(c, js.Value).Get("FRAMEBUFFER_BINDING"));
		js.Value.copy(framebufferComplete, $clone(c, js.Value).Get("FRAMEBUFFER_COMPLETE"));
		js.Value.copy(linkStatus, $clone(c, js.Value).Get("LINK_STATUS"));
		js.Value.copy(maxTextureSize, $clone(c, js.Value).Get("MAX_TEXTURE_SIZE"));
		js.Value.copy(nearest, $clone(c, js.Value).Get("NEAREST"));
		js.Value.copy(noError, $clone(c, js.Value).Get("NO_ERROR"));
		js.Value.copy(rgba, $clone(c, js.Value).Get("RGBA"));
		js.Value.copy(texture2d, $clone(c, js.Value).Get("TEXTURE_2D"));
		js.Value.copy(textureMagFilter, $clone(c, js.Value).Get("TEXTURE_MAG_FILTER"));
		js.Value.copy(textureMinFilter, $clone(c, js.Value).Get("TEXTURE_MIN_FILTER"));
		js.Value.copy(textureWrapS, $clone(c, js.Value).Get("TEXTURE_WRAP_S"));
		js.Value.copy(textureWrapT, $clone(c, js.Value).Get("TEXTURE_WRAP_T"));
		js.Value.copy(unpackAlignment, $clone(c, js.Value).Get("UNPACK_ALIGNMENT"));
		js.Value.copy(unsignedByte, $clone(c, js.Value).Get("UNSIGNED_BYTE"));
		js.Value.copy(unsignedShort, $clone(c, js.Value).Get("UNSIGNED_SHORT"));
	};
	Init = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, attr, c, canvas, gl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; attr = $f.attr; c = $f.c; canvas = $f.canvas; gl = $f.gl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($equal($clone(js.Global(), js.Value).Get("WebGLRenderingContext"), js.Undefined(), js.Value)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($equal($clone(js.Global(), js.Value).Get("WebGLRenderingContext"), js.Undefined(), js.Value)) { */ case 1:
			_r = fmt.Errorf("opengl: WebGL is not supported", new sliceType$3([])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = $clone($clone(js.Global(), js.Value).Get("document"), js.Value).Call("querySelector", new sliceType$3([new $String("canvas")])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		canvas = $clone(_r$1, js.Value);
		_r$2 = $clone($clone(js.Global(), js.Value).Get("Object"), js.Value).New(new sliceType$3([])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		attr = $clone(_r$2, js.Value);
		$clone(attr, js.Value).Set("alpha", new $Bool(true));
		$clone(attr, js.Value).Set("premultipliedAlpha", new $Bool(true));
		_r$3 = $clone(canvas, js.Value).Call("getContext", new sliceType$3([new $String("webgl"), new attr.constructor.elem(attr)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		gl = $clone(_r$3, js.Value);
		/* */ if ($equal(gl, js.Null(), js.Value)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ($equal(gl, js.Null(), js.Value)) { */ case 7:
			_r$4 = $clone(canvas, js.Value).Call("getContext", new sliceType$3([new $String("experimental-webgl"), new attr.constructor.elem(attr)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			js.Value.copy(gl, _r$4);
			/* */ if ($equal(gl, js.Null(), js.Value)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ($equal(gl, js.Null(), js.Value)) { */ case 10:
				_r$5 = fmt.Errorf("opengl: getContext failed", new sliceType$3([])); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } */ case 11:
		/* } */ case 8:
		c = new Context.ptr(ptrType$5.nil, new Framebuffer.ptr(null), new Framebuffer.ptr(null), new Texture.ptr(null), 0, 0, 0, 0, new context.ptr(new js.Value.ptr(null), new js.Value.ptr(null), 0));
		js.Value.copy(c.context.gl, gl);
		_r$6 = $clone(gl, js.Value).Call("getExtension", new sliceType$3([new $String("WEBGL_lose_context")])); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		js.Value.copy(c.context.loseContext, _r$6);
		theContext = c;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Init }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.attr = attr; $f.c = c; $f.canvas = canvas; $f.gl = gl; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Init = Init;
	Context.ptr.prototype.Reset = function() {
		var _r, _r$1, c, f, gl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; f = $f.f; gl = $f.gl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		c.locationCache = newLocationCache();
		Texture.copy(c.lastTexture, ($clone(js.Null(), Texture)));
		Framebuffer.copy(c.lastFramebuffer, ($clone(js.Null(), Framebuffer)));
		c.lastViewportWidth = 0;
		c.lastViewportHeight = 0;
		c.lastCompositeMode = 13;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("enable", new sliceType$3([new blend.constructor.elem(blend)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$r = c.BlendFunc(0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = $clone(gl, js.Value).Call("getParameter", new sliceType$3([new framebufferBinding.constructor.elem(framebufferBinding)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		f = $clone(_r$1, js.Value);
		Framebuffer.copy(c.screenFramebuffer, ($clone(f, Framebuffer)));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.Reset }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.f = f; $f.gl = gl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.Reset = function() { return this.$val.Reset(); };
	Context.ptr.prototype.BlendFunc = function(mode) {
		var _r, _tuple, c, d, gl, mode, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; c = $f.c; d = $f.d; gl = $f.gl; mode = $f.mode; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (c.lastCompositeMode === mode) {
			$s = -1; return;
		}
		c.lastCompositeMode = mode;
		_tuple = operations(mode);
		s = _tuple[0];
		d = _tuple[1];
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("blendFunc", new sliceType$3([new $Int(((s >> 0))), new $Int(((d >> 0)))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.BlendFunc }; } $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.d = d; $f.gl = gl; $f.mode = mode; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.BlendFunc = function(mode) { return this.$val.BlendFunc(mode); };
	Context.ptr.prototype.NewTexture = function(width, height) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, c, gl, height, t, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; c = $f.c; gl = $f.gl; height = $f.height; t = $f.t; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("createTexture", new sliceType$3([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		t = $clone(_r, js.Value);
		if ($equal(t, js.Null(), js.Value)) {
			$s = -1; return [($clone(js.Null(), Texture)), errors.New("opengl: glGenTexture failed")];
		}
		_r$1 = $clone(gl, js.Value).Call("pixelStorei", new sliceType$3([new unpackAlignment.constructor.elem(unpackAlignment), new $Int(4)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$r = c.BindTexture($clone(($clone(t, Texture)), Texture)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = $clone(gl, js.Value).Call("texParameteri", new sliceType$3([new texture2d.constructor.elem(texture2d), new textureMagFilter.constructor.elem(textureMagFilter), new nearest.constructor.elem(nearest)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = $clone(gl, js.Value).Call("texParameteri", new sliceType$3([new texture2d.constructor.elem(texture2d), new textureMinFilter.constructor.elem(textureMinFilter), new nearest.constructor.elem(nearest)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = $clone(gl, js.Value).Call("texParameteri", new sliceType$3([new texture2d.constructor.elem(texture2d), new textureWrapS.constructor.elem(textureWrapS), new clampToEdge.constructor.elem(clampToEdge)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = $clone(gl, js.Value).Call("texParameteri", new sliceType$3([new texture2d.constructor.elem(texture2d), new textureWrapT.constructor.elem(textureWrapT), new clampToEdge.constructor.elem(clampToEdge)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = $clone(gl, js.Value).Call("texImage2D", new sliceType$3([new texture2d.constructor.elem(texture2d), new $Int(0), new rgba.constructor.elem(rgba), new $Int(width), new $Int(height), new $Int(0), new rgba.constructor.elem(rgba), new unsignedByte.constructor.elem(unsignedByte), $ifaceNil])); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		$s = -1; return [($clone(t, Texture)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.NewTexture }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.c = c; $f.gl = gl; $f.height = height; $f.t = t; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.NewTexture = function(width, height) { return this.$val.NewTexture(width, height); };
	Context.ptr.prototype.bindFramebufferImpl = function(f) {
		var _r, c, f, gl, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; f = $f.f; gl = $f.gl; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("bindFramebuffer", new sliceType$3([new framebuffer.constructor.elem(framebuffer), (x = ($clone(f, js.Value)), new x.constructor.elem(x))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.bindFramebufferImpl }; } $f._r = _r; $f.c = c; $f.f = f; $f.gl = gl; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.bindFramebufferImpl = function(f) { return this.$val.bindFramebufferImpl(f); };
	Context.ptr.prototype.FramebufferPixels = function(f, width, height) {
		var _r, _r$1, _r$2, _r$3, c, e, f, gl, height, p, pixels, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; e = $f.e; f = $f.f; gl = $f.gl; height = $f.height; p = $f.p; pixels = $f.pixels; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		$r = c.bindFramebuffer($clone(f, Framebuffer)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pixels = $makeSlice(sliceType$1, ($imul(($imul(4, width)), height)));
		p = $clone(js.TypedArrayOf(pixels), js.TypedArray);
		_r = $clone(gl, js.Value).Call("readPixels", new sliceType$3([new $Int(0), new $Int(0), new $Int(width), new $Int(height), new rgba.constructor.elem(rgba), new unsignedByte.constructor.elem(unsignedByte), new p.constructor.elem(p)])); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		p.Release();
		_r$1 = $clone(gl, js.Value).Call("getError", new sliceType$3([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		e = $clone(_r$1, js.Value);
		/* */ if (!(($clone(e, js.Value).Int() === $clone(noError, js.Value).Int()))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(($clone(e, js.Value).Int() === $clone(noError, js.Value).Int()))) { */ case 4:
			_r$2 = fmt.Sprintf("opengl: error: %d", new sliceType$3([new e.constructor.elem(e)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = errors.New(_r$2); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$1.nil, _r$3];
		/* } */ case 5:
		$s = -1; return [pixels, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.FramebufferPixels }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.e = e; $f.f = f; $f.gl = gl; $f.height = height; $f.p = p; $f.pixels = pixels; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.FramebufferPixels = function(f, width, height) { return this.$val.FramebufferPixels(f, width, height); };
	Context.ptr.prototype.bindTextureImpl = function(t) {
		var _r, c, gl, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; gl = $f.gl; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("bindTexture", new sliceType$3([new texture2d.constructor.elem(texture2d), (x = ($clone(t, js.Value)), new x.constructor.elem(x))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.bindTextureImpl }; } $f._r = _r; $f.c = c; $f.gl = gl; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.bindTextureImpl = function(t) { return this.$val.bindTextureImpl(t); };
	Context.ptr.prototype.DeleteTexture = function(t) {
		var _r, _r$1, _r$2, c, gl, t, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; c = $f.c; gl = $f.gl; t = $f.t; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("isTexture", new sliceType$3([(x = ($clone(t, js.Value)), new x.constructor.elem(x))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, js.Value).Bool(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$1) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		if ($equal(c.lastTexture, t, Texture)) {
			Texture.copy(c.lastTexture, ($clone(js.Null(), Texture)));
		}
		_r$2 = $clone(gl, js.Value).Call("deleteTexture", new sliceType$3([(x$1 = ($clone(t, js.Value)), new x$1.constructor.elem(x$1))])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.DeleteTexture }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.c = c; $f.gl = gl; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.DeleteTexture = function(t) { return this.$val.DeleteTexture(t); };
	Context.ptr.prototype.IsTexture = function(t) {
		var _r, _r$1, c, gl, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; gl = $f.gl; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("isTexture", new sliceType$3([(x = ($clone(t, js.Value)), new x.constructor.elem(x))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, js.Value).Bool(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.IsTexture }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.gl = gl; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.IsTexture = function(t) { return this.$val.IsTexture(t); };
	Context.ptr.prototype.TexSubImage2D = function(pixels, x, y, width, height) {
		var _r, c, gl, height, p, pixels, width, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; gl = $f.gl; height = $f.height; p = $f.p; pixels = $f.pixels; width = $f.width; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		p = $clone(js.TypedArrayOf(pixels), js.TypedArray);
		_r = $clone(gl, js.Value).Call("texSubImage2D", new sliceType$3([new texture2d.constructor.elem(texture2d), new $Int(0), new $Int(x), new $Int(y), new $Int(width), new $Int(height), new rgba.constructor.elem(rgba), new unsignedByte.constructor.elem(unsignedByte), new p.constructor.elem(p)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		p.Release();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.TexSubImage2D }; } $f._r = _r; $f.c = c; $f.gl = gl; $f.height = height; $f.p = p; $f.pixels = pixels; $f.width = width; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.TexSubImage2D = function(pixels, x, y, width, height) { return this.$val.TexSubImage2D(pixels, x, y, width, height); };
	Context.ptr.prototype.NewFramebuffer = function(t) {
		var _r, _r$1, _r$2, _r$3, _r$4, c, f, gl, s, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; c = $f.c; f = $f.f; gl = $f.gl; s = $f.s; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("createFramebuffer", new sliceType$3([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = $clone(_r, js.Value);
		$r = c.bindFramebuffer($clone(($clone(f, Framebuffer)), Framebuffer)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = $clone(gl, js.Value).Call("framebufferTexture2D", new sliceType$3([new framebuffer.constructor.elem(framebuffer), new colorAttachment0.constructor.elem(colorAttachment0), new texture2d.constructor.elem(texture2d), (x = ($clone(t, js.Value)), new x.constructor.elem(x)), new $Int(0)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = $clone(gl, js.Value).Call("checkFramebufferStatus", new sliceType$3([new framebuffer.constructor.elem(framebuffer)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		s = $clone(_r$2, js.Value);
		/* */ if (!(($clone(s, js.Value).Int() === $clone(framebufferComplete, js.Value).Int()))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(($clone(s, js.Value).Int() === $clone(framebufferComplete, js.Value).Int()))) { */ case 5:
			_r$3 = fmt.Sprintf("opengl: creating framebuffer failed: %d", new sliceType$3([new $Int($clone(s, js.Value).Int())])); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = errors.New(_r$3); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return [($clone(js.Null(), Framebuffer)), _r$4];
		/* } */ case 6:
		$s = -1; return [($clone(f, Framebuffer)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.NewFramebuffer }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.c = c; $f.f = f; $f.gl = gl; $f.s = s; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.NewFramebuffer = function(t) { return this.$val.NewFramebuffer(t); };
	Context.ptr.prototype.setViewportImpl = function(width, height) {
		var _r, c, gl, height, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; gl = $f.gl; height = $f.height; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("viewport", new sliceType$3([new $Int(0), new $Int(0), new $Int(width), new $Int(height)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.setViewportImpl }; } $f._r = _r; $f.c = c; $f.gl = gl; $f.height = height; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.setViewportImpl = function(width, height) { return this.$val.setViewportImpl(width, height); };
	Context.ptr.prototype.DeleteFramebuffer = function(f) {
		var _r, _r$1, _r$2, c, f, gl, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; c = $f.c; f = $f.f; gl = $f.gl; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("isFramebuffer", new sliceType$3([(x = ($clone(f, js.Value)), new x.constructor.elem(x))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, js.Value).Bool(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$1) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		if ($equal(c.lastFramebuffer, f, Framebuffer)) {
			Framebuffer.copy(c.lastFramebuffer, ($clone(js.Null(), Framebuffer)));
			c.lastViewportWidth = 0;
			c.lastViewportHeight = 0;
		}
		_r$2 = $clone(gl, js.Value).Call("deleteFramebuffer", new sliceType$3([(x$1 = ($clone(f, js.Value)), new x$1.constructor.elem(x$1))])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.DeleteFramebuffer }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.c = c; $f.f = f; $f.gl = gl; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.DeleteFramebuffer = function(f) { return this.$val.DeleteFramebuffer(f); };
	Context.ptr.prototype.NewShader = function(shaderType, source) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, c, gl, log, s, shaderType, source, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; c = $f.c; gl = $f.gl; log = $f.log; s = $f.s; shaderType = $f.shaderType; source = $f.source; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("createShader", new sliceType$3([new $Int(((shaderType >> 0)))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = $clone(_r, js.Value);
		/* */ if ($equal(s, js.Null(), js.Value)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($equal(s, js.Null(), js.Value)) { */ case 2:
			_r$1 = fmt.Errorf("opengl: glCreateShader failed: shader type: %d", new sliceType$3([new ShaderType(shaderType)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [($clone(js.Null(), Shader)), _r$1];
		/* } */ case 3:
		_r$2 = $clone(gl, js.Value).Call("shaderSource", new sliceType$3([(x = (s), new x.constructor.elem(x)), new $String(source)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = $clone(gl, js.Value).Call("compileShader", new sliceType$3([(x$1 = (s), new x$1.constructor.elem(x$1))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = $clone(gl, js.Value).Call("getShaderParameter", new sliceType$3([(x$2 = (s), new x$2.constructor.elem(x$2)), new compileStatus.constructor.elem(compileStatus)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = $clone(_r$4, js.Value).Bool(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if (!_r$5) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!_r$5) { */ case 7:
			_r$6 = $clone(gl, js.Value).Call("getShaderInfoLog", new sliceType$3([(x$3 = (s), new x$3.constructor.elem(x$3))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			log = $clone(_r$6, js.Value);
			_r$7 = fmt.Errorf("opengl: shader compile failed: %s", new sliceType$3([new log.constructor.elem(log)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return [($clone(js.Null(), Shader)), _r$7];
		/* } */ case 8:
		$s = -1; return [($clone(s, Shader)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.NewShader }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.c = c; $f.gl = gl; $f.log = log; $f.s = s; $f.shaderType = shaderType; $f.source = source; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.NewShader = function(shaderType, source) { return this.$val.NewShader(shaderType, source); };
	Context.ptr.prototype.DeleteShader = function(s) {
		var _r, c, gl, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; gl = $f.gl; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("deleteShader", new sliceType$3([(x = ($clone(s, js.Value)), new x.constructor.elem(x))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.DeleteShader }; } $f._r = _r; $f.c = c; $f.gl = gl; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.DeleteShader = function(s) { return this.$val.DeleteShader(s); };
	Context.ptr.prototype.NewProgram = function(shaders) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, c, gl, id, shader, shaders, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; c = $f.c; gl = $f.gl; id = $f.id; shader = $f.shader; shaders = $f.shaders; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("createProgram", new sliceType$3([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = $clone(_r, js.Value);
		if ($equal(v, js.Null(), js.Value)) {
			$s = -1; return [new Program.ptr(new js.Value.ptr(null), 0), errors.New("opengl: glCreateProgram failed")];
		}
		_ref = shaders;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			shader = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), Shader);
			_r$1 = $clone(gl, js.Value).Call("attachShader", new sliceType$3([new v.constructor.elem(v), (x = ($clone(shader, js.Value)), new x.constructor.elem(x))])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_i++;
		/* } */ $s = 2; continue; case 3:
		_r$2 = $clone(gl, js.Value).Call("linkProgram", new sliceType$3([new v.constructor.elem(v)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = $clone(gl, js.Value).Call("getProgramParameter", new sliceType$3([new v.constructor.elem(v), new linkStatus.constructor.elem(linkStatus)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = $clone(_r$3, js.Value).Bool(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (!_r$4) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!_r$4) { */ case 6:
			$s = -1; return [new Program.ptr(new js.Value.ptr(null), 0), errors.New("opengl: program error")];
		/* } */ case 7:
		id = c.context.lastProgramID;
		c.context.lastProgramID = c.context.lastProgramID + (1) >> 0;
		$s = -1; return [new Program.ptr($clone(v, js.Value), id), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.NewProgram }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.c = c; $f.gl = gl; $f.id = id; $f.shader = shader; $f.shaders = shaders; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.NewProgram = function(shaders) { return this.$val.NewProgram(shaders); };
	Context.ptr.prototype.UseProgram = function(p) {
		var _r, c, gl, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; gl = $f.gl; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("useProgram", new sliceType$3([(x = p.value, new x.constructor.elem(x))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.UseProgram }; } $f._r = _r; $f.c = c; $f.gl = gl; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.UseProgram = function(p) { return this.$val.UseProgram(p); };
	Context.ptr.prototype.DeleteProgram = function(p) {
		var _r, _r$1, _r$2, c, gl, p, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; c = $f.c; gl = $f.gl; p = $f.p; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("isProgram", new sliceType$3([(x = p.value, new x.constructor.elem(x))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, js.Value).Bool(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$1) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		_r$2 = $clone(gl, js.Value).Call("deleteProgram", new sliceType$3([(x$1 = p.value, new x$1.constructor.elem(x$1))])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.DeleteProgram }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.c = c; $f.gl = gl; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.DeleteProgram = function(p) { return this.$val.DeleteProgram(p); };
	Context.ptr.prototype.getUniformLocationImpl = function(p, location) {
		var _r, c, gl, location, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; gl = $f.gl; location = $f.location; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("getUniformLocation", new sliceType$3([(x = p.value, new x.constructor.elem(x)), new $String(location)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return ($clone(_r, uniformLocation));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.getUniformLocationImpl }; } $f._r = _r; $f.c = c; $f.gl = gl; $f.location = location; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.getUniformLocationImpl = function(p, location) { return this.$val.getUniformLocationImpl(p, location); };
	Context.ptr.prototype.UniformInt = function(p, location, v) {
		var _r, _r$1, c, gl, l, location, p, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; gl = $f.gl; l = $f.l; location = $f.location; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = c.locationCache.GetUniformLocation(c, $clone(p, Program), location); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r, uniformLocation);
		_r$1 = $clone(gl, js.Value).Call("uniform1i", new sliceType$3([(x = ($clone(l, js.Value)), new x.constructor.elem(x)), new $Int(v)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.UniformInt }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.gl = gl; $f.l = l; $f.location = location; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.UniformInt = function(p, location, v) { return this.$val.UniformInt(p, location, v); };
	Context.ptr.prototype.UniformFloat = function(p, location, v) {
		var _r, _r$1, c, gl, l, location, p, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; gl = $f.gl; l = $f.l; location = $f.location; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = c.locationCache.GetUniformLocation(c, $clone(p, Program), location); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r, uniformLocation);
		_r$1 = $clone(gl, js.Value).Call("uniform1f", new sliceType$3([(x = ($clone(l, js.Value)), new x.constructor.elem(x)), new $Float32(v)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.UniformFloat }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.gl = gl; $f.l = l; $f.location = location; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.UniformFloat = function(p, location, v) { return this.$val.UniformFloat(p, location, v); };
	Context.ptr.prototype.UniformFloats = function(p, location, v) {
		var _1, _r, _r$1, _r$2, _r$3, arr, c, gl, l, location, p, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; arr = $f.arr; c = $f.c; gl = $f.gl; l = $f.l; location = $f.location; p = $f.p; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = c.locationCache.GetUniformLocation(c, $clone(p, Program), location); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r, uniformLocation);
			_1 = v.$length;
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (4)) { $s = 4; continue; }
			/* */ if (_1 === (16)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (2)) { */ case 3:
				_r$1 = $clone(gl, js.Value).Call("uniform2f", new sliceType$3([(x = ($clone(l, js.Value)), new x.constructor.elem(x)), new $Float32((0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0])), new $Float32((1 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 1]))])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$s = 7; continue;
			/* } else if (_1 === (4)) { */ case 4:
				_r$2 = $clone(gl, js.Value).Call("uniform4f", new sliceType$3([(x$1 = ($clone(l, js.Value)), new x$1.constructor.elem(x$1)), new $Float32((0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0])), new $Float32((1 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 1])), new $Float32((2 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 2])), new $Float32((3 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 3]))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				$s = 7; continue;
			/* } else if (_1 === (16)) { */ case 5:
				arr = $clone(js.TypedArrayOf(v), js.TypedArray);
				_r$3 = $clone(gl, js.Value).Call("uniformMatrix4fv", new sliceType$3([(x$2 = ($clone(l, js.Value)), new x$2.constructor.elem(x$2)), new $Bool(false), new arr.constructor.elem(arr)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				arr.Release();
				$s = 7; continue;
			/* } else { */ case 6:
				$panic(new $String("not reached"));
			/* } */ case 7:
		case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.UniformFloats }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.arr = arr; $f.c = c; $f.gl = gl; $f.l = l; $f.location = location; $f.p = p; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.UniformFloats = function(p, location, v) { return this.$val.UniformFloats(p, location, v); };
	Context.ptr.prototype.getAttribLocationImpl = function(p, location) {
		var _r, _r$1, c, gl, location, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; gl = $f.gl; location = $f.location; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("getAttribLocation", new sliceType$3([(x = p.value, new x.constructor.elem(x)), new $String(location)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, js.Value).Int(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return ((_r$1 >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.getAttribLocationImpl }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.gl = gl; $f.location = location; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.getAttribLocationImpl = function(p, location) { return this.$val.getAttribLocationImpl(p, location); };
	Context.ptr.prototype.VertexAttribPointer = function(p, location, size, dataType, stride, offset) {
		var _r, _r$1, c, dataType, gl, l, location, offset, p, size, stride, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; dataType = $f.dataType; gl = $f.gl; l = $f.l; location = $f.location; offset = $f.offset; p = $f.p; size = $f.size; stride = $f.stride; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = c.locationCache.GetAttribLocation(c, $clone(p, Program), location); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_r$1 = $clone(gl, js.Value).Call("vertexAttribPointer", new sliceType$3([new $Int(((l >> 0))), new $Int(size), new $Int(((dataType >> 0))), new $Bool(false), new $Int(stride), new $Int(offset)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.VertexAttribPointer }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.dataType = dataType; $f.gl = gl; $f.l = l; $f.location = location; $f.offset = offset; $f.p = p; $f.size = size; $f.stride = stride; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.VertexAttribPointer = function(p, location, size, dataType, stride, offset) { return this.$val.VertexAttribPointer(p, location, size, dataType, stride, offset); };
	Context.ptr.prototype.EnableVertexAttribArray = function(p, location) {
		var _r, _r$1, c, gl, l, location, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; gl = $f.gl; l = $f.l; location = $f.location; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = c.locationCache.GetAttribLocation(c, $clone(p, Program), location); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_r$1 = $clone(gl, js.Value).Call("enableVertexAttribArray", new sliceType$3([new $Int(((l >> 0)))])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.EnableVertexAttribArray }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.gl = gl; $f.l = l; $f.location = location; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.EnableVertexAttribArray = function(p, location) { return this.$val.EnableVertexAttribArray(p, location); };
	Context.ptr.prototype.DisableVertexAttribArray = function(p, location) {
		var _r, _r$1, c, gl, l, location, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; gl = $f.gl; l = $f.l; location = $f.location; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = c.locationCache.GetAttribLocation(c, $clone(p, Program), location); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_r$1 = $clone(gl, js.Value).Call("disableVertexAttribArray", new sliceType$3([new $Int(((l >> 0)))])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.DisableVertexAttribArray }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.gl = gl; $f.l = l; $f.location = location; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.DisableVertexAttribArray = function(p, location) { return this.$val.DisableVertexAttribArray(p, location); };
	Context.ptr.prototype.NewArrayBuffer = function(size) {
		var _r, _r$1, _r$2, b, c, gl, size, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; c = $f.c; gl = $f.gl; size = $f.size; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("createBuffer", new sliceType$3([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = $clone(_r, js.Value);
		_r$1 = $clone(gl, js.Value).Call("bindBuffer", new sliceType$3([new $Int((($pkg.ArrayBuffer >> 0))), (x = (b), new x.constructor.elem(x))])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = $clone(gl, js.Value).Call("bufferData", new sliceType$3([new $Int((($pkg.ArrayBuffer >> 0))), new $Int(size), new $Int((($pkg.DynamicDraw >> 0)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return ($clone(b, Buffer));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.NewArrayBuffer }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.c = c; $f.gl = gl; $f.size = size; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.NewArrayBuffer = function(size) { return this.$val.NewArrayBuffer(size); };
	Context.ptr.prototype.NewElementArrayBuffer = function(size) {
		var _r, _r$1, _r$2, b, c, gl, size, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; c = $f.c; gl = $f.gl; size = $f.size; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("createBuffer", new sliceType$3([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = $clone(_r, js.Value);
		_r$1 = $clone(gl, js.Value).Call("bindBuffer", new sliceType$3([new $Int((($pkg.ElementArrayBuffer >> 0))), (x = (b), new x.constructor.elem(x))])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = $clone(gl, js.Value).Call("bufferData", new sliceType$3([new $Int((($pkg.ElementArrayBuffer >> 0))), new $Int(size), new $Int((($pkg.DynamicDraw >> 0)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return ($clone(b, Buffer));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.NewElementArrayBuffer }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.c = c; $f.gl = gl; $f.size = size; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.NewElementArrayBuffer = function(size) { return this.$val.NewElementArrayBuffer(size); };
	Context.ptr.prototype.BindBuffer = function(bufferType, b) {
		var _r, b, bufferType, c, gl, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; bufferType = $f.bufferType; c = $f.c; gl = $f.gl; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("bindBuffer", new sliceType$3([new $Int(((bufferType >> 0))), (x = ($clone(b, js.Value)), new x.constructor.elem(x))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.BindBuffer }; } $f._r = _r; $f.b = b; $f.bufferType = bufferType; $f.c = c; $f.gl = gl; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.BindBuffer = function(bufferType, b) { return this.$val.BindBuffer(bufferType, b); };
	Context.ptr.prototype.ArrayBufferSubData = function(data) {
		var _r, arr, c, data, gl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arr = $f.arr; c = $f.c; data = $f.data; gl = $f.gl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		arr = $clone(js.TypedArrayOf(data), js.TypedArray);
		_r = $clone(gl, js.Value).Call("bufferSubData", new sliceType$3([new $Int((($pkg.ArrayBuffer >> 0))), new $Int(0), new arr.constructor.elem(arr)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		arr.Release();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.ArrayBufferSubData }; } $f._r = _r; $f.arr = arr; $f.c = c; $f.data = data; $f.gl = gl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.ArrayBufferSubData = function(data) { return this.$val.ArrayBufferSubData(data); };
	Context.ptr.prototype.ElementArrayBufferSubData = function(data) {
		var _r, arr, c, data, gl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arr = $f.arr; c = $f.c; data = $f.data; gl = $f.gl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		arr = $clone(js.TypedArrayOf(data), js.TypedArray);
		_r = $clone(gl, js.Value).Call("bufferSubData", new sliceType$3([new $Int((($pkg.ElementArrayBuffer >> 0))), new $Int(0), new arr.constructor.elem(arr)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		arr.Release();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.ElementArrayBufferSubData }; } $f._r = _r; $f.arr = arr; $f.c = c; $f.data = data; $f.gl = gl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.ElementArrayBufferSubData = function(data) { return this.$val.ElementArrayBufferSubData(data); };
	Context.ptr.prototype.DeleteBuffer = function(b) {
		var _r, b, c, gl, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; c = $f.c; gl = $f.gl; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("deleteBuffer", new sliceType$3([(x = ($clone(b, js.Value)), new x.constructor.elem(x))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.DeleteBuffer }; } $f._r = _r; $f.b = b; $f.c = c; $f.gl = gl; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.DeleteBuffer = function(b) { return this.$val.DeleteBuffer(b); };
	Context.ptr.prototype.DrawElements = function(mode, len, offsetInBytes) {
		var _r, c, gl, len, mode, offsetInBytes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; gl = $f.gl; len = $f.len; mode = $f.mode; offsetInBytes = $f.offsetInBytes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("drawElements", new sliceType$3([new $Int(((mode >> 0))), new $Int(len), new unsignedShort.constructor.elem(unsignedShort), new $Int(offsetInBytes)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.DrawElements }; } $f._r = _r; $f.c = c; $f.gl = gl; $f.len = len; $f.mode = mode; $f.offsetInBytes = offsetInBytes; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.DrawElements = function(mode, len, offsetInBytes) { return this.$val.DrawElements(mode, len, offsetInBytes); };
	Context.ptr.prototype.maxTextureSizeImpl = function() {
		var _r, _r$1, c, gl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; gl = $f.gl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("getParameter", new sliceType$3([new maxTextureSize.constructor.elem(maxTextureSize)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, js.Value).Int(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.maxTextureSizeImpl }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.gl = gl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.maxTextureSizeImpl = function() { return this.$val.maxTextureSizeImpl(); };
	Context.ptr.prototype.Flush = function() {
		var _r, c, gl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; gl = $f.gl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("flush", new sliceType$3([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.Flush }; } $f._r = _r; $f.c = c; $f.gl = gl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.Flush = function() { return this.$val.Flush(); };
	Context.ptr.prototype.IsContextLost = function() {
		var _r, _r$1, c, gl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; gl = $f.gl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = $clone(c.context.gl, js.Value);
		_r = $clone(gl, js.Value).Call("isContextLost", new sliceType$3([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, js.Value).Bool(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.IsContextLost }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.gl = gl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.IsContextLost = function() { return this.$val.IsContextLost(); };
	Context.ptr.prototype.RestoreContext = function() {
		var _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (!($equal(c.context.loseContext, js.Null(), js.Value))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($equal(c.context.loseContext, js.Null(), js.Value))) { */ case 1:
			_r = $clone(c.context.loseContext, js.Value).Call("restoreContext", new sliceType$3([])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.RestoreContext }; } $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.RestoreContext = function() { return this.$val.RestoreContext(); };
	newLocationCache = function() {
		return new locationCache.ptr($makeMap(programID.keyFor, []), $makeMap(programID.keyFor, []));
	};
	locationCache.ptr.prototype.GetUniformLocation = function(context$1, p, location) {
		var _entry, _entry$1, _entry$2, _entry$3, _key, _key$1, _r, _tuple, _tuple$1, c, context$1, id, l, location, ok, ok$1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; context$1 = $f.context$1; id = $f.id; l = $f.l; location = $f.location; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		id = getProgramID($clone(p, Program));
		_tuple = (_entry = c.uniformLocationCache[programID.keyFor(id)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = id; (c.uniformLocationCache || $throwRuntimeError("assignment to entry in nil map"))[programID.keyFor(_key)] = { k: _key, v: $makeMap($String.keyFor, []) };
		}
		_tuple$1 = (_entry$1 = (_entry$2 = c.uniformLocationCache[programID.keyFor(id)], _entry$2 !== undefined ? _entry$2.v : false)[$String.keyFor(location)], _entry$1 !== undefined ? [_entry$1.v, true] : [new uniformLocation.ptr(null), false]);
		l = $clone(_tuple$1[0], uniformLocation);
		ok$1 = _tuple$1[1];
		/* */ if (!ok$1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok$1) { */ case 1:
			_r = context$1.getUniformLocationImpl($clone(p, Program), location); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			uniformLocation.copy(l, _r);
			_key$1 = location; ((_entry$3 = c.uniformLocationCache[programID.keyFor(id)], _entry$3 !== undefined ? _entry$3.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: $clone(l, uniformLocation) };
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: locationCache.ptr.prototype.GetUniformLocation }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.context$1 = context$1; $f.id = id; $f.l = l; $f.location = location; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	locationCache.prototype.GetUniformLocation = function(context$1, p, location) { return this.$val.GetUniformLocation(context$1, p, location); };
	locationCache.ptr.prototype.GetAttribLocation = function(context$1, p, location) {
		var _entry, _entry$1, _entry$2, _entry$3, _key, _key$1, _r, _tuple, _tuple$1, c, context$1, id, l, location, ok, ok$1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; context$1 = $f.context$1; id = $f.id; l = $f.l; location = $f.location; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		id = getProgramID($clone(p, Program));
		_tuple = (_entry = c.attribLocationCache[programID.keyFor(id)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = id; (c.attribLocationCache || $throwRuntimeError("assignment to entry in nil map"))[programID.keyFor(_key)] = { k: _key, v: $makeMap($String.keyFor, []) };
		}
		_tuple$1 = (_entry$1 = (_entry$2 = c.attribLocationCache[programID.keyFor(id)], _entry$2 !== undefined ? _entry$2.v : false)[$String.keyFor(location)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
		l = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (!ok$1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok$1) { */ case 1:
			_r = context$1.getAttribLocationImpl($clone(p, Program), location); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
			_key$1 = location; ((_entry$3 = c.attribLocationCache[programID.keyFor(id)], _entry$3 !== undefined ? _entry$3.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: l };
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: locationCache.ptr.prototype.GetAttribLocation }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.context$1 = context$1; $f.id = id; $f.l = l; $f.location = location; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	locationCache.prototype.GetAttribLocation = function(context$1, p, location) { return this.$val.GetAttribLocation(context$1, p, location); };
	operations = function(mode) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dst, mode, src;
		src = 0;
		dst = 0;
		_1 = mode;
		if (_1 === (0)) {
			_tmp = one;
			_tmp$1 = oneMinusSrcAlpha;
			src = _tmp;
			dst = _tmp$1;
			return [src, dst];
		} else if (_1 === (1)) {
			_tmp$2 = zero;
			_tmp$3 = zero;
			src = _tmp$2;
			dst = _tmp$3;
			return [src, dst];
		} else if (_1 === (2)) {
			_tmp$4 = one;
			_tmp$5 = zero;
			src = _tmp$4;
			dst = _tmp$5;
			return [src, dst];
		} else if (_1 === (3)) {
			_tmp$6 = zero;
			_tmp$7 = one;
			src = _tmp$6;
			dst = _tmp$7;
			return [src, dst];
		} else if (_1 === (4)) {
			_tmp$8 = oneMinusDstAlpha;
			_tmp$9 = one;
			src = _tmp$8;
			dst = _tmp$9;
			return [src, dst];
		} else if (_1 === (5)) {
			_tmp$10 = dstAlpha;
			_tmp$11 = zero;
			src = _tmp$10;
			dst = _tmp$11;
			return [src, dst];
		} else if (_1 === (6)) {
			_tmp$12 = zero;
			_tmp$13 = srcAlpha;
			src = _tmp$12;
			dst = _tmp$13;
			return [src, dst];
		} else if (_1 === (7)) {
			_tmp$14 = oneMinusDstAlpha;
			_tmp$15 = zero;
			src = _tmp$14;
			dst = _tmp$15;
			return [src, dst];
		} else if (_1 === (8)) {
			_tmp$16 = zero;
			_tmp$17 = oneMinusSrcAlpha;
			src = _tmp$16;
			dst = _tmp$17;
			return [src, dst];
		} else if (_1 === (9)) {
			_tmp$18 = dstAlpha;
			_tmp$19 = oneMinusSrcAlpha;
			src = _tmp$18;
			dst = _tmp$19;
			return [src, dst];
		} else if (_1 === (10)) {
			_tmp$20 = oneMinusDstAlpha;
			_tmp$21 = srcAlpha;
			src = _tmp$20;
			dst = _tmp$21;
			return [src, dst];
		} else if (_1 === (11)) {
			_tmp$22 = oneMinusDstAlpha;
			_tmp$23 = oneMinusSrcAlpha;
			src = _tmp$22;
			dst = _tmp$23;
			return [src, dst];
		} else if (_1 === (12)) {
			_tmp$24 = one;
			_tmp$25 = one;
			src = _tmp$24;
			dst = _tmp$25;
			return [src, dst];
		} else {
			$panic(new $String("not reached"));
		}
	};
	DataType.prototype.SizeInBytes = function() {
		var _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === ($pkg.Short)) {
			return 2;
		} else if (_1 === ($pkg.Float)) {
			return 4;
		} else {
			$panic(new $String("not reached"));
		}
	};
	$ptrType(DataType).prototype.SizeInBytes = function() { return new DataType(this.$get()).SizeInBytes(); };
	ptrType.methods = [{prop: "BindTexture", name: "BindTexture", pkg: "", typ: $funcType([Texture], [], false)}, {prop: "bindFramebuffer", name: "bindFramebuffer", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([Framebuffer], [], false)}, {prop: "SetViewport", name: "SetViewport", pkg: "", typ: $funcType([Framebuffer, $Int, $Int], [], false)}, {prop: "ScreenFramebuffer", name: "ScreenFramebuffer", pkg: "", typ: $funcType([], [Framebuffer], false)}, {prop: "ResetViewportSize", name: "ResetViewportSize", pkg: "", typ: $funcType([], [], false)}, {prop: "MaxTextureSize", name: "MaxTextureSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [$error], false)}, {prop: "BlendFunc", name: "BlendFunc", pkg: "", typ: $funcType([CompositeMode], [], false)}, {prop: "NewTexture", name: "NewTexture", pkg: "", typ: $funcType([$Int, $Int], [Texture, $error], false)}, {prop: "bindFramebufferImpl", name: "bindFramebufferImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([Framebuffer], [], false)}, {prop: "FramebufferPixels", name: "FramebufferPixels", pkg: "", typ: $funcType([Framebuffer, $Int, $Int], [sliceType$1, $error], false)}, {prop: "bindTextureImpl", name: "bindTextureImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([Texture], [], false)}, {prop: "DeleteTexture", name: "DeleteTexture", pkg: "", typ: $funcType([Texture], [], false)}, {prop: "IsTexture", name: "IsTexture", pkg: "", typ: $funcType([Texture], [$Bool], false)}, {prop: "TexSubImage2D", name: "TexSubImage2D", pkg: "", typ: $funcType([sliceType$1, $Int, $Int, $Int, $Int], [], false)}, {prop: "NewFramebuffer", name: "NewFramebuffer", pkg: "", typ: $funcType([Texture], [Framebuffer, $error], false)}, {prop: "setViewportImpl", name: "setViewportImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([$Int, $Int], [], false)}, {prop: "DeleteFramebuffer", name: "DeleteFramebuffer", pkg: "", typ: $funcType([Framebuffer], [], false)}, {prop: "NewShader", name: "NewShader", pkg: "", typ: $funcType([ShaderType, $String], [Shader, $error], false)}, {prop: "DeleteShader", name: "DeleteShader", pkg: "", typ: $funcType([Shader], [], false)}, {prop: "NewProgram", name: "NewProgram", pkg: "", typ: $funcType([sliceType$4], [Program, $error], false)}, {prop: "UseProgram", name: "UseProgram", pkg: "", typ: $funcType([Program], [], false)}, {prop: "DeleteProgram", name: "DeleteProgram", pkg: "", typ: $funcType([Program], [], false)}, {prop: "getUniformLocationImpl", name: "getUniformLocationImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([Program, $String], [uniformLocation], false)}, {prop: "UniformInt", name: "UniformInt", pkg: "", typ: $funcType([Program, $String, $Int], [], false)}, {prop: "UniformFloat", name: "UniformFloat", pkg: "", typ: $funcType([Program, $String, $Float32], [], false)}, {prop: "UniformFloats", name: "UniformFloats", pkg: "", typ: $funcType([Program, $String, sliceType], [], false)}, {prop: "getAttribLocationImpl", name: "getAttribLocationImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([Program, $String], [attribLocation], false)}, {prop: "VertexAttribPointer", name: "VertexAttribPointer", pkg: "", typ: $funcType([Program, $String, $Int, DataType, $Int, $Int], [], false)}, {prop: "EnableVertexAttribArray", name: "EnableVertexAttribArray", pkg: "", typ: $funcType([Program, $String], [], false)}, {prop: "DisableVertexAttribArray", name: "DisableVertexAttribArray", pkg: "", typ: $funcType([Program, $String], [], false)}, {prop: "NewArrayBuffer", name: "NewArrayBuffer", pkg: "", typ: $funcType([$Int], [Buffer], false)}, {prop: "NewElementArrayBuffer", name: "NewElementArrayBuffer", pkg: "", typ: $funcType([$Int], [Buffer], false)}, {prop: "BindBuffer", name: "BindBuffer", pkg: "", typ: $funcType([BufferType, Buffer], [], false)}, {prop: "ArrayBufferSubData", name: "ArrayBufferSubData", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "ElementArrayBufferSubData", name: "ElementArrayBufferSubData", pkg: "", typ: $funcType([sliceType$2], [], false)}, {prop: "DeleteBuffer", name: "DeleteBuffer", pkg: "", typ: $funcType([Buffer], [], false)}, {prop: "DrawElements", name: "DrawElements", pkg: "", typ: $funcType([Mode, $Int, $Int], [], false)}, {prop: "maxTextureSizeImpl", name: "maxTextureSizeImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([], [$Int], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [], false)}, {prop: "IsContextLost", name: "IsContextLost", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "RestoreContext", name: "RestoreContext", pkg: "", typ: $funcType([], [], false)}];
	ptrType$5.methods = [{prop: "GetUniformLocation", name: "GetUniformLocation", pkg: "", typ: $funcType([ptrType, Program, $String], [uniformLocation], false)}, {prop: "GetAttribLocation", name: "GetAttribLocation", pkg: "", typ: $funcType([ptrType, Program, $String], [attribLocation], false)}];
	DataType.methods = [{prop: "SizeInBytes", name: "SizeInBytes", pkg: "", typ: $funcType([], [$Int], false)}];
	Context.init("github.com/hajimehoshi/ebiten/internal/opengl", [{prop: "locationCache", name: "locationCache", anonymous: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "screenFramebuffer", name: "screenFramebuffer", anonymous: false, exported: false, typ: Framebuffer, tag: ""}, {prop: "lastFramebuffer", name: "lastFramebuffer", anonymous: false, exported: false, typ: Framebuffer, tag: ""}, {prop: "lastTexture", name: "lastTexture", anonymous: false, exported: false, typ: Texture, tag: ""}, {prop: "lastViewportWidth", name: "lastViewportWidth", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lastViewportHeight", name: "lastViewportHeight", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lastCompositeMode", name: "lastCompositeMode", anonymous: false, exported: false, typ: CompositeMode, tag: ""}, {prop: "maxTextureSize", name: "maxTextureSize", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "context", name: "context", anonymous: true, exported: false, typ: context, tag: ""}]);
	Texture.init("github.com/gopherjs/gopherwasm/js", [{prop: "v", name: "v", anonymous: false, exported: false, typ: ptrType$6, tag: ""}]);
	Framebuffer.init("github.com/gopherjs/gopherwasm/js", [{prop: "v", name: "v", anonymous: false, exported: false, typ: ptrType$6, tag: ""}]);
	Shader.init("github.com/gopherjs/gopherwasm/js", [{prop: "v", name: "v", anonymous: false, exported: false, typ: ptrType$6, tag: ""}]);
	Buffer.init("github.com/gopherjs/gopherwasm/js", [{prop: "v", name: "v", anonymous: false, exported: false, typ: ptrType$6, tag: ""}]);
	uniformLocation.init("github.com/gopherjs/gopherwasm/js", [{prop: "v", name: "v", anonymous: false, exported: false, typ: ptrType$6, tag: ""}]);
	Program.init("github.com/hajimehoshi/ebiten/internal/opengl", [{prop: "value", name: "value", anonymous: false, exported: false, typ: js.Value, tag: ""}, {prop: "id", name: "id", anonymous: false, exported: false, typ: programID, tag: ""}]);
	context.init("github.com/hajimehoshi/ebiten/internal/opengl", [{prop: "gl", name: "gl", anonymous: false, exported: false, typ: js.Value, tag: ""}, {prop: "loseContext", name: "loseContext", anonymous: false, exported: false, typ: js.Value, tag: ""}, {prop: "lastProgramID", name: "lastProgramID", anonymous: false, exported: false, typ: programID, tag: ""}]);
	locationCache.init("github.com/hajimehoshi/ebiten/internal/opengl", [{prop: "uniformLocationCache", name: "uniformLocationCache", anonymous: false, exported: false, typ: mapType$1, tag: ""}, {prop: "attribLocationCache", name: "attribLocationCache", anonymous: false, exported: false, typ: mapType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.VertexShader = 0;
		$pkg.FragmentShader = 0;
		$pkg.ArrayBuffer = 0;
		$pkg.ElementArrayBuffer = 0;
		$pkg.DynamicDraw = 0;
		$pkg.Triangles = 0;
		$pkg.Lines = 0;
		$pkg.Short = 0;
		$pkg.Float = 0;
		zero = 0;
		one = 0;
		srcAlpha = 0;
		dstAlpha = 0;
		oneMinusSrcAlpha = 0;
		oneMinusDstAlpha = 0;
		theContext = ptrType.nil;
		blend = new js.Value.ptr(null);
		clampToEdge = new js.Value.ptr(null);
		colorAttachment0 = new js.Value.ptr(null);
		compileStatus = new js.Value.ptr(null);
		framebuffer = new js.Value.ptr(null);
		framebufferBinding = new js.Value.ptr(null);
		framebufferComplete = new js.Value.ptr(null);
		linkStatus = new js.Value.ptr(null);
		maxTextureSize = new js.Value.ptr(null);
		nearest = new js.Value.ptr(null);
		noError = new js.Value.ptr(null);
		texture2d = new js.Value.ptr(null);
		textureMagFilter = new js.Value.ptr(null);
		textureMinFilter = new js.Value.ptr(null);
		textureWrapS = new js.Value.ptr(null);
		textureWrapT = new js.Value.ptr(null);
		rgba = new js.Value.ptr(null);
		unpackAlignment = new js.Value.ptr(null);
		unsignedByte = new js.Value.ptr(null);
		unsignedShort = new js.Value.ptr(null);
		zeroPlus = math.Nextafter32(0, 1);
		oneMinus = math.Nextafter32(1, 0);
		$pkg.InvalidTexture = $clone(($clone(js.Null(), Texture)), Texture);
		float32Array = $clone($clone(js.Global(), js.Value).Get("Float32Array"), js.Value);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, sliceType, Index, Count, Contains, Join, Map, ToLower, Replace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	sliceType = $sliceType($Uint8);
	Index = function(s, sep) {
		var s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	Count = function(s, sep) {
		var n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	Contains = function(s, substr) {
		var s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	Join = function(a, sep) {
		var _1, _i, _ref, a, b, bp, i, n, s, sep;
		_1 = a.$length;
		if (_1 === (0)) {
			return "";
		} else if (_1 === (1)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
		} else if (_1 === (2)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
		} else if (_1 === (3)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) + sep + (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]);
		}
		n = $imul(sep.length, ((a.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return ($bytesToString(b));
	};
	$pkg.Join = Join;
	Map = function(mapping, s) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _rune$1, _tuple, b, c, c$1, i, mapping, nb, nbytes, r, r$1, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _rune = $f._rune; _rune$1 = $f._rune$1; _tuple = $f._tuple; b = $f.b; c = $f.c; c$1 = $f.c$1; i = $f.i; mapping = $f.mapping; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; r$1 = $f.r$1; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = sliceType.nil;
		nbytes = 0;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === c) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			b = $makeSlice(sliceType, (s.length + 4 >> 0));
			nbytes = $copyString(b, $substring(s, 0, i));
			if (r >= 0) {
				if (r < 128) {
					((nbytes < 0 || nbytes >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + nbytes] = ((r << 24 >>> 24)));
					nbytes = nbytes + (1) >> 0;
				} else {
					nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes), r)) >> 0;
				}
			}
			if (c === 65533) {
				_tuple = utf8.DecodeRuneInString($substring(s, i));
				w = _tuple[1];
				i = i + (w) >> 0;
			} else {
				i = i + (utf8.RuneLen(c)) >> 0;
			}
			s = $substring(s, i);
			/* break; */ $s = 2; continue;
		/* } */ $s = 1; continue; case 2:
		if (b === sliceType.nil) {
			$s = -1; return s;
		}
		_ref$1 = s;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _ref$1.length)) { break; } */ if(!(_i$1 < _ref$1.length)) { $s = 5; continue; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			c$1 = _rune$1[0];
			_r$1 = mapping(c$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			r$1 = _r$1;
			if ((0 <= r$1 && r$1 < 128) && nbytes < b.$length) {
				((nbytes < 0 || nbytes >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + nbytes] = ((r$1 << 24 >>> 24)));
				nbytes = nbytes + (1) >> 0;
				_i$1 += _rune$1[1];
				/* continue; */ $s = 4; continue;
			}
			if (r$1 >= 0) {
				if ((nbytes + 4 >> 0) >= b.$length) {
					nb = $makeSlice(sliceType, ($imul(2, b.$length)));
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes), r$1)) >> 0;
			}
			_i$1 += _rune$1[1];
		/* } */ $s = 4; continue; case 5:
		$s = -1; return ($bytesToString($subslice(b, 0, nbytes)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._rune = _rune; $f._rune$1 = _rune$1; $f._tuple = _tuple; $f.b = b; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.mapping = mapping; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	ToLower = function(s) {
		var _r, _tmp, _tmp$1, b, c, c$1, hasUpper, i, i$1, isASCII, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; b = $f.b; c = $f.c; c$1 = $f.c$1; hasUpper = $f.hasUpper; i = $f.i; i$1 = $f.i$1; isASCII = $f.isASCII; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = true;
		_tmp$1 = false;
		isASCII = _tmp;
		hasUpper = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c >= 128) {
				isASCII = false;
				break;
			}
			hasUpper = hasUpper || (c >= 65 && c <= 90);
			i = i + (1) >> 0;
		}
		if (isASCII) {
			if (!hasUpper) {
				$s = -1; return s;
			}
			b = $makeSlice(sliceType, s.length);
			i$1 = 0;
			while (true) {
				if (!(i$1 < s.length)) { break; }
				c$1 = s.charCodeAt(i$1);
				if (c$1 >= 65 && c$1 <= 90) {
					c$1 = c$1 + (32) << 24 >>> 24;
				}
				((i$1 < 0 || i$1 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$1] = c$1);
				i$1 = i$1 + (1) >> 0;
			}
			$s = -1; return ($bytesToString(b));
		}
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.b = b; $f.c = c; $f.c$1 = c$1; $f.hasUpper = hasUpper; $f.i = i; $f.i$1 = i$1; $f.isASCII = isASCII; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToLower = ToLower;
	Replace = function(s, old, new$1, n) {
		var _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), $substring(s, start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), $substring(s, start))) >> 0;
		return ($bytesToString($subslice(t, 0, w)));
	};
	$pkg.Replace = Replace;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/web"] = (function() {
	var $pkg = {}, $init, js, strings, IsBrowser, IsIOSSafari, IsAndroidChrome, IsMobileBrowser;
	js = $packages["github.com/gopherjs/gopherwasm/js"];
	strings = $packages["strings"];
	IsBrowser = function() {
		return true;
	};
	$pkg.IsBrowser = IsBrowser;
	IsIOSSafari = function() {
		var ua;
		ua = $clone($clone($clone(js.Global(), js.Value).Get("navigator"), js.Value).Get("userAgent"), js.Value).String();
		if (!strings.Contains(ua, "iPhone")) {
			return false;
		}
		return true;
	};
	$pkg.IsIOSSafari = IsIOSSafari;
	IsAndroidChrome = function() {
		var ua;
		ua = $clone($clone($clone(js.Global(), js.Value).Get("navigator"), js.Value).Get("userAgent"), js.Value).String();
		if (!strings.Contains(ua, "Android")) {
			return false;
		}
		if (!strings.Contains(ua, "Chrome")) {
			return false;
		}
		return true;
	};
	$pkg.IsAndroidChrome = IsAndroidChrome;
	IsMobileBrowser = function() {
		return IsIOSSafari() || IsAndroidChrome();
	};
	$pkg.IsMobileBrowser = IsMobileBrowser;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/graphics"] = (function() {
	var $pkg = {}, $init, fmt, affine, math, opengl, web, strings, command, commandQueue, drawImageCommand, replacePixelsCommand, pixelsCommand, disposeCommand, newImageCommand, newScreenFramebufferImageCommand, framebuffer, Image, arrayBufferLayoutPart, arrayBufferLayout, openGLState, Filter, texture, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType, ptrType$1, sliceType$4, ptrType$2, ptrType$3, sliceType$5, sliceType$6, sliceType$7, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, theCommandQueue, maxTextureSize, theArrayBufferLayout, theOpenGLState, zeroBuffer, zeroProgram, Error, FlushCommands, VertexSizeInBytes, checkSize, recordLog, orthoProjectionMatrix, newFramebufferFromTexture, newScreenFramebuffer, MaxImageSize, NewImage, NewScreenFramebufferImage, ResetGLState, areSameFloat32Array, shader;
	fmt = $packages["fmt"];
	affine = $packages["github.com/hajimehoshi/ebiten/internal/affine"];
	math = $packages["github.com/hajimehoshi/ebiten/internal/math"];
	opengl = $packages["github.com/hajimehoshi/ebiten/internal/opengl"];
	web = $packages["github.com/hajimehoshi/ebiten/internal/web"];
	strings = $packages["strings"];
	command = $pkg.command = $newType(8, $kindInterface, "graphics.command", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, null);
	commandQueue = $pkg.commandQueue = $newType(0, $kindStruct, "graphics.commandQueue", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(commands_, vertices_, nvertices_, indices_, nindices_, tmpNumIndices_, nextIndex_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.commands = sliceType$1.nil;
			this.vertices = sliceType.nil;
			this.nvertices = 0;
			this.indices = sliceType$2.nil;
			this.nindices = 0;
			this.tmpNumIndices = 0;
			this.nextIndex = 0;
			this.err = $ifaceNil;
			return;
		}
		this.commands = commands_;
		this.vertices = vertices_;
		this.nvertices = nvertices_;
		this.indices = indices_;
		this.nindices = nindices_;
		this.tmpNumIndices = tmpNumIndices_;
		this.nextIndex = nextIndex_;
		this.err = err_;
	});
	drawImageCommand = $pkg.drawImageCommand = $newType(0, $kindStruct, "graphics.drawImageCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(dst_, src_, nvertices_, nindices_, color_, mode_, filter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.dst = ptrType.nil;
			this.src = ptrType.nil;
			this.nvertices = 0;
			this.nindices = 0;
			this.color = ptrType$1.nil;
			this.mode = 0;
			this.filter = 0;
			return;
		}
		this.dst = dst_;
		this.src = src_;
		this.nvertices = nvertices_;
		this.nindices = nindices_;
		this.color = color_;
		this.mode = mode_;
		this.filter = filter_;
	});
	replacePixelsCommand = $pkg.replacePixelsCommand = $newType(0, $kindStruct, "graphics.replacePixelsCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(dst_, pixels_, x_, y_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.dst = ptrType.nil;
			this.pixels = sliceType$5.nil;
			this.x = 0;
			this.y = 0;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.dst = dst_;
		this.pixels = pixels_;
		this.x = x_;
		this.y = y_;
		this.width = width_;
		this.height = height_;
	});
	pixelsCommand = $pkg.pixelsCommand = $newType(0, $kindStruct, "graphics.pixelsCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(result_, img_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.result = sliceType$5.nil;
			this.img = ptrType.nil;
			return;
		}
		this.result = result_;
		this.img = img_;
	});
	disposeCommand = $pkg.disposeCommand = $newType(0, $kindStruct, "graphics.disposeCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.target = ptrType.nil;
			return;
		}
		this.target = target_;
	});
	newImageCommand = $pkg.newImageCommand = $newType(0, $kindStruct, "graphics.newImageCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(result_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.result = ptrType.nil;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.result = result_;
		this.width = width_;
		this.height = height_;
	});
	newScreenFramebufferImageCommand = $pkg.newScreenFramebufferImageCommand = $newType(0, $kindStruct, "graphics.newScreenFramebufferImageCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(result_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.result = ptrType.nil;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.result = result_;
		this.width = width_;
		this.height = height_;
	});
	framebuffer = $pkg.framebuffer = $newType(0, $kindStruct, "graphics.framebuffer", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(native$0_, proMatrix_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.native$0 = new opengl.Framebuffer.ptr(null);
			this.proMatrix = sliceType.nil;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.native$0 = native$0_;
		this.proMatrix = proMatrix_;
		this.width = width_;
		this.height = height_;
	});
	Image = $pkg.Image = $newType(0, $kindStruct, "graphics.Image", true, "github.com/hajimehoshi/ebiten/internal/graphics", true, function(texture_, framebuffer_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.texture = ptrType$3.nil;
			this.framebuffer = ptrType$2.nil;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.texture = texture_;
		this.framebuffer = framebuffer_;
		this.width = width_;
		this.height = height_;
	});
	arrayBufferLayoutPart = $pkg.arrayBufferLayoutPart = $newType(0, $kindStruct, "graphics.arrayBufferLayoutPart", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(name_, dataType_, num_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.dataType = 0;
			this.num = 0;
			return;
		}
		this.name = name_;
		this.dataType = dataType_;
		this.num = num_;
	});
	arrayBufferLayout = $pkg.arrayBufferLayout = $newType(0, $kindStruct, "graphics.arrayBufferLayout", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(parts_, total_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parts = sliceType$3.nil;
			this.total = 0;
			return;
		}
		this.parts = parts_;
		this.total = total_;
	});
	openGLState = $pkg.openGLState = $newType(0, $kindStruct, "graphics.openGLState", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(arrayBuffer_, elementArrayBuffer_, programNearest_, programLinear_, programScreen_, lastProgram_, lastProjectionMatrix_, lastColorMatrix_, lastColorMatrixTranslation_, lastSourceWidth_, lastSourceHeight_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.arrayBuffer = new opengl.Buffer.ptr(null);
			this.elementArrayBuffer = new opengl.Buffer.ptr(null);
			this.programNearest = new opengl.Program.ptr(new $packages["github.com/gopherjs/gopherwasm/js"].Value.ptr(null), 0);
			this.programLinear = new opengl.Program.ptr(new $packages["github.com/gopherjs/gopherwasm/js"].Value.ptr(null), 0);
			this.programScreen = new opengl.Program.ptr(new $packages["github.com/gopherjs/gopherwasm/js"].Value.ptr(null), 0);
			this.lastProgram = new opengl.Program.ptr(new $packages["github.com/gopherjs/gopherwasm/js"].Value.ptr(null), 0);
			this.lastProjectionMatrix = sliceType.nil;
			this.lastColorMatrix = sliceType.nil;
			this.lastColorMatrixTranslation = sliceType.nil;
			this.lastSourceWidth = 0;
			this.lastSourceHeight = 0;
			return;
		}
		this.arrayBuffer = arrayBuffer_;
		this.elementArrayBuffer = elementArrayBuffer_;
		this.programNearest = programNearest_;
		this.programLinear = programLinear_;
		this.programScreen = programScreen_;
		this.lastProgram = lastProgram_;
		this.lastProjectionMatrix = lastProjectionMatrix_;
		this.lastColorMatrix = lastColorMatrix_;
		this.lastColorMatrixTranslation = lastColorMatrixTranslation_;
		this.lastSourceWidth = lastSourceWidth_;
		this.lastSourceHeight = lastSourceHeight_;
	});
	Filter = $pkg.Filter = $newType(4, $kindInt, "graphics.Filter", true, "github.com/hajimehoshi/ebiten/internal/graphics", true, null);
	texture = $pkg.texture = $newType(0, $kindStruct, "graphics.texture", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(native$0_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.native$0 = new opengl.Texture.ptr(null);
			return;
		}
		this.native$0 = native$0_;
	});
	sliceType = $sliceType($Float32);
	sliceType$1 = $sliceType(command);
	sliceType$2 = $sliceType($Uint16);
	sliceType$3 = $sliceType(arrayBufferLayoutPart);
	ptrType = $ptrType(Image);
	ptrType$1 = $ptrType(affine.ColorM);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(framebuffer);
	ptrType$3 = $ptrType(texture);
	sliceType$5 = $sliceType($Uint8);
	sliceType$6 = $sliceType(opengl.Shader);
	sliceType$7 = $sliceType($String);
	ptrType$4 = $ptrType(commandQueue);
	ptrType$5 = $ptrType(drawImageCommand);
	ptrType$6 = $ptrType(replacePixelsCommand);
	ptrType$7 = $ptrType(pixelsCommand);
	ptrType$8 = $ptrType(disposeCommand);
	ptrType$9 = $ptrType(newImageCommand);
	ptrType$10 = $ptrType(newScreenFramebufferImageCommand);
	ptrType$11 = $ptrType(arrayBufferLayout);
	ptrType$12 = $ptrType(openGLState);
	commandQueue.ptr.prototype.appendVertices = function(vertices) {
		var n, q, vertices;
		q = this;
		if (q.vertices.$length < (q.nvertices + vertices.$length >> 0)) {
			n = (q.nvertices + vertices.$length >> 0) - q.vertices.$length >> 0;
			q.vertices = $appendSlice(q.vertices, $makeSlice(sliceType, n));
		}
		$copySlice($subslice(q.vertices, q.nvertices), vertices);
		q.nvertices = q.nvertices + (vertices.$length) >> 0;
	};
	commandQueue.prototype.appendVertices = function(vertices) { return this.$val.appendVertices(vertices); };
	commandQueue.ptr.prototype.appendIndices = function(indices, offset) {
		var _i, _ref, i, indices, n, offset, q, x, x$1;
		q = this;
		if (q.indices.$length < (q.nindices + indices.$length >> 0)) {
			n = (q.nindices + indices.$length >> 0) - q.indices.$length >> 0;
			q.indices = $appendSlice(q.indices, $makeSlice(sliceType$2, n));
		}
		_ref = indices;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			(x = q.indices, x$1 = q.nindices + i >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = (((i < 0 || i >= indices.$length) ? ($throwRuntimeError("index out of range"), undefined) : indices.$array[indices.$offset + i]) + offset << 16 >>> 16)));
			_i++;
		}
		q.nindices = q.nindices + (indices.$length) >> 0;
	};
	commandQueue.prototype.appendIndices = function(indices, offset) { return this.$val.appendIndices(indices, offset); };
	commandQueue.ptr.prototype.doEnqueueDrawImageCommand = function(dst, src, nvertices, nindices, color, mode, filter, forceNewCommand) {
		var _r, c, color, dst, filter, forceNewCommand, last, mode, nindices, nvertices, q, src, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; color = $f.color; dst = $f.dst; filter = $f.filter; forceNewCommand = $f.forceNewCommand; last = $f.last; mode = $f.mode; nindices = $f.nindices; nvertices = $f.nvertices; q = $f.q; src = $f.src; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		if (nindices > 65535) {
			$panic(new $String("not implemented for too many indices"));
		}
		/* */ if (!forceNewCommand && 0 < q.commands.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!forceNewCommand && 0 < q.commands.$length) { */ case 1:
			last = (x = q.commands, x$1 = q.commands.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			_r = last.CanMerge(dst, src, color, mode, filter); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				$r = last.AddNumVertices(nvertices); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = last.AddNumIndices(nindices); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		/* } */ case 2:
		c = new drawImageCommand.ptr(dst, src, nvertices, nindices, color, mode, filter);
		q.commands = $append(q.commands, c);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: commandQueue.ptr.prototype.doEnqueueDrawImageCommand }; } $f._r = _r; $f.c = c; $f.color = color; $f.dst = dst; $f.filter = filter; $f.forceNewCommand = forceNewCommand; $f.last = last; $f.mode = mode; $f.nindices = nindices; $f.nvertices = nvertices; $f.q = q; $f.src = src; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	commandQueue.prototype.doEnqueueDrawImageCommand = function(dst, src, nvertices, nindices, color, mode, filter, forceNewCommand) { return this.$val.doEnqueueDrawImageCommand(dst, src, nvertices, nindices, color, mode, filter, forceNewCommand); };
	commandQueue.ptr.prototype.EnqueueDrawImageCommand = function(dst, src, vertices, indices, color, mode, filter) {
		var _q, color, dst, filter, indices, mode, q, split, src, vertices, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; color = $f.color; dst = $f.dst; filter = $f.filter; indices = $f.indices; mode = $f.mode; q = $f.q; split = $f.split; src = $f.src; vertices = $f.vertices; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		if (indices.$length > 65535) {
			$panic(new $String("not reached"));
		}
		split = false;
		if ((q.tmpNumIndices + indices.$length >> 0) > 65535) {
			q.tmpNumIndices = 0;
			q.nextIndex = 0;
			split = true;
		}
		q.appendVertices(vertices);
		q.appendIndices(indices, ((q.nextIndex << 16 >>> 16)));
		q.nextIndex = q.nextIndex + ((_q = ($imul(vertices.$length, new opengl.DataType(opengl.Float).SizeInBytes())) / VertexSizeInBytes(), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		q.tmpNumIndices = q.tmpNumIndices + (indices.$length) >> 0;
		$r = q.doEnqueueDrawImageCommand(dst, src, vertices.$length, indices.$length, color, mode, filter, split); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: commandQueue.ptr.prototype.EnqueueDrawImageCommand }; } $f._q = _q; $f.color = color; $f.dst = dst; $f.filter = filter; $f.indices = indices; $f.mode = mode; $f.q = q; $f.split = split; $f.src = src; $f.vertices = vertices; $f.$s = $s; $f.$r = $r; return $f;
	};
	commandQueue.prototype.EnqueueDrawImageCommand = function(dst, src, vertices, indices, color, mode, filter) { return this.$val.EnqueueDrawImageCommand(dst, src, vertices, indices, color, mode, filter); };
	commandQueue.ptr.prototype.Enqueue = function(command$1) {
		var command$1, q;
		q = this;
		q.commands = $append(q.commands, command$1);
	};
	commandQueue.prototype.Enqueue = function(command$1) { return this.$val.Enqueue(command$1); };
	commandQueue.ptr.prototype.Flush = function() {
		var _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, c, c$1, err, es, indexOffsetInBytes, nc, ne, nv, q, vs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; err = $f.err; es = $f.es; indexOffsetInBytes = $f.indexOffsetInBytes; nc = $f.nc; ne = $f.ne; nv = $f.nv; q = $f.q; vs = $f.vs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		if (!($interfaceIsEqual(q.err, $ifaceNil))) {
			$s = -1; return;
		}
		opengl.GetContext().ResetViewportSize();
		es = q.indices;
		vs = q.vertices;
		/* */ if (recordLog()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (recordLog()) { */ case 1:
			_r = fmt.Println(new sliceType$4([new $String("--")])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		/* while (true) { */ case 4:
			/* if (!(q.commands.$length > 0)) { break; } */ if(!(q.commands.$length > 0)) { $s = 5; continue; }
			nv = 0;
			ne = 0;
			nc = 0;
			_ref = q.commands;
			_i = 0;
			/* while (true) { */ case 6:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$1 = c.NumIndices(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1 > 65535) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_r$1 > 65535) { */ case 8:
					$panic(new $String("not reached"));
				/* } */ case 9:
				_r$2 = c.NumIndices(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if ((ne + _r$2 >> 0) > 65535) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if ((ne + _r$2 >> 0) > 65535) { */ case 11:
					/* break; */ $s = 7; continue;
				/* } */ case 12:
				_r$3 = c.NumVertices(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				nv = nv + (_r$3) >> 0;
				_r$4 = c.NumIndices(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				ne = ne + (_r$4) >> 0;
				nc = nc + (1) >> 0;
				_i++;
			/* } */ $s = 6; continue; case 7:
			/* */ if (0 < ne) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (0 < ne) { */ case 16:
				$r = opengl.GetContext().ElementArrayBufferSubData($subslice(es, 0, ne)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = opengl.GetContext().ArrayBufferSubData($subslice(vs, 0, nv)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				es = $subslice(es, ne);
				vs = $subslice(vs, nv);
			/* } */ case 17:
			indexOffsetInBytes = 0;
			_ref$1 = $subslice(q.commands, 0, nc);
			_i$1 = 0;
			/* while (true) { */ case 20:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 21; continue; }
				c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$5 = c$1.Exec(indexOffsetInBytes); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				err = _r$5;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					q.err = err;
					$s = -1; return;
				}
				/* */ if (recordLog()) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (recordLog()) { */ case 23:
					_r$6 = fmt.Printf("%s\n", new sliceType$4([c$1])); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
				/* } */ case 24:
				_r$7 = c$1.NumIndices(); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				indexOffsetInBytes = indexOffsetInBytes + (($imul(_r$7, 2))) >> 0;
				_i$1++;
			/* } */ $s = 20; continue; case 21:
			/* */ if (0 < nc) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (0 < nc) { */ case 27:
				$r = opengl.GetContext().Flush(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 28:
			q.commands = $subslice(q.commands, nc);
		/* } */ $s = 4; continue; case 5:
		q.commands = sliceType$1.nil;
		q.nvertices = 0;
		q.nindices = 0;
		q.tmpNumIndices = 0;
		q.nextIndex = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: commandQueue.ptr.prototype.Flush }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.err = err; $f.es = es; $f.indexOffsetInBytes = indexOffsetInBytes; $f.nc = nc; $f.ne = ne; $f.nv = nv; $f.q = q; $f.vs = vs; $f.$s = $s; $f.$r = $r; return $f;
	};
	commandQueue.prototype.Flush = function() { return this.$val.Flush(); };
	Error = function() {
		return theCommandQueue.err;
	};
	$pkg.Error = Error;
	FlushCommands = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = theCommandQueue.Flush(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlushCommands }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FlushCommands = FlushCommands;
	VertexSizeInBytes = function() {
		return theArrayBufferLayout.totalBytes();
	};
	$pkg.VertexSizeInBytes = VertexSizeInBytes;
	drawImageCommand.ptr.prototype.String = function() {
		var _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = fmt.Sprintf("draw-image: dst: %p <- src: %p, colorm: %v, mode %d, filter: %d", new sliceType$4([c.dst, c.src, c.color, new opengl.CompositeMode(c.mode), new Filter(c.filter)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawImageCommand.ptr.prototype.String }; } $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	drawImageCommand.prototype.String = function() { return this.$val.String(); };
	drawImageCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var _r, _r$1, _tuple, c, err, f, indexOffsetInBytes, proj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; c = $f.c; err = $f.err; f = $f.f; indexOffsetInBytes = $f.indexOffsetInBytes; proj = $f.proj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.dst.createFramebufferIfNeeded(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$r = f.setAsViewport(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.GetContext().BlendFunc(c.mode); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (c.nindices === 0) {
			$s = -1; return $ifaceNil;
		}
		_r$1 = f.projectionMatrix(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		proj = _r$1;
		$r = theOpenGLState.useProgram(proj, $clone(c.src.texture.native$0, opengl.Texture), c.dst, c.src, c.color, c.filter); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.GetContext().DrawElements(opengl.Triangles, c.nindices, indexOffsetInBytes); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawImageCommand.ptr.prototype.Exec }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.f = f; $f.indexOffsetInBytes = indexOffsetInBytes; $f.proj = proj; $f.$s = $s; $f.$r = $r; return $f;
	};
	drawImageCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	drawImageCommand.ptr.prototype.NumVertices = function() {
		var c;
		c = this;
		return c.nvertices;
	};
	drawImageCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	drawImageCommand.ptr.prototype.NumIndices = function() {
		var c;
		c = this;
		return c.nindices;
	};
	drawImageCommand.prototype.NumIndices = function() { return this.$val.NumIndices(); };
	drawImageCommand.ptr.prototype.AddNumVertices = function(n) {
		var c, n;
		c = this;
		c.nvertices = c.nvertices + (n) >> 0;
	};
	drawImageCommand.prototype.AddNumVertices = function(n) { return this.$val.AddNumVertices(n); };
	drawImageCommand.ptr.prototype.AddNumIndices = function(n) {
		var c, n;
		c = this;
		c.nindices = c.nindices + (n) >> 0;
	};
	drawImageCommand.prototype.AddNumIndices = function(n) { return this.$val.AddNumIndices(n); };
	drawImageCommand.ptr.prototype.CanMerge = function(dst, src, color, mode, filter) {
		var c, color, dst, filter, mode, src;
		c = this;
		if (!(c.dst === dst)) {
			return false;
		}
		if (!(c.src === src)) {
			return false;
		}
		if (!c.color.Equals(color)) {
			return false;
		}
		if (!((c.mode === mode))) {
			return false;
		}
		if (!((c.filter === filter))) {
			return false;
		}
		return true;
	};
	drawImageCommand.prototype.CanMerge = function(dst, src, color, mode, filter) { return this.$val.CanMerge(dst, src, color, mode, filter); };
	replacePixelsCommand.ptr.prototype.String = function() {
		var _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = fmt.Sprintf("replace-pixels: dst: %p, x: %d, y: %d, width: %d, height: %d", new sliceType$4([c.dst, new $Int(c.x), new $Int(c.y), new $Int(c.width), new $Int(c.height)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: replacePixelsCommand.ptr.prototype.String }; } $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	replacePixelsCommand.prototype.String = function() { return this.$val.String(); };
	replacePixelsCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var c, indexOffsetInBytes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; indexOffsetInBytes = $f.indexOffsetInBytes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = opengl.GetContext().Flush(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.GetContext().BindTexture($clone(c.dst.texture.native$0, opengl.Texture)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.GetContext().TexSubImage2D(c.pixels, c.x, c.y, c.width, c.height); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: replacePixelsCommand.ptr.prototype.Exec }; } $f.c = c; $f.indexOffsetInBytes = indexOffsetInBytes; $f.$s = $s; $f.$r = $r; return $f;
	};
	replacePixelsCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	replacePixelsCommand.ptr.prototype.NumVertices = function() {
		var c;
		c = this;
		return 0;
	};
	replacePixelsCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	replacePixelsCommand.ptr.prototype.NumIndices = function() {
		var c;
		c = this;
		return 0;
	};
	replacePixelsCommand.prototype.NumIndices = function() { return this.$val.NumIndices(); };
	replacePixelsCommand.ptr.prototype.AddNumVertices = function(n) {
		var c, n;
		c = this;
	};
	replacePixelsCommand.prototype.AddNumVertices = function(n) { return this.$val.AddNumVertices(n); };
	replacePixelsCommand.ptr.prototype.AddNumIndices = function(n) {
		var c, n;
		c = this;
	};
	replacePixelsCommand.prototype.AddNumIndices = function(n) { return this.$val.AddNumIndices(n); };
	replacePixelsCommand.ptr.prototype.CanMerge = function(dst, src, color, mode, filter) {
		var c, color, dst, filter, mode, src;
		c = this;
		return false;
	};
	replacePixelsCommand.prototype.CanMerge = function(dst, src, color, mode, filter) { return this.$val.CanMerge(dst, src, color, mode, filter); };
	pixelsCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var _r, _r$1, _tuple, _tuple$1, c, err, f, indexOffsetInBytes, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; err = $f.err; f = $f.f; indexOffsetInBytes = $f.indexOffsetInBytes; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.img.createFramebufferIfNeeded(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = opengl.GetContext().FramebufferPixels($clone(f.native$0, opengl.Framebuffer), c.img.width, c.img.height); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		p = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		c.result = p;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pixelsCommand.ptr.prototype.Exec }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.err = err; $f.f = f; $f.indexOffsetInBytes = indexOffsetInBytes; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pixelsCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	pixelsCommand.ptr.prototype.String = function() {
		var _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = fmt.Sprintf("pixels: img: %p", new sliceType$4([c.img])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pixelsCommand.ptr.prototype.String }; } $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	pixelsCommand.prototype.String = function() { return this.$val.String(); };
	pixelsCommand.ptr.prototype.NumVertices = function() {
		var c;
		c = this;
		return 0;
	};
	pixelsCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	pixelsCommand.ptr.prototype.NumIndices = function() {
		var c;
		c = this;
		return 0;
	};
	pixelsCommand.prototype.NumIndices = function() { return this.$val.NumIndices(); };
	pixelsCommand.ptr.prototype.AddNumVertices = function(n) {
		var c, n;
		c = this;
	};
	pixelsCommand.prototype.AddNumVertices = function(n) { return this.$val.AddNumVertices(n); };
	pixelsCommand.ptr.prototype.AddNumIndices = function(n) {
		var c, n;
		c = this;
	};
	pixelsCommand.prototype.AddNumIndices = function(n) { return this.$val.AddNumIndices(n); };
	pixelsCommand.ptr.prototype.CanMerge = function(dst, src, color, mode, filter) {
		var c, color, dst, filter, mode, src;
		c = this;
		return false;
	};
	pixelsCommand.prototype.CanMerge = function(dst, src, color, mode, filter) { return this.$val.CanMerge(dst, src, color, mode, filter); };
	disposeCommand.ptr.prototype.String = function() {
		var _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = fmt.Sprintf("dispose: target: %p", new sliceType$4([c.target])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: disposeCommand.ptr.prototype.String }; } $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	disposeCommand.prototype.String = function() { return this.$val.String(); };
	disposeCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var c, indexOffsetInBytes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; indexOffsetInBytes = $f.indexOffsetInBytes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (!(c.target.framebuffer === ptrType$2.nil) && !($equal(c.target.framebuffer.native$0, opengl.GetContext().ScreenFramebuffer(), opengl.Framebuffer))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(c.target.framebuffer === ptrType$2.nil) && !($equal(c.target.framebuffer.native$0, opengl.GetContext().ScreenFramebuffer(), opengl.Framebuffer))) { */ case 1:
			$r = opengl.GetContext().DeleteFramebuffer($clone(c.target.framebuffer.native$0, opengl.Framebuffer)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ if (!(c.target.texture === ptrType$3.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(c.target.texture === ptrType$3.nil)) { */ case 4:
			$r = opengl.GetContext().DeleteTexture($clone(c.target.texture.native$0, opengl.Texture)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: disposeCommand.ptr.prototype.Exec }; } $f.c = c; $f.indexOffsetInBytes = indexOffsetInBytes; $f.$s = $s; $f.$r = $r; return $f;
	};
	disposeCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	disposeCommand.ptr.prototype.NumVertices = function() {
		var c;
		c = this;
		return 0;
	};
	disposeCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	disposeCommand.ptr.prototype.NumIndices = function() {
		var c;
		c = this;
		return 0;
	};
	disposeCommand.prototype.NumIndices = function() { return this.$val.NumIndices(); };
	disposeCommand.ptr.prototype.AddNumVertices = function(n) {
		var c, n;
		c = this;
	};
	disposeCommand.prototype.AddNumVertices = function(n) { return this.$val.AddNumVertices(n); };
	disposeCommand.ptr.prototype.AddNumIndices = function(n) {
		var c, n;
		c = this;
	};
	disposeCommand.prototype.AddNumIndices = function(n) { return this.$val.AddNumIndices(n); };
	disposeCommand.ptr.prototype.CanMerge = function(dst, src, color, mode, filter) {
		var c, color, dst, filter, mode, src;
		c = this;
		return false;
	};
	disposeCommand.prototype.CanMerge = function(dst, src, color, mode, filter) { return this.$val.CanMerge(dst, src, color, mode, filter); };
	checkSize = function(width, height) {
		var _r, _r$1, _r$2, _r$3, _r$4, height, m, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; height = $f.height; m = $f.m; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (width < 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (width < 1) { */ case 1:
			_r = fmt.Sprintf("graphics: width (%d) must be equal or more than 1.", new sliceType$4([new $Int(width)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String(_r));
		/* } */ case 2:
		/* */ if (height < 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (height < 1) { */ case 4:
			_r$1 = fmt.Sprintf("graphics: height (%d) must be equal or more than 1.", new sliceType$4([new $Int(height)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 5:
		_r$2 = MaxImageSize(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = _r$2;
		/* */ if (width > m) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (width > m) { */ case 8:
			_r$3 = fmt.Sprintf("graphics: width (%d) must be less than or equal to %d", new sliceType$4([new $Int(width), new $Int(m)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String(_r$3));
		/* } */ case 9:
		/* */ if (height > m) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (height > m) { */ case 11:
			_r$4 = fmt.Sprintf("graphics: height (%d) must be less than or equal to %d", new sliceType$4([new $Int(height), new $Int(m)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 12:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: checkSize }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.height = height; $f.m = m; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	newImageCommand.ptr.prototype.String = function() {
		var _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = fmt.Sprintf("new-image: result: %p, width: %d, height: %d", new sliceType$4([c.result, new $Int(c.width), new $Int(c.height)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newImageCommand.ptr.prototype.String }; } $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	newImageCommand.prototype.String = function() { return this.$val.String(); };
	newImageCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var _r, _tuple, c, err, h, indexOffsetInBytes, native$1, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; h = $f.h; indexOffsetInBytes = $f.indexOffsetInBytes; native$1 = $f.native$1; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		w = math.NextPowerOf2Int(c.width);
		h = math.NextPowerOf2Int(c.height);
		$r = checkSize(w, h); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = opengl.GetContext().NewTexture(w, h); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		native$1 = $clone(_tuple[0], opengl.Texture);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		c.result.texture = new texture.ptr($clone(native$1, opengl.Texture));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newImageCommand.ptr.prototype.Exec }; } $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.h = h; $f.indexOffsetInBytes = indexOffsetInBytes; $f.native$1 = native$1; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	newImageCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	newImageCommand.ptr.prototype.NumVertices = function() {
		var c;
		c = this;
		return 0;
	};
	newImageCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	newImageCommand.ptr.prototype.NumIndices = function() {
		var c;
		c = this;
		return 0;
	};
	newImageCommand.prototype.NumIndices = function() { return this.$val.NumIndices(); };
	newImageCommand.ptr.prototype.AddNumVertices = function(n) {
		var c, n;
		c = this;
	};
	newImageCommand.prototype.AddNumVertices = function(n) { return this.$val.AddNumVertices(n); };
	newImageCommand.ptr.prototype.AddNumIndices = function(n) {
		var c, n;
		c = this;
	};
	newImageCommand.prototype.AddNumIndices = function(n) { return this.$val.AddNumIndices(n); };
	newImageCommand.ptr.prototype.CanMerge = function(dst, src, color, mode, filter) {
		var c, color, dst, filter, mode, src;
		c = this;
		return false;
	};
	newImageCommand.prototype.CanMerge = function(dst, src, color, mode, filter) { return this.$val.CanMerge(dst, src, color, mode, filter); };
	newScreenFramebufferImageCommand.ptr.prototype.String = function() {
		var _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = fmt.Sprintf("new-screen-framebuffer-image: result: %p, width: %d, height: %d", new sliceType$4([c.result, new $Int(c.width), new $Int(c.height)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newScreenFramebufferImageCommand.ptr.prototype.String }; } $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	newScreenFramebufferImageCommand.prototype.String = function() { return this.$val.String(); };
	newScreenFramebufferImageCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var c, indexOffsetInBytes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; indexOffsetInBytes = $f.indexOffsetInBytes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = checkSize(c.width, c.height); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		c.result.framebuffer = newScreenFramebuffer(c.width, c.height);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newScreenFramebufferImageCommand.ptr.prototype.Exec }; } $f.c = c; $f.indexOffsetInBytes = indexOffsetInBytes; $f.$s = $s; $f.$r = $r; return $f;
	};
	newScreenFramebufferImageCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	newScreenFramebufferImageCommand.ptr.prototype.NumVertices = function() {
		var c;
		c = this;
		return 0;
	};
	newScreenFramebufferImageCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	newScreenFramebufferImageCommand.ptr.prototype.NumIndices = function() {
		var c;
		c = this;
		return 0;
	};
	newScreenFramebufferImageCommand.prototype.NumIndices = function() { return this.$val.NumIndices(); };
	newScreenFramebufferImageCommand.ptr.prototype.AddNumVertices = function(n) {
		var c, n;
		c = this;
	};
	newScreenFramebufferImageCommand.prototype.AddNumVertices = function(n) { return this.$val.AddNumVertices(n); };
	newScreenFramebufferImageCommand.ptr.prototype.AddNumIndices = function(n) {
		var c, n;
		c = this;
	};
	newScreenFramebufferImageCommand.prototype.AddNumIndices = function(n) { return this.$val.AddNumIndices(n); };
	newScreenFramebufferImageCommand.ptr.prototype.CanMerge = function(dst, src, color, mode, filter) {
		var c, color, dst, filter, mode, src;
		c = this;
		return false;
	};
	newScreenFramebufferImageCommand.prototype.CanMerge = function(dst, src, color, mode, filter) { return this.$val.CanMerge(dst, src, color, mode, filter); };
	recordLog = function() {
		return false;
	};
	orthoProjectionMatrix = function(left, right, bottom, top) {
		var bottom, e11, e14, e22, e24, left, right, top;
		e11 = $fround(2 / ((right - left >> 0)));
		e22 = $fround(2 / ((top - bottom >> 0)));
		e14 = $fround($fround(-1 * ((right + left >> 0))) / ((right - left >> 0)));
		e24 = $fround($fround(-1 * ((top + bottom >> 0))) / ((top - bottom >> 0)));
		return new sliceType([e11, 0, 0, 0, 0, e22, 0, 0, 0, 0, 1, 0, e14, e24, 0, 1]);
	};
	newFramebufferFromTexture = function(texture$1, width, height) {
		var _r, _tuple, err, height, native$1, texture$1, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; height = $f.height; native$1 = $f.native$1; texture$1 = $f.texture$1; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = opengl.GetContext().NewFramebuffer($clone((texture$1.native$0), opengl.Texture)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		native$1 = $clone(_tuple[0], opengl.Framebuffer);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, err];
		}
		$s = -1; return [new framebuffer.ptr($clone(native$1, opengl.Framebuffer), sliceType.nil, width, height), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: newFramebufferFromTexture }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.height = height; $f.native$1 = native$1; $f.texture$1 = texture$1; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	newScreenFramebuffer = function(width, height) {
		var height, width;
		return new framebuffer.ptr($clone(opengl.GetContext().ScreenFramebuffer(), opengl.Framebuffer), sliceType.nil, width, height);
	};
	framebuffer.ptr.prototype.viewportSize = function() {
		var _r, f, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (web.IsBrowser()) {
			$s = -1; return [f.width, f.height];
		}
		_r = MaxImageSize(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		m = _r;
		$s = -1; return [m, m];
		/* */ } return; } if ($f === undefined) { $f = { $blk: framebuffer.ptr.prototype.viewportSize }; } $f._r = _r; $f.f = f; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	framebuffer.prototype.viewportSize = function() { return this.$val.viewportSize(); };
	framebuffer.ptr.prototype.setAsViewport = function() {
		var _r, _tuple, f, h, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; h = $f.h; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.viewportSize(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		w = _tuple[0];
		h = _tuple[1];
		$r = opengl.GetContext().SetViewport($clone(f.native$0, opengl.Framebuffer), w, h); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: framebuffer.ptr.prototype.setAsViewport }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.h = h; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	framebuffer.prototype.setAsViewport = function() { return this.$val.setAsViewport(); };
	framebuffer.ptr.prototype.projectionMatrix = function() {
		var _r, _tuple, f, h, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; h = $f.h; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (!(f.proMatrix === sliceType.nil)) {
			$s = -1; return f.proMatrix;
		}
		_r = f.viewportSize(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		w = _tuple[0];
		h = _tuple[1];
		f.proMatrix = orthoProjectionMatrix(0, w, 0, h);
		$s = -1; return f.proMatrix;
		/* */ } return; } if ($f === undefined) { $f = { $blk: framebuffer.ptr.prototype.projectionMatrix }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.h = h; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	framebuffer.prototype.projectionMatrix = function() { return this.$val.projectionMatrix(); };
	MaxImageSize = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (maxTextureSize === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (maxTextureSize === 0) { */ case 1:
			_r = opengl.GetContext().MaxTextureSize(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			maxTextureSize = _r;
			if (maxTextureSize === 0) {
				$panic(new $String("graphics: failed to get the max texture size"));
			}
		/* } */ case 2:
		s = maxTextureSize;
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MaxImageSize }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MaxImageSize = MaxImageSize;
	NewImage = function(width, height) {
		var c, height, i, width;
		i = new Image.ptr(ptrType$3.nil, ptrType$2.nil, width, height);
		c = new newImageCommand.ptr(i, width, height);
		theCommandQueue.Enqueue(c);
		return i;
	};
	$pkg.NewImage = NewImage;
	NewScreenFramebufferImage = function(width, height) {
		var c, height, i, width;
		i = new Image.ptr(ptrType$3.nil, ptrType$2.nil, width, height);
		c = new newScreenFramebufferImageCommand.ptr(i, width, height);
		theCommandQueue.Enqueue(c);
		return i;
	};
	$pkg.NewScreenFramebufferImage = NewScreenFramebufferImage;
	Image.ptr.prototype.Dispose = function() {
		var c, i;
		i = this;
		c = new disposeCommand.ptr(i);
		theCommandQueue.Enqueue(c);
	};
	Image.prototype.Dispose = function() { return this.$val.Dispose(); };
	Image.ptr.prototype.Size = function() {
		var i;
		i = this;
		return [i.width, i.height];
	};
	Image.prototype.Size = function() { return this.$val.Size(); };
	Image.ptr.prototype.DrawImage = function(src, vertices, indices, clr, mode, filter) {
		var clr, filter, i, indices, mode, src, vertices, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; clr = $f.clr; filter = $f.filter; i = $f.i; indices = $f.indices; mode = $f.mode; src = $f.src; vertices = $f.vertices; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		$r = theCommandQueue.EnqueueDrawImageCommand(i, src, vertices, indices, clr, mode, filter); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.DrawImage }; } $f.clr = clr; $f.filter = filter; $f.i = i; $f.indices = indices; $f.mode = mode; $f.src = src; $f.vertices = vertices; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.DrawImage = function(src, vertices, indices, clr, mode, filter) { return this.$val.DrawImage(src, vertices, indices, clr, mode, filter); };
	Image.ptr.prototype.Pixels = function() {
		var c, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		c = new pixelsCommand.ptr(sliceType$5.nil, i);
		theCommandQueue.Enqueue(c);
		$r = theCommandQueue.Flush(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return c.result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.Pixels }; } $f.c = c; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.Pixels = function() { return this.$val.Pixels(); };
	Image.ptr.prototype.ReplacePixels = function(p, x, y, width, height) {
		var c, height, i, p, pixels, width, x, y;
		i = this;
		pixels = $makeSlice(sliceType$5, p.$length);
		$copySlice(pixels, p);
		c = new replacePixelsCommand.ptr(i, pixels, x, y, width, height);
		theCommandQueue.Enqueue(c);
	};
	Image.prototype.ReplacePixels = function(p, x, y, width, height) { return this.$val.ReplacePixels(p, x, y, width, height); };
	Image.ptr.prototype.IsInvalidated = function() {
		var _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = opengl.GetContext().IsTexture($clone(i.texture.native$0, opengl.Texture)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !_r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.IsInvalidated }; } $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.IsInvalidated = function() { return this.$val.IsInvalidated(); };
	Image.ptr.prototype.createFramebufferIfNeeded = function() {
		var _r, _tuple, err, f, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (!(i.framebuffer === ptrType$2.nil)) {
			$s = -1; return [i.framebuffer, $ifaceNil];
		}
		_r = newFramebufferFromTexture(i.texture, math.NextPowerOf2Int(i.width), math.NextPowerOf2Int(i.height)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, err];
		}
		i.framebuffer = f;
		$s = -1; return [i.framebuffer, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.createFramebufferIfNeeded }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.createFramebufferIfNeeded = function() { return this.$val.createFramebufferIfNeeded(); };
	arrayBufferLayout.ptr.prototype.totalBytes = function() {
		var _i, _ref, a, p, t;
		a = this;
		if (!((a.total === 0))) {
			return a.total;
		}
		t = 0;
		_ref = a.parts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayBufferLayoutPart);
			t = t + (($imul(new opengl.DataType(p.dataType).SizeInBytes(), p.num))) >> 0;
			_i++;
		}
		a.total = t;
		return a.total;
	};
	arrayBufferLayout.prototype.totalBytes = function() { return this.$val.totalBytes(); };
	arrayBufferLayout.ptr.prototype.newArrayBuffer = function() {
		var _r, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r = opengl.GetContext().NewArrayBuffer($imul(a.totalBytes(), 65535)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayBufferLayout.ptr.prototype.newArrayBuffer }; } $f._r = _r; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayBufferLayout.prototype.newArrayBuffer = function() { return this.$val.newArrayBuffer(); };
	arrayBufferLayout.ptr.prototype.enable = function(program) {
		var _i, _i$1, _ref, _ref$1, a, offset, p, p$1, program, total, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; offset = $f.offset; p = $f.p; p$1 = $f.p$1; program = $f.program; total = $f.total; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_ref = a.parts;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayBufferLayoutPart);
			$r = opengl.GetContext().EnableVertexAttribArray($clone(program, opengl.Program), p.name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		total = a.totalBytes();
		offset = 0;
		_ref$1 = a.parts;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 5; continue; }
			p$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), arrayBufferLayoutPart);
			$r = opengl.GetContext().VertexAttribPointer($clone(program, opengl.Program), p$1.name, p$1.num, p$1.dataType, total, offset); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			offset = offset + (($imul(new opengl.DataType(p$1.dataType).SizeInBytes(), p$1.num))) >> 0;
			_i$1++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayBufferLayout.ptr.prototype.enable }; } $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.offset = offset; $f.p = p; $f.p$1 = p$1; $f.program = program; $f.total = total; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayBufferLayout.prototype.enable = function(program) { return this.$val.enable(program); };
	arrayBufferLayout.ptr.prototype.disable = function(program) {
		var _i, _ref, a, p, program, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; a = $f.a; p = $f.p; program = $f.program; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_ref = a.parts;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayBufferLayoutPart);
			$r = opengl.GetContext().DisableVertexAttribArray($clone(program, opengl.Program), p.name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayBufferLayout.ptr.prototype.disable }; } $f._i = _i; $f._ref = _ref; $f.a = a; $f.p = p; $f.program = program; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayBufferLayout.prototype.disable = function(program) { return this.$val.disable(program); };
	ResetGLState = function() {
		var _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = theOpenGLState.reset(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ResetGLState }; } $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ResetGLState = ResetGLState;
	openGLState.ptr.prototype.reset = function() {
		var _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, err, err$1, s, shaderFragmentLinearNative, shaderFragmentNearestNative, shaderFragmentScreenNative, shaderVertexModelviewNative, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; err = $f.err; err$1 = $f.err$1; s = $f.s; shaderFragmentLinearNative = $f.shaderFragmentLinearNative; shaderFragmentNearestNative = $f.shaderFragmentNearestNative; shaderFragmentScreenNative = $f.shaderFragmentScreenNative; shaderVertexModelviewNative = $f.shaderVertexModelviewNative; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		s = this;
		_r = opengl.GetContext().Reset(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		opengl.Program.copy(s.lastProgram, zeroProgram);
		s.lastProjectionMatrix = sliceType.nil;
		s.lastColorMatrix = sliceType.nil;
		s.lastColorMatrixTranslation = sliceType.nil;
		s.lastSourceWidth = 0;
		s.lastSourceHeight = 0;
		/* */ if (!($equal(s.programNearest, zeroProgram, opengl.Program))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($equal(s.programNearest, zeroProgram, opengl.Program))) { */ case 2:
			$r = opengl.GetContext().DeleteProgram($clone(s.programNearest, opengl.Program)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ if (!($equal(s.programLinear, zeroProgram, opengl.Program))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($equal(s.programLinear, zeroProgram, opengl.Program))) { */ case 5:
			$r = opengl.GetContext().DeleteProgram($clone(s.programLinear, opengl.Program)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		/* */ if (!($equal(s.programScreen, zeroProgram, opengl.Program))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($equal(s.programScreen, zeroProgram, opengl.Program))) { */ case 8:
			$r = opengl.GetContext().DeleteProgram($clone(s.programScreen, opengl.Program)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* */ if (!web.IsBrowser()) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!web.IsBrowser()) { */ case 11:
			/* */ if (!($equal(s.arrayBuffer, zeroBuffer, opengl.Buffer))) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!($equal(s.arrayBuffer, zeroBuffer, opengl.Buffer))) { */ case 13:
				$r = opengl.GetContext().DeleteBuffer($clone(s.arrayBuffer, opengl.Buffer)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			/* */ if (!($equal(s.elementArrayBuffer, zeroBuffer, opengl.Buffer))) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!($equal(s.elementArrayBuffer, zeroBuffer, opengl.Buffer))) { */ case 16:
				$r = opengl.GetContext().DeleteBuffer($clone(s.elementArrayBuffer, opengl.Buffer)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 17:
		/* } */ case 12:
		_r$1 = opengl.GetContext().NewShader(opengl.VertexShader, shader(0)); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		shaderVertexModelviewNative = $clone(_tuple[0], opengl.Shader);
		err$1 = _tuple[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 20:
			_r$2 = fmt.Sprintf("graphics: shader compiling error:\n%s", new sliceType$4([err$1])); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$panic(new $String(_r$2));
		/* } */ case 21:
		$deferred.push([$methodVal(opengl.GetContext(), "DeleteShader"), [$clone(shaderVertexModelviewNative, opengl.Shader)]]);
		_r$3 = opengl.GetContext().NewShader(opengl.FragmentShader, shader(1)); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		shaderFragmentNearestNative = $clone(_tuple$1[0], opengl.Shader);
		err$1 = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 24:
			_r$4 = fmt.Sprintf("graphics: shader compiling error:\n%s", new sliceType$4([err$1])); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 25:
		$deferred.push([$methodVal(opengl.GetContext(), "DeleteShader"), [$clone(shaderFragmentNearestNative, opengl.Shader)]]);
		_r$5 = opengl.GetContext().NewShader(opengl.FragmentShader, shader(2)); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$2 = _r$5;
		shaderFragmentLinearNative = $clone(_tuple$2[0], opengl.Shader);
		err$1 = _tuple$2[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 28:
			_r$6 = fmt.Sprintf("graphics: shader compiling error:\n%s", new sliceType$4([err$1])); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$panic(new $String(_r$6));
		/* } */ case 29:
		$deferred.push([$methodVal(opengl.GetContext(), "DeleteShader"), [$clone(shaderFragmentLinearNative, opengl.Shader)]]);
		_r$7 = opengl.GetContext().NewShader(opengl.FragmentShader, shader(3)); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$3 = _r$7;
		shaderFragmentScreenNative = $clone(_tuple$3[0], opengl.Shader);
		err$1 = _tuple$3[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 32:
			_r$8 = fmt.Sprintf("graphics: shader compiling error:\n%s", new sliceType$4([err$1])); /* */ $s = 34; case 34: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			$panic(new $String(_r$8));
		/* } */ case 33:
		$deferred.push([$methodVal(opengl.GetContext(), "DeleteShader"), [$clone(shaderFragmentScreenNative, opengl.Shader)]]);
		_r$9 = opengl.GetContext().NewProgram(new sliceType$6([$clone(shaderVertexModelviewNative, opengl.Shader), $clone(shaderFragmentNearestNative, opengl.Shader)])); /* */ $s = 35; case 35: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tuple$4 = _r$9;
		opengl.Program.copy(s.programNearest, _tuple$4[0]);
		err$1 = _tuple$4[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		_r$10 = opengl.GetContext().NewProgram(new sliceType$6([$clone(shaderVertexModelviewNative, opengl.Shader), $clone(shaderFragmentLinearNative, opengl.Shader)])); /* */ $s = 36; case 36: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_tuple$5 = _r$10;
		opengl.Program.copy(s.programLinear, _tuple$5[0]);
		err$1 = _tuple$5[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		_r$11 = opengl.GetContext().NewProgram(new sliceType$6([$clone(shaderVertexModelviewNative, opengl.Shader), $clone(shaderFragmentScreenNative, opengl.Shader)])); /* */ $s = 37; case 37: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_tuple$6 = _r$11;
		opengl.Program.copy(s.programScreen, _tuple$6[0]);
		err$1 = _tuple$6[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		_r$12 = theArrayBufferLayout.newArrayBuffer(); /* */ $s = 38; case 38: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		opengl.Buffer.copy(s.arrayBuffer, _r$12);
		_r$13 = opengl.GetContext().NewElementArrayBuffer(131070); /* */ $s = 39; case 39: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		opengl.Buffer.copy(s.elementArrayBuffer, _r$13);
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: openGLState.ptr.prototype.reset }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.err = err; $f.err$1 = err$1; $f.s = s; $f.shaderFragmentLinearNative = shaderFragmentLinearNative; $f.shaderFragmentNearestNative = shaderFragmentNearestNative; $f.shaderFragmentScreenNative = shaderFragmentScreenNative; $f.shaderVertexModelviewNative = shaderVertexModelviewNative; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	openGLState.prototype.reset = function() { return this.$val.reset(); };
	areSameFloat32Array = function(a, b) {
		var a, b, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			if (!((((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]) === ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i])))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	openGLState.ptr.prototype.useProgram = function(proj, texture$1, dst, src, colorM, filter) {
		var _1, _tuple, _tuple$1, _tuple$2, _tuple$3, c, colorM, dst, dw, esBody, esTranslate, filter, program, proj, s, scale, sh, src, sw, sw$1, texture$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; c = $f.c; colorM = $f.colorM; dst = $f.dst; dw = $f.dw; esBody = $f.esBody; esTranslate = $f.esTranslate; filter = $f.filter; program = $f.program; proj = $f.proj; s = $f.s; scale = $f.scale; sh = $f.sh; src = $f.src; sw = $f.sw; sw$1 = $f.sw$1; texture$1 = $f.texture$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		c = opengl.GetContext();
		program = new opengl.Program.ptr(new $packages["github.com/gopherjs/gopherwasm/js"].Value.ptr(null), 0);
		_1 = filter;
		if (_1 === (1)) {
			opengl.Program.copy(program, s.programNearest);
		} else if (_1 === (2)) {
			opengl.Program.copy(program, s.programLinear);
		} else if (_1 === (3)) {
			opengl.Program.copy(program, s.programScreen);
		} else {
			$panic(new $String("not reached"));
		}
		/* */ if (!($equal(s.lastProgram, program, opengl.Program))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($equal(s.lastProgram, program, opengl.Program))) { */ case 1:
			$r = c.UseProgram($clone(program, opengl.Program)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($equal(s.lastProgram, zeroProgram, opengl.Program))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($equal(s.lastProgram, zeroProgram, opengl.Program))) { */ case 4:
				$r = theArrayBufferLayout.disable($clone(s.lastProgram, opengl.Program)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			$r = theArrayBufferLayout.enable($clone(program, opengl.Program)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ($equal(s.lastProgram, zeroProgram, opengl.Program)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($equal(s.lastProgram, zeroProgram, opengl.Program)) { */ case 8:
				$r = c.BindBuffer(opengl.ArrayBuffer, $clone(s.arrayBuffer, opengl.Buffer)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = c.BindBuffer(opengl.ElementArrayBuffer, $clone(s.elementArrayBuffer, opengl.Buffer)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = c.UniformInt($clone(program, opengl.Program), "texture", 0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
			opengl.Program.copy(s.lastProgram, program);
			s.lastProjectionMatrix = sliceType.nil;
			s.lastColorMatrix = sliceType.nil;
			s.lastColorMatrixTranslation = sliceType.nil;
			s.lastSourceWidth = 0;
			s.lastSourceHeight = 0;
		/* } */ case 2:
		/* */ if (!areSameFloat32Array(s.lastProjectionMatrix, proj)) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!areSameFloat32Array(s.lastProjectionMatrix, proj)) { */ case 13:
			$r = c.UniformFloats($clone(program, opengl.Program), "projection_matrix", proj); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (s.lastProjectionMatrix === sliceType.nil) {
				s.lastProjectionMatrix = $makeSlice(sliceType, 16);
			}
			s.lastProjectionMatrix = proj;
		/* } */ case 14:
		_tuple = colorM.UnsafeElements();
		esBody = _tuple[0];
		esTranslate = _tuple[1];
		/* */ if (!areSameFloat32Array(s.lastColorMatrix, esBody)) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!areSameFloat32Array(s.lastColorMatrix, esBody)) { */ case 16:
			$r = c.UniformFloats($clone(program, opengl.Program), "color_matrix_body", esBody); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (s.lastColorMatrix === sliceType.nil) {
				s.lastColorMatrix = $makeSlice(sliceType, 16);
			}
			s.lastColorMatrix = esBody;
		/* } */ case 17:
		/* */ if (!areSameFloat32Array(s.lastColorMatrixTranslation, esTranslate)) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (!areSameFloat32Array(s.lastColorMatrixTranslation, esTranslate)) { */ case 19:
			$r = c.UniformFloats($clone(program, opengl.Program), "color_matrix_translation", esTranslate); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (s.lastColorMatrixTranslation === sliceType.nil) {
				s.lastColorMatrixTranslation = $makeSlice(sliceType, 4);
			}
			s.lastColorMatrixTranslation = esTranslate;
		/* } */ case 20:
		_tuple$1 = src.Size();
		sw = _tuple$1[0];
		sh = _tuple$1[1];
		sw = math.NextPowerOf2Int(sw);
		sh = math.NextPowerOf2Int(sh);
		/* */ if (!((s.lastSourceWidth === sw)) || !((s.lastSourceHeight === sh))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!((s.lastSourceWidth === sw)) || !((s.lastSourceHeight === sh))) { */ case 22:
			$r = c.UniformFloats($clone(program, opengl.Program), "source_size", new sliceType([(sw), (sh)])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			s.lastSourceWidth = sw;
			s.lastSourceHeight = sh;
		/* } */ case 23:
		/* */ if ($equal(program, s.programScreen, opengl.Program)) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if ($equal(program, s.programScreen, opengl.Program)) { */ case 25:
			_tuple$2 = src.Size();
			sw$1 = _tuple$2[0];
			_tuple$3 = dst.Size();
			dw = _tuple$3[0];
			scale = $fround((dw) / (sw$1));
			$r = c.UniformFloat($clone(program, opengl.Program), "scale", scale); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 26:
		$r = c.BindTexture($clone(texture$1, opengl.Texture)); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: openGLState.ptr.prototype.useProgram }; } $f._1 = _1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.c = c; $f.colorM = colorM; $f.dst = dst; $f.dw = dw; $f.esBody = esBody; $f.esTranslate = esTranslate; $f.filter = filter; $f.program = program; $f.proj = proj; $f.s = s; $f.scale = scale; $f.sh = sh; $f.src = src; $f.sw = sw; $f.sw$1 = sw$1; $f.texture$1 = texture$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	openGLState.prototype.useProgram = function(proj, texture$1, dst, src, colorM, filter) { return this.$val.useProgram(proj, texture$1, dst, src, colorM, filter); };
	shader = function(id) {
		var _1, defs, id;
		if (id === 0) {
			return "\nuniform mat4 projection_matrix;\nattribute vec2 vertex;\nattribute vec4 tex_coord;\nattribute vec4 color_scale;\nvarying vec2 varying_tex_coord;\nvarying vec2 varying_tex_coord_min;\nvarying vec2 varying_tex_coord_max;\nvarying vec4 varying_color_scale;\n\nbool isNaN(float x) {\n  return x != x;\n}\n\nvoid main(void) {\n  varying_tex_coord = vec2(tex_coord[0], tex_coord[1]);\n  if (!isNaN(tex_coord[2]) && !isNaN(tex_coord[3])) {\n    varying_tex_coord_min = vec2(min(tex_coord[0], tex_coord[2]), min(tex_coord[1], tex_coord[3]));\n    varying_tex_coord_max = vec2(max(tex_coord[0], tex_coord[2]), max(tex_coord[1], tex_coord[3]));\n  } else {\n    varying_tex_coord_min = vec2(0, 0);\n    varying_tex_coord_max = vec2(1, 1);\n  }\n  varying_color_scale = color_scale;\n  gl_Position = projection_matrix * vec4(vertex, 0, 1);\n}\n";
		}
		defs = new sliceType$7([]);
		_1 = id;
		if (_1 === (1)) {
			defs = $append(defs, "#define FILTER_NEAREST");
		} else if (_1 === (2)) {
			defs = $append(defs, "#define FILTER_LINEAR");
		} else if (_1 === (3)) {
			defs = $append(defs, "#define FILTER_SCREEN");
		} else {
			$panic(new $String("not reached"));
		}
		return strings.Replace("\n#if defined(GL_ES)\nprecision mediump float;\n#else\n#define lowp\n#define mediump\n#define highp\n#endif\n\n{{Definitions}}\n\nuniform sampler2D texture;\nuniform mat4 color_matrix_body;\nuniform vec4 color_matrix_translation;\n\nuniform highp vec2 source_size;\n\n#if defined(FILTER_SCREEN)\nuniform highp float scale;\n#endif\n\nvarying highp vec2 varying_tex_coord;\nvarying highp vec2 varying_tex_coord_min;\nvarying highp vec2 varying_tex_coord_max;\nvarying highp vec4 varying_color_scale;\n\nvoid main(void) {\n  highp vec2 pos = varying_tex_coord;\n  highp vec2 texel_size = 1.0 / source_size;\n\n#if defined(FILTER_NEAREST)\n  vec4 color = texture2D(texture, pos);\n  if (pos.x < varying_tex_coord_min.x ||\n    pos.y < varying_tex_coord_min.y ||\n    (varying_tex_coord_max.x - texel_size.x / 512.0) <= pos.x ||\n    (varying_tex_coord_max.y - texel_size.y / 512.0) <= pos.y) {\n    color = vec4(0, 0, 0, 0);\n  }\n#endif\n\n#if defined(FILTER_LINEAR)\n  highp vec2 p0 = pos - texel_size / 2.0;\n  highp vec2 p1 = pos + texel_size / 2.0;\n  vec4 c0 = texture2D(texture, p0);\n  vec4 c1 = texture2D(texture, vec2(p1.x, p0.y));\n  vec4 c2 = texture2D(texture, vec2(p0.x, p1.y));\n  vec4 c3 = texture2D(texture, p1);\n  if (p0.x < varying_tex_coord_min.x) {\n    c0 = vec4(0, 0, 0, 0);\n    c2 = vec4(0, 0, 0, 0);\n  }\n  if (p0.y < varying_tex_coord_min.y) {\n    c0 = vec4(0, 0, 0, 0);\n    c1 = vec4(0, 0, 0, 0);\n  }\n  if ((varying_tex_coord_max.x - texel_size.x / 512.0) <= p1.x) {\n    c1 = vec4(0, 0, 0, 0);\n    c3 = vec4(0, 0, 0, 0);\n  }\n  if ((varying_tex_coord_max.y - texel_size.y / 512.0) <= p1.y) {\n    c2 = vec4(0, 0, 0, 0);\n    c3 = vec4(0, 0, 0, 0);\n  }\n\n  vec2 rate = fract(p0 * source_size);\n  vec4 color = mix(mix(c0, c1, rate.x), mix(c2, c3, rate.x), rate.y);\n#endif\n\n#if defined(FILTER_SCREEN)\n  highp vec2 p0 = pos - texel_size / 2.0 / scale;\n  highp vec2 p1 = pos + texel_size / 2.0 / scale;\n\n  vec4 c0 = texture2D(texture, p0);\n  vec4 c1 = texture2D(texture, vec2(p1.x, p0.y));\n  vec4 c2 = texture2D(texture, vec2(p0.x, p1.y));\n  vec4 c3 = texture2D(texture, p1);\n  // Texels must be in the source rect, so it is not necessary to check that like linear filter.\n\n  vec2 rateCenter = vec2(1.0, 1.0) - texel_size / 2.0 / scale;\n  vec2 rate = clamp(((fract(p0 * source_size) - rateCenter) * scale) + rateCenter, 0.0, 1.0);\n  vec4 color = mix(mix(c0, c1, rate.x), mix(c2, c3, rate.x), rate.y);\n#endif\n\n  // Un-premultiply alpha\n  if (0.0 < color.a) {\n    color.rgb /= color.a;\n  }\n  // Apply the color matrix or scale.\n  color = (color_matrix_body * color) + color_matrix_translation;\n  color *= varying_color_scale;\n  color = clamp(color, 0.0, 1.0);\n  // Premultiply alpha\n  color.rgb *= color.a;\n\n  gl_FragColor = color;\n}\n", "{{Definitions}}", strings.Join(defs, "\n"), -1);
	};
	ptrType$4.methods = [{prop: "appendVertices", name: "appendVertices", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([sliceType], [], false)}, {prop: "appendIndices", name: "appendIndices", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([sliceType$2, $Uint16], [], false)}, {prop: "doEnqueueDrawImageCommand", name: "doEnqueueDrawImageCommand", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([ptrType, ptrType, $Int, $Int, ptrType$1, opengl.CompositeMode, Filter, $Bool], [], false)}, {prop: "EnqueueDrawImageCommand", name: "EnqueueDrawImageCommand", pkg: "", typ: $funcType([ptrType, ptrType, sliceType, sliceType$2, ptrType$1, opengl.CompositeMode, Filter], [], false)}, {prop: "Enqueue", name: "Enqueue", pkg: "", typ: $funcType([command], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [], false)}];
	ptrType$5.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIndices", name: "NumIndices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AddNumVertices", name: "AddNumVertices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "AddNumIndices", name: "AddNumIndices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "CanMerge", name: "CanMerge", pkg: "", typ: $funcType([ptrType, ptrType, ptrType$1, opengl.CompositeMode, Filter], [$Bool], false)}];
	ptrType$6.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIndices", name: "NumIndices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AddNumVertices", name: "AddNumVertices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "AddNumIndices", name: "AddNumIndices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "CanMerge", name: "CanMerge", pkg: "", typ: $funcType([ptrType, ptrType, ptrType$1, opengl.CompositeMode, Filter], [$Bool], false)}];
	ptrType$7.methods = [{prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIndices", name: "NumIndices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AddNumVertices", name: "AddNumVertices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "AddNumIndices", name: "AddNumIndices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "CanMerge", name: "CanMerge", pkg: "", typ: $funcType([ptrType, ptrType, ptrType$1, opengl.CompositeMode, Filter], [$Bool], false)}];
	ptrType$8.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIndices", name: "NumIndices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AddNumVertices", name: "AddNumVertices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "AddNumIndices", name: "AddNumIndices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "CanMerge", name: "CanMerge", pkg: "", typ: $funcType([ptrType, ptrType, ptrType$1, opengl.CompositeMode, Filter], [$Bool], false)}];
	ptrType$9.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIndices", name: "NumIndices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AddNumVertices", name: "AddNumVertices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "AddNumIndices", name: "AddNumIndices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "CanMerge", name: "CanMerge", pkg: "", typ: $funcType([ptrType, ptrType, ptrType$1, opengl.CompositeMode, Filter], [$Bool], false)}];
	ptrType$10.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIndices", name: "NumIndices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AddNumVertices", name: "AddNumVertices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "AddNumIndices", name: "AddNumIndices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "CanMerge", name: "CanMerge", pkg: "", typ: $funcType([ptrType, ptrType, ptrType$1, opengl.CompositeMode, Filter], [$Bool], false)}];
	ptrType$2.methods = [{prop: "viewportSize", name: "viewportSize", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [$Int, $Int], false)}, {prop: "setAsViewport", name: "setAsViewport", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [], false)}, {prop: "projectionMatrix", name: "projectionMatrix", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [sliceType], false)}];
	ptrType.methods = [{prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "DrawImage", name: "DrawImage", pkg: "", typ: $funcType([ptrType, sliceType, sliceType$2, ptrType$1, opengl.CompositeMode, Filter], [], false)}, {prop: "Pixels", name: "Pixels", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "ReplacePixels", name: "ReplacePixels", pkg: "", typ: $funcType([sliceType$5, $Int, $Int, $Int, $Int], [], false)}, {prop: "IsInvalidated", name: "IsInvalidated", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "createFramebufferIfNeeded", name: "createFramebufferIfNeeded", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [ptrType$2, $error], false)}];
	ptrType$11.methods = [{prop: "totalBytes", name: "totalBytes", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [$Int], false)}, {prop: "newArrayBuffer", name: "newArrayBuffer", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [opengl.Buffer], false)}, {prop: "enable", name: "enable", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([opengl.Program], [], false)}, {prop: "disable", name: "disable", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([opengl.Program], [], false)}];
	ptrType$12.methods = [{prop: "reset", name: "reset", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [$error], false)}, {prop: "useProgram", name: "useProgram", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([sliceType, opengl.Texture, ptrType, ptrType, ptrType$1, Filter], [], false)}];
	command.init([{prop: "AddNumIndices", name: "AddNumIndices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "AddNumVertices", name: "AddNumVertices", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "CanMerge", name: "CanMerge", pkg: "", typ: $funcType([ptrType, ptrType, ptrType$1, opengl.CompositeMode, Filter], [$Bool], false)}, {prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumIndices", name: "NumIndices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	commandQueue.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "commands", name: "commands", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "vertices", name: "vertices", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "nvertices", name: "nvertices", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "indices", name: "indices", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "nindices", name: "nindices", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "tmpNumIndices", name: "tmpNumIndices", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nextIndex", name: "nextIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	drawImageCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "dst", name: "dst", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "src", name: "src", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "nvertices", name: "nvertices", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nindices", name: "nindices", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "color", name: "color", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: opengl.CompositeMode, tag: ""}, {prop: "filter", name: "filter", anonymous: false, exported: false, typ: Filter, tag: ""}]);
	replacePixelsCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "dst", name: "dst", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "pixels", name: "pixels", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "x", name: "x", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "y", name: "y", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	pixelsCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "result", name: "result", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "img", name: "img", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	disposeCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "target", name: "target", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	newImageCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "result", name: "result", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	newScreenFramebufferImageCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "result", name: "result", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	framebuffer.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "native$0", name: "native", anonymous: false, exported: false, typ: opengl.Framebuffer, tag: ""}, {prop: "proMatrix", name: "proMatrix", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Image.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "texture", name: "texture", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "framebuffer", name: "framebuffer", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	arrayBufferLayoutPart.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "dataType", name: "dataType", anonymous: false, exported: false, typ: opengl.DataType, tag: ""}, {prop: "num", name: "num", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	arrayBufferLayout.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "parts", name: "parts", anonymous: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "total", name: "total", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	openGLState.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "arrayBuffer", name: "arrayBuffer", anonymous: false, exported: false, typ: opengl.Buffer, tag: ""}, {prop: "elementArrayBuffer", name: "elementArrayBuffer", anonymous: false, exported: false, typ: opengl.Buffer, tag: ""}, {prop: "programNearest", name: "programNearest", anonymous: false, exported: false, typ: opengl.Program, tag: ""}, {prop: "programLinear", name: "programLinear", anonymous: false, exported: false, typ: opengl.Program, tag: ""}, {prop: "programScreen", name: "programScreen", anonymous: false, exported: false, typ: opengl.Program, tag: ""}, {prop: "lastProgram", name: "lastProgram", anonymous: false, exported: false, typ: opengl.Program, tag: ""}, {prop: "lastProjectionMatrix", name: "lastProjectionMatrix", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "lastColorMatrix", name: "lastColorMatrix", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "lastColorMatrixTranslation", name: "lastColorMatrixTranslation", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "lastSourceWidth", name: "lastSourceWidth", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lastSourceHeight", name: "lastSourceHeight", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	texture.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "native$0", name: "native", anonymous: false, exported: false, typ: opengl.Texture, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = affine.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = web.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		theOpenGLState = new openGLState.ptr(new opengl.Buffer.ptr(null), new opengl.Buffer.ptr(null), new opengl.Program.ptr(new $packages["github.com/gopherjs/gopherwasm/js"].Value.ptr(null), 0), new opengl.Program.ptr(new $packages["github.com/gopherjs/gopherwasm/js"].Value.ptr(null), 0), new opengl.Program.ptr(new $packages["github.com/gopherjs/gopherwasm/js"].Value.ptr(null), 0), new opengl.Program.ptr(new $packages["github.com/gopherjs/gopherwasm/js"].Value.ptr(null), 0), sliceType.nil, sliceType.nil, sliceType.nil, 0, 0);
		zeroBuffer = new opengl.Buffer.ptr(null);
		zeroProgram = new opengl.Program.ptr(new $packages["github.com/gopherjs/gopherwasm/js"].Value.ptr(null), 0);
		theCommandQueue = new commandQueue.ptr(sliceType$1.nil, sliceType.nil, 0, sliceType$2.nil, 0, 0, 0, $ifaceNil);
		maxTextureSize = 0;
		theArrayBufferLayout = new arrayBufferLayout.ptr(new sliceType$3([new arrayBufferLayoutPart.ptr("vertex", opengl.Float, 2), new arrayBufferLayoutPart.ptr("tex_coord", opengl.Float, 4), new arrayBufferLayoutPart.ptr("color_scale", opengl.Float, 4)]), 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Reader, sliceType, ptrType$2, errNegativeRead, IndexByte, NewReader;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bytes.Reader", true, "bytes", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = sliceType.nil;
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	sliceType = $sliceType($Uint8);
	ptrType$2 = $ptrType(Reader);
	IndexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Reader.ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return (((x$2 = (x$3 = (new $Int64(0, r.s.$length)), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var r;
		r = this;
		return (new $Int64(0, r.s.$length));
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copySlice(b, $subslice(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, n)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("bytes.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = (new $Int64(0, r.s.$length)), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(b, $subslice(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, r, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = (x$2 = r.s, x$3 = r.i, (($flatten64(x$3) < 0 || $flatten64(x$3) >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + $flatten64(x$3)]));
		r.i = (x$4 = r.i, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("bytes.Reader.UnreadByte: at beginning of slice");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = (((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
		c = (x$3 = r.s, x$4 = r.i, (($flatten64(x$4) < 0 || $flatten64(x$4) >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + $flatten64(x$4)]));
		if (c < 128) {
			r.i = (x$5 = r.i, x$6 = new $Int64(0, 1), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$7 = r.i, x$8 = (new $Int64(0, size)), new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("bytes.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = (new $Int64(0, r.prevRune));
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = (new $Int64(0, r.s.$length)), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var _r, _tmp, _tmp$1, _tuple, b, err, m, n, r, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; m = $f.m; n = $f.n; r = $f.r; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		b = $subslice(r.s, $flatten64(r.i));
		_r = w.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > b.$length) {
			$panic(new $String("bytes.Reader.WriteTo: invalid Write count"));
		}
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, m)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = (new $Int64(0, m));
		if (!((m === b.$length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(b) {
		var b, r;
		r = this;
		Reader.copy(r, new Reader.ptr(b, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(b) { return this.$val.Reset(b); };
	NewReader = function(b) {
		var b;
		return new Reader.ptr(b, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	ptrType$2.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([sliceType], [], false)}];
	Reader.init("bytes", [{prop: "s", name: "s", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		errNegativeRead = errors.New("bytes.Buffer: reader returned negative count from Read");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Reader, Writer, sliceType, ptrType, sliceType$1, ptrType$1, errNegativeRead, errNegativeWrite, NewReaderSize, NewReader, NewWriterSize;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bufio.Reader", true, "bufio", true, function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.rd = $ifaceNil;
			this.r = 0;
			this.w = 0;
			this.err = $ifaceNil;
			this.lastByte = 0;
			this.lastRuneSize = 0;
			return;
		}
		this.buf = buf_;
		this.rd = rd_;
		this.r = r_;
		this.w = w_;
		this.err = err_;
		this.lastByte = lastByte_;
		this.lastRuneSize = lastRuneSize_;
	});
	Writer = $pkg.Writer = $newType(0, $kindStruct, "bufio.Writer", true, "bufio", true, function(err_, buf_, n_, wr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			this.buf = sliceType.nil;
			this.n = 0;
			this.wr = $ifaceNil;
			return;
		}
		this.err = err_;
		this.buf = buf_;
		this.n = n_;
		this.wr = wr_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Reader);
	sliceType$1 = $sliceType(sliceType);
	ptrType$1 = $ptrType(Writer);
	NewReaderSize = function(rd, size) {
		var _tuple, b, ok, r, rd, size;
		_tuple = $assertType(rd, ptrType, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.ptr(sliceType.nil, $ifaceNil, 0, 0, $ifaceNil, 0, 0);
		r.reset($makeSlice(sliceType, size), rd);
		return r;
	};
	$pkg.NewReaderSize = NewReaderSize;
	NewReader = function(rd) {
		var rd;
		return NewReaderSize(rd, 4096);
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Size = function() {
		var r;
		r = this;
		return r.buf.$length;
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Reset = function(r) {
		var b, r;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.reset = function(buf, r) {
		var b, buf, r;
		b = this;
		Reader.copy(b, new Reader.ptr(buf, r, 0, 0, $ifaceNil, -1, -1));
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.ptr.prototype.fill = function() {
		var _r, _tuple, b, err, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_r = b.rd.Read($subslice(b.buf, b.w)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				$s = -1; return;
			}
			if (n > 0) {
				$s = -1; return;
			}
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		b.err = io.ErrNoProgress;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.fill }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.ptr.prototype.readErr = function() {
		var b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.ptr.prototype.Peek = function(n) {
		var avail, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; avail = $f.avail; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			$s = -1; return [sliceType.nil, $pkg.ErrNegativeCount];
		}
		/* while (true) { */ case 1:
			/* if (!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		if (n > b.buf.$length) {
			$s = -1; return [$subslice(b.buf, b.r, b.w), $pkg.ErrBufferFull];
		}
		err = $ifaceNil;
		avail = b.w - b.r >> 0;
		if (avail < n) {
			n = avail;
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		$s = -1; return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Peek }; } $f.avail = avail; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.ptr.prototype.Discard = function(n) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, discarded, err, n, remain, skip, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; b = $f.b; discarded = $f.discarded; err = $f.err; n = $f.n; remain = $f.remain; skip = $f.skip; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		discarded = 0;
		err = $ifaceNil;
		b = this;
		if (n < 0) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrNegativeCount;
			discarded = _tmp;
			err = _tmp$1;
			$s = -1; return [discarded, err];
		}
		if (n === 0) {
			$s = -1; return [discarded, err];
		}
		remain = n;
		/* while (true) { */ case 1:
			skip = b.Buffered();
			/* */ if (skip === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (skip === 0) { */ case 3:
				$r = b.fill(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				skip = b.Buffered();
			/* } */ case 4:
			if (skip > remain) {
				skip = remain;
			}
			b.r = b.r + (skip) >> 0;
			remain = remain - (skip) >> 0;
			if (remain === 0) {
				_tmp$2 = n;
				_tmp$3 = $ifaceNil;
				discarded = _tmp$2;
				err = _tmp$3;
				$s = -1; return [discarded, err];
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$4 = n - remain >> 0;
				_tmp$5 = b.readErr();
				discarded = _tmp$4;
				err = _tmp$5;
				$s = -1; return [discarded, err];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [discarded, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Discard }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.b = b; $f.discarded = discarded; $f.err = err; $f.n = n; $f.remain = remain; $f.skip = skip; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Discard = function(n) { return this.$val.Discard(n); };
	Reader.ptr.prototype.Read = function(p) {
		var _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, b, err, n, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; err = $f.err; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0;
			_tmp$1 = b.readErr();
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* */ if (b.r === b.w) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.r === b.w) { */ case 1:
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = b.readErr();
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			/* */ if (p.$length >= b.buf.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.$length >= b.buf.$length) { */ case 3:
				_r = b.rd.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = (((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) >> 0));
					b.lastRuneSize = -1;
				}
				_tmp$4 = n;
				_tmp$5 = b.readErr();
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			/* } */ case 4:
			b.r = 0;
			b.w = 0;
			_r$1 = b.rd.Read(b.buf); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			n = _tuple$1[0];
			b.err = _tuple$1[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			if (n === 0) {
				_tmp$6 = 0;
				_tmp$7 = b.readErr();
				n = _tmp$6;
				err = _tmp$7;
				$s = -1; return [n, err];
			}
			b.w = b.w + (n) >> 0;
		/* } */ case 2:
		n = $copySlice(p, $subslice(b.buf, b.r, b.w));
		b.r = b.r + (n) >> 0;
		b.lastByte = (((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >> 0));
		b.lastRuneSize = -1;
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		n = _tmp$8;
		err = _tmp$9;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.err = err; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		b.lastRuneSize = -1;
		/* while (true) { */ case 1:
			/* if (!(b.r === b.w)) { break; } */ if(!(b.r === b.w)) { $s = 2; continue; }
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				$s = -1; return [0, b.readErr()];
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = ((c >> 0));
		$s = -1; return [c, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadByte }; } $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = ((b.lastByte << 24 >>> 24))));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, err, r, size, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; size = $f.size; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { break; } */ if(!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = b.readErr();
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			$s = -1; return [r, size, err];
		}
		_tmp$3 = (((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >> 0));
		_tmp$4 = 1;
		r = _tmp$3;
		size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w));
			r = _tuple[0];
			size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = (((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) >> 0));
		b.lastRuneSize = size;
		_tmp$5 = r;
		_tmp$6 = size;
		_tmp$7 = $ifaceNil;
		r = _tmp$5;
		size = _tmp$6;
		err = _tmp$7;
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadRune }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.size = size; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Buffered = function() {
		var b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.ptr.prototype.ReadSlice = function(delim) {
		var b, delim, err, i, i$1, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; delim = $f.delim; err = $f.err; i = $f.i; i$1 = $f.i$1; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				/* break; */ $s = 2; continue;
			}
			if (b.Buffered() >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				/* break; */ $s = 2; continue;
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = ((((i$1 < 0 || i$1 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + i$1]) >> 0));
			b.lastRuneSize = -1;
		}
		$s = -1; return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadSlice }; } $f.b = b; $f.delim = delim; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.ptr.prototype.ReadLine = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tuple, b, drop, err, isPrefix, line, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; b = $f.b; drop = $f.drop; err = $f.err; isPrefix = $f.isPrefix; line = $f.line; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		isPrefix = false;
		err = $ifaceNil;
		b = this;
		_r = b.ReadSlice(10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line;
			_tmp$1 = true;
			_tmp$2 = $ifaceNil;
			line = _tmp;
			isPrefix = _tmp$1;
			err = _tmp$2;
			$s = -1; return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = sliceType.nil;
			}
			$s = -1; return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		$s = -1; return [line, isPrefix, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLine }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.b = b; $f.drop = drop; $f.err = err; $f.isPrefix = isPrefix; $f.line = line; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadBytes = function(delim) {
		var _i, _i$1, _r, _ref, _ref$1, _tuple, b, buf, buf$1, delim, e, err, frag, full, i, i$1, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; buf$1 = $f.buf$1; delim = $f.delim; e = $f.e; err = $f.err; frag = $f.frag; full = $f.full; i = $f.i; i$1 = $f.i$1; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		frag = sliceType.nil;
		full = sliceType$1.nil;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			e = $ifaceNil;
			_r = b.ReadSlice(delim); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			frag = _tuple[0];
			e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				/* break; */ $s = 2; continue;
			}
			buf = $makeSlice(sliceType, frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		/* } */ $s = 1; continue; case 2:
		n = 0;
		_ref = full;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? ($throwRuntimeError("index out of range"), undefined) : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? ($throwRuntimeError("index out of range"), undefined) : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		$s = -1; return [buf$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadBytes }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.buf$1 = buf$1; $f.delim = delim; $f.e = e; $f.err = err; $f.frag = frag; $f.full = full; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.ptr.prototype.ReadString = function(delim) {
		var _r, _tuple, b, bytes$1, delim, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; bytes$1 = $f.bytes$1; delim = $f.delim; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.ReadBytes(delim); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		$s = -1; return [($bytesToString(bytes$1)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadString }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.bytes$1 = bytes$1; $f.delim = delim; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err, err$1, err$2, err$3, m, m$1, m$2, n, ok, ok$1, r, w, w$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; w = $f.w; w$1 = $f.w$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		_r = b.writeBuf(w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true);
		r = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = r.WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1;
			m = _tuple$2[0];
			err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		/* } */ case 3:
		_tuple$3 = $assertType(w, io.ReaderFrom, true);
		w$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$2 = w$1.ReadFrom(b.rd); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			m$1 = _tuple$4[0];
			err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n;
			_tmp$3 = err$2;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		/* } */ case 6:
		/* */ if ((b.w - b.r >> 0) < b.buf.$length) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((b.w - b.r >> 0) < b.buf.$length) { */ case 8:
			$r = b.fill(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* while (true) { */ case 11:
			/* if (!(b.r < b.w)) { break; } */ if(!(b.r < b.w)) { $s = 12; continue; }
			_r$3 = b.writeBuf(w); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$5 = _r$3;
			m$2 = _tuple$5[0];
			err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n;
				_tmp$5 = err$3;
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			}
			$r = b.fill(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 11; continue; case 12:
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n;
		_tmp$7 = b.readErr();
		n = _tmp$6;
		err = _tmp$7;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.w = w; $f.w$1 = w$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.writeBuf = function(w) {
		var _r, _tuple, b, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = w.Write($subslice(b.buf, b.r, b.w)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < 0) {
			$panic(errNegativeWrite);
		}
		b.r = b.r + (n) >> 0;
		$s = -1; return [(new $Int64(0, n)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.writeBuf }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	NewWriterSize = function(w, size) {
		var _tuple, b, ok, size, w;
		_tuple = $assertType(w, ptrType$1, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size <= 0) {
			size = 4096;
		}
		return new Writer.ptr($ifaceNil, $makeSlice(sliceType, size), 0, w);
	};
	$pkg.NewWriterSize = NewWriterSize;
	Writer.ptr.prototype.Size = function() {
		var b;
		b = this;
		return b.buf.$length;
	};
	Writer.prototype.Size = function() { return this.$val.Size(); };
	Writer.ptr.prototype.Reset = function(w) {
		var b, w;
		b = this;
		b.err = $ifaceNil;
		b.n = 0;
		b.wr = w;
	};
	Writer.prototype.Reset = function(w) { return this.$val.Reset(w); };
	Writer.ptr.prototype.Flush = function() {
		var _r, _tuple, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return b.err;
		}
		if (b.n === 0) {
			$s = -1; return $ifaceNil;
		}
		_r = b.wr.Write($subslice(b.buf, 0, b.n)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < b.n && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if (n > 0 && n < b.n) {
				$copySlice($subslice(b.buf, 0, (b.n - n >> 0)), $subslice(b.buf, n, b.n));
			}
			b.n = b.n - (n) >> 0;
			b.err = err;
			$s = -1; return err;
		}
		b.n = 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Flush }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.ptr.prototype.Available = function() {
		var b;
		b = this;
		return b.buf.$length - b.n >> 0;
	};
	Writer.prototype.Available = function() { return this.$val.Available(); };
	Writer.ptr.prototype.Buffered = function() {
		var b;
		b = this;
		return b.n;
	};
	Writer.prototype.Buffered = function() { return this.$val.Buffered(); };
	Writer.ptr.prototype.Write = function(p) {
		var _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, n, n$1, nn, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; n$1 = $f.n$1; nn = $f.nn; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nn = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			n = 0;
			/* */ if (b.Buffered() === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (b.Buffered() === 0) { */ case 3:
				_r = b.wr.Write(p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				$s = 5; continue;
			/* } else { */ case 4:
				n = $copySlice($subslice(b.buf, b.n), p);
				b.n = b.n + (n) >> 0;
				_r$1 = b.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 5:
			nn = nn + (n) >> 0;
			p = $subslice(p, n);
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp = nn;
			_tmp$1 = b.err;
			nn = _tmp;
			err = _tmp$1;
			$s = -1; return [nn, err];
		}
		n$1 = $copySlice($subslice(b.buf, b.n), p);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		_tmp$2 = nn;
		_tmp$3 = $ifaceNil;
		nn = _tmp$2;
		err = _tmp$3;
		$s = -1; return [nn, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Write }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Write = function(p) { return this.$val.Write(p); };
	Writer.ptr.prototype.WriteByte = function(c) {
		var _r, _v, b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return b.err;
		}
		if (!(b.Available() <= 0)) { _v = false; $s = 3; continue s; }
		_r = b.Flush(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = !($interfaceIsEqual(_r, $ifaceNil)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return b.err;
		/* } */ case 2:
		(x = b.buf, x$1 = b.n, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		b.n = b.n + (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteByte }; } $f._r = _r; $f._v = _v; $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Writer.ptr.prototype.WriteRune = function(r) {
		var _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err, n, r, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; r = $f.r; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		size = 0;
		err = $ifaceNil;
		b = this;
		/* */ if (r < 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 128) { */ case 1:
			_r = b.WriteByte(((r << 24 >>> 24))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err;
				size = _tmp;
				err = _tmp$1;
				$s = -1; return [size, err];
			}
			_tmp$2 = 1;
			_tmp$3 = $ifaceNil;
			size = _tmp$2;
			err = _tmp$3;
			$s = -1; return [size, err];
		/* } */ case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp$4 = 0;
			_tmp$5 = b.err;
			size = _tmp$4;
			err = _tmp$5;
			$s = -1; return [size, err];
		}
		n = b.Available();
		/* */ if (n < 4) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (n < 4) { */ case 4:
			_r$1 = b.Flush(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$6 = 0;
				_tmp$7 = b.err;
				size = _tmp$6;
				err = _tmp$7;
				$s = -1; return [size, err];
			}
			n = b.Available();
			/* */ if (n < 4) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (n < 4) { */ case 7:
				_r$2 = b.WriteString(($encodeRune(r))); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				size = _tuple[0];
				err = _tuple[1];
				$s = -1; return [size, err];
			/* } */ case 8:
		/* } */ case 5:
		size = utf8.EncodeRune($subslice(b.buf, b.n), r);
		b.n = b.n + (size) >> 0;
		_tmp$8 = size;
		_tmp$9 = $ifaceNil;
		size = _tmp$8;
		err = _tmp$9;
		$s = -1; return [size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteRune }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.r = r; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Writer.ptr.prototype.WriteString = function(s) {
		var _r, b, n, n$1, nn, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; n = $f.n; n$1 = $f.n$1; nn = $f.nn; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		nn = 0;
		/* while (true) { */ case 1:
			/* if (!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			n = $copyString($subslice(b.buf, b.n), s);
			b.n = b.n + (n) >> 0;
			nn = nn + (n) >> 0;
			s = $substring(s, n);
			_r = b.Flush(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return [nn, b.err];
		}
		n$1 = $copyString($subslice(b.buf, b.n), s);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		$s = -1; return [nn, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteString }; } $f._r = _r; $f.b = b; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Writer.ptr.prototype.ReadFrom = function(r) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, b, err, err1, m, n, nr, ok, r, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err1 = $f.err1; m = $f.m; n = $f.n; nr = $f.nr; ok = $f.ok; r = $f.r; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		/* */ if (b.Buffered() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.Buffered() === 0) { */ case 1:
			_tuple = $assertType(b.wr, io.ReaderFrom, true);
			w = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				_r = w.ReadFrom(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				n = _tuple$1[0];
				err = _tuple$1[1];
				$s = -1; return [n, err];
			/* } */ case 4:
		/* } */ case 2:
		m = 0;
		/* while (true) { */ case 6:
			/* */ if (b.Available() === 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (b.Available() === 0) { */ case 8:
				_r$1 = b.Flush(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err1 = _r$1;
				if (!($interfaceIsEqual(err1, $ifaceNil))) {
					_tmp = n;
					_tmp$1 = err1;
					n = _tmp;
					err = _tmp$1;
					$s = -1; return [n, err];
				}
			/* } */ case 9:
			nr = 0;
			/* while (true) { */ case 11:
				/* if (!(nr < 100)) { break; } */ if(!(nr < 100)) { $s = 12; continue; }
				_r$2 = r.Read($subslice(b.buf, b.n)); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$2 = _r$2;
				m = _tuple$2[0];
				err = _tuple$2[1];
				if (!((m === 0)) || !($interfaceIsEqual(err, $ifaceNil))) {
					/* break; */ $s = 12; continue;
				}
				nr = nr + (1) >> 0;
			/* } */ $s = 11; continue; case 12:
			if (nr === 100) {
				_tmp$2 = n;
				_tmp$3 = io.ErrNoProgress;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			b.n = b.n + (m) >> 0;
			n = (x = (new $Int64(0, m)), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				/* break; */ $s = 7; continue;
			}
		/* } */ $s = 6; continue; case 7:
		/* */ if ($interfaceIsEqual(err, io.EOF)) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if ($interfaceIsEqual(err, io.EOF)) { */ case 14:
			/* */ if (b.Available() === 0) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (b.Available() === 0) { */ case 16:
				_r$3 = b.Flush(); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				$s = 18; continue;
			/* } else { */ case 17:
				err = $ifaceNil;
			/* } */ case 18:
		/* } */ case 15:
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.ReadFrom }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err1 = err1; $f.m = m; $f.n = n; $f.nr = nr; $f.ok = ok; $f.r = r; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	ptrType.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [], false)}, {prop: "reset", name: "reset", pkg: "bufio", typ: $funcType([sliceType, io.Reader], [], false)}, {prop: "fill", name: "fill", pkg: "bufio", typ: $funcType([], [], false)}, {prop: "readErr", name: "readErr", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Discard", name: "Discard", pkg: "", typ: $funcType([$Int], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ReadSlice", name: "ReadSlice", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [sliceType, $Bool, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "writeBuf", name: "writeBuf", pkg: "bufio", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$1.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Available", name: "Available", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}];
	Reader.init("bufio", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "rd", name: "rd", anonymous: false, exported: false, typ: io.Reader, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "lastByte", name: "lastByte", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lastRuneSize", name: "lastRuneSize", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Writer.init("bufio", [{prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "n", name: "n", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "wr", name: "wr", anonymous: false, exported: false, typ: io.Writer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		$pkg.ErrFinalToken = errors.New("final token");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image"] = (function() {
	var $pkg = {}, $init, bufio, errors, color, io, strconv, format, reader, Point, Rectangle, Config, Image, PalettedImage, RGBA, RGBA64, NRGBA, NRGBA64, Alpha, Alpha16, Gray, Gray16, CMYK, Paletted, Uniform, YCbCrSubsampleRatio, YCbCr, sliceType, sliceType$1, arrayType, funcType, funcType$1, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, formats, x, x$1, x$2, x$3, RegisterFormat, asReader, match, sniff, Decode, Rect, NewRGBA, NewRGBA64, NewNRGBA, NewNRGBA64, NewAlpha, NewGray, NewGray16, NewPaletted, NewUniform;
	bufio = $packages["bufio"];
	errors = $packages["errors"];
	color = $packages["image/color"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	format = $pkg.format = $newType(0, $kindStruct, "image.format", true, "image", false, function(name_, magic_, decode_, decodeConfig_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.magic = "";
			this.decode = $throwNilPointerError;
			this.decodeConfig = $throwNilPointerError;
			return;
		}
		this.name = name_;
		this.magic = magic_;
		this.decode = decode_;
		this.decodeConfig = decodeConfig_;
	});
	reader = $pkg.reader = $newType(8, $kindInterface, "image.reader", true, "image", false, null);
	Point = $pkg.Point = $newType(0, $kindStruct, "image.Point", true, "image", true, function(X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
	});
	Rectangle = $pkg.Rectangle = $newType(0, $kindStruct, "image.Rectangle", true, "image", true, function(Min_, Max_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Min = new Point.ptr(0, 0);
			this.Max = new Point.ptr(0, 0);
			return;
		}
		this.Min = Min_;
		this.Max = Max_;
	});
	Config = $pkg.Config = $newType(0, $kindStruct, "image.Config", true, "image", true, function(ColorModel_, Width_, Height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ColorModel = $ifaceNil;
			this.Width = 0;
			this.Height = 0;
			return;
		}
		this.ColorModel = ColorModel_;
		this.Width = Width_;
		this.Height = Height_;
	});
	Image = $pkg.Image = $newType(8, $kindInterface, "image.Image", true, "image", true, null);
	PalettedImage = $pkg.PalettedImage = $newType(8, $kindInterface, "image.PalettedImage", true, "image", true, null);
	RGBA = $pkg.RGBA = $newType(0, $kindStruct, "image.RGBA", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	RGBA64 = $pkg.RGBA64 = $newType(0, $kindStruct, "image.RGBA64", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	NRGBA = $pkg.NRGBA = $newType(0, $kindStruct, "image.NRGBA", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	NRGBA64 = $pkg.NRGBA64 = $newType(0, $kindStruct, "image.NRGBA64", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Alpha = $pkg.Alpha = $newType(0, $kindStruct, "image.Alpha", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Alpha16 = $pkg.Alpha16 = $newType(0, $kindStruct, "image.Alpha16", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Gray = $pkg.Gray = $newType(0, $kindStruct, "image.Gray", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Gray16 = $pkg.Gray16 = $newType(0, $kindStruct, "image.Gray16", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	CMYK = $pkg.CMYK = $newType(0, $kindStruct, "image.CMYK", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Paletted = $pkg.Paletted = $newType(0, $kindStruct, "image.Paletted", true, "image", true, function(Pix_, Stride_, Rect_, Palette_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			this.Palette = color.Palette.nil;
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
		this.Palette = Palette_;
	});
	Uniform = $pkg.Uniform = $newType(0, $kindStruct, "image.Uniform", true, "image", true, function(C_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.C = $ifaceNil;
			return;
		}
		this.C = C_;
	});
	YCbCrSubsampleRatio = $pkg.YCbCrSubsampleRatio = $newType(4, $kindInt, "image.YCbCrSubsampleRatio", true, "image", true, null);
	YCbCr = $pkg.YCbCr = $newType(0, $kindStruct, "image.YCbCr", true, "image", true, function(Y_, Cb_, Cr_, YStride_, CStride_, SubsampleRatio_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = sliceType$1.nil;
			this.Cb = sliceType$1.nil;
			this.Cr = sliceType$1.nil;
			this.YStride = 0;
			this.CStride = 0;
			this.SubsampleRatio = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Y = Y_;
		this.Cb = Cb_;
		this.Cr = Cr_;
		this.YStride = YStride_;
		this.CStride = CStride_;
		this.SubsampleRatio = SubsampleRatio_;
		this.Rect = Rect_;
	});
	sliceType = $sliceType(format);
	sliceType$1 = $sliceType($Uint8);
	arrayType = $arrayType($Bool, 256);
	funcType = $funcType([io.Reader], [Image, $error], false);
	funcType$1 = $funcType([io.Reader], [Config, $error], false);
	ptrType = $ptrType(RGBA);
	ptrType$1 = $ptrType(RGBA64);
	ptrType$2 = $ptrType(NRGBA);
	ptrType$3 = $ptrType(NRGBA64);
	ptrType$4 = $ptrType(Alpha);
	ptrType$5 = $ptrType(Alpha16);
	ptrType$6 = $ptrType(Gray);
	ptrType$7 = $ptrType(Gray16);
	ptrType$8 = $ptrType(CMYK);
	ptrType$9 = $ptrType(Paletted);
	ptrType$10 = $ptrType(Uniform);
	ptrType$11 = $ptrType(YCbCr);
	RegisterFormat = function(name, magic, decode, decodeConfig) {
		var decode, decodeConfig, magic, name;
		formats = $append(formats, new format.ptr(name, magic, decode, decodeConfig));
	};
	$pkg.RegisterFormat = RegisterFormat;
	asReader = function(r) {
		var _tuple, ok, r, rr;
		_tuple = $assertType(r, reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return rr;
		}
		return bufio.NewReader(r);
	};
	match = function(magic, b) {
		var _i, _ref, b, c, i, magic;
		if (!((magic.length === b.$length))) {
			return false;
		}
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((magic.charCodeAt(i) === c)) && !((magic.charCodeAt(i) === 63))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	sniff = function(r) {
		var _i, _r, _ref, _tuple, b, err, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = formats;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			f = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), format);
			_r = r.Peek(f.magic.length); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			b = _tuple[0];
			err = _tuple[1];
			if ($interfaceIsEqual(err, $ifaceNil) && match(f.magic, b)) {
				$s = -1; return f;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return new format.ptr("", "", $throwNilPointerError, $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: sniff }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decode = function(r) {
		var _r, _r$1, _tuple, err, f, m, r, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; f = $f.f; m = $f.m; r = $f.r; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = asReader(r);
		_r = sniff(rr); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = $clone(_r, format);
		if (f.decode === $throwNilPointerError) {
			$s = -1; return [$ifaceNil, "", $pkg.ErrFormat];
		}
		_r$1 = f.decode(rr); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		m = _tuple[0];
		err = _tuple[1];
		$s = -1; return [m, f.name, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decode }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.m = m; $f.r = r; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Decode = Decode;
	Point.ptr.prototype.String = function() {
		var p;
		p = this;
		return "(" + strconv.Itoa(p.X) + "," + strconv.Itoa(p.Y) + ")";
	};
	Point.prototype.String = function() { return this.$val.String(); };
	Point.ptr.prototype.Add = function(q) {
		var p, q;
		p = this;
		return new Point.ptr(p.X + q.X >> 0, p.Y + q.Y >> 0);
	};
	Point.prototype.Add = function(q) { return this.$val.Add(q); };
	Point.ptr.prototype.Sub = function(q) {
		var p, q;
		p = this;
		return new Point.ptr(p.X - q.X >> 0, p.Y - q.Y >> 0);
	};
	Point.prototype.Sub = function(q) { return this.$val.Sub(q); };
	Point.ptr.prototype.Mul = function(k) {
		var k, p;
		p = this;
		return new Point.ptr($imul(p.X, k), $imul(p.Y, k));
	};
	Point.prototype.Mul = function(k) { return this.$val.Mul(k); };
	Point.ptr.prototype.Div = function(k) {
		var _q, _q$1, k, p;
		p = this;
		return new Point.ptr((_q = p.X / k, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = p.Y / k, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	Point.prototype.Div = function(k) { return this.$val.Div(k); };
	Point.ptr.prototype.In = function(r) {
		var p, r;
		p = this;
		return r.Min.X <= p.X && p.X < r.Max.X && r.Min.Y <= p.Y && p.Y < r.Max.Y;
	};
	Point.prototype.In = function(r) { return this.$val.In(r); };
	Point.ptr.prototype.Mod = function(r) {
		var _r, _r$1, _tmp, _tmp$1, h, p, r, w;
		p = this;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		Point.copy(p, $clone(p, Point).Sub($clone(r.Min, Point)));
		p.X = (_r = p.X % w, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (p.X < 0) {
			p.X = p.X + (w) >> 0;
		}
		p.Y = (_r$1 = p.Y % h, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		if (p.Y < 0) {
			p.Y = p.Y + (h) >> 0;
		}
		return $clone(p, Point).Add($clone(r.Min, Point));
	};
	Point.prototype.Mod = function(r) { return this.$val.Mod(r); };
	Point.ptr.prototype.Eq = function(q) {
		var p, q;
		p = this;
		return $equal(p, q, Point);
	};
	Point.prototype.Eq = function(q) { return this.$val.Eq(q); };
	Rectangle.ptr.prototype.String = function() {
		var r;
		r = this;
		return $clone(r.Min, Point).String() + "-" + $clone(r.Max, Point).String();
	};
	Rectangle.prototype.String = function() { return this.$val.String(); };
	Rectangle.ptr.prototype.Dx = function() {
		var r;
		r = this;
		return r.Max.X - r.Min.X >> 0;
	};
	Rectangle.prototype.Dx = function() { return this.$val.Dx(); };
	Rectangle.ptr.prototype.Dy = function() {
		var r;
		r = this;
		return r.Max.Y - r.Min.Y >> 0;
	};
	Rectangle.prototype.Dy = function() { return this.$val.Dy(); };
	Rectangle.ptr.prototype.Size = function() {
		var r;
		r = this;
		return new Point.ptr(r.Max.X - r.Min.X >> 0, r.Max.Y - r.Min.Y >> 0);
	};
	Rectangle.prototype.Size = function() { return this.$val.Size(); };
	Rectangle.ptr.prototype.Add = function(p) {
		var p, r;
		r = this;
		return new Rectangle.ptr(new Point.ptr(r.Min.X + p.X >> 0, r.Min.Y + p.Y >> 0), new Point.ptr(r.Max.X + p.X >> 0, r.Max.Y + p.Y >> 0));
	};
	Rectangle.prototype.Add = function(p) { return this.$val.Add(p); };
	Rectangle.ptr.prototype.Sub = function(p) {
		var p, r;
		r = this;
		return new Rectangle.ptr(new Point.ptr(r.Min.X - p.X >> 0, r.Min.Y - p.Y >> 0), new Point.ptr(r.Max.X - p.X >> 0, r.Max.Y - p.Y >> 0));
	};
	Rectangle.prototype.Sub = function(p) { return this.$val.Sub(p); };
	Rectangle.ptr.prototype.Inset = function(n) {
		var _q, _q$1, n, r;
		r = this;
		if ($clone(r, Rectangle).Dx() < ($imul(2, n))) {
			r.Min.X = (_q = ((r.Min.X + r.Max.X >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			r.Max.X = r.Min.X;
		} else {
			r.Min.X = r.Min.X + (n) >> 0;
			r.Max.X = r.Max.X - (n) >> 0;
		}
		if ($clone(r, Rectangle).Dy() < ($imul(2, n))) {
			r.Min.Y = (_q$1 = ((r.Min.Y + r.Max.Y >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			r.Max.Y = r.Min.Y;
		} else {
			r.Min.Y = r.Min.Y + (n) >> 0;
			r.Max.Y = r.Max.Y - (n) >> 0;
		}
		return r;
	};
	Rectangle.prototype.Inset = function(n) { return this.$val.Inset(n); };
	Rectangle.ptr.prototype.Intersect = function(s) {
		var r, s;
		r = this;
		if (r.Min.X < s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y < s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X > s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y > s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		if ($clone(r, Rectangle).Empty()) {
			return $pkg.ZR;
		}
		return r;
	};
	Rectangle.prototype.Intersect = function(s) { return this.$val.Intersect(s); };
	Rectangle.ptr.prototype.Union = function(s) {
		var r, s;
		r = this;
		if ($clone(r, Rectangle).Empty()) {
			return s;
		}
		if ($clone(s, Rectangle).Empty()) {
			return r;
		}
		if (r.Min.X > s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y > s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X < s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y < s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		return r;
	};
	Rectangle.prototype.Union = function(s) { return this.$val.Union(s); };
	Rectangle.ptr.prototype.Empty = function() {
		var r;
		r = this;
		return r.Min.X >= r.Max.X || r.Min.Y >= r.Max.Y;
	};
	Rectangle.prototype.Empty = function() { return this.$val.Empty(); };
	Rectangle.ptr.prototype.Eq = function(s) {
		var r, s;
		r = this;
		return $equal(r, s, Rectangle) || $clone(r, Rectangle).Empty() && $clone(s, Rectangle).Empty();
	};
	Rectangle.prototype.Eq = function(s) { return this.$val.Eq(s); };
	Rectangle.ptr.prototype.Overlaps = function(s) {
		var r, s;
		r = this;
		return !$clone(r, Rectangle).Empty() && !$clone(s, Rectangle).Empty() && r.Min.X < s.Max.X && s.Min.X < r.Max.X && r.Min.Y < s.Max.Y && s.Min.Y < r.Max.Y;
	};
	Rectangle.prototype.Overlaps = function(s) { return this.$val.Overlaps(s); };
	Rectangle.ptr.prototype.In = function(s) {
		var r, s;
		r = this;
		if ($clone(r, Rectangle).Empty()) {
			return true;
		}
		return s.Min.X <= r.Min.X && r.Max.X <= s.Max.X && s.Min.Y <= r.Min.Y && r.Max.Y <= s.Max.Y;
	};
	Rectangle.prototype.In = function(s) { return this.$val.In(s); };
	Rectangle.ptr.prototype.Canon = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, r;
		r = this;
		if (r.Max.X < r.Min.X) {
			_tmp = r.Max.X;
			_tmp$1 = r.Min.X;
			r.Min.X = _tmp;
			r.Max.X = _tmp$1;
		}
		if (r.Max.Y < r.Min.Y) {
			_tmp$2 = r.Max.Y;
			_tmp$3 = r.Min.Y;
			r.Min.Y = _tmp$2;
			r.Max.Y = _tmp$3;
		}
		return r;
	};
	Rectangle.prototype.Canon = function() { return this.$val.Canon(); };
	Rectangle.ptr.prototype.At = function(x$4, y) {
		var r, x$4, x$5, x$6, y;
		r = this;
		if ($clone((new Point.ptr(x$4, y)), Point).In($clone(r, Rectangle))) {
			return (x$5 = color.Opaque, new x$5.constructor.elem(x$5));
		}
		return (x$6 = color.Transparent, new x$6.constructor.elem(x$6));
	};
	Rectangle.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Rectangle.ptr.prototype.Bounds = function() {
		var r;
		r = this;
		return r;
	};
	Rectangle.prototype.Bounds = function() { return this.$val.Bounds(); };
	Rectangle.ptr.prototype.ColorModel = function() {
		var r;
		r = this;
		return color.Alpha16Model;
	};
	Rectangle.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Rect = function(x0, y0, x1, y1) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, x0, x1, y0, y1;
		if (x0 > x1) {
			_tmp = x1;
			_tmp$1 = x0;
			x0 = _tmp;
			x1 = _tmp$1;
		}
		if (y0 > y1) {
			_tmp$2 = y1;
			_tmp$3 = y0;
			y0 = _tmp$2;
			y1 = _tmp$3;
		}
		return new Rectangle.ptr(new Point.ptr(x0, y0), new Point.ptr(x1, y1));
	};
	$pkg.Rect = Rect;
	RGBA.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.RGBAModel;
	};
	RGBA.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	RGBA.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	RGBA.prototype.Bounds = function() { return this.$val.Bounds(); };
	RGBA.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.RGBAAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	RGBA.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	RGBA.ptr.prototype.RGBAAt = function(x$4, y) {
		var i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.RGBA.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.RGBA.ptr((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])), (x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), (x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), (x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])));
	};
	RGBA.prototype.RGBAAt = function(x$4, y) { return this.$val.RGBAAt(x$4, y); };
	RGBA.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 4)) >> 0;
	};
	RGBA.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	RGBA.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.RGBAModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.RGBA), color.RGBA);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c1.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c1.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c1.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c1.A));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RGBA.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBA.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	RGBA.ptr.prototype.SetRGBA = function(x$4, y, c) {
		var c, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c.A));
	};
	RGBA.prototype.SetRGBA = function(x$4, y, c) { return this.$val.SetRGBA(x$4, y, c); };
	RGBA.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new RGBA.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new RGBA.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	RGBA.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	RGBA.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 3;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 4);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) === 255))) {
					return false;
				}
				i = i + (4) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	RGBA.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewRGBA = function(r) {
		var _tmp, _tmp$1, buf, h, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		buf = $makeSlice(sliceType$1, ($imul(($imul(4, w)), h)));
		return new RGBA.ptr(buf, $imul(4, w), $clone(r, Rectangle));
	};
	$pkg.NewRGBA = NewRGBA;
	RGBA64.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.RGBA64Model;
	};
	RGBA64.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	RGBA64.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	RGBA64.prototype.Bounds = function() { return this.$val.Bounds(); };
	RGBA64.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.RGBA64At(x$4, y), new x$5.constructor.elem(x$5));
	};
	RGBA64.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	RGBA64.ptr.prototype.RGBA64At = function(x$4, y) {
		var i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.RGBA64.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.RGBA64.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0, (((((x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])) << 16 >>> 16))) >>> 0, (((((x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16])) << 16 >>> 16))) >>> 0, (((((x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20])) << 16 >>> 16))) >>> 0);
	};
	RGBA64.prototype.RGBA64At = function(x$4, y) { return this.$val.RGBA64At(x$4, y); };
	RGBA64.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 8)) >> 0;
	};
	RGBA64.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	RGBA64.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$20 = $f.x$20; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.RGBA64Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.RGBA64), color.RGBA64);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c1.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c1.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c1.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c1.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c1.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c1.A << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RGBA64.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$20 = x$20; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBA64.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	RGBA64.ptr.prototype.SetRGBA64 = function(x$4, y, c) {
		var c, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c.A << 24 >>> 24))));
	};
	RGBA64.prototype.SetRGBA64 = function(x$4, y, c) { return this.$val.SetRGBA64(x$4, y, c); };
	RGBA64.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new RGBA64.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new RGBA64.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	RGBA64.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	RGBA64.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, x$5, x$6, x$7, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 6;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 8);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 255)) || !(((x$6 = p.Pix, x$7 = i + 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) === 255))) {
					return false;
				}
				i = i + (8) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	RGBA64.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewRGBA64 = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(8, w)), h)));
		return new RGBA64.ptr(pix, $imul(8, w), $clone(r, Rectangle));
	};
	$pkg.NewRGBA64 = NewRGBA64;
	NRGBA.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.NRGBAModel;
	};
	NRGBA.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	NRGBA.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	NRGBA.prototype.Bounds = function() { return this.$val.Bounds(); };
	NRGBA.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.NRGBAAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	NRGBA.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	NRGBA.ptr.prototype.NRGBAAt = function(x$4, y) {
		var i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.NRGBA.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.NRGBA.ptr((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])), (x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), (x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), (x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])));
	};
	NRGBA.prototype.NRGBAAt = function(x$4, y) { return this.$val.NRGBAAt(x$4, y); };
	NRGBA.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 4)) >> 0;
	};
	NRGBA.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	NRGBA.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.NRGBAModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.NRGBA), color.NRGBA);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c1.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c1.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c1.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c1.A));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NRGBA.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	NRGBA.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	NRGBA.ptr.prototype.SetNRGBA = function(x$4, y, c) {
		var c, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c.A));
	};
	NRGBA.prototype.SetNRGBA = function(x$4, y, c) { return this.$val.SetNRGBA(x$4, y, c); };
	NRGBA.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new NRGBA.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new NRGBA.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	NRGBA.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	NRGBA.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 3;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 4);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) === 255))) {
					return false;
				}
				i = i + (4) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	NRGBA.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewNRGBA = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(4, w)), h)));
		return new NRGBA.ptr(pix, $imul(4, w), $clone(r, Rectangle));
	};
	$pkg.NewNRGBA = NewNRGBA;
	NRGBA64.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.NRGBA64Model;
	};
	NRGBA64.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	NRGBA64.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	NRGBA64.prototype.Bounds = function() { return this.$val.Bounds(); };
	NRGBA64.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.NRGBA64At(x$4, y), new x$5.constructor.elem(x$5));
	};
	NRGBA64.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	NRGBA64.ptr.prototype.NRGBA64At = function(x$4, y) {
		var i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.NRGBA64.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.NRGBA64.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0, (((((x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])) << 16 >>> 16))) >>> 0, (((((x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16])) << 16 >>> 16))) >>> 0, (((((x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20])) << 16 >>> 16))) >>> 0);
	};
	NRGBA64.prototype.NRGBA64At = function(x$4, y) { return this.$val.NRGBA64At(x$4, y); };
	NRGBA64.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 8)) >> 0;
	};
	NRGBA64.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	NRGBA64.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$20 = $f.x$20; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.NRGBA64Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.NRGBA64), color.NRGBA64);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c1.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c1.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c1.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c1.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c1.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c1.A << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NRGBA64.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$20 = x$20; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	NRGBA64.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	NRGBA64.ptr.prototype.SetNRGBA64 = function(x$4, y, c) {
		var c, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c.A << 24 >>> 24))));
	};
	NRGBA64.prototype.SetNRGBA64 = function(x$4, y, c) { return this.$val.SetNRGBA64(x$4, y, c); };
	NRGBA64.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new NRGBA64.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new NRGBA64.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	NRGBA64.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	NRGBA64.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, x$5, x$6, x$7, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 6;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 8);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 255)) || !(((x$6 = p.Pix, x$7 = i + 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) === 255))) {
					return false;
				}
				i = i + (8) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	NRGBA64.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewNRGBA64 = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(8, w)), h)));
		return new NRGBA64.ptr(pix, $imul(8, w), $clone(r, Rectangle));
	};
	$pkg.NewNRGBA64 = NewNRGBA64;
	Alpha.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.AlphaModel;
	};
	Alpha.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Alpha.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	Alpha.prototype.Bounds = function() { return this.$val.Bounds(); };
	Alpha.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.AlphaAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	Alpha.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Alpha.ptr.prototype.AlphaAt = function(x$4, y) {
		var i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Alpha.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Alpha.ptr((x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i])));
	};
	Alpha.prototype.AlphaAt = function(x$4, y) { return this.$val.AlphaAt(x$4, y); };
	Alpha.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 1)) >> 0;
	};
	Alpha.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Alpha.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, i, p, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.AlphaModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = $assertType(_r, color.Alpha).A));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Alpha.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Alpha.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Alpha.ptr.prototype.SetAlpha = function(x$4, y, c) {
		var c, i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = c.A));
	};
	Alpha.prototype.SetAlpha = function(x$4, y, c) { return this.$val.SetAlpha(x$4, y, c); };
	Alpha.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Alpha.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Alpha.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Alpha.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Alpha.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 0;
		_tmp$1 = $clone(p.Rect, Rectangle).Dx();
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) === 255))) {
					return false;
				}
				i = i + (1) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	Alpha.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewAlpha = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(1, w)), h)));
		return new Alpha.ptr(pix, $imul(1, w), $clone(r, Rectangle));
	};
	$pkg.NewAlpha = NewAlpha;
	Alpha16.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.Alpha16Model;
	};
	Alpha16.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Alpha16.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	Alpha16.prototype.Bounds = function() { return this.$val.Bounds(); };
	Alpha16.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.Alpha16At(x$4, y), new x$5.constructor.elem(x$5));
	};
	Alpha16.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Alpha16.ptr.prototype.Alpha16At = function(x$4, y) {
		var i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Alpha16.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Alpha16.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0);
	};
	Alpha16.prototype.Alpha16At = function(x$4, y) { return this.$val.Alpha16At(x$4, y); };
	Alpha16.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 2)) >> 0;
	};
	Alpha16.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Alpha16.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$4, x$5, x$6, x$7, x$8, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.Alpha16Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.Alpha16), color.Alpha16);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.A << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Alpha16.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Alpha16.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Alpha16.ptr.prototype.SetAlpha16 = function(x$4, y, c) {
		var c, i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.A << 24 >>> 24))));
	};
	Alpha16.prototype.SetAlpha16 = function(x$4, y, c) { return this.$val.SetAlpha16(x$4, y, c); };
	Alpha16.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Alpha16.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Alpha16.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Alpha16.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Alpha16.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, x$5, x$6, x$7, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 0;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 2);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 255)) || !(((x$6 = p.Pix, x$7 = i + 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) === 255))) {
					return false;
				}
				i = i + (2) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	Alpha16.prototype.Opaque = function() { return this.$val.Opaque(); };
	Gray.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.GrayModel;
	};
	Gray.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Gray.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	Gray.prototype.Bounds = function() { return this.$val.Bounds(); };
	Gray.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.GrayAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	Gray.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Gray.ptr.prototype.GrayAt = function(x$4, y) {
		var i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Gray.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Gray.ptr((x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i])));
	};
	Gray.prototype.GrayAt = function(x$4, y) { return this.$val.GrayAt(x$4, y); };
	Gray.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 1)) >> 0;
	};
	Gray.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Gray.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, i, p, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.GrayModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = $assertType(_r, color.Gray).Y));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Gray.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Gray.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Gray.ptr.prototype.SetGray = function(x$4, y, c) {
		var c, i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = c.Y));
	};
	Gray.prototype.SetGray = function(x$4, y, c) { return this.$val.SetGray(x$4, y, c); };
	Gray.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Gray.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Gray.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Gray.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Gray.ptr.prototype.Opaque = function() {
		var p;
		p = this;
		return true;
	};
	Gray.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewGray = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(1, w)), h)));
		return new Gray.ptr(pix, $imul(1, w), $clone(r, Rectangle));
	};
	$pkg.NewGray = NewGray;
	Gray16.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.Gray16Model;
	};
	Gray16.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Gray16.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	Gray16.prototype.Bounds = function() { return this.$val.Bounds(); };
	Gray16.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.Gray16At(x$4, y), new x$5.constructor.elem(x$5));
	};
	Gray16.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Gray16.ptr.prototype.Gray16At = function(x$4, y) {
		var i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Gray16.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Gray16.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0);
	};
	Gray16.prototype.Gray16At = function(x$4, y) { return this.$val.Gray16At(x$4, y); };
	Gray16.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 2)) >> 0;
	};
	Gray16.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Gray16.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$4, x$5, x$6, x$7, x$8, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.Gray16Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.Gray16), color.Gray16);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.Y >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.Y << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Gray16.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Gray16.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Gray16.ptr.prototype.SetGray16 = function(x$4, y, c) {
		var c, i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.Y >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.Y << 24 >>> 24))));
	};
	Gray16.prototype.SetGray16 = function(x$4, y, c) { return this.$val.SetGray16(x$4, y, c); };
	Gray16.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Gray16.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Gray16.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Gray16.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Gray16.ptr.prototype.Opaque = function() {
		var p;
		p = this;
		return true;
	};
	Gray16.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewGray16 = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(2, w)), h)));
		return new Gray16.ptr(pix, $imul(2, w), $clone(r, Rectangle));
	};
	$pkg.NewGray16 = NewGray16;
	CMYK.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.CMYKModel;
	};
	CMYK.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	CMYK.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	CMYK.prototype.Bounds = function() { return this.$val.Bounds(); };
	CMYK.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.CMYKAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	CMYK.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	CMYK.ptr.prototype.CMYKAt = function(x$4, y) {
		var i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.CMYK.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.CMYK.ptr((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])), (x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), (x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), (x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])));
	};
	CMYK.prototype.CMYKAt = function(x$4, y) { return this.$val.CMYKAt(x$4, y); };
	CMYK.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 4)) >> 0;
	};
	CMYK.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	CMYK.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.CMYKModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.CMYK), color.CMYK);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c1.C));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c1.M));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c1.Y));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c1.K));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CMYK.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	CMYK.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	CMYK.ptr.prototype.SetCMYK = function(x$4, y, c) {
		var c, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c.C));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c.M));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c.Y));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c.K));
	};
	CMYK.prototype.SetCMYK = function(x$4, y, c) { return this.$val.SetCMYK(x$4, y, c); };
	CMYK.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new CMYK.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new CMYK.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	CMYK.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	CMYK.ptr.prototype.Opaque = function() {
		var p;
		p = this;
		return true;
	};
	CMYK.prototype.Opaque = function() { return this.$val.Opaque(); };
	Paletted.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return p.Palette;
	};
	Paletted.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Paletted.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	Paletted.prototype.Bounds = function() { return this.$val.Bounds(); };
	Paletted.ptr.prototype.At = function(x$4, y) {
		var i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (p.Palette.$length === 0) {
			return $ifaceNil;
		}
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return (x$5 = p.Palette, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]));
		}
		i = p.PixOffset(x$4, y);
		return (x$6 = p.Palette, x$7 = (x$8 = p.Pix, ((i < 0 || i >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + i])), ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7]));
	};
	Paletted.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Paletted.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 1)) >> 0;
	};
	Paletted.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Paletted.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, i, p, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = p.Palette.Index(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = ((_r << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Paletted.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Paletted.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Paletted.ptr.prototype.ColorIndexAt = function(x$4, y) {
		var i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return 0;
		}
		i = p.PixOffset(x$4, y);
		return (x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i]));
	};
	Paletted.prototype.ColorIndexAt = function(x$4, y) { return this.$val.ColorIndexAt(x$4, y); };
	Paletted.ptr.prototype.SetColorIndex = function(x$4, y, index) {
		var i, index, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = index));
	};
	Paletted.prototype.SetColorIndex = function(x$4, y, index) { return this.$val.SetColorIndex(x$4, y, index); };
	Paletted.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Paletted.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)), p.Palette);
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Paletted.ptr($subslice(p.Pix, i), p.Stride, $clone($clone(p.Rect, Rectangle).Intersect($clone(r, Rectangle)), Rectangle), p.Palette);
	};
	Paletted.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Paletted.ptr.prototype.Opaque = function() {
		var _i, _i$1, _r, _ref, _ref$1, _tmp, _tmp$1, _tuple, a, c, c$1, i, i0, i1, p, present, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; a = $f.a; c = $f.c; c$1 = $f.c$1; i = $f.i; i0 = $f.i0; i1 = $f.i1; p = $f.p; present = $f.present; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		present = arrayType.zero();
		_tmp = 0;
		_tmp$1 = $clone(p.Rect, Rectangle).Dx();
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			_ref = $subslice(p.Pix, i0, i1);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				((c < 0 || c >= present.length) ? ($throwRuntimeError("index out of range"), undefined) : present[c] = true);
				_i++;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		_ref$1 = p.Palette;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			i = _i$1;
			c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			/* */ if (!((i < 0 || i >= present.length) ? ($throwRuntimeError("index out of range"), undefined) : present[i])) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((i < 0 || i >= present.length) ? ($throwRuntimeError("index out of range"), undefined) : present[i])) { */ case 3:
				_i$1++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r = c$1.RGBA(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			a = _tuple[3];
			if (!((a === 65535))) {
				$s = -1; return false;
			}
			_i$1++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Paletted.ptr.prototype.Opaque }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.a = a; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i0 = i0; $f.i1 = i1; $f.p = p; $f.present = present; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Paletted.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewPaletted = function(r, p) {
		var _tmp, _tmp$1, h, p, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(1, w)), h)));
		return new Paletted.ptr(pix, $imul(1, w), $clone(r, Rectangle), p);
	};
	$pkg.NewPaletted = NewPaletted;
	Uniform.ptr.prototype.RGBA = function() {
		var _r, _tuple, a, b, c, g, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; b = $f.b; c = $f.c; g = $f.g; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		_r = c.C.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		g = _tuple[1];
		b = _tuple[2];
		a = _tuple[3];
		$s = -1; return [r, g, b, a];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Uniform.ptr.prototype.RGBA }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Uniform.prototype.RGBA = function() { return this.$val.RGBA(); };
	Uniform.ptr.prototype.ColorModel = function() {
		var c;
		c = this;
		return c;
	};
	Uniform.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Uniform.ptr.prototype.Convert = function(param) {
		var c, param;
		c = this;
		return c.C;
	};
	Uniform.prototype.Convert = function(param) { return this.$val.Convert(param); };
	Uniform.ptr.prototype.Bounds = function() {
		var c;
		c = this;
		return new Rectangle.ptr(new Point.ptr(-1000000000, -1000000000), new Point.ptr(1000000000, 1000000000));
	};
	Uniform.prototype.Bounds = function() { return this.$val.Bounds(); };
	Uniform.ptr.prototype.At = function(x$4, y) {
		var c, x$4, y;
		c = this;
		return c.C;
	};
	Uniform.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Uniform.ptr.prototype.Opaque = function() {
		var _r, _tuple, a, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.C.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		a = _tuple[3];
		$s = -1; return a === 65535;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Uniform.ptr.prototype.Opaque }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	Uniform.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewUniform = function(c) {
		var c;
		return new Uniform.ptr(c);
	};
	$pkg.NewUniform = NewUniform;
	YCbCrSubsampleRatio.prototype.String = function() {
		var _1, s;
		s = this.$val;
		_1 = s;
		if (_1 === (0)) {
			return "YCbCrSubsampleRatio444";
		} else if (_1 === (1)) {
			return "YCbCrSubsampleRatio422";
		} else if (_1 === (2)) {
			return "YCbCrSubsampleRatio420";
		} else if (_1 === (3)) {
			return "YCbCrSubsampleRatio440";
		} else if (_1 === (4)) {
			return "YCbCrSubsampleRatio411";
		} else if (_1 === (5)) {
			return "YCbCrSubsampleRatio410";
		}
		return "YCbCrSubsampleRatioUnknown";
	};
	$ptrType(YCbCrSubsampleRatio).prototype.String = function() { return new YCbCrSubsampleRatio(this.$get()).String(); };
	YCbCr.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.YCbCrModel;
	};
	YCbCr.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	YCbCr.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	YCbCr.prototype.Bounds = function() { return this.$val.Bounds(); };
	YCbCr.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.YCbCrAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	YCbCr.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	YCbCr.ptr.prototype.YCbCrAt = function(x$4, y) {
		var ci, p, x$4, x$5, x$6, x$7, y, yi;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.YCbCr.ptr(0, 0, 0);
		}
		yi = p.YOffset(x$4, y);
		ci = p.COffset(x$4, y);
		return new color.YCbCr.ptr((x$5 = p.Y, ((yi < 0 || yi >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + yi])), (x$6 = p.Cb, ((ci < 0 || ci >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + ci])), (x$7 = p.Cr, ((ci < 0 || ci >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + ci])));
	};
	YCbCr.prototype.YCbCrAt = function(x$4, y) { return this.$val.YCbCrAt(x$4, y); };
	YCbCr.ptr.prototype.YOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.YStride)) + ((x$4 - p.Rect.Min.X >> 0)) >> 0;
	};
	YCbCr.prototype.YOffset = function(x$4, y) { return this.$val.YOffset(x$4, y); };
	YCbCr.ptr.prototype.COffset = function(x$4, y) {
		var _1, _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, p, x$4, y;
		p = this;
		_1 = p.SubsampleRatio;
		if (_1 === (1)) {
			return ($imul(((y - p.Rect.Min.Y >> 0)), p.CStride)) + (((_q = x$4 / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$1 = p.Rect.Min.X / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		} else if (_1 === (2)) {
			return ($imul((((_q$2 = y / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$3 = p.Rect.Min.Y / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), p.CStride)) + (((_q$4 = x$4 / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$5 = p.Rect.Min.X / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		} else if (_1 === (3)) {
			return ($imul((((_q$6 = y / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$7 = p.Rect.Min.Y / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), p.CStride)) + ((x$4 - p.Rect.Min.X >> 0)) >> 0;
		} else if (_1 === (4)) {
			return ($imul(((y - p.Rect.Min.Y >> 0)), p.CStride)) + (((_q$8 = x$4 / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$9 = p.Rect.Min.X / 4, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		} else if (_1 === (5)) {
			return ($imul((((_q$10 = y / 2, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$11 = p.Rect.Min.Y / 2, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), p.CStride)) + (((_q$12 = x$4 / 4, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$13 = p.Rect.Min.X / 4, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		}
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.CStride)) + ((x$4 - p.Rect.Min.X >> 0)) >> 0;
	};
	YCbCr.prototype.COffset = function(x$4, y) { return this.$val.COffset(x$4, y); };
	YCbCr.ptr.prototype.SubImage = function(r) {
		var ci, p, r, yi;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new YCbCr.ptr(sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, 0, 0, p.SubsampleRatio, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		yi = p.YOffset(r.Min.X, r.Min.Y);
		ci = p.COffset(r.Min.X, r.Min.Y);
		return new YCbCr.ptr($subslice(p.Y, yi), $subslice(p.Cb, ci), $subslice(p.Cr, ci), p.YStride, p.CStride, p.SubsampleRatio, $clone(r, Rectangle));
	};
	YCbCr.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	YCbCr.ptr.prototype.Opaque = function() {
		var p;
		p = this;
		return true;
	};
	YCbCr.prototype.Opaque = function() { return this.$val.Opaque(); };
	Point.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Point], [Point], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point], [Point], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Int], [Point], false)}, {prop: "Div", name: "Div", pkg: "", typ: $funcType([$Int], [Point], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "Mod", name: "Mod", pkg: "", typ: $funcType([Rectangle], [Point], false)}, {prop: "Eq", name: "Eq", pkg: "", typ: $funcType([Point], [$Bool], false)}];
	Rectangle.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Dx", name: "Dx", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Dy", name: "Dy", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [Point], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Point], [Rectangle], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point], [Rectangle], false)}, {prop: "Inset", name: "Inset", pkg: "", typ: $funcType([$Int], [Rectangle], false)}, {prop: "Intersect", name: "Intersect", pkg: "", typ: $funcType([Rectangle], [Rectangle], false)}, {prop: "Union", name: "Union", pkg: "", typ: $funcType([Rectangle], [Rectangle], false)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Eq", name: "Eq", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "Overlaps", name: "Overlaps", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "Canon", name: "Canon", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}];
	ptrType.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "RGBAAt", name: "RGBAAt", pkg: "", typ: $funcType([$Int, $Int], [color.RGBA], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetRGBA", name: "SetRGBA", pkg: "", typ: $funcType([$Int, $Int, color.RGBA], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$1.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "RGBA64At", name: "RGBA64At", pkg: "", typ: $funcType([$Int, $Int], [color.RGBA64], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetRGBA64", name: "SetRGBA64", pkg: "", typ: $funcType([$Int, $Int, color.RGBA64], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$2.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "NRGBAAt", name: "NRGBAAt", pkg: "", typ: $funcType([$Int, $Int], [color.NRGBA], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetNRGBA", name: "SetNRGBA", pkg: "", typ: $funcType([$Int, $Int, color.NRGBA], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$3.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "NRGBA64At", name: "NRGBA64At", pkg: "", typ: $funcType([$Int, $Int], [color.NRGBA64], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetNRGBA64", name: "SetNRGBA64", pkg: "", typ: $funcType([$Int, $Int, color.NRGBA64], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$4.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "AlphaAt", name: "AlphaAt", pkg: "", typ: $funcType([$Int, $Int], [color.Alpha], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetAlpha", name: "SetAlpha", pkg: "", typ: $funcType([$Int, $Int, color.Alpha], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$5.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Alpha16At", name: "Alpha16At", pkg: "", typ: $funcType([$Int, $Int], [color.Alpha16], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetAlpha16", name: "SetAlpha16", pkg: "", typ: $funcType([$Int, $Int, color.Alpha16], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$6.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "GrayAt", name: "GrayAt", pkg: "", typ: $funcType([$Int, $Int], [color.Gray], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetGray", name: "SetGray", pkg: "", typ: $funcType([$Int, $Int, color.Gray], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$7.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Gray16At", name: "Gray16At", pkg: "", typ: $funcType([$Int, $Int], [color.Gray16], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetGray16", name: "SetGray16", pkg: "", typ: $funcType([$Int, $Int, color.Gray16], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$8.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "CMYKAt", name: "CMYKAt", pkg: "", typ: $funcType([$Int, $Int], [color.CMYK], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetCMYK", name: "SetCMYK", pkg: "", typ: $funcType([$Int, $Int, color.CMYK], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "ColorIndexAt", name: "ColorIndexAt", pkg: "", typ: $funcType([$Int, $Int], [$Uint8], false)}, {prop: "SetColorIndex", name: "SetColorIndex", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$10.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([color.Color], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	YCbCrSubsampleRatio.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "YCbCrAt", name: "YCbCrAt", pkg: "", typ: $funcType([$Int, $Int], [color.YCbCr], false)}, {prop: "YOffset", name: "YOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "COffset", name: "COffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	format.init("image", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "magic", name: "magic", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "decode", name: "decode", anonymous: false, exported: false, typ: funcType, tag: ""}, {prop: "decodeConfig", name: "decodeConfig", anonymous: false, exported: false, typ: funcType$1, tag: ""}]);
	reader.init([{prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}]);
	Point.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Rectangle.init("", [{prop: "Min", name: "Min", anonymous: false, exported: true, typ: Point, tag: ""}, {prop: "Max", name: "Max", anonymous: false, exported: true, typ: Point, tag: ""}]);
	Config.init("", [{prop: "ColorModel", name: "ColorModel", anonymous: false, exported: true, typ: color.Model, tag: ""}, {prop: "Width", name: "Width", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Height", name: "Height", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Image.init([{prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}]);
	PalettedImage.init([{prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "ColorIndexAt", name: "ColorIndexAt", pkg: "", typ: $funcType([$Int, $Int], [$Uint8], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}]);
	RGBA.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	RGBA64.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	NRGBA.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	NRGBA64.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	Alpha.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	Alpha16.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	Gray.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	Gray16.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	CMYK.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	Paletted.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}, {prop: "Palette", name: "Palette", anonymous: false, exported: true, typ: color.Palette, tag: ""}]);
	Uniform.init("", [{prop: "C", name: "C", anonymous: false, exported: true, typ: color.Color, tag: ""}]);
	YCbCr.init("", [{prop: "Y", name: "Y", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Cb", name: "Cb", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Cr", name: "Cr", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "YStride", name: "YStride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "CStride", name: "CStride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "SubsampleRatio", name: "SubsampleRatio", anonymous: false, exported: true, typ: YCbCrSubsampleRatio, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		formats = sliceType.nil;
		$pkg.ZR = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
		$pkg.ErrFormat = errors.New("image: unknown format");
		$pkg.Black = NewUniform((x = color.Black, new x.constructor.elem(x)));
		$pkg.White = NewUniform((x$1 = color.White, new x$1.constructor.elem(x$1)));
		$pkg.Transparent = NewUniform((x$2 = color.Transparent, new x$2.constructor.elem(x$2)));
		$pkg.Opaque = NewUniform((x$3 = color.Opaque, new x$3.constructor.elem(x$3)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/internal/imageutil"] = (function() {
	var $pkg = {}, $init, image, DrawYCbCr;
	image = $packages["image"];
	DrawYCbCr = function(dst, r, src, sp) {
		var _1, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, b, b$1, b$2, b$3, cb1, cb1$1, cb1$2, cb1$3, ci, ci$1, ci$2, ci$3, ciBase, ciBase$1, cr1, cr1$1, cr1$2, cr1$3, dpix, dpix$1, dpix$2, dpix$3, dst, g, g$1, g$2, g$3, ok, r, r$1, r$2, r$3, r$4, rgba, rgba$1, rgba$2, rgba$3, sp, src, sx, sx$1, sy, sy$1, sy$2, sy$3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x0, x1, y, y$1, y$2, y$3, y0, y1, yi, yi$1, yi$2, yi$3, yy1, yy1$1, yy1$2, yy1$3;
		ok = false;
		x0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		x1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		y0 = r.Min.Y - dst.Rect.Min.Y >> 0;
		y1 = r.Max.Y - dst.Rect.Min.Y >> 0;
		_1 = src.SubsampleRatio;
		if (_1 === (0)) {
			_tmp = y0;
			_tmp$1 = sp.Y;
			y = _tmp;
			sy = _tmp$1;
			while (true) {
				if (!(!((y === y1)))) { break; }
				dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
				yi = ($imul(((sy - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ci = ($imul(((sy - src.Rect.Min.Y >> 0)), src.CStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				x = x0;
				while (true) {
					if (!(!((x === x1)))) { break; }
					yy1 = $imul((((x$1 = src.Y, ((yi < 0 || yi >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + yi])) >> 0)), 65793);
					cb1 = (((x$2 = src.Cb, ((ci < 0 || ci >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ci])) >> 0)) - 128 >> 0;
					cr1 = (((x$3 = src.Cr, ((ci < 0 || ci >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + ci])) >> 0)) - 128 >> 0;
					r$1 = yy1 + ($imul(91881, cr1)) >> 0;
					if (((((r$1 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$1 = (r$1 >> $min((16), 31)) >> 0;
					} else {
						r$1 = ~((r$1 >> 31 >> 0)) >> 0;
					}
					g = (yy1 - ($imul(22554, cb1)) >> 0) - ($imul(46802, cr1)) >> 0;
					if (((((g >>> 0)) & 4278190080) >>> 0) === 0) {
						g = (g >> $min((16), 31)) >> 0;
					} else {
						g = ~((g >> 31 >> 0)) >> 0;
					}
					b = yy1 + ($imul(116130, cb1)) >> 0;
					if (((((b >>> 0)) & 4278190080) >>> 0) === 0) {
						b = (b >> $min((16), 31)) >> 0;
					} else {
						b = ~((b >> 31 >> 0)) >> 0;
					}
					rgba = $subslice(dpix, x, (x + 4 >> 0), dpix.$length);
					(0 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 0] = ((r$1 << 24 >>> 24)));
					(1 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 1] = ((g << 24 >>> 24)));
					(2 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 2] = ((b << 24 >>> 24)));
					(3 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 3] = 255);
					_tmp$2 = x + 4 >> 0;
					_tmp$3 = yi + 1 >> 0;
					_tmp$4 = ci + 1 >> 0;
					x = _tmp$2;
					yi = _tmp$3;
					ci = _tmp$4;
				}
				_tmp$5 = y + 1 >> 0;
				_tmp$6 = sy + 1 >> 0;
				y = _tmp$5;
				sy = _tmp$6;
			}
		} else if (_1 === (1)) {
			_tmp$7 = y0;
			_tmp$8 = sp.Y;
			y$1 = _tmp$7;
			sy$1 = _tmp$8;
			while (true) {
				if (!(!((y$1 === y1)))) { break; }
				dpix$1 = $subslice(dst.Pix, ($imul(y$1, dst.Stride)));
				yi$1 = ($imul(((sy$1 - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ciBase = ($imul(((sy$1 - src.Rect.Min.Y >> 0)), src.CStride)) - (_q = src.Rect.Min.X / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				_tmp$9 = x0;
				_tmp$10 = sp.X;
				x$4 = _tmp$9;
				sx = _tmp$10;
				while (true) {
					if (!(!((x$4 === x1)))) { break; }
					ci$1 = ciBase + (_q$1 = sx / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					yy1$1 = $imul((((x$5 = src.Y, ((yi$1 < 0 || yi$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + yi$1])) >> 0)), 65793);
					cb1$1 = (((x$6 = src.Cb, ((ci$1 < 0 || ci$1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + ci$1])) >> 0)) - 128 >> 0;
					cr1$1 = (((x$7 = src.Cr, ((ci$1 < 0 || ci$1 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + ci$1])) >> 0)) - 128 >> 0;
					r$2 = yy1$1 + ($imul(91881, cr1$1)) >> 0;
					if (((((r$2 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$2 = (r$2 >> $min((16), 31)) >> 0;
					} else {
						r$2 = ~((r$2 >> 31 >> 0)) >> 0;
					}
					g$1 = (yy1$1 - ($imul(22554, cb1$1)) >> 0) - ($imul(46802, cr1$1)) >> 0;
					if (((((g$1 >>> 0)) & 4278190080) >>> 0) === 0) {
						g$1 = (g$1 >> $min((16), 31)) >> 0;
					} else {
						g$1 = ~((g$1 >> 31 >> 0)) >> 0;
					}
					b$1 = yy1$1 + ($imul(116130, cb1$1)) >> 0;
					if (((((b$1 >>> 0)) & 4278190080) >>> 0) === 0) {
						b$1 = (b$1 >> $min((16), 31)) >> 0;
					} else {
						b$1 = ~((b$1 >> 31 >> 0)) >> 0;
					}
					rgba$1 = $subslice(dpix$1, x$4, (x$4 + 4 >> 0), dpix$1.$length);
					(0 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 0] = ((r$2 << 24 >>> 24)));
					(1 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 1] = ((g$1 << 24 >>> 24)));
					(2 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 2] = ((b$1 << 24 >>> 24)));
					(3 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 3] = 255);
					_tmp$11 = x$4 + 4 >> 0;
					_tmp$12 = sx + 1 >> 0;
					_tmp$13 = yi$1 + 1 >> 0;
					x$4 = _tmp$11;
					sx = _tmp$12;
					yi$1 = _tmp$13;
				}
				_tmp$14 = y$1 + 1 >> 0;
				_tmp$15 = sy$1 + 1 >> 0;
				y$1 = _tmp$14;
				sy$1 = _tmp$15;
			}
		} else if (_1 === (2)) {
			_tmp$16 = y0;
			_tmp$17 = sp.Y;
			y$2 = _tmp$16;
			sy$2 = _tmp$17;
			while (true) {
				if (!(!((y$2 === y1)))) { break; }
				dpix$2 = $subslice(dst.Pix, ($imul(y$2, dst.Stride)));
				yi$2 = ($imul(((sy$2 - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ciBase$1 = ($imul((((_q$2 = sy$2 / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$3 = src.Rect.Min.Y / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), src.CStride)) - (_q$4 = src.Rect.Min.X / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				_tmp$18 = x0;
				_tmp$19 = sp.X;
				x$8 = _tmp$18;
				sx$1 = _tmp$19;
				while (true) {
					if (!(!((x$8 === x1)))) { break; }
					ci$2 = ciBase$1 + (_q$5 = sx$1 / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					yy1$2 = $imul((((x$9 = src.Y, ((yi$2 < 0 || yi$2 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + yi$2])) >> 0)), 65793);
					cb1$2 = (((x$10 = src.Cb, ((ci$2 < 0 || ci$2 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + ci$2])) >> 0)) - 128 >> 0;
					cr1$2 = (((x$11 = src.Cr, ((ci$2 < 0 || ci$2 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + ci$2])) >> 0)) - 128 >> 0;
					r$3 = yy1$2 + ($imul(91881, cr1$2)) >> 0;
					if (((((r$3 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$3 = (r$3 >> $min((16), 31)) >> 0;
					} else {
						r$3 = ~((r$3 >> 31 >> 0)) >> 0;
					}
					g$2 = (yy1$2 - ($imul(22554, cb1$2)) >> 0) - ($imul(46802, cr1$2)) >> 0;
					if (((((g$2 >>> 0)) & 4278190080) >>> 0) === 0) {
						g$2 = (g$2 >> $min((16), 31)) >> 0;
					} else {
						g$2 = ~((g$2 >> 31 >> 0)) >> 0;
					}
					b$2 = yy1$2 + ($imul(116130, cb1$2)) >> 0;
					if (((((b$2 >>> 0)) & 4278190080) >>> 0) === 0) {
						b$2 = (b$2 >> $min((16), 31)) >> 0;
					} else {
						b$2 = ~((b$2 >> 31 >> 0)) >> 0;
					}
					rgba$2 = $subslice(dpix$2, x$8, (x$8 + 4 >> 0), dpix$2.$length);
					(0 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 0] = ((r$3 << 24 >>> 24)));
					(1 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 1] = ((g$2 << 24 >>> 24)));
					(2 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 2] = ((b$2 << 24 >>> 24)));
					(3 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 3] = 255);
					_tmp$20 = x$8 + 4 >> 0;
					_tmp$21 = sx$1 + 1 >> 0;
					_tmp$22 = yi$2 + 1 >> 0;
					x$8 = _tmp$20;
					sx$1 = _tmp$21;
					yi$2 = _tmp$22;
				}
				_tmp$23 = y$2 + 1 >> 0;
				_tmp$24 = sy$2 + 1 >> 0;
				y$2 = _tmp$23;
				sy$2 = _tmp$24;
			}
		} else if (_1 === (3)) {
			_tmp$25 = y0;
			_tmp$26 = sp.Y;
			y$3 = _tmp$25;
			sy$3 = _tmp$26;
			while (true) {
				if (!(!((y$3 === y1)))) { break; }
				dpix$3 = $subslice(dst.Pix, ($imul(y$3, dst.Stride)));
				yi$3 = ($imul(((sy$3 - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ci$3 = ($imul((((_q$6 = sy$3 / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$7 = src.Rect.Min.Y / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), src.CStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				x$12 = x0;
				while (true) {
					if (!(!((x$12 === x1)))) { break; }
					yy1$3 = $imul((((x$13 = src.Y, ((yi$3 < 0 || yi$3 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + yi$3])) >> 0)), 65793);
					cb1$3 = (((x$14 = src.Cb, ((ci$3 < 0 || ci$3 >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + ci$3])) >> 0)) - 128 >> 0;
					cr1$3 = (((x$15 = src.Cr, ((ci$3 < 0 || ci$3 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + ci$3])) >> 0)) - 128 >> 0;
					r$4 = yy1$3 + ($imul(91881, cr1$3)) >> 0;
					if (((((r$4 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$4 = (r$4 >> $min((16), 31)) >> 0;
					} else {
						r$4 = ~((r$4 >> 31 >> 0)) >> 0;
					}
					g$3 = (yy1$3 - ($imul(22554, cb1$3)) >> 0) - ($imul(46802, cr1$3)) >> 0;
					if (((((g$3 >>> 0)) & 4278190080) >>> 0) === 0) {
						g$3 = (g$3 >> $min((16), 31)) >> 0;
					} else {
						g$3 = ~((g$3 >> 31 >> 0)) >> 0;
					}
					b$3 = yy1$3 + ($imul(116130, cb1$3)) >> 0;
					if (((((b$3 >>> 0)) & 4278190080) >>> 0) === 0) {
						b$3 = (b$3 >> $min((16), 31)) >> 0;
					} else {
						b$3 = ~((b$3 >> 31 >> 0)) >> 0;
					}
					rgba$3 = $subslice(dpix$3, x$12, (x$12 + 4 >> 0), dpix$3.$length);
					(0 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 0] = ((r$4 << 24 >>> 24)));
					(1 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 1] = ((g$3 << 24 >>> 24)));
					(2 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 2] = ((b$3 << 24 >>> 24)));
					(3 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 3] = 255);
					_tmp$27 = x$12 + 4 >> 0;
					_tmp$28 = yi$3 + 1 >> 0;
					_tmp$29 = ci$3 + 1 >> 0;
					x$12 = _tmp$27;
					yi$3 = _tmp$28;
					ci$3 = _tmp$29;
				}
				_tmp$30 = y$3 + 1 >> 0;
				_tmp$31 = sy$3 + 1 >> 0;
				y$3 = _tmp$30;
				sy$3 = _tmp$31;
			}
		} else {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	$pkg.DrawYCbCr = DrawYCbCr;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = image.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/draw"] = (function() {
	var $pkg = {}, $init, image, color, imageutil, Image, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, arrayType, sliceType, sliceType$1, clip, processBackward, Draw, DrawMask, drawFillOver, drawFillSrc, drawCopyOver, drawCopySrc, drawNRGBAOver, drawNRGBASrc, drawGray, drawCMYK, drawGlyphOver, drawRGBA, clamp, sqDiff, drawPaletted;
	image = $packages["image"];
	color = $packages["image/color"];
	imageutil = $packages["image/internal/imageutil"];
	Image = $pkg.Image = $newType(8, $kindInterface, "draw.Image", true, "image/draw", true, null);
	ptrType = $ptrType(image.Point);
	ptrType$1 = $ptrType(image.RGBA);
	ptrType$2 = $ptrType(image.Paletted);
	ptrType$3 = $ptrType(image.Uniform);
	ptrType$4 = $ptrType(image.NRGBA);
	ptrType$5 = $ptrType(image.YCbCr);
	ptrType$6 = $ptrType(image.Gray);
	ptrType$7 = $ptrType(image.CMYK);
	ptrType$8 = $ptrType(image.Alpha);
	ptrType$9 = $ptrType($Uint8);
	arrayType = $arrayType($Int32, 4);
	sliceType = $sliceType(arrayType);
	sliceType$1 = $sliceType($Uint8);
	clip = function(dst, r, src, sp, mask, mp) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, dst, dx, dy, mask, mp, orig, r, sp, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; dst = $f.dst; dx = $f.dx; dy = $f.dy; mask = $f.mask; mp = $f.mp; orig = $f.orig; r = $f.r; sp = $f.sp; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		orig = $clone(r.Min, image.Point);
		_r = dst.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(r, image.Rectangle).Intersect($clone(_r, image.Rectangle)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		image.Rectangle.copy(r, _r$1);
		_r$2 = src.Bounds(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $clone(_r$2, image.Rectangle).Add($clone($clone(orig, image.Point).Sub($clone(sp, image.Point)), image.Point)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = $clone(r, image.Rectangle).Intersect($clone(_r$3, image.Rectangle)); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		image.Rectangle.copy(r, _r$4);
		/* */ if (!($interfaceIsEqual(mask, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(mask, $ifaceNil))) { */ case 6:
			_r$5 = mask.Bounds(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = $clone(_r$5, image.Rectangle).Add($clone($clone(orig, image.Point).Sub($clone(mp, image.Point)), image.Point)); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = $clone(r, image.Rectangle).Intersect($clone(_r$6, image.Rectangle)); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			image.Rectangle.copy(r, _r$7);
		/* } */ case 7:
		dx = r.Min.X - orig.X >> 0;
		dy = r.Min.Y - orig.Y >> 0;
		if ((dx === 0) && (dy === 0)) {
			$s = -1; return;
		}
		sp.X = sp.X + (dx) >> 0;
		sp.Y = sp.Y + (dy) >> 0;
		if (!(mp === ptrType.nil)) {
			mp.X = mp.X + (dx) >> 0;
			mp.Y = mp.Y + (dy) >> 0;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: clip }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.dst = dst; $f.dx = dx; $f.dy = dy; $f.mask = mask; $f.mp = mp; $f.orig = orig; $f.r = r; $f.sp = sp; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	processBackward = function(dst, r, src, sp) {
		var dst, r, sp, src;
		return $interfaceIsEqual((dst), src) && $clone(r, image.Rectangle).Overlaps($clone($clone(r, image.Rectangle).Add($clone($clone(sp, image.Point).Sub($clone(r.Min, image.Point)), image.Point)), image.Rectangle)) && (sp.Y < r.Min.Y || ((sp.Y === r.Min.Y) && sp.X < r.Min.X));
	};
	Draw = function(dst, r, src, sp, op) {
		var dst, op, r, sp, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dst = $f.dst; op = $f.op; r = $f.r; sp = $f.sp; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = DrawMask(dst, $clone(r, image.Rectangle), src, $clone(sp, image.Point), $ifaceNil, new image.Point.ptr(0, 0), op); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Draw }; } $f.dst = dst; $f.op = op; $f.r = r; $f.sp = sp; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Draw = Draw;
	DrawMask = function(dst, r, src, sp, mask, mp, op) {
		var _arg, _arg$1, _arg$2, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, da, db, dg, dr, dst, dst0, dst0$1, dx, dy, ma, mask, mask0, mp, mx, my, ok, op, out, r, sa, sa$1, sa$2, sb, sb$1, sb$2, sg, sg$1, sg$2, sp, sr, sr$1, sr$2, src, src0, src0$1, src0$10, src0$11, src0$12, src0$2, src0$3, src0$4, src0$5, src0$6, src0$7, src0$8, src0$9, sx, sy, x$1, x$2, x0, x1, y, y0, y1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _q$6 = $f._q$6; _q$7 = $f._q$7; _q$8 = $f._q$8; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; a = $f.a; da = $f.da; db = $f.db; dg = $f.dg; dr = $f.dr; dst = $f.dst; dst0 = $f.dst0; dst0$1 = $f.dst0$1; dx = $f.dx; dy = $f.dy; ma = $f.ma; mask = $f.mask; mask0 = $f.mask0; mp = $f.mp; mx = $f.mx; my = $f.my; ok = $f.ok; op = $f.op; out = $f.out; r = $f.r; sa = $f.sa; sa$1 = $f.sa$1; sa$2 = $f.sa$2; sb = $f.sb; sb$1 = $f.sb$1; sb$2 = $f.sb$2; sg = $f.sg; sg$1 = $f.sg$1; sg$2 = $f.sg$2; sp = $f.sp; sr = $f.sr; sr$1 = $f.sr$1; sr$2 = $f.sr$2; src = $f.src; src0 = $f.src0; src0$1 = $f.src0$1; src0$10 = $f.src0$10; src0$11 = $f.src0$11; src0$12 = $f.src0$12; src0$2 = $f.src0$2; src0$3 = $f.src0$3; src0$4 = $f.src0$4; src0$5 = $f.src0$5; src0$6 = $f.src0$6; src0$7 = $f.src0$7; src0$8 = $f.src0$8; src0$9 = $f.src0$9; sx = $f.sx; sy = $f.sy; x$1 = $f.x$1; x$2 = $f.x$2; x0 = $f.x0; x1 = $f.x1; y = $f.y; y0 = $f.y0; y1 = $f.y1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mp = [mp];
		out = [out];
		r = [r];
		sp = [sp];
		$r = clip(dst, r[0], src, sp[0], mask, mp[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($clone(r[0], image.Rectangle).Empty()) {
			$s = -1; return;
		}
		_ref = dst;
		/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$1, true)[1]) { */ case 2:
			dst0 = _ref.$val;
			/* */ if (op === 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (op === 0) { */ case 5:
				/* */ if ($interfaceIsEqual(mask, $ifaceNil)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ($interfaceIsEqual(mask, $ifaceNil)) { */ case 8:
					_ref$1 = src;
					/* */ if ($assertType(_ref$1, ptrType$3, true)[1]) { $s = 11; continue; }
					/* */ if ($assertType(_ref$1, ptrType$1, true)[1]) { $s = 12; continue; }
					/* */ if ($assertType(_ref$1, ptrType$4, true)[1]) { $s = 13; continue; }
					/* */ if ($assertType(_ref$1, ptrType$5, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref$1, ptrType$6, true)[1]) { $s = 15; continue; }
					/* */ if ($assertType(_ref$1, ptrType$7, true)[1]) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($assertType(_ref$1, ptrType$3, true)[1]) { */ case 11:
						src0 = _ref$1.$val;
						_r = src0.RGBA(); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_tuple = _r;
						sr = _tuple[0];
						sg = _tuple[1];
						sb = _tuple[2];
						sa = _tuple[3];
						if (sa === 65535) {
							drawFillSrc(dst0, $clone(r[0], image.Rectangle), sr, sg, sb, sa);
						} else {
							drawFillOver(dst0, $clone(r[0], image.Rectangle), sr, sg, sb, sa);
						}
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$1, true)[1]) { */ case 12:
						src0$1 = _ref$1.$val;
						drawCopyOver(dst0, $clone(r[0], image.Rectangle), src0$1, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$4, true)[1]) { */ case 13:
						src0$2 = _ref$1.$val;
						drawNRGBAOver(dst0, $clone(r[0], image.Rectangle), src0$2, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$5, true)[1]) { */ case 14:
						src0$3 = _ref$1.$val;
						if (imageutil.DrawYCbCr(dst0, $clone(r[0], image.Rectangle), src0$3, $clone(sp[0], image.Point))) {
							$s = -1; return;
						}
						$s = 17; continue;
					/* } else if ($assertType(_ref$1, ptrType$6, true)[1]) { */ case 15:
						src0$4 = _ref$1.$val;
						drawGray(dst0, $clone(r[0], image.Rectangle), src0$4, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$7, true)[1]) { */ case 16:
						src0$5 = _ref$1.$val;
						drawCMYK(dst0, $clone(r[0], image.Rectangle), src0$5, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } */ case 17:
					$s = 10; continue;
				/* } else { */ case 9:
					_tuple$1 = $assertType(mask, ptrType$8, true);
					mask0 = _tuple$1[0];
					ok = _tuple$1[1];
					/* */ if (ok) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (ok) { */ case 19:
						_ref$2 = src;
						/* */ if ($assertType(_ref$2, ptrType$3, true)[1]) { $s = 21; continue; }
						/* */ $s = 22; continue;
						/* if ($assertType(_ref$2, ptrType$3, true)[1]) { */ case 21:
							src0$6 = _ref$2.$val;
							$r = drawGlyphOver(dst0, $clone(r[0], image.Rectangle), src0$6, mask0, $clone(mp[0], image.Point)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 22:
					/* } */ case 20:
				/* } */ case 10:
				$s = 7; continue;
			/* } else { */ case 6:
				/* */ if ($interfaceIsEqual(mask, $ifaceNil)) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if ($interfaceIsEqual(mask, $ifaceNil)) { */ case 24:
					_ref$3 = src;
					/* */ if ($assertType(_ref$3, ptrType$3, true)[1]) { $s = 26; continue; }
					/* */ if ($assertType(_ref$3, ptrType$1, true)[1]) { $s = 27; continue; }
					/* */ if ($assertType(_ref$3, ptrType$4, true)[1]) { $s = 28; continue; }
					/* */ if ($assertType(_ref$3, ptrType$5, true)[1]) { $s = 29; continue; }
					/* */ if ($assertType(_ref$3, ptrType$6, true)[1]) { $s = 30; continue; }
					/* */ if ($assertType(_ref$3, ptrType$7, true)[1]) { $s = 31; continue; }
					/* */ $s = 32; continue;
					/* if ($assertType(_ref$3, ptrType$3, true)[1]) { */ case 26:
						src0$7 = _ref$3.$val;
						_r$1 = src0$7.RGBA(); /* */ $s = 33; case 33: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_tuple$2 = _r$1;
						sr$1 = _tuple$2[0];
						sg$1 = _tuple$2[1];
						sb$1 = _tuple$2[2];
						sa$1 = _tuple$2[3];
						drawFillSrc(dst0, $clone(r[0], image.Rectangle), sr$1, sg$1, sb$1, sa$1);
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$1, true)[1]) { */ case 27:
						src0$8 = _ref$3.$val;
						drawCopySrc(dst0, $clone(r[0], image.Rectangle), src0$8, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$4, true)[1]) { */ case 28:
						src0$9 = _ref$3.$val;
						drawNRGBASrc(dst0, $clone(r[0], image.Rectangle), src0$9, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$5, true)[1]) { */ case 29:
						src0$10 = _ref$3.$val;
						if (imageutil.DrawYCbCr(dst0, $clone(r[0], image.Rectangle), src0$10, $clone(sp[0], image.Point))) {
							$s = -1; return;
						}
						$s = 32; continue;
					/* } else if ($assertType(_ref$3, ptrType$6, true)[1]) { */ case 30:
						src0$11 = _ref$3.$val;
						drawGray(dst0, $clone(r[0], image.Rectangle), src0$11, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$7, true)[1]) { */ case 31:
						src0$12 = _ref$3.$val;
						drawCMYK(dst0, $clone(r[0], image.Rectangle), src0$12, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } */ case 32:
				/* } */ case 25:
			/* } */ case 7:
			$r = drawRGBA(dst0, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point), mask, $clone(mp[0], image.Point), op); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 3:
			dst0$1 = _ref.$val;
			/* */ if ((op === 1) && $interfaceIsEqual(mask, $ifaceNil) && !processBackward(dst, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point))) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if ((op === 1) && $interfaceIsEqual(mask, $ifaceNil) && !processBackward(dst, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point))) { */ case 35:
				$r = drawPaletted(dst0$1, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point), false); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 36:
		/* } */ case 4:
		_tmp = r[0].Min.X;
		_tmp$1 = r[0].Max.X;
		_tmp$2 = 1;
		x0 = _tmp;
		x1 = _tmp$1;
		dx = _tmp$2;
		_tmp$3 = r[0].Min.Y;
		_tmp$4 = r[0].Max.Y;
		_tmp$5 = 1;
		y0 = _tmp$3;
		y1 = _tmp$4;
		dy = _tmp$5;
		if (processBackward(dst, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point))) {
			_tmp$6 = x1 - 1 >> 0;
			_tmp$7 = x0 - 1 >> 0;
			_tmp$8 = -1;
			x0 = _tmp$6;
			x1 = _tmp$7;
			dx = _tmp$8;
			_tmp$9 = y1 - 1 >> 0;
			_tmp$10 = y0 - 1 >> 0;
			_tmp$11 = -1;
			y0 = _tmp$9;
			y1 = _tmp$10;
			dy = _tmp$11;
		}
		out[0] = new color.RGBA64.ptr(0, 0, 0, 0);
		sy = (sp[0].Y + y0 >> 0) - r[0].Min.Y >> 0;
		my = (mp[0].Y + y0 >> 0) - r[0].Min.Y >> 0;
		y = y0;
		/* while (true) { */ case 38:
			/* if (!(!((y === y1)))) { break; } */ if(!(!((y === y1)))) { $s = 39; continue; }
			sx = (sp[0].X + x0 >> 0) - r[0].Min.X >> 0;
			mx = (mp[0].X + x0 >> 0) - r[0].Min.X >> 0;
			x$1 = x0;
			/* while (true) { */ case 40:
				/* if (!(!((x$1 === x1)))) { break; } */ if(!(!((x$1 === x1)))) { $s = 41; continue; }
				ma = 65535;
				/* */ if (!($interfaceIsEqual(mask, $ifaceNil))) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (!($interfaceIsEqual(mask, $ifaceNil))) { */ case 42:
					_r$2 = mask.At(mx, my); /* */ $s = 44; case 44: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = _r$2.RGBA(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3;
					ma = _tuple$3[3];
				/* } */ case 43:
					/* */ if ((ma === 0)) { $s = 47; continue; }
					/* */ if ((ma === 65535) && (op === 1)) { $s = 48; continue; }
					/* */ $s = 49; continue;
					/* if ((ma === 0)) { */ case 47:
						/* */ if (op === 0) { $s = 51; continue; }
						/* */ $s = 52; continue;
						/* if (op === 0) { */ case 51:
							$s = 53; continue;
						/* } else { */ case 52:
							$r = dst.Set(x$1, y, (x$2 = color.Transparent, new x$2.constructor.elem(x$2))); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 53:
						$s = 50; continue;
					/* } else if ((ma === 65535) && (op === 1)) { */ case 48:
						_arg = x$1;
						_arg$1 = y;
						_r$4 = src.At(sx, sy); /* */ $s = 55; case 55: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_arg$2 = _r$4;
						$r = dst.Set(_arg, _arg$1, _arg$2); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 50; continue;
					/* } else { */ case 49:
						_r$5 = src.At(sx, sy); /* */ $s = 57; case 57: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = _r$5.RGBA(); /* */ $s = 58; case 58: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_tuple$4 = _r$6;
						sr$2 = _tuple$4[0];
						sg$2 = _tuple$4[1];
						sb$2 = _tuple$4[2];
						sa$2 = _tuple$4[3];
						/* */ if (op === 0) { $s = 59; continue; }
						/* */ $s = 60; continue;
						/* if (op === 0) { */ case 59:
							_r$7 = dst.At(x$1, y); /* */ $s = 62; case 62: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							_r$8 = _r$7.RGBA(); /* */ $s = 63; case 63: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							_tuple$5 = _r$8;
							dr = _tuple$5[0];
							dg = _tuple$5[1];
							db = _tuple$5[2];
							da = _tuple$5[3];
							a = 65535 - ((_q = ($imul(sa$2, ma) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))) >>> 0;
							out[0].R = (((_q$1 = ((($imul(dr, a) >>> 0) + ($imul(sr$2, ma) >>> 0) >>> 0)) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].G = (((_q$2 = ((($imul(dg, a) >>> 0) + ($imul(sg$2, ma) >>> 0) >>> 0)) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].B = (((_q$3 = ((($imul(db, a) >>> 0) + ($imul(sb$2, ma) >>> 0) >>> 0)) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].A = (((_q$4 = ((($imul(da, a) >>> 0) + ($imul(sa$2, ma) >>> 0) >>> 0)) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							$s = 61; continue;
						/* } else { */ case 60:
							out[0].R = (((_q$5 = ($imul(sr$2, ma) >>> 0) / 65535, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].G = (((_q$6 = ($imul(sg$2, ma) >>> 0) / 65535, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].B = (((_q$7 = ($imul(sb$2, ma) >>> 0) / 65535, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].A = (((_q$8 = ($imul(sa$2, ma) >>> 0) / 65535, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
						/* } */ case 61:
						$r = dst.Set(x$1, y, out[0]); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 50:
				case 46:
				_tmp$12 = x$1 + dx >> 0;
				_tmp$13 = sx + dx >> 0;
				_tmp$14 = mx + dx >> 0;
				x$1 = _tmp$12;
				sx = _tmp$13;
				mx = _tmp$14;
			/* } */ $s = 40; continue; case 41:
			_tmp$15 = y + dy >> 0;
			_tmp$16 = sy + dy >> 0;
			_tmp$17 = my + dy >> 0;
			y = _tmp$15;
			sy = _tmp$16;
			my = _tmp$17;
		/* } */ $s = 38; continue; case 39:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DrawMask }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._q$6 = _q$6; $f._q$7 = _q$7; $f._q$8 = _q$8; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.a = a; $f.da = da; $f.db = db; $f.dg = dg; $f.dr = dr; $f.dst = dst; $f.dst0 = dst0; $f.dst0$1 = dst0$1; $f.dx = dx; $f.dy = dy; $f.ma = ma; $f.mask = mask; $f.mask0 = mask0; $f.mp = mp; $f.mx = mx; $f.my = my; $f.ok = ok; $f.op = op; $f.out = out; $f.r = r; $f.sa = sa; $f.sa$1 = sa$1; $f.sa$2 = sa$2; $f.sb = sb; $f.sb$1 = sb$1; $f.sb$2 = sb$2; $f.sg = sg; $f.sg$1 = sg$1; $f.sg$2 = sg$2; $f.sp = sp; $f.sr = sr; $f.sr$1 = sr$1; $f.sr$2 = sr$2; $f.src = src; $f.src0 = src0; $f.src0$1 = src0$1; $f.src0$10 = src0$10; $f.src0$11 = src0$11; $f.src0$12 = src0$12; $f.src0$2 = src0$2; $f.src0$3 = src0$3; $f.src0$4 = src0$4; $f.src0$5 = src0$5; $f.src0$6 = src0$6; $f.src0$7 = src0$7; $f.src0$8 = src0$8; $f.src0$9 = src0$9; $f.sx = sx; $f.sy = sy; $f.x$1 = x$1; $f.x$2 = x$2; $f.x0 = x0; $f.x1 = x1; $f.y = y; $f.y0 = y0; $f.y1 = y1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DrawMask = DrawMask;
	drawFillOver = function(dst, r, sr, sg, sb, sa) {
		var _q, _q$1, _q$2, _q$3, a, da, db, dg, dr, dst, i, i0, i1, r, sa, sb, sg, sr, x$1, x$2, x$3, x$4, y;
		a = $imul(((65535 - sa >>> 0)), 257) >>> 0;
		i0 = dst.PixOffset(r.Min.X, r.Min.Y);
		i1 = i0 + ($imul($clone(r, image.Rectangle).Dx(), 4)) >> 0;
		y = r.Min.Y;
		while (true) {
			if (!(!((y === r.Max.Y)))) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				dr = (x$1 = dst.Pix, $indexPtr(x$1.$array, x$1.$offset + (i + 0 >> 0), ptrType$9));
				dg = (x$2 = dst.Pix, $indexPtr(x$2.$array, x$2.$offset + (i + 1 >> 0), ptrType$9));
				db = (x$3 = dst.Pix, $indexPtr(x$3.$array, x$3.$offset + (i + 2 >> 0), ptrType$9));
				da = (x$4 = dst.Pix, $indexPtr(x$4.$array, x$4.$offset + (i + 3 >> 0), ptrType$9));
				dr.$set(((((((_q = ($imul(((dr.$get() >>> 0)), a) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) + sr >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				dg.$set(((((((_q$1 = ($imul(((dg.$get() >>> 0)), a) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) + sg >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				db.$set(((((((_q$2 = ($imul(((db.$get() >>> 0)), a) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) + sb >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				da.$set(((((((_q$3 = ($imul(((da.$get() >>> 0)), a) >>> 0) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) + sa >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				i = i + (4) >> 0;
			}
			i0 = i0 + (dst.Stride) >> 0;
			i1 = i1 + (dst.Stride) >> 0;
			y = y + (1) >> 0;
		}
	};
	drawFillSrc = function(dst, r, sr, sg, sb, sa) {
		var dst, firstRow, i, i0, i1, r, sa, sa8, sb, sb8, sg, sg8, sr, sr8, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y;
		sr8 = (((sr >>> 8 >>> 0) << 24 >>> 24));
		sg8 = (((sg >>> 8 >>> 0) << 24 >>> 24));
		sb8 = (((sb >>> 8 >>> 0) << 24 >>> 24));
		sa8 = (((sa >>> 8 >>> 0) << 24 >>> 24));
		i0 = dst.PixOffset(r.Min.X, r.Min.Y);
		i1 = i0 + ($imul($clone(r, image.Rectangle).Dx(), 4)) >> 0;
		i = i0;
		while (true) {
			if (!(i < i1)) { break; }
			(x$1 = dst.Pix, x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = sr8));
			(x$3 = dst.Pix, x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4] = sg8));
			(x$5 = dst.Pix, x$6 = i + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = sb8));
			(x$7 = dst.Pix, x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = sa8));
			i = i + (4) >> 0;
		}
		firstRow = $subslice(dst.Pix, i0, i1);
		y = r.Min.Y + 1 >> 0;
		while (true) {
			if (!(y < r.Max.Y)) { break; }
			i0 = i0 + (dst.Stride) >> 0;
			i1 = i1 + (dst.Stride) >> 0;
			$copySlice($subslice(dst.Pix, i0, i1), firstRow);
			y = y + (1) >> 0;
		}
	};
	drawCopyOver = function(dst, r, src, sp) {
		var _q, _q$1, _q$2, _q$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, d0, da, db, ddelta, dg, dpix, dr, dst, dx, dy, i, i0, i1, idelta, r, s0, sa, sb, sdelta, sg, sp, spix, sr, src, x$1, x$2, x$3, x$4;
		_tmp = $clone(r, image.Rectangle).Dx();
		_tmp$1 = $clone(r, image.Rectangle).Dy();
		dx = _tmp;
		dy = _tmp$1;
		d0 = dst.PixOffset(r.Min.X, r.Min.Y);
		s0 = src.PixOffset(sp.X, sp.Y);
		_tmp$2 = 0;
		_tmp$3 = 0;
		ddelta = _tmp$2;
		sdelta = _tmp$3;
		_tmp$4 = 0;
		_tmp$5 = 0;
		_tmp$6 = 0;
		i0 = _tmp$4;
		i1 = _tmp$5;
		idelta = _tmp$6;
		if (r.Min.Y < sp.Y || (r.Min.Y === sp.Y) && r.Min.X <= sp.X) {
			ddelta = dst.Stride;
			sdelta = src.Stride;
			_tmp$7 = 0;
			_tmp$8 = $imul(dx, 4);
			_tmp$9 = 4;
			i0 = _tmp$7;
			i1 = _tmp$8;
			idelta = _tmp$9;
		} else {
			d0 = d0 + (($imul(((dy - 1 >> 0)), dst.Stride))) >> 0;
			s0 = s0 + (($imul(((dy - 1 >> 0)), src.Stride))) >> 0;
			ddelta = -dst.Stride;
			sdelta = -src.Stride;
			_tmp$10 = $imul(((dx - 1 >> 0)), 4);
			_tmp$11 = -4;
			_tmp$12 = -4;
			i0 = _tmp$10;
			i1 = _tmp$11;
			idelta = _tmp$12;
		}
		while (true) {
			if (!(dy > 0)) { break; }
			dpix = $subslice(dst.Pix, d0);
			spix = $subslice(src.Pix, s0);
			i = i0;
			while (true) {
				if (!(!((i === i1)))) { break; }
				sr = $imul((((x$1 = i + 0 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])) >>> 0)), 257) >>> 0;
				sg = $imul((((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])) >>> 0)), 257) >>> 0;
				sb = $imul((((x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])) >>> 0)), 257) >>> 0;
				sa = $imul((((x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])) >>> 0)), 257) >>> 0;
				dr = $indexPtr(dpix.$array, dpix.$offset + (i + 0 >> 0), ptrType$9);
				dg = $indexPtr(dpix.$array, dpix.$offset + (i + 1 >> 0), ptrType$9);
				db = $indexPtr(dpix.$array, dpix.$offset + (i + 2 >> 0), ptrType$9);
				da = $indexPtr(dpix.$array, dpix.$offset + (i + 3 >> 0), ptrType$9);
				a = $imul(((65535 - sa >>> 0)), 257) >>> 0;
				dr.$set(((((((_q = ($imul(((dr.$get() >>> 0)), a) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) + sr >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				dg.$set(((((((_q$1 = ($imul(((dg.$get() >>> 0)), a) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) + sg >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				db.$set(((((((_q$2 = ($imul(((db.$get() >>> 0)), a) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) + sb >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				da.$set(((((((_q$3 = ($imul(((da.$get() >>> 0)), a) >>> 0) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) + sa >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				i = i + (idelta) >> 0;
			}
			d0 = d0 + (ddelta) >> 0;
			s0 = s0 + (sdelta) >> 0;
			dy = dy - (1) >> 0;
		}
	};
	drawCopySrc = function(dst, r, src, sp) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, d0, ddelta, dst, dy, n, r, s0, sdelta, sp, src;
		_tmp = $imul(4, $clone(r, image.Rectangle).Dx());
		_tmp$1 = $clone(r, image.Rectangle).Dy();
		n = _tmp;
		dy = _tmp$1;
		d0 = dst.PixOffset(r.Min.X, r.Min.Y);
		s0 = src.PixOffset(sp.X, sp.Y);
		_tmp$2 = 0;
		_tmp$3 = 0;
		ddelta = _tmp$2;
		sdelta = _tmp$3;
		if (r.Min.Y <= sp.Y) {
			ddelta = dst.Stride;
			sdelta = src.Stride;
		} else {
			d0 = d0 + (($imul(((dy - 1 >> 0)), dst.Stride))) >> 0;
			s0 = s0 + (($imul(((dy - 1 >> 0)), src.Stride))) >> 0;
			ddelta = -dst.Stride;
			sdelta = -src.Stride;
		}
		while (true) {
			if (!(dy > 0)) { break; }
			$copySlice($subslice(dst.Pix, d0, (d0 + n >> 0)), $subslice(src.Pix, s0, (s0 + n >> 0)));
			d0 = d0 + (ddelta) >> 0;
			s0 = s0 + (sdelta) >> 0;
			dy = dy - (1) >> 0;
		}
	};
	drawNRGBAOver = function(dst, r, src, sp) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, da, db, dg, dpix, dr, dst, i, i0, i1, r, sa, sb, sg, si, si0, sp, spix, sr, src, sy, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 4);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				sa = $imul((((x$1 = si + 3 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])) >>> 0)), 257) >>> 0;
				sr = (_q = ($imul((((x$2 = si + 0 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])) >>> 0)), sa) >>> 0) / 255, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				sg = (_q$1 = ($imul((((x$3 = si + 1 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])) >>> 0)), sa) >>> 0) / 255, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				sb = (_q$2 = ($imul((((x$4 = si + 2 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])) >>> 0)), sa) >>> 0) / 255, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
				dr = (((x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$5])) >>> 0));
				dg = (((x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$6])) >>> 0));
				db = (((x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$7])) >>> 0));
				da = (((x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$8])) >>> 0));
				a = $imul(((65535 - sa >>> 0)), 257) >>> 0;
				(x$9 = i + 0 >> 0, ((x$9 < 0 || x$9 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$9] = ((((((_q$3 = ($imul(dr, a) >>> 0) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) + sr >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				(x$10 = i + 1 >> 0, ((x$10 < 0 || x$10 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$10] = ((((((_q$4 = ($imul(dg, a) >>> 0) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) + sg >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				(x$11 = i + 2 >> 0, ((x$11 < 0 || x$11 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$11] = ((((((_q$5 = ($imul(db, a) >>> 0) / 65535, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >>> 0 : $throwRuntimeError("integer divide by zero")) + sb >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				(x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$12] = ((((((_q$6 = ($imul(da, a) >>> 0) / 65535, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >>> 0 : $throwRuntimeError("integer divide by zero")) + sa >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 4 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawNRGBASrc = function(dst, r, src, sp) {
		var _q, _q$1, _q$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, dpix, dst, i, i0, i1, r, sa, sb, sg, si, si0, sp, spix, sr, src, sy, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 4);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				sa = $imul((((x$1 = si + 3 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])) >>> 0)), 257) >>> 0;
				sr = (_q = ($imul((((x$2 = si + 0 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])) >>> 0)), sa) >>> 0) / 255, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				sg = (_q$1 = ($imul((((x$3 = si + 1 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])) >>> 0)), sa) >>> 0) / 255, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				sb = (_q$2 = ($imul((((x$4 = si + 2 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])) >>> 0)), sa) >>> 0) / 255, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
				(x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$5] = (((sr >>> 8 >>> 0) << 24 >>> 24))));
				(x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$6] = (((sg >>> 8 >>> 0) << 24 >>> 24))));
				(x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$7] = (((sb >>> 8 >>> 0) << 24 >>> 24))));
				(x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$8] = (((sa >>> 8 >>> 0) << 24 >>> 24))));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 4 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawGray = function(dst, r, src, sp) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, dpix, dst, i, i0, i1, p, r, si, si0, sp, spix, src, sy, x$1, x$2, x$3, x$4, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 1);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				p = ((si < 0 || si >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + si]);
				(x$1 = i + 0 >> 0, ((x$1 < 0 || x$1 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$1] = p));
				(x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$2] = p));
				(x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$3] = p));
				(x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$4] = 255));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 1 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawCMYK = function(dst, r, src, sp) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, dpix, dst, i, i0, i1, r, si, si0, sp, spix, src, sy, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 4);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				_tuple = color.CMYKToRGB((x$1 = si + 0 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])), (x$2 = si + 1 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])), (x$3 = si + 2 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])), (x$4 = si + 3 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])));
				(x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$5] = _tuple[0]));
				(x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$6] = _tuple[1]));
				(x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$7] = _tuple[2]));
				(x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$8] = 255));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 4 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawGlyphOver = function(dst, r, src, mask, mp) {
		var _q, _q$1, _q$2, _q$3, _q$4, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, da, db, dg, dr, dst, i, i0, i1, ma, mask, mi, mi0, mp, my, r, sa, sb, sg, sr, src, x$1, x$2, x$3, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; a = $f.a; da = $f.da; db = $f.db; dg = $f.dg; dr = $f.dr; dst = $f.dst; i = $f.i; i0 = $f.i0; i1 = $f.i1; ma = $f.ma; mask = $f.mask; mi = $f.mi; mi0 = $f.mi0; mp = $f.mp; my = $f.my; r = $f.r; sa = $f.sa; sb = $f.sb; sg = $f.sg; sr = $f.sr; src = $f.src; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i0 = dst.PixOffset(r.Min.X, r.Min.Y);
		i1 = i0 + ($imul($clone(r, image.Rectangle).Dx(), 4)) >> 0;
		mi0 = mask.PixOffset(mp.X, mp.Y);
		_r = src.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		sr = _tuple[0];
		sg = _tuple[1];
		sb = _tuple[2];
		sa = _tuple[3];
		_tmp = r.Min.Y;
		_tmp$1 = mp.Y;
		y = _tmp;
		my = _tmp$1;
		while (true) {
			if (!(!((y === r.Max.Y)))) { break; }
			_tmp$2 = i0;
			_tmp$3 = mi0;
			i = _tmp$2;
			mi = _tmp$3;
			while (true) {
				if (!(i < i1)) { break; }
				ma = (((x$1 = mask.Pix, ((mi < 0 || mi >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + mi])) >>> 0));
				if (ma === 0) {
					_tmp$4 = i + 4 >> 0;
					_tmp$5 = mi + 1 >> 0;
					i = _tmp$4;
					mi = _tmp$5;
					continue;
				}
				ma = (ma | ((ma << 8 >>> 0))) >>> 0;
				dr = (x$2 = dst.Pix, $indexPtr(x$2.$array, x$2.$offset + (i + 0 >> 0), ptrType$9));
				dg = (x$3 = dst.Pix, $indexPtr(x$3.$array, x$3.$offset + (i + 1 >> 0), ptrType$9));
				db = (x$4 = dst.Pix, $indexPtr(x$4.$array, x$4.$offset + (i + 2 >> 0), ptrType$9));
				da = (x$5 = dst.Pix, $indexPtr(x$5.$array, x$5.$offset + (i + 3 >> 0), ptrType$9));
				a = $imul(((65535 - ((_q = ($imul(sa, ma) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))) >>> 0)), 257) >>> 0;
				dr.$set(((((_q$1 = ((($imul(((dr.$get() >>> 0)), a) >>> 0) + ($imul(sr, ma) >>> 0) >>> 0)) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				dg.$set(((((_q$2 = ((($imul(((dg.$get() >>> 0)), a) >>> 0) + ($imul(sg, ma) >>> 0) >>> 0)) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				db.$set(((((_q$3 = ((($imul(((db.$get() >>> 0)), a) >>> 0) + ($imul(sb, ma) >>> 0) >>> 0)) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				da.$set(((((_q$4 = ((($imul(((da.$get() >>> 0)), a) >>> 0) + ($imul(sa, ma) >>> 0) >>> 0)) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				_tmp$6 = i + 4 >> 0;
				_tmp$7 = mi + 1 >> 0;
				i = _tmp$6;
				mi = _tmp$7;
			}
			i0 = i0 + (dst.Stride) >> 0;
			i1 = i1 + (dst.Stride) >> 0;
			mi0 = mi0 + (mask.Stride) >> 0;
			_tmp$8 = y + 1 >> 0;
			_tmp$9 = my + 1 >> 0;
			y = _tmp$8;
			my = _tmp$9;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawGlyphOver }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.a = a; $f.da = da; $f.db = db; $f.dg = dg; $f.dr = dr; $f.dst = dst; $f.i = i; $f.i0 = i0; $f.i1 = i1; $f.ma = ma; $f.mask = mask; $f.mi = mi; $f.mi0 = mi0; $f.mp = mp; $f.my = my; $f.r = r; $f.sa = sa; $f.sb = sb; $f.sg = sg; $f.sr = sr; $f.src = src; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	drawRGBA = function(dst, r, src, sp, mask, mp, op) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, a, da, db, dg, di, dr, dst, dx, dy, i, i0, ma, mask, mp, mx, mx0, my, op, r, sa, sb, sg, sp, sr, src, sx, sx0, sx1, sy, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x0, x1, y, y0, y1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _q$6 = $f._q$6; _q$7 = $f._q$7; _q$8 = $f._q$8; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; da = $f.da; db = $f.db; dg = $f.dg; di = $f.di; dr = $f.dr; dst = $f.dst; dx = $f.dx; dy = $f.dy; i = $f.i; i0 = $f.i0; ma = $f.ma; mask = $f.mask; mp = $f.mp; mx = $f.mx; mx0 = $f.mx0; my = $f.my; op = $f.op; r = $f.r; sa = $f.sa; sb = $f.sb; sg = $f.sg; sp = $f.sp; sr = $f.sr; src = $f.src; sx = $f.sx; sx0 = $f.sx0; sx1 = $f.sx1; sy = $f.sy; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; x0 = $f.x0; x1 = $f.x1; y = $f.y; y0 = $f.y0; y1 = $f.y1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = r.Min.X;
		_tmp$1 = r.Max.X;
		_tmp$2 = 1;
		x0 = _tmp;
		x1 = _tmp$1;
		dx = _tmp$2;
		_tmp$3 = r.Min.Y;
		_tmp$4 = r.Max.Y;
		_tmp$5 = 1;
		y0 = _tmp$3;
		y1 = _tmp$4;
		dy = _tmp$5;
		if ($interfaceIsEqual((dst), src) && $clone(r, image.Rectangle).Overlaps($clone($clone(r, image.Rectangle).Add($clone($clone(sp, image.Point).Sub($clone(r.Min, image.Point)), image.Point)), image.Rectangle))) {
			if (sp.Y < r.Min.Y || (sp.Y === r.Min.Y) && sp.X < r.Min.X) {
				_tmp$6 = x1 - 1 >> 0;
				_tmp$7 = x0 - 1 >> 0;
				_tmp$8 = -1;
				x0 = _tmp$6;
				x1 = _tmp$7;
				dx = _tmp$8;
				_tmp$9 = y1 - 1 >> 0;
				_tmp$10 = y0 - 1 >> 0;
				_tmp$11 = -1;
				y0 = _tmp$9;
				y1 = _tmp$10;
				dy = _tmp$11;
			}
		}
		sy = (sp.Y + y0 >> 0) - r.Min.Y >> 0;
		my = (mp.Y + y0 >> 0) - r.Min.Y >> 0;
		sx0 = (sp.X + x0 >> 0) - r.Min.X >> 0;
		mx0 = (mp.X + x0 >> 0) - r.Min.X >> 0;
		sx1 = sx0 + ((x1 - x0 >> 0)) >> 0;
		i0 = dst.PixOffset(x0, y0);
		di = $imul(dx, 4);
		y = y0;
		/* while (true) { */ case 1:
			/* if (!(!((y === y1)))) { break; } */ if(!(!((y === y1)))) { $s = 2; continue; }
			_tmp$12 = i0;
			_tmp$13 = sx0;
			_tmp$14 = mx0;
			i = _tmp$12;
			sx = _tmp$13;
			mx = _tmp$14;
			/* while (true) { */ case 3:
				/* if (!(!((sx === sx1)))) { break; } */ if(!(!((sx === sx1)))) { $s = 4; continue; }
				ma = 65535;
				/* */ if (!($interfaceIsEqual(mask, $ifaceNil))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!($interfaceIsEqual(mask, $ifaceNil))) { */ case 5:
					_r = mask.At(mx, my); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = _r.RGBA(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple = _r$1;
					ma = _tuple[3];
				/* } */ case 6:
				_r$2 = src.At(sx, sy); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.RGBA(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				sr = _tuple$1[0];
				sg = _tuple$1[1];
				sb = _tuple$1[2];
				sa = _tuple$1[3];
				if (op === 0) {
					dr = (((x$1 = dst.Pix, x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >>> 0));
					dg = (((x$3 = dst.Pix, x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])) >>> 0));
					db = (((x$5 = dst.Pix, x$6 = i + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) >>> 0));
					da = (((x$7 = dst.Pix, x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) >>> 0));
					a = $imul(((65535 - ((_q = ($imul(sa, ma) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))) >>> 0)), 257) >>> 0;
					(x$9 = dst.Pix, x$10 = i + 0 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = ((((_q$1 = ((($imul(dr, a) >>> 0) + ($imul(sr, ma) >>> 0) >>> 0)) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$11 = dst.Pix, x$12 = i + 1 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((((_q$2 = ((($imul(dg, a) >>> 0) + ($imul(sg, ma) >>> 0) >>> 0)) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$13 = dst.Pix, x$14 = i + 2 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = ((((_q$3 = ((($imul(db, a) >>> 0) + ($imul(sb, ma) >>> 0) >>> 0)) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$15 = dst.Pix, x$16 = i + 3 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((((_q$4 = ((($imul(da, a) >>> 0) + ($imul(sa, ma) >>> 0) >>> 0)) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
				} else {
					(x$17 = dst.Pix, x$18 = i + 0 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = ((((_q$5 = ($imul(sr, ma) >>> 0) / 65535, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$19 = dst.Pix, x$20 = i + 1 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((((_q$6 = ($imul(sg, ma) >>> 0) / 65535, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$21 = dst.Pix, x$22 = i + 2 >> 0, ((x$22 < 0 || x$22 >= x$21.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$21.$array[x$21.$offset + x$22] = ((((_q$7 = ($imul(sb, ma) >>> 0) / 65535, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$23 = dst.Pix, x$24 = i + 3 >> 0, ((x$24 < 0 || x$24 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + x$24] = ((((_q$8 = ($imul(sa, ma) >>> 0) / 65535, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
				}
				_tmp$15 = i + di >> 0;
				_tmp$16 = sx + dx >> 0;
				_tmp$17 = mx + dx >> 0;
				i = _tmp$15;
				sx = _tmp$16;
				mx = _tmp$17;
			/* } */ $s = 3; continue; case 4:
			i0 = i0 + (($imul(dy, dst.Stride))) >> 0;
			_tmp$18 = y + dy >> 0;
			_tmp$19 = sy + dy >> 0;
			_tmp$20 = my + dy >> 0;
			y = _tmp$18;
			sy = _tmp$19;
			my = _tmp$20;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawRGBA }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._q$6 = _q$6; $f._q$7 = _q$7; $f._q$8 = _q$8; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.da = da; $f.db = db; $f.dg = dg; $f.di = di; $f.dr = dr; $f.dst = dst; $f.dx = dx; $f.dy = dy; $f.i = i; $f.i0 = i0; $f.ma = ma; $f.mask = mask; $f.mp = mp; $f.mx = mx; $f.mx0 = mx0; $f.my = my; $f.op = op; $f.r = r; $f.sa = sa; $f.sb = sb; $f.sg = sg; $f.sp = sp; $f.sr = sr; $f.src = src; $f.sx = sx; $f.sx0 = sx0; $f.sx1 = sx1; $f.sy = sy; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.x0 = x0; $f.x1 = x1; $f.y = y; $f.y0 = y0; $f.y1 = y1; $f.$s = $s; $f.$r = $r; return $f;
	};
	clamp = function(i) {
		var i;
		if (i < 0) {
			return 0;
		}
		if (i > 65535) {
			return 65535;
		}
		return i;
	};
	sqDiff = function(x$1, y) {
		var d, x$1, y;
		d = (((x$1 - y >> 0) >>> 0));
		return (($imul(d, d) >>> 0)) >>> 2 >>> 0;
	};
	drawPaletted = function(dst, r, src, sp, floydSteinberg$1) {
		var _i, _i$1, _i$2, _index, _index$1, _index$10, _index$11, _index$12, _index$13, _index$14, _index$15, _index$2, _index$3, _index$4, _index$5, _index$6, _index$7, _index$8, _index$9, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, a, b, bestIndex, bestSum, col, dst, ea, eb, eg, er, floydSteinberg$1, g, i, i$1, index, ok, out, p, p$1, palette, pix, pxRGBA, quantErrorCurr, quantErrorNext, r, r$1, sa, sb, sg, sp, sr, src, src0, src0$1, src0$2, stride, sum, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _index = $f._index; _index$1 = $f._index$1; _index$10 = $f._index$10; _index$11 = $f._index$11; _index$12 = $f._index$12; _index$13 = $f._index$13; _index$14 = $f._index$14; _index$15 = $f._index$15; _index$2 = $f._index$2; _index$3 = $f._index$3; _index$4 = $f._index$4; _index$5 = $f._index$5; _index$6 = $f._index$6; _index$7 = $f._index$7; _index$8 = $f._index$8; _index$9 = $f._index$9; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; b = $f.b; bestIndex = $f.bestIndex; bestSum = $f.bestSum; col = $f.col; dst = $f.dst; ea = $f.ea; eb = $f.eb; eg = $f.eg; er = $f.er; floydSteinberg$1 = $f.floydSteinberg$1; g = $f.g; i = $f.i; i$1 = $f.i$1; index = $f.index; ok = $f.ok; out = $f.out; p = $f.p; p$1 = $f.p$1; palette = $f.palette; pix = $f.pix; pxRGBA = $f.pxRGBA; quantErrorCurr = $f.quantErrorCurr; quantErrorNext = $f.quantErrorNext; r = $f.r; r$1 = $f.r$1; sa = $f.sa; sb = $f.sb; sg = $f.sg; sp = $f.sp; sr = $f.sr; src = $f.src; src0 = $f.src0; src0$1 = $f.src0$1; src0$2 = $f.src0$2; stride = $f.stride; sum = $f.sum; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = [out];
		src = [src];
		src0 = [src0];
		src0$1 = [src0$1];
		src0$2 = [src0$2];
		_tmp = (sliceType.nil);
		_tmp$1 = (sliceType$1.nil);
		_tmp$2 = 0;
		palette = _tmp;
		pix = _tmp$1;
		stride = _tmp$2;
		_tuple = $assertType(dst, ptrType$2, true);
		p = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			palette = $makeSlice(sliceType, p.Palette.$length);
			_ref = p.Palette;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				col = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r = col.RGBA(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				r$1 = _tuple$1[0];
				g = _tuple$1[1];
				b = _tuple$1[2];
				a = _tuple$1[3];
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[0] = ((r$1 >> 0));
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[1] = ((g >> 0));
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[2] = ((b >> 0));
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[3] = ((a >> 0));
				_i++;
			/* } */ $s = 3; continue; case 4:
			_tmp$3 = $subslice(p.Pix, p.PixOffset(r.Min.X, r.Min.Y));
			_tmp$4 = p.Stride;
			pix = _tmp$3;
			stride = _tmp$4;
		/* } */ case 2:
		_tmp$5 = sliceType.nil;
		_tmp$6 = sliceType.nil;
		quantErrorCurr = _tmp$5;
		quantErrorNext = _tmp$6;
		if (floydSteinberg$1) {
			quantErrorCurr = $makeSlice(sliceType, ($clone(r, image.Rectangle).Dx() + 2 >> 0));
			quantErrorNext = $makeSlice(sliceType, ($clone(r, image.Rectangle).Dx() + 2 >> 0));
		}
		pxRGBA = (function(out, src, src0, src0$1, src0$2) { return function $b(x$1, y) {
			var _r$1, _r$2, _tuple$2, a$1, b$1, g$1, r$2, x$1, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$2 = $f._tuple$2; a$1 = $f.a$1; b$1 = $f.b$1; g$1 = $f.g$1; r$2 = $f.r$2; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			r$2 = 0;
			g$1 = 0;
			b$1 = 0;
			a$1 = 0;
			_r$1 = src[0].At(x$1, y); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = _r$1.RGBA(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			r$2 = _tuple$2[0];
			g$1 = _tuple$2[1];
			b$1 = _tuple$2[2];
			a$1 = _tuple$2[3];
			$s = -1; return [r$2, g$1, b$1, a$1];
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$2 = _tuple$2; $f.a$1 = a$1; $f.b$1 = b$1; $f.g$1 = g$1; $f.r$2 = r$2; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}; })(out, src, src0, src0$1, src0$2);
		_ref$1 = src[0];
		/* */ if ($assertType(_ref$1, ptrType$1, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref$1, ptrType$4, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref$1, ptrType$5, true)[1]) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ($assertType(_ref$1, ptrType$1, true)[1]) { */ case 6:
			src0[0] = _ref$1.$val;
			pxRGBA = (function(out, src, src0, src0$1, src0$2) { return function(x$1, y) {
				var _tuple$2, a$1, b$1, g$1, r$2, x$1, y;
				r$2 = 0;
				g$1 = 0;
				b$1 = 0;
				a$1 = 0;
				_tuple$2 = $clone(src0[0].RGBAAt(x$1, y), color.RGBA).RGBA();
				r$2 = _tuple$2[0];
				g$1 = _tuple$2[1];
				b$1 = _tuple$2[2];
				a$1 = _tuple$2[3];
				return [r$2, g$1, b$1, a$1];
			}; })(out, src, src0, src0$1, src0$2);
			$s = 9; continue;
		/* } else if ($assertType(_ref$1, ptrType$4, true)[1]) { */ case 7:
			src0$1[0] = _ref$1.$val;
			pxRGBA = (function(out, src, src0, src0$1, src0$2) { return function(x$1, y) {
				var _tuple$2, a$1, b$1, g$1, r$2, x$1, y;
				r$2 = 0;
				g$1 = 0;
				b$1 = 0;
				a$1 = 0;
				_tuple$2 = $clone(src0$1[0].NRGBAAt(x$1, y), color.NRGBA).RGBA();
				r$2 = _tuple$2[0];
				g$1 = _tuple$2[1];
				b$1 = _tuple$2[2];
				a$1 = _tuple$2[3];
				return [r$2, g$1, b$1, a$1];
			}; })(out, src, src0, src0$1, src0$2);
			$s = 9; continue;
		/* } else if ($assertType(_ref$1, ptrType$5, true)[1]) { */ case 8:
			src0$2[0] = _ref$1.$val;
			pxRGBA = (function(out, src, src0, src0$1, src0$2) { return function(x$1, y) {
				var _tuple$2, a$1, b$1, g$1, r$2, x$1, y;
				r$2 = 0;
				g$1 = 0;
				b$1 = 0;
				a$1 = 0;
				_tuple$2 = $clone(src0$2[0].YCbCrAt(x$1, y), color.YCbCr).RGBA();
				r$2 = _tuple$2[0];
				g$1 = _tuple$2[1];
				b$1 = _tuple$2[2];
				a$1 = _tuple$2[3];
				return [r$2, g$1, b$1, a$1];
			}; })(out, src, src0, src0$1, src0$2);
		/* } */ case 9:
		out[0] = new color.RGBA64.ptr(0, 0, 0, 65535);
		y = 0;
		/* while (true) { */ case 10:
			/* if (!(!((y === $clone(r, image.Rectangle).Dy())))) { break; } */ if(!(!((y === $clone(r, image.Rectangle).Dy())))) { $s = 11; continue; }
			x$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(!((x$1 === $clone(r, image.Rectangle).Dx())))) { break; } */ if(!(!((x$1 === $clone(r, image.Rectangle).Dx())))) { $s = 13; continue; }
				_r$1 = pxRGBA(sp.X + x$1 >> 0, sp.Y + y >> 0); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$2 = _r$1;
				sr = _tuple$2[0];
				sg = _tuple$2[1];
				sb = _tuple$2[2];
				sa = _tuple$2[3];
				_tmp$7 = ((sr >> 0));
				_tmp$8 = ((sg >> 0));
				_tmp$9 = ((sb >> 0));
				_tmp$10 = ((sa >> 0));
				er = _tmp$7;
				eg = _tmp$8;
				eb = _tmp$9;
				ea = _tmp$10;
				if (floydSteinberg$1) {
					er = clamp(er + (_q = (x$2 = x$1 + 1 >> 0, ((x$2 < 0 || x$2 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$2]))[0] / 16, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
					eg = clamp(eg + (_q$1 = (x$3 = x$1 + 1 >> 0, ((x$3 < 0 || x$3 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$3]))[1] / 16, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
					eb = clamp(eb + (_q$2 = (x$4 = x$1 + 1 >> 0, ((x$4 < 0 || x$4 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$4]))[2] / 16, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
					ea = clamp(ea + (_q$3 = (x$5 = x$1 + 1 >> 0, ((x$5 < 0 || x$5 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$5]))[3] / 16, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
				}
				/* */ if (!(palette === sliceType.nil)) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!(palette === sliceType.nil)) { */ case 15:
					_tmp$11 = 0;
					_tmp$12 = 4294967295;
					bestIndex = _tmp$11;
					bestSum = _tmp$12;
					_ref$2 = palette;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$2.$length)) { break; }
						index = _i$1;
						p$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$1]), arrayType);
						sum = ((sqDiff(er, p$1[0]) + sqDiff(eg, p$1[1]) >>> 0) + sqDiff(eb, p$1[2]) >>> 0) + sqDiff(ea, p$1[3]) >>> 0;
						if (sum < bestSum) {
							_tmp$13 = index;
							_tmp$14 = sum;
							bestIndex = _tmp$13;
							bestSum = _tmp$14;
							if (sum === 0) {
								break;
							}
						}
						_i$1++;
					}
					(x$6 = ($imul(y, stride)) + x$1 >> 0, ((x$6 < 0 || x$6 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$6] = ((bestIndex << 24 >>> 24))));
					if (!floydSteinberg$1) {
						x$1 = x$1 + (1) >> 0;
						/* continue; */ $s = 12; continue;
					}
					er = er - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[0]) >> 0;
					eg = eg - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[1]) >> 0;
					eb = eb - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[2]) >> 0;
					ea = ea - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[3]) >> 0;
					$s = 17; continue;
				/* } else { */ case 16:
					out[0].R = ((er << 16 >>> 16));
					out[0].G = ((eg << 16 >>> 16));
					out[0].B = ((eb << 16 >>> 16));
					out[0].A = ((ea << 16 >>> 16));
					$r = dst.Set(r.Min.X + x$1 >> 0, r.Min.Y + y >> 0, out[0]); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if (!floydSteinberg$1) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (!floydSteinberg$1) { */ case 19:
						x$1 = x$1 + (1) >> 0;
						/* continue; */ $s = 12; continue;
					/* } */ case 20:
					_r$2 = dst.At(r.Min.X + x$1 >> 0, r.Min.Y + y >> 0); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = _r$2.RGBA(); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3;
					sr = _tuple$3[0];
					sg = _tuple$3[1];
					sb = _tuple$3[2];
					sa = _tuple$3[3];
					er = er - (((sr >> 0))) >> 0;
					eg = eg - (((sg >> 0))) >> 0;
					eb = eb - (((sb >> 0))) >> 0;
					ea = ea - (((sa >> 0))) >> 0;
				/* } */ case 17:
				_index = x$1 + 0 >> 0;
				((_index < 0 || _index >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index])[0] = (((_index < 0 || _index >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index])[0] + (($imul(er, 3))) >> 0);
				_index$1 = x$1 + 0 >> 0;
				((_index$1 < 0 || _index$1 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$1])[1] = (((_index$1 < 0 || _index$1 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$1])[1] + (($imul(eg, 3))) >> 0);
				_index$2 = x$1 + 0 >> 0;
				((_index$2 < 0 || _index$2 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$2])[2] = (((_index$2 < 0 || _index$2 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$2])[2] + (($imul(eb, 3))) >> 0);
				_index$3 = x$1 + 0 >> 0;
				((_index$3 < 0 || _index$3 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$3])[3] = (((_index$3 < 0 || _index$3 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$3])[3] + (($imul(ea, 3))) >> 0);
				_index$4 = x$1 + 1 >> 0;
				((_index$4 < 0 || _index$4 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$4])[0] = (((_index$4 < 0 || _index$4 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$4])[0] + (($imul(er, 5))) >> 0);
				_index$5 = x$1 + 1 >> 0;
				((_index$5 < 0 || _index$5 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$5])[1] = (((_index$5 < 0 || _index$5 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$5])[1] + (($imul(eg, 5))) >> 0);
				_index$6 = x$1 + 1 >> 0;
				((_index$6 < 0 || _index$6 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$6])[2] = (((_index$6 < 0 || _index$6 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$6])[2] + (($imul(eb, 5))) >> 0);
				_index$7 = x$1 + 1 >> 0;
				((_index$7 < 0 || _index$7 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$7])[3] = (((_index$7 < 0 || _index$7 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$7])[3] + (($imul(ea, 5))) >> 0);
				_index$8 = x$1 + 2 >> 0;
				((_index$8 < 0 || _index$8 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$8])[0] = (((_index$8 < 0 || _index$8 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$8])[0] + (($imul(er, 1))) >> 0);
				_index$9 = x$1 + 2 >> 0;
				((_index$9 < 0 || _index$9 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$9])[1] = (((_index$9 < 0 || _index$9 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$9])[1] + (($imul(eg, 1))) >> 0);
				_index$10 = x$1 + 2 >> 0;
				((_index$10 < 0 || _index$10 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$10])[2] = (((_index$10 < 0 || _index$10 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$10])[2] + (($imul(eb, 1))) >> 0);
				_index$11 = x$1 + 2 >> 0;
				((_index$11 < 0 || _index$11 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$11])[3] = (((_index$11 < 0 || _index$11 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$11])[3] + (($imul(ea, 1))) >> 0);
				_index$12 = x$1 + 2 >> 0;
				((_index$12 < 0 || _index$12 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$12])[0] = (((_index$12 < 0 || _index$12 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$12])[0] + (($imul(er, 7))) >> 0);
				_index$13 = x$1 + 2 >> 0;
				((_index$13 < 0 || _index$13 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$13])[1] = (((_index$13 < 0 || _index$13 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$13])[1] + (($imul(eg, 7))) >> 0);
				_index$14 = x$1 + 2 >> 0;
				((_index$14 < 0 || _index$14 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$14])[2] = (((_index$14 < 0 || _index$14 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$14])[2] + (($imul(eb, 7))) >> 0);
				_index$15 = x$1 + 2 >> 0;
				((_index$15 < 0 || _index$15 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$15])[3] = (((_index$15 < 0 || _index$15 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$15])[3] + (($imul(ea, 7))) >> 0);
				x$1 = x$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			if (floydSteinberg$1) {
				_tmp$15 = quantErrorNext;
				_tmp$16 = quantErrorCurr;
				quantErrorCurr = _tmp$15;
				quantErrorNext = _tmp$16;
				_ref$3 = quantErrorNext;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$3.$length)) { break; }
					i$1 = _i$2;
					arrayType.copy(((i$1 < 0 || i$1 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + i$1]), arrayType.zero());
					_i$2++;
				}
			}
			y = y + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawPaletted }; } $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._index = _index; $f._index$1 = _index$1; $f._index$10 = _index$10; $f._index$11 = _index$11; $f._index$12 = _index$12; $f._index$13 = _index$13; $f._index$14 = _index$14; $f._index$15 = _index$15; $f._index$2 = _index$2; $f._index$3 = _index$3; $f._index$4 = _index$4; $f._index$5 = _index$5; $f._index$6 = _index$6; $f._index$7 = _index$7; $f._index$8 = _index$8; $f._index$9 = _index$9; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.b = b; $f.bestIndex = bestIndex; $f.bestSum = bestSum; $f.col = col; $f.dst = dst; $f.ea = ea; $f.eb = eb; $f.eg = eg; $f.er = er; $f.floydSteinberg$1 = floydSteinberg$1; $f.g = g; $f.i = i; $f.i$1 = i$1; $f.index = index; $f.ok = ok; $f.out = out; $f.p = p; $f.p$1 = p$1; $f.palette = palette; $f.pix = pix; $f.pxRGBA = pxRGBA; $f.quantErrorCurr = quantErrorCurr; $f.quantErrorNext = quantErrorNext; $f.r = r; $f.r$1 = r$1; $f.sa = sa; $f.sb = sb; $f.sg = sg; $f.sp = sp; $f.sr = sr; $f.src = src; $f.src0 = src0; $f.src0$1 = src0$1; $f.src0$2 = src0$2; $f.stride = stride; $f.sum = sum; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.init([{prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [image.Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = image.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = imageutil.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/graphicsutil"] = (function() {
	var $pkg = {}, $init, graphics, opengl, image, color, draw, math, verticesBackend, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, theVerticesBackend, quadIndices, nan32, CopyImage, MipmapLevel, isPowerOf2, QuadVertices, quadVerticesImpl, QuadIndices, Vertex;
	graphics = $packages["github.com/hajimehoshi/ebiten/internal/graphics"];
	opengl = $packages["github.com/hajimehoshi/ebiten/internal/opengl"];
	image = $packages["image"];
	color = $packages["image/color"];
	draw = $packages["image/draw"];
	math = $packages["math"];
	verticesBackend = $pkg.verticesBackend = $newType(0, $kindStruct, "graphicsutil.verticesBackend", true, "github.com/hajimehoshi/ebiten/internal/graphicsutil", false, function(backend_, head_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.backend = sliceType.nil;
			this.head = 0;
			return;
		}
		this.backend = backend_;
		this.head = head_;
	});
	sliceType = $sliceType($Float32);
	sliceType$1 = $sliceType($Uint16);
	sliceType$2 = $sliceType($Uint8);
	ptrType = $ptrType(image.Paletted);
	ptrType$1 = $ptrType(verticesBackend);
	CopyImage = function(img) {
		var _arg, _arg$1, _arg$2, _arg$3, _i, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _tmp, _tmp$1, b, bs, c, d, dstImg, h, i, i$1, idx0, idx1, img, img$1, img$2, j, p, palette, rgba, size, w, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x0, x1, y0, y1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; b = $f.b; bs = $f.bs; c = $f.c; d = $f.d; dstImg = $f.dstImg; h = $f.h; i = $f.i; i$1 = $f.i$1; idx0 = $f.idx0; idx1 = $f.idx1; img = $f.img; img$1 = $f.img$1; img$2 = $f.img$2; j = $f.j; p = $f.p; palette = $f.palette; rgba = $f.rgba; size = $f.size; w = $f.w; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; x0 = $f.x0; x1 = $f.x1; y0 = $f.y0; y1 = $f.y1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = img.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, image.Rectangle).Size(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		size = $clone(_r$1, image.Point);
		_tmp = size.X;
		_tmp$1 = size.Y;
		w = _tmp;
		h = _tmp$1;
		bs = $makeSlice(sliceType$2, ($imul(($imul(4, w)), h)));
		_ref = img;
		/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType, true)[1]) { */ case 3:
			img$1 = _ref.$val;
			b = $clone(img$1.Bounds(), image.Rectangle);
			x0 = b.Min.X;
			y0 = b.Min.Y;
			x1 = b.Max.X;
			y1 = b.Max.Y;
			palette = $makeSlice(sliceType$2, ($imul(img$1.Palette.$length, 4)));
			_ref$1 = img$1.Palette;
			_i = 0;
			/* while (true) { */ case 6:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 7; continue; }
				i = _i;
				c = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
				_r$2 = color.RGBAModel.Convert(c); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				rgba = $clone($assertType(_r$2, color.RGBA), color.RGBA);
				(x = $imul(4, i), ((x < 0 || x >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x] = rgba.R));
				(x$1 = ($imul(4, i)) + 1 >> 0, ((x$1 < 0 || x$1 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$1] = rgba.G));
				(x$2 = ($imul(4, i)) + 2 >> 0, ((x$2 < 0 || x$2 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$2] = rgba.B));
				(x$3 = ($imul(4, i)) + 3 >> 0, ((x$3 < 0 || x$3 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$3] = rgba.A));
				_i++;
			/* } */ $s = 6; continue; case 7:
			idx0 = 0;
			idx1 = 0;
			d = img$1.Stride - ((x1 - x0 >> 0)) >> 0;
			j = 0;
			while (true) {
				if (!(j < (y1 - y0 >> 0))) { break; }
				i$1 = 0;
				while (true) {
					if (!(i$1 < (x1 - x0 >> 0))) { break; }
					p = (((x$4 = img$1.Pix, ((idx0 < 0 || idx0 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + idx0])) >> 0));
					((idx1 < 0 || idx1 >= bs.$length) ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + idx1] = (x$5 = $imul(4, p), ((x$5 < 0 || x$5 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$5])));
					(x$7 = idx1 + 1 >> 0, ((x$7 < 0 || x$7 >= bs.$length) ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + x$7] = (x$6 = ($imul(4, p)) + 1 >> 0, ((x$6 < 0 || x$6 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$6]))));
					(x$9 = idx1 + 2 >> 0, ((x$9 < 0 || x$9 >= bs.$length) ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + x$9] = (x$8 = ($imul(4, p)) + 2 >> 0, ((x$8 < 0 || x$8 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$8]))));
					(x$11 = idx1 + 3 >> 0, ((x$11 < 0 || x$11 >= bs.$length) ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + x$11] = (x$10 = ($imul(4, p)) + 3 >> 0, ((x$10 < 0 || x$10 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$10]))));
					idx0 = idx0 + (1) >> 0;
					idx1 = idx1 + (4) >> 0;
					i$1 = i$1 + (1) >> 0;
				}
				idx0 = idx0 + (d) >> 0;
				j = j + (1) >> 0;
			}
			$s = 5; continue;
		/* } else { */ case 4:
			img$2 = _ref;
			dstImg = new image.RGBA.ptr(bs, $imul(4, w), $clone(image.Rect(0, 0, w, h), image.Rectangle));
			_arg = dstImg;
			_arg$1 = $clone(image.Rect(0, 0, w, h), image.Rectangle);
			_arg$2 = img$2;
			_r$3 = img$2.Bounds(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$3 = $clone(_r$3.Min, image.Point);
			$r = draw.Draw(_arg, _arg$1, _arg$2, _arg$3, 1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return bs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CopyImage }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.b = b; $f.bs = bs; $f.c = c; $f.d = d; $f.dstImg = dstImg; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.idx0 = idx0; $f.idx1 = idx1; $f.img = img; $f.img$1 = img$1; $f.img$2 = img$2; $f.j = j; $f.p = p; $f.palette = palette; $f.rgba = rgba; $f.size = size; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.x0 = x0; $f.x1 = x1; $f.y0 = y0; $f.y1 = y1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CopyImage = CopyImage;
	MipmapLevel = function(det) {
		var d, det, level;
		if (math.IsNaN((det))) {
			$panic(new $String("graphicsutil: det must be finite"));
		}
		if (det === 0) {
			return -1;
		}
		d = math.Abs((det));
		level = 0;
		while (true) {
			if (!(d < 0.25)) { break; }
			level = level + (1) >> 0;
			d = d * (4);
		}
		return level;
	};
	$pkg.MipmapLevel = MipmapLevel;
	verticesBackend.ptr.prototype.sliceForOneQuad = function() {
		var _q, s, size, v;
		v = this;
		size = (_q = ($imul(4, graphics.VertexSizeInBytes())) / new opengl.DataType(opengl.Float).SizeInBytes(), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (v.backend === sliceType.nil) {
			v.backend = $makeSlice(sliceType, ($imul(size, 256)));
		}
		s = $subslice(v.backend, v.head, (v.head + size >> 0));
		v.head = v.head + (size) >> 0;
		if ((v.head + size >> 0) > v.backend.$length) {
			v.backend = sliceType.nil;
			v.head = 0;
		}
		return s;
	};
	verticesBackend.prototype.sliceForOneQuad = function() { return this.$val.sliceForOneQuad(); };
	isPowerOf2 = function(x) {
		var x;
		return ((x & ((x - 1 >> 0)))) === 0;
	};
	QuadVertices = function(width, height, sx0, sy0, sx1, sy1, a, b, c, d, tx, ty, cr, cg, cb, ca) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, ca, cb, cg, cr, d, height, hf, sx0, sx1, sy0, sy1, tx, ty, u0, u1, v0, v1, wf, width;
		if (!isPowerOf2(width)) {
			$panic(new $String("not reached"));
		}
		if (!isPowerOf2(height)) {
			$panic(new $String("not reached"));
		}
		if (sx0 >= sx1 || sy0 >= sy1) {
			return sliceType.nil;
		}
		if (sx1 <= 0 || sy1 <= 0) {
			return sliceType.nil;
		}
		wf = (width);
		hf = (height);
		_tmp = $fround((sx0) / wf);
		_tmp$1 = $fround((sy0) / hf);
		_tmp$2 = $fround((sx1) / wf);
		_tmp$3 = $fround((sy1) / hf);
		u0 = _tmp;
		v0 = _tmp$1;
		u1 = _tmp$2;
		v1 = _tmp$3;
		return quadVerticesImpl(((sx1 - sx0 >> 0)), ((sy1 - sy0 >> 0)), u0, v0, u1, v1, a, b, c, d, tx, ty, cr, cg, cb, ca);
	};
	$pkg.QuadVertices = QuadVertices;
	quadVerticesImpl = function(x, y, u0, v0, u1, v1, a, b, c, d, tx, ty, cr, cg, cb, ca) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, ax, b, by, c, ca, cb, cg, cr, cx, d, dy, tx, ty, u0, u1, v0, v1, vs, x, y;
		vs = $subslice(theVerticesBackend.sliceForOneQuad(), 0, 40);
		_tmp = $fround(a * x);
		_tmp$1 = $fround(b * y);
		_tmp$2 = $fround(c * x);
		_tmp$3 = $fround(d * y);
		ax = _tmp;
		by = _tmp$1;
		cx = _tmp$2;
		dy = _tmp$3;
		(0 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 0] = tx);
		(1 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 1] = ty);
		(2 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 2] = u0);
		(3 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 3] = v0);
		(4 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 4] = u1);
		(5 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 5] = v1);
		(6 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 6] = cr);
		(7 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 7] = cg);
		(8 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 8] = cb);
		(9 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 9] = ca);
		(10 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 10] = $fround(ax + tx));
		(11 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 11] = $fround(cx + ty));
		(12 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 12] = u1);
		(13 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 13] = v0);
		(14 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 14] = u0);
		(15 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 15] = v1);
		(16 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 16] = cr);
		(17 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 17] = cg);
		(18 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 18] = cb);
		(19 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 19] = ca);
		(20 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 20] = $fround(by + tx));
		(21 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 21] = $fround(dy + ty));
		(22 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 22] = u0);
		(23 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 23] = v1);
		(24 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 24] = u1);
		(25 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 25] = v0);
		(26 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 26] = cr);
		(27 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 27] = cg);
		(28 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 28] = cb);
		(29 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 29] = ca);
		(30 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 30] = $fround($fround(ax + by) + tx));
		(31 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 31] = $fround($fround(cx + dy) + ty));
		(32 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 32] = u1);
		(33 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 33] = v1);
		(34 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 34] = u0);
		(35 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 35] = v0);
		(36 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 36] = cr);
		(37 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 37] = cg);
		(38 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 38] = cb);
		(39 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 39] = ca);
		return vs;
	};
	QuadIndices = function() {
		return quadIndices;
	};
	$pkg.QuadIndices = QuadIndices;
	Vertex = function(width, height, dx, dy, sx, sy, cr, cg, cb, ca) {
		var ca, cb, cg, cr, dx, dy, height, hf, sx, sy, vs, wf, width;
		if (!isPowerOf2(width)) {
			$panic(new $String("not reached"));
		}
		if (!isPowerOf2(height)) {
			$panic(new $String("not reached"));
		}
		wf = (width);
		hf = (height);
		vs = $subslice(theVerticesBackend.sliceForOneQuad(), 0, 10);
		(0 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 0] = dx);
		(1 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 1] = dy);
		(2 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 2] = $fround(sx / wf));
		(3 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 3] = $fround(sy / hf));
		(4 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 4] = nan32);
		(5 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 5] = nan32);
		(6 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 6] = cr);
		(7 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 7] = cg);
		(8 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 8] = cb);
		(9 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 9] = ca);
		return vs;
	};
	$pkg.Vertex = Vertex;
	ptrType$1.methods = [{prop: "sliceForOneQuad", name: "sliceForOneQuad", pkg: "github.com/hajimehoshi/ebiten/internal/graphicsutil", typ: $funcType([], [sliceType], false)}];
	verticesBackend.init("github.com/hajimehoshi/ebiten/internal/graphicsutil", [{prop: "backend", name: "backend", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "head", name: "head", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = graphics.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		theVerticesBackend = new verticesBackend.ptr(sliceType.nil, 0);
		quadIndices = new sliceType$1([0, 1, 2, 1, 2, 3]);
		nan32 = ($fround(math.NaN()));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/hooks"] = (function() {
	var $pkg = {}, $init, sync, funcType, sliceType, m, onBeforeUpdateHooks, audioSuspended, onSuspendAudio, onResumeAudio, AppendHookOnBeforeUpdate, RunBeforeUpdateHooks, SuspendAudio, ResumeAudio;
	sync = $packages["sync"];
	funcType = $funcType([], [$error], false);
	sliceType = $sliceType(funcType);
	AppendHookOnBeforeUpdate = function(f) {
		var f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		onBeforeUpdateHooks = $append(onBeforeUpdateHooks, f);
		$r = m.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AppendHookOnBeforeUpdate }; } $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.AppendHookOnBeforeUpdate = AppendHookOnBeforeUpdate;
	RunBeforeUpdateHooks = function() {
		var _i, _r, _ref, err, f, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; err = $f.err; f = $f.f; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m, "Unlock"), []]);
		_ref = onBeforeUpdateHooks;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = f(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: RunBeforeUpdateHooks }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.err = err; $f.f = f; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.RunBeforeUpdateHooks = RunBeforeUpdateHooks;
	SuspendAudio = function() {
		var $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m, "Unlock"), []]);
		if (audioSuspended) {
			$s = -1; return;
		}
		audioSuspended = true;
		/* */ if (!(onSuspendAudio === $throwNilPointerError)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(onSuspendAudio === $throwNilPointerError)) { */ case 2:
			$r = onSuspendAudio(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: SuspendAudio }; } $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.SuspendAudio = SuspendAudio;
	ResumeAudio = function() {
		var $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m, "Unlock"), []]);
		if (!audioSuspended) {
			$s = -1; return;
		}
		audioSuspended = false;
		/* */ if (!(onResumeAudio === $throwNilPointerError)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(onResumeAudio === $throwNilPointerError)) { */ case 2:
			$r = onResumeAudio(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ResumeAudio }; } $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.ResumeAudio = ResumeAudio;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		m = new sync.Mutex.ptr(0, 0);
		audioSuspended = false;
		onSuspendAudio = $throwNilPointerError;
		onResumeAudio = $throwNilPointerError;
		onBeforeUpdateHooks = new sliceType([]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/input"] = (function() {
	var $pkg = {}, $init, js, unicode, GamepadButton, gamePad, Touch, mockRWLock, Input, Key, MouseButton, arrayType, arrayType$1, arrayType$2, ptrType, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, ptrType$1, mapType, mapType$1, theInput, emptyIDs, emptyTouches, codeToMouseButton, keyToCodes, keyCodeToKeyEdge, Get, NewTouch, OnKeyDown, OnKeyPress, OnKeyUp, OnMouseDown, OnMouseUp, OnMouseMove, OnTouchStart, OnTouchEnd, OnTouchMove, setMouseCursorFromEvent;
	js = $packages["github.com/gopherjs/gopherwasm/js"];
	unicode = $packages["unicode"];
	GamepadButton = $pkg.GamepadButton = $newType(4, $kindInt, "input.GamepadButton", true, "github.com/hajimehoshi/ebiten/internal/input", true, null);
	gamePad = $pkg.gamePad = $newType(0, $kindStruct, "input.gamePad", true, "github.com/hajimehoshi/ebiten/internal/input", false, function(valid_, axisNum_, axes_, buttonNum_, buttonPressed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.valid = false;
			this.axisNum = 0;
			this.axes = arrayType.zero();
			this.buttonNum = 0;
			this.buttonPressed = arrayType$1.zero();
			return;
		}
		this.valid = valid_;
		this.axisNum = axisNum_;
		this.axes = axes_;
		this.buttonNum = buttonNum_;
		this.buttonPressed = buttonPressed_;
	});
	Touch = $pkg.Touch = $newType(0, $kindStruct, "input.Touch", true, "github.com/hajimehoshi/ebiten/internal/input", true, function(id_, x_, y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = 0;
			this.x = 0;
			this.y = 0;
			return;
		}
		this.id = id_;
		this.x = x_;
		this.y = y_;
	});
	mockRWLock = $pkg.mockRWLock = $newType(0, $kindStruct, "input.mockRWLock", true, "github.com/hajimehoshi/ebiten/internal/input", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Input = $pkg.Input = $newType(0, $kindStruct, "input.Input", true, "github.com/hajimehoshi/ebiten/internal/input", true, function(keyPressed_, keyPressedEdge_, mouseButtonPressed_, cursorX_, cursorY_, gamepads_, touches_, runeBuffer_, m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.keyPressed = false;
			this.keyPressedEdge = false;
			this.mouseButtonPressed = false;
			this.cursorX = 0;
			this.cursorY = 0;
			this.gamepads = arrayType$2.zero();
			this.touches = sliceType.nil;
			this.runeBuffer = sliceType$1.nil;
			this.m = new mockRWLock.ptr();
			return;
		}
		this.keyPressed = keyPressed_;
		this.keyPressedEdge = keyPressedEdge_;
		this.mouseButtonPressed = mouseButtonPressed_;
		this.cursorX = cursorX_;
		this.cursorY = cursorY_;
		this.gamepads = gamepads_;
		this.touches = touches_;
		this.runeBuffer = runeBuffer_;
		this.m = m_;
	});
	Key = $pkg.Key = $newType(4, $kindInt, "input.Key", true, "github.com/hajimehoshi/ebiten/internal/input", true, null);
	MouseButton = $pkg.MouseButton = $newType(4, $kindInt, "input.MouseButton", true, "github.com/hajimehoshi/ebiten/internal/input", true, null);
	arrayType = $arrayType($Float64, 16);
	arrayType$1 = $arrayType($Bool, 256);
	arrayType$2 = $arrayType(gamePad, 16);
	ptrType = $ptrType(Touch);
	sliceType = $sliceType(ptrType);
	sliceType$1 = $sliceType($Int32);
	sliceType$2 = $sliceType($Int);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Input);
	mapType = $mapType($String, $Bool);
	mapType$1 = $mapType($Int, $Bool);
	Get = function() {
		return theInput;
	};
	$pkg.Get = Get;
	Input.ptr.prototype.CursorPosition = function() {
		var _tmp, _tmp$1, i, x, y, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		x = 0;
		y = 0;
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		_tmp = i.cursorX;
		_tmp$1 = i.cursorY;
		x = _tmp;
		y = _tmp$1;
		return [x, y];
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [x, y]; } }
	};
	Input.prototype.CursorPosition = function() { return this.$val.CursorPosition(); };
	Input.ptr.prototype.GamepadIDs = function() {
		var _i, _ref, g, i, id, r, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		if (false) {
			return emptyIDs;
		}
		r = new sliceType$2([]);
		_ref = i.gamepads;
		_i = 0;
		while (true) {
			if (!(_i < 16)) { break; }
			id = _i;
			g = $clone(((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]), gamePad);
			if (g.valid) {
				r = $append(r, id);
			}
			_i++;
		}
		return r;
		/* */ } catch(err) { $err = err; return sliceType$2.nil; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.GamepadIDs = function() { return this.$val.GamepadIDs(); };
	Input.ptr.prototype.GamepadAxisNum = function(id) {
		var i, id, x, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		if (16 <= id) {
			return 0;
		}
		return (x = i.gamepads, ((id < 0 || id >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[id])).axisNum;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.GamepadAxisNum = function(id) { return this.$val.GamepadAxisNum(id); };
	Input.ptr.prototype.GamepadAxis = function(id, axis) {
		var axis, i, id, x, x$1, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		if (16 <= id) {
			return 0;
		}
		return (x = (x$1 = i.gamepads, ((id < 0 || id >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[id])).axes, ((axis < 0 || axis >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[axis]));
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.GamepadAxis = function(id, axis) { return this.$val.GamepadAxis(id, axis); };
	Input.ptr.prototype.GamepadButtonNum = function(id) {
		var i, id, x, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		if (16 <= id) {
			return 0;
		}
		return (x = i.gamepads, ((id < 0 || id >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[id])).buttonNum;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.GamepadButtonNum = function(id) { return this.$val.GamepadButtonNum(id); };
	Input.ptr.prototype.IsGamepadButtonPressed = function(id, button) {
		var button, i, id, x, x$1, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		if (16 <= id) {
			return false;
		}
		return (x = (x$1 = i.gamepads, ((id < 0 || id >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[id])).buttonPressed, ((button < 0 || button >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[button]));
		/* */ } catch(err) { $err = err; return false; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.IsGamepadButtonPressed = function(id, button) { return this.$val.IsGamepadButtonPressed(id, button); };
	Input.ptr.prototype.Touches = function() {
		var i, in$1, t, x, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		in$1 = this;
		$clone(in$1.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(in$1.m, mockRWLock), "RUnlock"), []]);
		if (in$1.touches.$length === 0) {
			return emptyTouches;
		}
		t = $makeSlice(sliceType, in$1.touches.$length);
		i = 0;
		while (true) {
			if (!(i < t.$length)) { break; }
			((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i] = (x = in$1.touches, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
			i = i + (1) >> 0;
		}
		return t;
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.Touches = function() { return this.$val.Touches(); };
	NewTouch = function(id, x, y) {
		var id, x, y;
		return new Touch.ptr(id, x, y);
	};
	$pkg.NewTouch = NewTouch;
	Touch.ptr.prototype.ID = function() {
		var t;
		t = this;
		return t.id;
	};
	Touch.prototype.ID = function() { return this.$val.ID(); };
	Touch.ptr.prototype.Position = function() {
		var _tmp, _tmp$1, t, x, y;
		x = 0;
		y = 0;
		t = this;
		_tmp = t.x;
		_tmp$1 = t.y;
		x = _tmp;
		y = _tmp$1;
		return [x, y];
	};
	Touch.prototype.Position = function() { return this.$val.Position(); };
	mockRWLock.ptr.prototype.Lock = function() {
		var m;
		m = this;
	};
	mockRWLock.prototype.Lock = function() { return this.$val.Lock(); };
	mockRWLock.ptr.prototype.Unlock = function() {
		var m;
		m = this;
	};
	mockRWLock.prototype.Unlock = function() { return this.$val.Unlock(); };
	mockRWLock.ptr.prototype.RLock = function() {
		var m;
		m = this;
	};
	mockRWLock.prototype.RLock = function() { return this.$val.RLock(); };
	mockRWLock.ptr.prototype.RUnlock = function() {
		var m;
		m = this;
	};
	mockRWLock.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	Input.ptr.prototype.RuneBuffer = function() {
		var i;
		i = this;
		return i.runeBuffer;
	};
	Input.prototype.RuneBuffer = function() { return this.$val.RuneBuffer(); };
	Input.ptr.prototype.ClearRuneBuffer = function() {
		var i;
		i = this;
		i.runeBuffer = sliceType$1.nil;
	};
	Input.prototype.ClearRuneBuffer = function() { return this.$val.ClearRuneBuffer(); };
	Input.ptr.prototype.IsKeyPressed = function(key) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _keys, _ref, _ref$1, c, c$1, i, k, key;
		i = this;
		if (!(i.keyPressed === false)) {
			_ref = (_entry = keyToCodes[Key.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$3.nil);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if ((_entry$1 = i.keyPressed[$String.keyFor(c)], _entry$1 !== undefined ? _entry$1.v : false)) {
					return true;
				}
				_i++;
			}
		}
		if (!(i.keyPressedEdge === false)) {
			_ref$1 = keyCodeToKeyEdge;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys.length)) { break; }
				_entry$2 = _ref$1[_keys[_i$1]];
				if (_entry$2 === undefined) {
					_i$1++;
					continue;
				}
				c$1 = _entry$2.k;
				k = _entry$2.v;
				if (!((k === key))) {
					_i$1++;
					continue;
				}
				if ((_entry$3 = i.keyPressedEdge[$Int.keyFor(c$1)], _entry$3 !== undefined ? _entry$3.v : false)) {
					return true;
				}
				_i$1++;
			}
		}
		return false;
	};
	Input.prototype.IsKeyPressed = function(key) { return this.$val.IsKeyPressed(key); };
	Input.ptr.prototype.IsMouseButtonPressed = function(button) {
		var _entry, _entry$1, _i, _keys, _ref, b, button, c, i;
		i = this;
		if (i.mouseButtonPressed === false) {
			i.mouseButtonPressed = $makeMap($Int.keyFor, []);
		}
		_ref = codeToMouseButton;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			c = _entry.k;
			b = _entry.v;
			if (!((b === button))) {
				_i++;
				continue;
			}
			if ((_entry$1 = i.mouseButtonPressed[$Int.keyFor(c)], _entry$1 !== undefined ? _entry$1.v : false)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Input.prototype.IsMouseButtonPressed = function(button) { return this.$val.IsMouseButtonPressed(button); };
	Input.ptr.prototype.MouseWheel = function() {
		var _tmp, _tmp$1, i, xoff, yoff;
		xoff = 0;
		yoff = 0;
		i = this;
		_tmp = 0;
		_tmp$1 = 0;
		xoff = _tmp;
		yoff = _tmp$1;
		return [xoff, yoff];
	};
	Input.prototype.MouseWheel = function() { return this.$val.MouseWheel(); };
	Input.ptr.prototype.keyDown = function(code) {
		var _key, code, i;
		i = this;
		if (i.keyPressed === false) {
			i.keyPressed = $makeMap($String.keyFor, []);
		}
		_key = code; (i.keyPressed || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
	};
	Input.prototype.keyDown = function(code) { return this.$val.keyDown(code); };
	Input.ptr.prototype.keyUp = function(code) {
		var _key, code, i;
		i = this;
		if (i.keyPressed === false) {
			i.keyPressed = $makeMap($String.keyFor, []);
		}
		_key = code; (i.keyPressed || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: false };
	};
	Input.prototype.keyUp = function(code) { return this.$val.keyUp(code); };
	Input.ptr.prototype.keyDownEdge = function(code) {
		var _key, code, i;
		i = this;
		if (i.keyPressedEdge === false) {
			i.keyPressedEdge = $makeMap($Int.keyFor, []);
		}
		_key = code; (i.keyPressedEdge || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: true };
	};
	Input.prototype.keyDownEdge = function(code) { return this.$val.keyDownEdge(code); };
	Input.ptr.prototype.keyUpEdge = function(code) {
		var _key, code, i;
		i = this;
		if (i.keyPressedEdge === false) {
			i.keyPressedEdge = $makeMap($Int.keyFor, []);
		}
		_key = code; (i.keyPressedEdge || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: false };
	};
	Input.prototype.keyUpEdge = function(code) { return this.$val.keyUpEdge(code); };
	Input.ptr.prototype.mouseDown = function(code) {
		var _key, code, i;
		i = this;
		if (i.mouseButtonPressed === false) {
			i.mouseButtonPressed = $makeMap($Int.keyFor, []);
		}
		_key = code; (i.mouseButtonPressed || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: true };
	};
	Input.prototype.mouseDown = function(code) { return this.$val.mouseDown(code); };
	Input.ptr.prototype.mouseUp = function(code) {
		var _key, code, i;
		i = this;
		if (i.mouseButtonPressed === false) {
			i.mouseButtonPressed = $makeMap($Int.keyFor, []);
		}
		_key = code; (i.mouseButtonPressed || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: false };
	};
	Input.prototype.mouseUp = function(code) { return this.$val.mouseUp(code); };
	Input.ptr.prototype.setMouseCursor = function(x, y) {
		var _tmp, _tmp$1, i, x, y;
		i = this;
		_tmp = x;
		_tmp$1 = y;
		i.cursorX = _tmp;
		i.cursorY = _tmp$1;
	};
	Input.prototype.setMouseCursor = function(x, y) { return this.$val.setMouseCursor(x, y); };
	Input.ptr.prototype.UpdateGamepads = function() {
		var _r, a, axes, axesNum, b, buttons, buttonsNum, gamepad, gamepads, i, id, l, nav, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; axes = $f.axes; axesNum = $f.axesNum; b = $f.b; buttons = $f.buttons; buttonsNum = $f.buttonsNum; gamepad = $f.gamepad; gamepads = $f.gamepads; i = $f.i; id = $f.id; l = $f.l; nav = $f.nav; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		nav = $clone($clone(js.Global(), js.Value).Get("navigator"), js.Value);
		if ($equal($clone(nav, js.Value).Get("getGamepads"), js.Undefined(), js.Value)) {
			$s = -1; return;
		}
		_r = $clone(nav, js.Value).Call("getGamepads", new sliceType$4([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		gamepads = $clone(_r, js.Value);
		l = $clone($clone(gamepads, js.Value).Get("length"), js.Value).Int();
		id = 0;
		while (true) {
			if (!(id < l)) { break; }
			(x = i.gamepads, ((id < 0 || id >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[id])).valid = false;
			gamepad = $clone($clone(gamepads, js.Value).Index(id), js.Value);
			if ($equal(gamepad, js.Undefined(), js.Value) || $equal(gamepad, js.Null(), js.Value)) {
				id = id + (1) >> 0;
				continue;
			}
			(x$1 = i.gamepads, ((id < 0 || id >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[id])).valid = true;
			axes = $clone($clone(gamepad, js.Value).Get("axes"), js.Value);
			axesNum = $clone($clone(axes, js.Value).Get("length"), js.Value).Int();
			(x$2 = i.gamepads, ((id < 0 || id >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[id])).axisNum = axesNum;
			a = 0;
			while (true) {
				if (!(a < 16)) { break; }
				if (axesNum <= a) {
					(x$3 = (x$4 = i.gamepads, ((id < 0 || id >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[id])).axes, ((a < 0 || a >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[a] = 0));
					a = a + (1) >> 0;
					continue;
				}
				(x$5 = (x$6 = i.gamepads, ((id < 0 || id >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[id])).axes, ((a < 0 || a >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[a] = $clone($clone(axes, js.Value).Index(a), js.Value).Float()));
				a = a + (1) >> 0;
			}
			buttons = $clone($clone(gamepad, js.Value).Get("buttons"), js.Value);
			buttonsNum = $clone($clone(buttons, js.Value).Get("length"), js.Value).Int();
			(x$7 = i.gamepads, ((id < 0 || id >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[id])).buttonNum = buttonsNum;
			b = 0;
			while (true) {
				if (!(b < 256)) { break; }
				if (buttonsNum <= b) {
					(x$8 = (x$9 = i.gamepads, ((id < 0 || id >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[id])).buttonPressed, ((b < 0 || b >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[b] = false));
					b = b + (1) >> 0;
					continue;
				}
				(x$10 = (x$11 = i.gamepads, ((id < 0 || id >= x$11.length) ? ($throwRuntimeError("index out of range"), undefined) : x$11[id])).buttonPressed, ((b < 0 || b >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[b] = $clone($clone($clone(buttons, js.Value).Index(b), js.Value).Get("pressed"), js.Value).Bool()));
				b = b + (1) >> 0;
			}
			id = id + (1) >> 0;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Input.ptr.prototype.UpdateGamepads }; } $f._r = _r; $f.a = a; $f.axes = axes; $f.axesNum = axesNum; $f.b = b; $f.buttons = buttons; $f.buttonsNum = buttonsNum; $f.gamepad = gamepad; $f.gamepads = gamepads; $f.i = i; $f.id = id; $f.l = l; $f.nav = nav; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Input.prototype.UpdateGamepads = function() { return this.$val.UpdateGamepads(); };
	OnKeyDown = function(e) {
		var _entry, _entry$1, _entry$10, _entry$11, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _r, _r$1, c, code, cs, e, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$11 = $f._entry$11; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _r = $f._r; _r$1 = $f._r$1; c = $f.c; code = $f.code; cs = $f.cs; e = $f.e; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone($clone(e, js.Value).Get("code"), js.Value);
		/* */ if ($equal(c, js.Undefined(), js.Value)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($equal(c, js.Undefined(), js.Value)) { */ case 1:
			code = $clone($clone(e, js.Value).Get("keyCode"), js.Value).Int();
			/* */ if (((_entry = keyCodeToKeyEdge[$Int.keyFor(code)], _entry !== undefined ? _entry.v : 0) === 99) || ((_entry$1 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$1 !== undefined ? _entry$1.v : 0) === 44) || ((_entry$2 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$2 !== undefined ? _entry$2.v : 0) === 81) || ((_entry$3 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$3 !== undefined ? _entry$3.v : 0) === 91) || ((_entry$4 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$4 !== undefined ? _entry$4.v : 0) === 39) || ((_entry$5 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$5 !== undefined ? _entry$5.v : 0) === 98)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((_entry = keyCodeToKeyEdge[$Int.keyFor(code)], _entry !== undefined ? _entry.v : 0) === 99) || ((_entry$1 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$1 !== undefined ? _entry$1.v : 0) === 44) || ((_entry$2 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$2 !== undefined ? _entry$2.v : 0) === 81) || ((_entry$3 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$3 !== undefined ? _entry$3.v : 0) === 91) || ((_entry$4 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$4 !== undefined ? _entry$4.v : 0) === 39) || ((_entry$5 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$5 !== undefined ? _entry$5.v : 0) === 98)) { */ case 3:
				_r = $clone(e, js.Value).Call("preventDefault", new sliceType$4([])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
			/* } */ case 4:
			theInput.keyDownEdge(code);
			$s = -1; return;
		/* } */ case 2:
		cs = $clone(c, js.Value).String();
		/* */ if (cs === (x = (_entry$6 = keyToCodes[Key.keyFor(99)], _entry$6 !== undefined ? _entry$6.v : sliceType$3.nil), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) || cs === (x$1 = (_entry$7 = keyToCodes[Key.keyFor(44)], _entry$7 !== undefined ? _entry$7.v : sliceType$3.nil), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) || cs === (x$2 = (_entry$8 = keyToCodes[Key.keyFor(81)], _entry$8 !== undefined ? _entry$8.v : sliceType$3.nil), (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) || cs === (x$3 = (_entry$9 = keyToCodes[Key.keyFor(91)], _entry$9 !== undefined ? _entry$9.v : sliceType$3.nil), (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) || cs === (x$4 = (_entry$10 = keyToCodes[Key.keyFor(39)], _entry$10 !== undefined ? _entry$10.v : sliceType$3.nil), (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])) || cs === (x$5 = (_entry$11 = keyToCodes[Key.keyFor(98)], _entry$11 !== undefined ? _entry$11.v : sliceType$3.nil), (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (cs === (x = (_entry$6 = keyToCodes[Key.keyFor(99)], _entry$6 !== undefined ? _entry$6.v : sliceType$3.nil), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) || cs === (x$1 = (_entry$7 = keyToCodes[Key.keyFor(44)], _entry$7 !== undefined ? _entry$7.v : sliceType$3.nil), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) || cs === (x$2 = (_entry$8 = keyToCodes[Key.keyFor(81)], _entry$8 !== undefined ? _entry$8.v : sliceType$3.nil), (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) || cs === (x$3 = (_entry$9 = keyToCodes[Key.keyFor(91)], _entry$9 !== undefined ? _entry$9.v : sliceType$3.nil), (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) || cs === (x$4 = (_entry$10 = keyToCodes[Key.keyFor(39)], _entry$10 !== undefined ? _entry$10.v : sliceType$3.nil), (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])) || cs === (x$5 = (_entry$11 = keyToCodes[Key.keyFor(98)], _entry$11 !== undefined ? _entry$11.v : sliceType$3.nil), (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]))) { */ case 6:
			_r$1 = $clone(e, js.Value).Call("preventDefault", new sliceType$4([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 7:
		theInput.keyDown(cs);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OnKeyDown }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$11 = _entry$11; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.code = code; $f.cs = cs; $f.e = e; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.OnKeyDown = OnKeyDown;
	OnKeyPress = function(e) {
		var e, r;
		r = (($clone($clone(e, js.Value).Get("charCode"), js.Value).Int() >> 0));
		if (unicode.IsPrint(r)) {
			theInput.runeBuffer = $append(theInput.runeBuffer, r);
		}
	};
	$pkg.OnKeyPress = OnKeyPress;
	OnKeyUp = function(e) {
		var code, code$1, e;
		if ($equal($clone(e, js.Value).Get("code"), js.Undefined(), js.Value)) {
			code = $clone($clone(e, js.Value).Get("keyCode"), js.Value).Int();
			theInput.keyUpEdge(code);
			return;
		}
		code$1 = $clone($clone(e, js.Value).Get("code"), js.Value).String();
		theInput.keyUp(code$1);
	};
	$pkg.OnKeyUp = OnKeyUp;
	OnMouseDown = function(e) {
		var button, e;
		button = $clone($clone(e, js.Value).Get("button"), js.Value).Int();
		theInput.mouseDown(button);
		setMouseCursorFromEvent($clone(e, js.Value));
	};
	$pkg.OnMouseDown = OnMouseDown;
	OnMouseUp = function(e) {
		var button, e;
		button = $clone($clone(e, js.Value).Get("button"), js.Value).Int();
		theInput.mouseUp(button);
		setMouseCursorFromEvent($clone(e, js.Value));
	};
	$pkg.OnMouseUp = OnMouseUp;
	OnMouseMove = function(e) {
		var e;
		setMouseCursorFromEvent($clone(e, js.Value));
	};
	$pkg.OnMouseMove = OnMouseMove;
	OnTouchStart = function(e) {
		var e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = theInput.updateTouches($clone(e, js.Value)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OnTouchStart }; } $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.OnTouchStart = OnTouchStart;
	OnTouchEnd = function(e) {
		var e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = theInput.updateTouches($clone(e, js.Value)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OnTouchEnd }; } $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.OnTouchEnd = OnTouchEnd;
	OnTouchMove = function(e) {
		var e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = theInput.updateTouches($clone(e, js.Value)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OnTouchMove }; } $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.OnTouchMove = OnTouchMove;
	setMouseCursorFromEvent = function(e) {
		var _tmp, _tmp$1, e, x, y;
		_tmp = $clone($clone(e, js.Value).Get("clientX"), js.Value).Int();
		_tmp$1 = $clone($clone(e, js.Value).Get("clientY"), js.Value).Int();
		x = _tmp;
		y = _tmp$1;
		theInput.setMouseCursor(x, y);
	};
	Input.ptr.prototype.updateTouches = function(e) {
		var _r, e, i, i$1, id, j, jj, ts, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; i = $f.i; i$1 = $f.i$1; id = $f.id; j = $f.j; jj = $f.jj; ts = $f.ts; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		j = $clone($clone(e, js.Value).Get("targetTouches"), js.Value);
		ts = $makeSlice(sliceType, $clone($clone(j, js.Value).Get("length"), js.Value).Int());
		i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(i$1 < ts.$length)) { break; } */ if(!(i$1 < ts.$length)) { $s = 2; continue; }
			_r = $clone(j, js.Value).Call("item", new sliceType$4([new $Int(i$1)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			jj = $clone(_r, js.Value);
			id = $clone($clone(jj, js.Value).Get("identifier"), js.Value).Int();
			((i$1 < 0 || i$1 >= ts.$length) ? ($throwRuntimeError("index out of range"), undefined) : ts.$array[ts.$offset + i$1] = new Touch.ptr(id, $clone($clone(jj, js.Value).Get("clientX"), js.Value).Int(), $clone($clone(jj, js.Value).Get("clientY"), js.Value).Int()));
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i.touches = ts;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Input.ptr.prototype.updateTouches }; } $f._r = _r; $f.e = e; $f.i = i; $f.i$1 = i$1; $f.id = id; $f.j = j; $f.jj = jj; $f.ts = ts; $f.$s = $s; $f.$r = $r; return $f;
	};
	Input.prototype.updateTouches = function(e) { return this.$val.updateTouches(e); };
	ptrType.methods = [{prop: "ID", name: "ID", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([], [$Int, $Int], false)}];
	mockRWLock.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$1.methods = [{prop: "CursorPosition", name: "CursorPosition", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "GamepadIDs", name: "GamepadIDs", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "GamepadAxisNum", name: "GamepadAxisNum", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "GamepadAxis", name: "GamepadAxis", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "GamepadButtonNum", name: "GamepadButtonNum", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "IsGamepadButtonPressed", name: "IsGamepadButtonPressed", pkg: "", typ: $funcType([$Int, GamepadButton], [$Bool], false)}, {prop: "Touches", name: "Touches", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "RuneBuffer", name: "RuneBuffer", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "ClearRuneBuffer", name: "ClearRuneBuffer", pkg: "", typ: $funcType([], [], false)}, {prop: "IsKeyPressed", name: "IsKeyPressed", pkg: "", typ: $funcType([Key], [$Bool], false)}, {prop: "IsMouseButtonPressed", name: "IsMouseButtonPressed", pkg: "", typ: $funcType([MouseButton], [$Bool], false)}, {prop: "MouseWheel", name: "MouseWheel", pkg: "", typ: $funcType([], [$Float64, $Float64], false)}, {prop: "keyDown", name: "keyDown", pkg: "github.com/hajimehoshi/ebiten/internal/input", typ: $funcType([$String], [], false)}, {prop: "keyUp", name: "keyUp", pkg: "github.com/hajimehoshi/ebiten/internal/input", typ: $funcType([$String], [], false)}, {prop: "keyDownEdge", name: "keyDownEdge", pkg: "github.com/hajimehoshi/ebiten/internal/input", typ: $funcType([$Int], [], false)}, {prop: "keyUpEdge", name: "keyUpEdge", pkg: "github.com/hajimehoshi/ebiten/internal/input", typ: $funcType([$Int], [], false)}, {prop: "mouseDown", name: "mouseDown", pkg: "github.com/hajimehoshi/ebiten/internal/input", typ: $funcType([$Int], [], false)}, {prop: "mouseUp", name: "mouseUp", pkg: "github.com/hajimehoshi/ebiten/internal/input", typ: $funcType([$Int], [], false)}, {prop: "setMouseCursor", name: "setMouseCursor", pkg: "github.com/hajimehoshi/ebiten/internal/input", typ: $funcType([$Int, $Int], [], false)}, {prop: "UpdateGamepads", name: "UpdateGamepads", pkg: "", typ: $funcType([], [], false)}, {prop: "updateTouches", name: "updateTouches", pkg: "github.com/hajimehoshi/ebiten/internal/input", typ: $funcType([js.Value], [], false)}];
	gamePad.init("github.com/hajimehoshi/ebiten/internal/input", [{prop: "valid", name: "valid", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "axisNum", name: "axisNum", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "axes", name: "axes", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "buttonNum", name: "buttonNum", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "buttonPressed", name: "buttonPressed", anonymous: false, exported: false, typ: arrayType$1, tag: ""}]);
	Touch.init("github.com/hajimehoshi/ebiten/internal/input", [{prop: "id", name: "id", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "x", name: "x", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "y", name: "y", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	mockRWLock.init("", []);
	Input.init("github.com/hajimehoshi/ebiten/internal/input", [{prop: "keyPressed", name: "keyPressed", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "keyPressedEdge", name: "keyPressedEdge", anonymous: false, exported: false, typ: mapType$1, tag: ""}, {prop: "mouseButtonPressed", name: "mouseButtonPressed", anonymous: false, exported: false, typ: mapType$1, tag: ""}, {prop: "cursorX", name: "cursorX", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cursorY", name: "cursorY", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "gamepads", name: "gamepads", anonymous: false, exported: false, typ: arrayType$2, tag: ""}, {prop: "touches", name: "touches", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "runeBuffer", name: "runeBuffer", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "m", name: "m", anonymous: false, exported: false, typ: mockRWLock, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		theInput = new Input.ptr(false, false, false, 0, 0, arrayType$2.zero(), sliceType.nil, sliceType$1.nil, new mockRWLock.ptr());
		emptyIDs = new sliceType$2([]);
		emptyTouches = new sliceType([]);
		keyToCodes = $makeMap(Key.keyFor, [{ k: 0, v: new sliceType$3(["Digit0"]) }, { k: 1, v: new sliceType$3(["Digit1"]) }, { k: 2, v: new sliceType$3(["Digit2"]) }, { k: 3, v: new sliceType$3(["Digit3"]) }, { k: 4, v: new sliceType$3(["Digit4"]) }, { k: 5, v: new sliceType$3(["Digit5"]) }, { k: 6, v: new sliceType$3(["Digit6"]) }, { k: 7, v: new sliceType$3(["Digit7"]) }, { k: 8, v: new sliceType$3(["Digit8"]) }, { k: 9, v: new sliceType$3(["Digit9"]) }, { k: 10, v: new sliceType$3(["KeyA"]) }, { k: 36, v: new sliceType$3(["AltLeft", "AltRight"]) }, { k: 37, v: new sliceType$3(["Quote"]) }, { k: 11, v: new sliceType$3(["KeyB"]) }, { k: 38, v: new sliceType$3(["Backslash"]) }, { k: 39, v: new sliceType$3(["Backspace"]) }, { k: 12, v: new sliceType$3(["KeyC"]) }, { k: 40, v: new sliceType$3(["CapsLock"]) }, { k: 41, v: new sliceType$3(["Comma"]) }, { k: 42, v: new sliceType$3(["ControlLeft", "ControlRight"]) }, { k: 13, v: new sliceType$3(["KeyD"]) }, { k: 43, v: new sliceType$3(["Delete"]) }, { k: 44, v: new sliceType$3(["ArrowDown"]) }, { k: 14, v: new sliceType$3(["KeyE"]) }, { k: 45, v: new sliceType$3(["End"]) }, { k: 46, v: new sliceType$3(["Enter"]) }, { k: 47, v: new sliceType$3(["Equal"]) }, { k: 48, v: new sliceType$3(["Escape"]) }, { k: 15, v: new sliceType$3(["KeyF"]) }, { k: 49, v: new sliceType$3(["F1"]) }, { k: 58, v: new sliceType$3(["F10"]) }, { k: 59, v: new sliceType$3(["F11"]) }, { k: 60, v: new sliceType$3(["F12"]) }, { k: 50, v: new sliceType$3(["F2"]) }, { k: 51, v: new sliceType$3(["F3"]) }, { k: 52, v: new sliceType$3(["F4"]) }, { k: 53, v: new sliceType$3(["F5"]) }, { k: 54, v: new sliceType$3(["F6"]) }, { k: 55, v: new sliceType$3(["F7"]) }, { k: 56, v: new sliceType$3(["F8"]) }, { k: 57, v: new sliceType$3(["F9"]) }, { k: 16, v: new sliceType$3(["KeyG"]) }, { k: 61, v: new sliceType$3(["Backquote"]) }, { k: 17, v: new sliceType$3(["KeyH"]) }, { k: 62, v: new sliceType$3(["Home"]) }, { k: 18, v: new sliceType$3(["KeyI"]) }, { k: 63, v: new sliceType$3(["Insert"]) }, { k: 19, v: new sliceType$3(["KeyJ"]) }, { k: 20, v: new sliceType$3(["KeyK"]) }, { k: 64, v: new sliceType$3(["Numpad0"]) }, { k: 65, v: new sliceType$3(["Numpad1"]) }, { k: 66, v: new sliceType$3(["Numpad2"]) }, { k: 67, v: new sliceType$3(["Numpad3"]) }, { k: 68, v: new sliceType$3(["Numpad4"]) }, { k: 69, v: new sliceType$3(["Numpad5"]) }, { k: 70, v: new sliceType$3(["Numpad6"]) }, { k: 71, v: new sliceType$3(["Numpad7"]) }, { k: 72, v: new sliceType$3(["Numpad8"]) }, { k: 73, v: new sliceType$3(["Numpad9"]) }, { k: 74, v: new sliceType$3(["NumpadAdd"]) }, { k: 75, v: new sliceType$3(["NumpadDecimal"]) }, { k: 76, v: new sliceType$3(["NumpadDivide"]) }, { k: 77, v: new sliceType$3(["NumpadEnter"]) }, { k: 78, v: new sliceType$3(["NumpadEqual"]) }, { k: 79, v: new sliceType$3(["NumpadMultiply"]) }, { k: 80, v: new sliceType$3(["NumpadSubtract"]) }, { k: 21, v: new sliceType$3(["KeyL"]) }, { k: 81, v: new sliceType$3(["ArrowLeft"]) }, { k: 82, v: new sliceType$3(["BracketLeft"]) }, { k: 22, v: new sliceType$3(["KeyM"]) }, { k: 83, v: new sliceType$3(["ContextMenu"]) }, { k: 84, v: new sliceType$3(["Minus"]) }, { k: 23, v: new sliceType$3(["KeyN"]) }, { k: 85, v: new sliceType$3(["NumLock"]) }, { k: 24, v: new sliceType$3(["KeyO"]) }, { k: 25, v: new sliceType$3(["KeyP"]) }, { k: 86, v: new sliceType$3(["PageDown"]) }, { k: 87, v: new sliceType$3(["PageUp"]) }, { k: 88, v: new sliceType$3(["Pause"]) }, { k: 89, v: new sliceType$3(["Period"]) }, { k: 90, v: new sliceType$3(["PrintScreen"]) }, { k: 26, v: new sliceType$3(["KeyQ"]) }, { k: 27, v: new sliceType$3(["KeyR"]) }, { k: 91, v: new sliceType$3(["ArrowRight"]) }, { k: 92, v: new sliceType$3(["BracketRight"]) }, { k: 28, v: new sliceType$3(["KeyS"]) }, { k: 93, v: new sliceType$3(["ScrollLock"]) }, { k: 94, v: new sliceType$3(["Semicolon"]) }, { k: 95, v: new sliceType$3(["ShiftLeft", "ShiftRight"]) }, { k: 96, v: new sliceType$3(["Slash"]) }, { k: 97, v: new sliceType$3(["Space"]) }, { k: 29, v: new sliceType$3(["KeyT"]) }, { k: 98, v: new sliceType$3(["Tab"]) }, { k: 30, v: new sliceType$3(["KeyU"]) }, { k: 99, v: new sliceType$3(["ArrowUp"]) }, { k: 31, v: new sliceType$3(["KeyV"]) }, { k: 32, v: new sliceType$3(["KeyW"]) }, { k: 33, v: new sliceType$3(["KeyX"]) }, { k: 34, v: new sliceType$3(["KeyY"]) }, { k: 35, v: new sliceType$3(["KeyZ"]) }]);
		keyCodeToKeyEdge = $makeMap($Int.keyFor, [{ k: 8, v: 39 }, { k: 9, v: 98 }, { k: 13, v: 46 }, { k: 16, v: 95 }, { k: 17, v: 42 }, { k: 18, v: 36 }, { k: 19, v: 88 }, { k: 20, v: 40 }, { k: 27, v: 48 }, { k: 32, v: 97 }, { k: 33, v: 87 }, { k: 34, v: 86 }, { k: 35, v: 45 }, { k: 36, v: 62 }, { k: 37, v: 81 }, { k: 38, v: 99 }, { k: 39, v: 91 }, { k: 40, v: 44 }, { k: 45, v: 63 }, { k: 46, v: 43 }, { k: 48, v: 0 }, { k: 49, v: 1 }, { k: 50, v: 2 }, { k: 51, v: 3 }, { k: 52, v: 4 }, { k: 53, v: 5 }, { k: 54, v: 6 }, { k: 55, v: 7 }, { k: 56, v: 8 }, { k: 57, v: 9 }, { k: 65, v: 10 }, { k: 66, v: 11 }, { k: 67, v: 12 }, { k: 68, v: 13 }, { k: 69, v: 14 }, { k: 70, v: 15 }, { k: 71, v: 16 }, { k: 72, v: 17 }, { k: 73, v: 18 }, { k: 74, v: 19 }, { k: 75, v: 20 }, { k: 76, v: 21 }, { k: 77, v: 22 }, { k: 78, v: 23 }, { k: 79, v: 24 }, { k: 80, v: 25 }, { k: 81, v: 26 }, { k: 82, v: 27 }, { k: 83, v: 28 }, { k: 84, v: 29 }, { k: 85, v: 30 }, { k: 86, v: 31 }, { k: 87, v: 32 }, { k: 88, v: 33 }, { k: 89, v: 34 }, { k: 90, v: 35 }, { k: 93, v: 83 }, { k: 96, v: 64 }, { k: 97, v: 65 }, { k: 98, v: 66 }, { k: 99, v: 67 }, { k: 100, v: 68 }, { k: 101, v: 69 }, { k: 102, v: 70 }, { k: 103, v: 71 }, { k: 104, v: 72 }, { k: 105, v: 73 }, { k: 106, v: 79 }, { k: 107, v: 74 }, { k: 109, v: 80 }, { k: 110, v: 75 }, { k: 111, v: 76 }, { k: 112, v: 49 }, { k: 113, v: 50 }, { k: 114, v: 51 }, { k: 115, v: 52 }, { k: 116, v: 53 }, { k: 117, v: 54 }, { k: 118, v: 55 }, { k: 119, v: 56 }, { k: 120, v: 57 }, { k: 121, v: 58 }, { k: 122, v: 59 }, { k: 123, v: 60 }, { k: 144, v: 85 }, { k: 145, v: 93 }, { k: 186, v: 94 }, { k: 187, v: 47 }, { k: 188, v: 41 }, { k: 189, v: 84 }, { k: 190, v: 89 }, { k: 191, v: 96 }, { k: 192, v: 61 }, { k: 219, v: 82 }, { k: 220, v: 38 }, { k: 221, v: 92 }, { k: 222, v: 37 }]);
		codeToMouseButton = $makeMap($Int.keyFor, [{ k: 0, v: 0 }, { k: 1, v: 2 }, { k: 2, v: 1 }]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/bits"] = (function() {
	var $pkg = {}, $init, rev8tab, Reverse8, Reverse16;
	Reverse8 = function(x) {
		var x;
		return ((x < 0 || x >= rev8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : rev8tab[x]);
	};
	$pkg.Reverse8 = Reverse8;
	Reverse16 = function(x) {
		var x, x$1, x$2;
		return ((((x$1 = x >>> 8 << 16 >>> 16, ((x$1 < 0 || x$1 >= rev8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : rev8tab[x$1])) << 16 >>> 16)) | ((((x$2 = (x & 255) >>> 0, ((x$2 < 0 || x$2 >= rev8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : rev8tab[x$2])) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	$pkg.Reverse16 = Reverse16;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rev8tab = $toNativeArray($kindUint8, [0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, reflect, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort, maxDepth;
	reflect = $packages["reflect"];
	insertionSort = function(data, a, b) {
		var _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = ((((((lo + hi >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q = ((hi - lo >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth$1) {
		var _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth$1 === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			maxDepth$1 = maxDepth$1 - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var _r, data, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		$r = quickSort(data, 0, n, maxDepth(n)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f._r = _r; $f.data = data; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	maxDepth = function(n) {
		var depth, i, n;
		depth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			depth = depth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		return $imul(depth, 2);
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/flate"] = (function() {
	var $pkg = {}, $init, bufio, fmt, io, math, bits, sort, strconv, sync, compressionLevel, compressor, dictWriter, Writer, tableEntry, deflateFast, dictDecoder, huffmanBitWriter, hcode, huffmanEncoder, literalNode, levelInfo, byLiteral, byFreq, CorruptInputError, InternalError, Resetter, huffmanDecoder, Reader, decompressor, token, ptrType, arrayType, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, ptrType$1, sliceType$5, ptrType$2, sliceType$6, ptrType$3, ptrType$4, arrayType$1, arrayType$2, arrayType$3, ptrType$5, ptrType$6, arrayType$4, arrayType$5, arrayType$6, sliceType$7, sliceType$8, sliceType$9, arrayType$7, arrayType$8, arrayType$9, arrayType$10, ptrType$7, ptrType$8, arrayType$11, ptrType$9, sliceType$10, ptrType$10, arrayType$12, arrayType$13, ptrType$11, arrayType$14, ptrType$12, arrayType$15, funcType, funcType$1, funcType$2, ptrType$13, ptrType$14, funcType$3, levels, lengthExtraBits, lengthBase, offsetExtraBits, offsetBase, codegenOrder, huffOffset, fixedLiteralEncoding, fixedOffsetEncoding, fixedOnce, fixedHuffmanDecoder, fixedHuffmanDecoder$24ptr, codeOrder, lengthCodes, offsetCodes, hash4, bulkHash4, matchLen, NewWriter, NewWriterDict, load32, load64, hash, newDeflateFast, emitLiteral, newHuffmanBitWriter, init, histogram, maxNode, newHuffmanEncoder, generateFixedLiteralEncoding, generateFixedOffsetEncoding, reverseBits, makeReader, fixedHuffmanDecoderInit, NewReader, NewReaderDict, literalToken, matchToken, lengthCode, offsetCode;
	bufio = $packages["bufio"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	math = $packages["math"];
	bits = $packages["math/bits"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	compressionLevel = $pkg.compressionLevel = $newType(0, $kindStruct, "flate.compressionLevel", true, "compress/flate", false, function(level_, good_, lazy_, nice_, chain_, fastSkipHashing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.level = 0;
			this.good = 0;
			this.lazy = 0;
			this.nice = 0;
			this.chain = 0;
			this.fastSkipHashing = 0;
			return;
		}
		this.level = level_;
		this.good = good_;
		this.lazy = lazy_;
		this.nice = nice_;
		this.chain = chain_;
		this.fastSkipHashing = fastSkipHashing_;
	});
	compressor = $pkg.compressor = $newType(0, $kindStruct, "flate.compressor", true, "compress/flate", false, function(compressionLevel_, w_, bulkHasher_, fill_, step_, sync_, bestSpeed_, chainHead_, hashHead_, hashPrev_, hashOffset_, index_, window_, windowEnd_, blockStart_, byteAvailable_, tokens_, length_, offset_, hash_, maxInsertIndex_, err_, hashMatch_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.compressionLevel = new compressionLevel.ptr(0, 0, 0, 0, 0, 0);
			this.w = ptrType$3.nil;
			this.bulkHasher = $throwNilPointerError;
			this.fill = $throwNilPointerError;
			this.step = $throwNilPointerError;
			this.sync = false;
			this.bestSpeed = ptrType$4.nil;
			this.chainHead = 0;
			this.hashHead = arrayType$1.zero();
			this.hashPrev = arrayType$2.zero();
			this.hashOffset = 0;
			this.index = 0;
			this.window = sliceType$4.nil;
			this.windowEnd = 0;
			this.blockStart = 0;
			this.byteAvailable = false;
			this.tokens = sliceType$5.nil;
			this.length = 0;
			this.offset = 0;
			this.hash = 0;
			this.maxInsertIndex = 0;
			this.err = $ifaceNil;
			this.hashMatch = arrayType$3.zero();
			return;
		}
		this.compressionLevel = compressionLevel_;
		this.w = w_;
		this.bulkHasher = bulkHasher_;
		this.fill = fill_;
		this.step = step_;
		this.sync = sync_;
		this.bestSpeed = bestSpeed_;
		this.chainHead = chainHead_;
		this.hashHead = hashHead_;
		this.hashPrev = hashPrev_;
		this.hashOffset = hashOffset_;
		this.index = index_;
		this.window = window_;
		this.windowEnd = windowEnd_;
		this.blockStart = blockStart_;
		this.byteAvailable = byteAvailable_;
		this.tokens = tokens_;
		this.length = length_;
		this.offset = offset_;
		this.hash = hash_;
		this.maxInsertIndex = maxInsertIndex_;
		this.err = err_;
		this.hashMatch = hashMatch_;
	});
	dictWriter = $pkg.dictWriter = $newType(0, $kindStruct, "flate.dictWriter", true, "compress/flate", false, function(w_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = $ifaceNil;
			return;
		}
		this.w = w_;
	});
	Writer = $pkg.Writer = $newType(0, $kindStruct, "flate.Writer", true, "compress/flate", true, function(d_, dict_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = new compressor.ptr(new compressionLevel.ptr(0, 0, 0, 0, 0, 0), ptrType$3.nil, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, false, ptrType$4.nil, 0, arrayType$1.zero(), arrayType$2.zero(), 0, 0, sliceType$4.nil, 0, 0, false, sliceType$5.nil, 0, 0, 0, 0, $ifaceNil, arrayType$3.zero());
			this.dict = sliceType$4.nil;
			return;
		}
		this.d = d_;
		this.dict = dict_;
	});
	tableEntry = $pkg.tableEntry = $newType(0, $kindStruct, "flate.tableEntry", true, "compress/flate", false, function(val_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.val = 0;
			this.offset = 0;
			return;
		}
		this.val = val_;
		this.offset = offset_;
	});
	deflateFast = $pkg.deflateFast = $newType(0, $kindStruct, "flate.deflateFast", true, "compress/flate", false, function(table_, prev_, cur_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.table = arrayType$4.zero();
			this.prev = sliceType$4.nil;
			this.cur = 0;
			return;
		}
		this.table = table_;
		this.prev = prev_;
		this.cur = cur_;
	});
	dictDecoder = $pkg.dictDecoder = $newType(0, $kindStruct, "flate.dictDecoder", true, "compress/flate", false, function(hist_, wrPos_, rdPos_, full_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hist = sliceType$4.nil;
			this.wrPos = 0;
			this.rdPos = 0;
			this.full = false;
			return;
		}
		this.hist = hist_;
		this.wrPos = wrPos_;
		this.rdPos = rdPos_;
		this.full = full_;
	});
	huffmanBitWriter = $pkg.huffmanBitWriter = $newType(0, $kindStruct, "flate.huffmanBitWriter", true, "compress/flate", false, function(writer_, bits_, nbits_, bytes_, codegenFreq_, nbytes_, literalFreq_, offsetFreq_, codegen_, literalEncoding_, offsetEncoding_, codegenEncoding_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writer = $ifaceNil;
			this.bits = new $Uint64(0, 0);
			this.nbits = 0;
			this.bytes = arrayType$5.zero();
			this.codegenFreq = arrayType$6.zero();
			this.nbytes = 0;
			this.literalFreq = sliceType$7.nil;
			this.offsetFreq = sliceType$7.nil;
			this.codegen = sliceType$4.nil;
			this.literalEncoding = ptrType.nil;
			this.offsetEncoding = ptrType.nil;
			this.codegenEncoding = ptrType.nil;
			this.err = $ifaceNil;
			return;
		}
		this.writer = writer_;
		this.bits = bits_;
		this.nbits = nbits_;
		this.bytes = bytes_;
		this.codegenFreq = codegenFreq_;
		this.nbytes = nbytes_;
		this.literalFreq = literalFreq_;
		this.offsetFreq = offsetFreq_;
		this.codegen = codegen_;
		this.literalEncoding = literalEncoding_;
		this.offsetEncoding = offsetEncoding_;
		this.codegenEncoding = codegenEncoding_;
		this.err = err_;
	});
	hcode = $pkg.hcode = $newType(0, $kindStruct, "flate.hcode", true, "compress/flate", false, function(code_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.code = 0;
			this.len = 0;
			return;
		}
		this.code = code_;
		this.len = len_;
	});
	huffmanEncoder = $pkg.huffmanEncoder = $newType(0, $kindStruct, "flate.huffmanEncoder", true, "compress/flate", false, function(codes_, freqcache_, bitCount_, lns_, lfs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.codes = sliceType$8.nil;
			this.freqcache = sliceType$9.nil;
			this.bitCount = arrayType$7.zero();
			this.lns = byLiteral.nil;
			this.lfs = byFreq.nil;
			return;
		}
		this.codes = codes_;
		this.freqcache = freqcache_;
		this.bitCount = bitCount_;
		this.lns = lns_;
		this.lfs = lfs_;
	});
	literalNode = $pkg.literalNode = $newType(0, $kindStruct, "flate.literalNode", true, "compress/flate", false, function(literal_, freq_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.literal = 0;
			this.freq = 0;
			return;
		}
		this.literal = literal_;
		this.freq = freq_;
	});
	levelInfo = $pkg.levelInfo = $newType(0, $kindStruct, "flate.levelInfo", true, "compress/flate", false, function(level_, lastFreq_, nextCharFreq_, nextPairFreq_, needed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.level = 0;
			this.lastFreq = 0;
			this.nextCharFreq = 0;
			this.nextPairFreq = 0;
			this.needed = 0;
			return;
		}
		this.level = level_;
		this.lastFreq = lastFreq_;
		this.nextCharFreq = nextCharFreq_;
		this.nextPairFreq = nextPairFreq_;
		this.needed = needed_;
	});
	byLiteral = $pkg.byLiteral = $newType(12, $kindSlice, "flate.byLiteral", true, "compress/flate", false, null);
	byFreq = $pkg.byFreq = $newType(12, $kindSlice, "flate.byFreq", true, "compress/flate", false, null);
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "flate.CorruptInputError", true, "compress/flate", true, null);
	InternalError = $pkg.InternalError = $newType(8, $kindString, "flate.InternalError", true, "compress/flate", true, null);
	Resetter = $pkg.Resetter = $newType(8, $kindInterface, "flate.Resetter", true, "compress/flate", true, null);
	huffmanDecoder = $pkg.huffmanDecoder = $newType(0, $kindStruct, "flate.huffmanDecoder", true, "compress/flate", false, function(min_, chunks_, links_, linkMask_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.min = 0;
			this.chunks = arrayType.zero();
			this.links = sliceType$1.nil;
			this.linkMask = 0;
			return;
		}
		this.min = min_;
		this.chunks = chunks_;
		this.links = links_;
		this.linkMask = linkMask_;
	});
	Reader = $pkg.Reader = $newType(8, $kindInterface, "flate.Reader", true, "compress/flate", true, null);
	decompressor = $pkg.decompressor = $newType(0, $kindStruct, "flate.decompressor", true, "compress/flate", false, function(r_, roffset_, b_, nb_, h1_, h2_, bits_, codebits_, dict_, buf_, step_, stepState_, final$12_, err_, toRead_, hl_, hd_, copyLen_, copyDist_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.roffset = new $Int64(0, 0);
			this.b = 0;
			this.nb = 0;
			this.h1 = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
			this.h2 = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
			this.bits = ptrType$11.nil;
			this.codebits = ptrType$12.nil;
			this.dict = new dictDecoder.ptr(sliceType$4.nil, 0, 0, false);
			this.buf = arrayType$15.zero();
			this.step = $throwNilPointerError;
			this.stepState = 0;
			this.final$12 = false;
			this.err = $ifaceNil;
			this.toRead = sliceType$4.nil;
			this.hl = ptrType$9.nil;
			this.hd = ptrType$9.nil;
			this.copyLen = 0;
			this.copyDist = 0;
			return;
		}
		this.r = r_;
		this.roffset = roffset_;
		this.b = b_;
		this.nb = nb_;
		this.h1 = h1_;
		this.h2 = h2_;
		this.bits = bits_;
		this.codebits = codebits_;
		this.dict = dict_;
		this.buf = buf_;
		this.step = step_;
		this.stepState = stepState_;
		this.final$12 = final$12_;
		this.err = err_;
		this.toRead = toRead_;
		this.hl = hl_;
		this.hd = hd_;
		this.copyLen = copyLen_;
		this.copyDist = copyDist_;
	});
	token = $pkg.token = $newType(4, $kindUint32, "flate.token", true, "compress/flate", false, null);
	ptrType = $ptrType(huffmanEncoder);
	arrayType = $arrayType($Uint32, 512);
	sliceType = $sliceType($Uint32);
	sliceType$1 = $sliceType(sliceType);
	sliceType$2 = $sliceType(compressionLevel);
	sliceType$3 = $sliceType($Int8);
	sliceType$4 = $sliceType($Uint8);
	ptrType$1 = $ptrType($Uint32);
	sliceType$5 = $sliceType(token);
	ptrType$2 = $ptrType(compressor);
	sliceType$6 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(huffmanBitWriter);
	ptrType$4 = $ptrType(deflateFast);
	arrayType$1 = $arrayType($Uint32, 131072);
	arrayType$2 = $arrayType($Uint32, 32768);
	arrayType$3 = $arrayType($Uint32, 257);
	ptrType$5 = $ptrType(Writer);
	ptrType$6 = $ptrType(dictWriter);
	arrayType$4 = $arrayType(tableEntry, 16384);
	arrayType$5 = $arrayType($Uint8, 248);
	arrayType$6 = $arrayType($Int32, 19);
	sliceType$7 = $sliceType($Int32);
	sliceType$8 = $sliceType(hcode);
	sliceType$9 = $sliceType(literalNode);
	arrayType$7 = $arrayType($Int32, 17);
	arrayType$8 = $arrayType(levelInfo, 16);
	arrayType$9 = $arrayType($Int32, 16);
	arrayType$10 = $arrayType(arrayType$9, 16);
	ptrType$7 = $ptrType(byLiteral);
	ptrType$8 = $ptrType(byFreq);
	arrayType$11 = $arrayType($Int, 16);
	ptrType$9 = $ptrType(huffmanDecoder);
	sliceType$10 = $sliceType($Int);
	ptrType$10 = $ptrType(decompressor);
	arrayType$12 = $arrayType($Int, 288);
	arrayType$13 = $arrayType($Int, 316);
	ptrType$11 = $ptrType(arrayType$13);
	arrayType$14 = $arrayType($Int, 19);
	ptrType$12 = $ptrType(arrayType$14);
	arrayType$15 = $arrayType($Uint8, 4);
	funcType = $funcType([sliceType$4, sliceType], [], false);
	funcType$1 = $funcType([ptrType$2, sliceType$4], [$Int], false);
	funcType$2 = $funcType([ptrType$2], [], false);
	ptrType$13 = $ptrType(dictDecoder);
	ptrType$14 = $ptrType(hcode);
	funcType$3 = $funcType([ptrType$10], [], false);
	compressor.ptr.prototype.fillDeflate = function(b) {
		var _i, _i$1, _ref, _ref$1, b, d, delta, i, i$1, n, v, v$1, x, x$1, x$2, x$3;
		d = this;
		if (d.index >= 65274) {
			$copySlice(d.window, $subslice(d.window, 32768, 65536));
			d.index = d.index - (32768) >> 0;
			d.windowEnd = d.windowEnd - (32768) >> 0;
			if (d.blockStart >= 32768) {
				d.blockStart = d.blockStart - (32768) >> 0;
			} else {
				d.blockStart = 2147483647;
			}
			d.hashOffset = d.hashOffset + (32768) >> 0;
			if (d.hashOffset > 16777216) {
				delta = d.hashOffset - 1 >> 0;
				d.hashOffset = d.hashOffset - (delta) >> 0;
				d.chainHead = d.chainHead - (delta) >> 0;
				_ref = new sliceType(d.hashPrev);
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (((v >> 0)) > delta) {
						(x = d.hashPrev, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = (((((v >> 0)) - delta >> 0) >>> 0))));
					} else {
						(x$1 = d.hashPrev, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = 0));
					}
					_i++;
				}
				_ref$1 = new sliceType(d.hashHead);
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					if (((v$1 >> 0)) > delta) {
						(x$2 = d.hashHead, ((i$1 < 0 || i$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i$1] = (((((v$1 >> 0)) - delta >> 0) >>> 0))));
					} else {
						(x$3 = d.hashHead, ((i$1 < 0 || i$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i$1] = 0));
					}
					_i$1++;
				}
			}
		}
		n = $copySlice($subslice(d.window, d.windowEnd), b);
		d.windowEnd = d.windowEnd + (n) >> 0;
		return n;
	};
	compressor.prototype.fillDeflate = function(b) { return this.$val.fillDeflate(b); };
	compressor.ptr.prototype.writeBlock = function(tokens, index) {
		var d, index, tokens, window, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; index = $f.index; tokens = $f.tokens; window = $f.window; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (index > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index > 0) { */ case 1:
			window = sliceType$4.nil;
			if (d.blockStart <= index) {
				window = $subslice(d.window, d.blockStart, index);
			}
			d.blockStart = index;
			$r = d.w.writeBlock(tokens, false, window); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return d.w.err;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.writeBlock }; } $f.d = d; $f.index = index; $f.tokens = tokens; $f.window = window; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.writeBlock = function(tokens, index) { return this.$val.writeBlock(tokens, index); };
	compressor.ptr.prototype.fillWindow = function(b) {
		var _i, _q, _ref, b, d, di, dst, dstSize, end, hh, i, index, j, loops, n, newH, toCheck, val, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _q = $f._q; _ref = $f._ref; b = $f.b; d = $f.d; di = $f.di; dst = $f.dst; dstSize = $f.dstSize; end = $f.end; hh = $f.hh; i = $f.i; index = $f.index; j = $f.j; loops = $f.loops; n = $f.n; newH = $f.newH; toCheck = $f.toCheck; val = $f.val; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.compressionLevel.level < 2) {
			$s = -1; return;
		}
		if (!((d.index === 0)) || !((d.windowEnd === 0))) {
			$panic(new $String("internal error: fillWindow called with stale data"));
		}
		if (b.$length > 32768) {
			b = $subslice(b, (b.$length - 32768 >> 0));
		}
		n = $copySlice(d.window, b);
		loops = (_q = (((n + 256 >> 0) - 4 >> 0)) / 256, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		j = 0;
		/* while (true) { */ case 1:
			/* if (!(j < loops)) { break; } */ if(!(j < loops)) { $s = 2; continue; }
			index = $imul(j, 256);
			end = ((index + 256 >> 0) + 4 >> 0) - 1 >> 0;
			if (end > n) {
				end = n;
			}
			toCheck = $subslice(d.window, index, end);
			dstSize = (toCheck.$length - 4 >> 0) + 1 >> 0;
			/* */ if (dstSize <= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (dstSize <= 0) { */ case 3:
				j = j + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			dst = $subslice(new sliceType(d.hashMatch), 0, dstSize);
			$r = d.bulkHasher(toCheck, dst); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			newH = 0;
			_ref = dst;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				val = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				di = i + index >> 0;
				newH = val;
				hh = $indexPtr(d.hashHead, ((newH & 131071) >>> 0), ptrType$1);
				(x = d.hashPrev, x$1 = di & 32767, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = hh.$get()));
				hh.$set((((di + d.hashOffset >> 0) >>> 0)));
				_i++;
			}
			d.hash = newH;
			j = j + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		d.windowEnd = n;
		d.index = n;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.fillWindow }; } $f._i = _i; $f._q = _q; $f._ref = _ref; $f.b = b; $f.d = d; $f.di = di; $f.dst = dst; $f.dstSize = dstSize; $f.end = end; $f.hh = hh; $f.i = i; $f.index = index; $f.j = j; $f.loops = loops; $f.n = n; $f.newH = newH; $f.toCheck = toCheck; $f.val = val; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.fillWindow = function(b) { return this.$val.fillWindow(b); };
	compressor.ptr.prototype.findMatch = function(pos, prevHead, prevLength, lookahead) {
		var d, i, length, lookahead, minIndex, minMatchLook, n, nice, offset, ok, pos, prevHead, prevLength, tries, wEnd, wPos, win, x, x$1, x$2, x$3, x$4;
		length = 0;
		offset = 0;
		ok = false;
		d = this;
		minMatchLook = 258;
		if (lookahead < minMatchLook) {
			minMatchLook = lookahead;
		}
		win = $subslice(d.window, 0, (pos + minMatchLook >> 0));
		nice = win.$length - pos >> 0;
		if (d.compressionLevel.nice < nice) {
			nice = d.compressionLevel.nice;
		}
		tries = d.compressionLevel.chain;
		length = prevLength;
		if (length >= d.compressionLevel.good) {
			tries = (tries >> $min((2), 31)) >> 0;
		}
		wEnd = (x = pos + length >> 0, ((x < 0 || x >= win.$length) ? ($throwRuntimeError("index out of range"), undefined) : win.$array[win.$offset + x]));
		wPos = $subslice(win, pos);
		minIndex = pos - 32768 >> 0;
		i = prevHead;
		while (true) {
			if (!(tries > 0)) { break; }
			if (wEnd === (x$1 = i + length >> 0, ((x$1 < 0 || x$1 >= win.$length) ? ($throwRuntimeError("index out of range"), undefined) : win.$array[win.$offset + x$1]))) {
				n = matchLen($subslice(win, i), wPos, minMatchLook);
				if (n > length && (n > 4 || (pos - i >> 0) <= 4096)) {
					length = n;
					offset = pos - i >> 0;
					ok = true;
					if (n >= nice) {
						break;
					}
					wEnd = (x$2 = pos + n >> 0, ((x$2 < 0 || x$2 >= win.$length) ? ($throwRuntimeError("index out of range"), undefined) : win.$array[win.$offset + x$2]));
				}
			}
			if (i === minIndex) {
				break;
			}
			i = (((x$3 = d.hashPrev, x$4 = i & 32767, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4])) >> 0)) - d.hashOffset >> 0;
			if (i < minIndex || i < 0) {
				break;
			}
			tries = tries - (1) >> 0;
		}
		return [length, offset, ok];
	};
	compressor.prototype.findMatch = function(pos, prevHead, prevLength, lookahead) { return this.$val.findMatch(pos, prevHead, prevLength, lookahead); };
	compressor.ptr.prototype.writeStoredBlock = function(buf) {
		var buf, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; buf = $f.buf; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		$r = d.w.writeStoredHeader(buf.$length, false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(d.w.err, $ifaceNil))) {
			$s = -1; return d.w.err;
		}
		$r = d.w.writeBytes(buf); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return d.w.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.writeStoredBlock }; } $f.buf = buf; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.writeStoredBlock = function(buf) { return this.$val.writeStoredBlock(buf); };
	hash4 = function(b) {
		var b;
		return (($imul(((((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0)), 506832829) >>> 0)) >>> 15 >>> 0;
	};
	bulkHash4 = function(b, dst) {
		var b, dst, end, hb, i, x;
		if (b.$length < 4) {
			return;
		}
		hb = ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
		(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = ((($imul(hb, 506832829) >>> 0)) >>> 15 >>> 0));
		end = (b.$length - 4 >> 0) + 1 >> 0;
		i = 1;
		while (true) {
			if (!(i < end)) { break; }
			hb = (((hb << 8 >>> 0)) | (((x = i + 3 >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])) >>> 0))) >>> 0;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = ((($imul(hb, 506832829) >>> 0)) >>> 15 >>> 0));
			i = i + (1) >> 0;
		}
	};
	matchLen = function(a, b, max) {
		var _i, _ref, a, av, b, i, max;
		a = $subslice(a, 0, max);
		b = $subslice(b, 0, a.$length);
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			av = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === av))) {
				return i;
			}
			_i++;
		}
		return max;
	};
	compressor.ptr.prototype.encSpeed = function() {
		var _r, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (d.windowEnd < 65535) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.windowEnd < 65535) { */ case 1:
			if (!d.sync) {
				$s = -1; return;
			}
			/* */ if (d.windowEnd < 128) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.windowEnd < 128) { */ case 3:
					/* */ if ((d.windowEnd === 0)) { $s = 6; continue; }
					/* */ if (d.windowEnd <= 16) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if ((d.windowEnd === 0)) { */ case 6:
						$s = -1; return;
					/* } else if (d.windowEnd <= 16) { */ case 7:
						_r = d.writeStoredBlock($subslice(d.window, 0, d.windowEnd)); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						d.err = _r;
						$s = 9; continue;
					/* } else { */ case 8:
						$r = d.w.writeBlockHuff(false, $subslice(d.window, 0, d.windowEnd)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						d.err = d.w.err;
					/* } */ case 9:
				case 5:
				d.windowEnd = 0;
				d.bestSpeed.reset();
				$s = -1; return;
			/* } */ case 4:
		/* } */ case 2:
		d.tokens = d.bestSpeed.encode($subslice(d.tokens, 0, 0), $subslice(d.window, 0, d.windowEnd));
		/* */ if (d.tokens.$length > (d.windowEnd - ((d.windowEnd >> 4 >> 0)) >> 0)) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (d.tokens.$length > (d.windowEnd - ((d.windowEnd >> 4 >> 0)) >> 0)) { */ case 12:
			$r = d.w.writeBlockHuff(false, $subslice(d.window, 0, d.windowEnd)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else { */ case 13:
			$r = d.w.writeBlockDynamic(d.tokens, false, $subslice(d.window, 0, d.windowEnd)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 14:
		d.err = d.w.err;
		d.windowEnd = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.encSpeed }; } $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.encSpeed = function() { return this.$val.encSpeed(); };
	compressor.ptr.prototype.initDeflate = function() {
		var d;
		d = this;
		d.window = $makeSlice(sliceType$4, 65536);
		d.hashOffset = 1;
		d.tokens = $makeSlice(sliceType$5, 0, 16385);
		d.length = 3;
		d.offset = 0;
		d.byteAvailable = false;
		d.index = 0;
		d.hash = 0;
		d.chainHead = -1;
		d.bulkHasher = bulkHash4;
	};
	compressor.prototype.initDeflate = function() { return this.$val.initDeflate(); };
	compressor.ptr.prototype.deflate = function() {
		var _r, _r$1, _r$2, _tuple, d, hh, hh$1, i, lookahead, minIndex, newIndex, newLength, newOffset, ok, prevLength, prevOffset, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; d = $f.d; hh = $f.hh; hh$1 = $f.hh$1; i = $f.i; lookahead = $f.lookahead; minIndex = $f.minIndex; newIndex = $f.newIndex; newLength = $f.newLength; newOffset = $f.newOffset; ok = $f.ok; prevLength = $f.prevLength; prevOffset = $f.prevOffset; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if ((d.windowEnd - d.index >> 0) < 262 && !d.sync) {
			$s = -1; return;
		}
		d.maxInsertIndex = d.windowEnd - 3 >> 0;
		if (d.index < d.maxInsertIndex) {
			d.hash = hash4($subslice(d.window, d.index, (d.index + 4 >> 0)));
		}
		/* while (true) { */ case 1:
			if (d.index > d.windowEnd) {
				$panic(new $String("index > windowEnd"));
			}
			lookahead = d.windowEnd - d.index >> 0;
			/* */ if (lookahead < 262) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (lookahead < 262) { */ case 3:
				if (!d.sync) {
					/* break Loop; */ $s = 2; continue s;
				}
				if (d.index > d.windowEnd) {
					$panic(new $String("index > windowEnd"));
				}
				/* */ if (lookahead === 0) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (lookahead === 0) { */ case 5:
					if (d.byteAvailable) {
						d.tokens = $append(d.tokens, literalToken((((x = d.window, x$1 = d.index - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >>> 0))));
						d.byteAvailable = false;
					}
					/* */ if (d.tokens.$length > 0) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (d.tokens.$length > 0) { */ case 7:
						_r = d.writeBlock(d.tokens, d.index); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						d.err = _r;
						if (!($interfaceIsEqual(d.err, $ifaceNil))) {
							$s = -1; return;
						}
						d.tokens = $subslice(d.tokens, 0, 0);
					/* } */ case 8:
					/* break Loop; */ $s = 2; continue s;
				/* } */ case 6:
			/* } */ case 4:
			if (d.index < d.maxInsertIndex) {
				d.hash = hash4($subslice(d.window, d.index, (d.index + 4 >> 0)));
				hh = $indexPtr(d.hashHead, ((d.hash & 131071) >>> 0), ptrType$1);
				d.chainHead = ((hh.$get() >> 0));
				(x$2 = d.hashPrev, x$3 = d.index & 32767, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3] = ((d.chainHead >>> 0))));
				hh.$set((((d.index + d.hashOffset >> 0) >>> 0)));
			}
			prevLength = d.length;
			prevOffset = d.offset;
			d.length = 3;
			d.offset = 0;
			minIndex = d.index - 32768 >> 0;
			if (minIndex < 0) {
				minIndex = 0;
			}
			if ((d.chainHead - d.hashOffset >> 0) >= minIndex && (!((d.compressionLevel.fastSkipHashing === 2147483647)) && lookahead > 3 || (d.compressionLevel.fastSkipHashing === 2147483647) && lookahead > prevLength && prevLength < d.compressionLevel.lazy)) {
				_tuple = d.findMatch(d.index, d.chainHead - d.hashOffset >> 0, 3, lookahead);
				newLength = _tuple[0];
				newOffset = _tuple[1];
				ok = _tuple[2];
				if (ok) {
					d.length = newLength;
					d.offset = newOffset;
				}
			}
			/* */ if (!((d.compressionLevel.fastSkipHashing === 2147483647)) && d.length >= 4 || (d.compressionLevel.fastSkipHashing === 2147483647) && prevLength >= 4 && d.length <= prevLength) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!((d.compressionLevel.fastSkipHashing === 2147483647)) && d.length >= 4 || (d.compressionLevel.fastSkipHashing === 2147483647) && prevLength >= 4 && d.length <= prevLength) { */ case 10:
				if (!((d.compressionLevel.fastSkipHashing === 2147483647))) {
					d.tokens = $append(d.tokens, matchToken((((d.length - 3 >> 0) >>> 0)), (((d.offset - 1 >> 0) >>> 0))));
				} else {
					d.tokens = $append(d.tokens, matchToken((((prevLength - 3 >> 0) >>> 0)), (((prevOffset - 1 >> 0) >>> 0))));
				}
				if (d.length <= d.compressionLevel.fastSkipHashing) {
					newIndex = 0;
					if (!((d.compressionLevel.fastSkipHashing === 2147483647))) {
						newIndex = d.index + d.length >> 0;
					} else {
						newIndex = (d.index + prevLength >> 0) - 1 >> 0;
					}
					d.index = d.index + (1) >> 0;
					while (true) {
						if (!(d.index < newIndex)) { break; }
						if (d.index < d.maxInsertIndex) {
							d.hash = hash4($subslice(d.window, d.index, (d.index + 4 >> 0)));
							hh$1 = $indexPtr(d.hashHead, ((d.hash & 131071) >>> 0), ptrType$1);
							(x$4 = d.hashPrev, x$5 = d.index & 32767, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5] = hh$1.$get()));
							hh$1.$set((((d.index + d.hashOffset >> 0) >>> 0)));
						}
						d.index = d.index + (1) >> 0;
					}
					if (d.compressionLevel.fastSkipHashing === 2147483647) {
						d.byteAvailable = false;
						d.length = 3;
					}
				} else {
					d.index = d.index + (d.length) >> 0;
					if (d.index < d.maxInsertIndex) {
						d.hash = hash4($subslice(d.window, d.index, (d.index + 4 >> 0)));
					}
				}
				/* */ if (d.tokens.$length === 16384) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (d.tokens.$length === 16384) { */ case 13:
					_r$1 = d.writeBlock(d.tokens, d.index); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					d.err = _r$1;
					if (!($interfaceIsEqual(d.err, $ifaceNil))) {
						$s = -1; return;
					}
					d.tokens = $subslice(d.tokens, 0, 0);
				/* } */ case 14:
				$s = 12; continue;
			/* } else { */ case 11:
				/* */ if (!((d.compressionLevel.fastSkipHashing === 2147483647)) || d.byteAvailable) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!((d.compressionLevel.fastSkipHashing === 2147483647)) || d.byteAvailable) { */ case 16:
					i = d.index - 1 >> 0;
					if (!((d.compressionLevel.fastSkipHashing === 2147483647))) {
						i = d.index;
					}
					d.tokens = $append(d.tokens, literalToken((((x$6 = d.window, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i])) >>> 0))));
					/* */ if (d.tokens.$length === 16384) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (d.tokens.$length === 16384) { */ case 18:
						_r$2 = d.writeBlock(d.tokens, i + 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						d.err = _r$2;
						if (!($interfaceIsEqual(d.err, $ifaceNil))) {
							$s = -1; return;
						}
						d.tokens = $subslice(d.tokens, 0, 0);
					/* } */ case 19:
				/* } */ case 17:
				d.index = d.index + (1) >> 0;
				if (d.compressionLevel.fastSkipHashing === 2147483647) {
					d.byteAvailable = true;
				}
			/* } */ case 12:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.deflate }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.d = d; $f.hh = hh; $f.hh$1 = hh$1; $f.i = i; $f.lookahead = lookahead; $f.minIndex = minIndex; $f.newIndex = newIndex; $f.newLength = newLength; $f.newOffset = newOffset; $f.ok = ok; $f.prevLength = prevLength; $f.prevOffset = prevOffset; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.deflate = function() { return this.$val.deflate(); };
	compressor.ptr.prototype.fillStore = function(b) {
		var b, d, n;
		d = this;
		n = $copySlice($subslice(d.window, d.windowEnd), b);
		d.windowEnd = d.windowEnd + (n) >> 0;
		return n;
	};
	compressor.prototype.fillStore = function(b) { return this.$val.fillStore(b); };
	compressor.ptr.prototype.store = function() {
		var _r, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (d.windowEnd > 0 && ((d.windowEnd === 65535) || d.sync)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.windowEnd > 0 && ((d.windowEnd === 65535) || d.sync)) { */ case 1:
			_r = d.writeStoredBlock($subslice(d.window, 0, d.windowEnd)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			d.err = _r;
			d.windowEnd = 0;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.store }; } $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.store = function() { return this.$val.store(); };
	compressor.ptr.prototype.storeHuff = function() {
		var d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.windowEnd < d.window.$length && !d.sync || (d.windowEnd === 0)) {
			$s = -1; return;
		}
		$r = d.w.writeBlockHuff(false, $subslice(d.window, 0, d.windowEnd)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		d.err = d.w.err;
		d.windowEnd = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.storeHuff }; } $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.storeHuff = function() { return this.$val.storeHuff(); };
	compressor.ptr.prototype.write = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, d, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; b = $f.b; d = $f.d; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		d = this;
		if (!($interfaceIsEqual(d.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = d.err;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		n = b.$length;
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			$r = d.step(d); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = d.fill(d, b); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			b = $subslice(b, _r);
			if (!($interfaceIsEqual(d.err, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = d.err;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.b = b; $f.d = d; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.write = function(b) { return this.$val.write(b); };
	compressor.ptr.prototype.syncFlush = function() {
		var d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!($interfaceIsEqual(d.err, $ifaceNil))) {
			$s = -1; return d.err;
		}
		d.sync = true;
		$r = d.step(d); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if ($interfaceIsEqual(d.err, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(d.err, $ifaceNil)) { */ case 2:
			$r = d.w.writeStoredHeader(0, false); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = d.w.flush(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			d.err = d.w.err;
		/* } */ case 3:
		d.sync = false;
		$s = -1; return d.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.syncFlush }; } $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.syncFlush = function() { return this.$val.syncFlush(); };
	compressor.ptr.prototype.init = function(w, level) {
		var _r, d, err, level, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; err = $f.err; level = $f.level; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		d = this;
		d.w = newHuffmanBitWriter(w);
			/* */ if ((level === 0)) { $s = 2; continue; }
			/* */ if ((level === -2)) { $s = 3; continue; }
			/* */ if ((level === 1)) { $s = 4; continue; }
			/* */ if ((level === -1)) { $s = 5; continue; }
			/* */ if (2 <= level && level <= 9) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((level === 0)) { */ case 2:
				d.window = $makeSlice(sliceType$4, 65535);
				d.fill = $methodExpr(ptrType$2, "fillStore");
				d.step = $methodExpr(ptrType$2, "store");
				$s = 8; continue;
			/* } else if ((level === -2)) { */ case 3:
				d.window = $makeSlice(sliceType$4, 65535);
				d.fill = $methodExpr(ptrType$2, "fillStore");
				d.step = $methodExpr(ptrType$2, "storeHuff");
				$s = 8; continue;
			/* } else if ((level === 1)) { */ case 4:
				compressionLevel.copy(d.compressionLevel, ((level < 0 || level >= levels.$length) ? ($throwRuntimeError("index out of range"), undefined) : levels.$array[levels.$offset + level]));
				d.window = $makeSlice(sliceType$4, 65535);
				d.fill = $methodExpr(ptrType$2, "fillStore");
				d.step = $methodExpr(ptrType$2, "encSpeed");
				d.bestSpeed = newDeflateFast();
				d.tokens = $makeSlice(sliceType$5, 65535);
				$s = 8; continue;
			/* } else if ((level === -1)) { */ case 5:
				level = 6;
				compressionLevel.copy(d.compressionLevel, ((level < 0 || level >= levels.$length) ? ($throwRuntimeError("index out of range"), undefined) : levels.$array[levels.$offset + level]));
				d.initDeflate();
				d.fill = $methodExpr(ptrType$2, "fillDeflate");
				d.step = $methodExpr(ptrType$2, "deflate");
				$s = 8; continue;
			/* } else if (2 <= level && level <= 9) { */ case 6:
				compressionLevel.copy(d.compressionLevel, ((level < 0 || level >= levels.$length) ? ($throwRuntimeError("index out of range"), undefined) : levels.$array[levels.$offset + level]));
				d.initDeflate();
				d.fill = $methodExpr(ptrType$2, "fillDeflate");
				d.step = $methodExpr(ptrType$2, "deflate");
				$s = 8; continue;
			/* } else { */ case 7:
				_r = fmt.Errorf("flate: invalid compression level %d: want value in range [-2, 9]", new sliceType$6([new $Int(level)])); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				$s = -1; return err;
			/* } */ case 8:
		case 1:
		err = $ifaceNil;
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.init }; } $f._r = _r; $f.d = d; $f.err = err; $f.level = level; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.init = function(w, level) { return this.$val.init(w, level); };
	compressor.ptr.prototype.reset = function(w) {
		var _1, _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, d, i, i$1, w, x, x$1;
		d = this;
		d.w.reset(w);
		d.sync = false;
		d.err = $ifaceNil;
		_1 = d.compressionLevel.level;
		if (_1 === (0)) {
			d.windowEnd = 0;
		} else if (_1 === (1)) {
			d.windowEnd = 0;
			d.tokens = $subslice(d.tokens, 0, 0);
			d.bestSpeed.reset();
		} else {
			d.chainHead = -1;
			_ref = d.hashHead;
			_i = 0;
			while (true) {
				if (!(_i < 131072)) { break; }
				i = _i;
				(x = d.hashHead, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = 0));
				_i++;
			}
			_ref$1 = d.hashPrev;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < 32768)) { break; }
				i$1 = _i$1;
				(x$1 = d.hashPrev, ((i$1 < 0 || i$1 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i$1] = 0));
				_i$1++;
			}
			d.hashOffset = 1;
			_tmp = 0;
			_tmp$1 = 0;
			d.index = _tmp;
			d.windowEnd = _tmp$1;
			_tmp$2 = 0;
			_tmp$3 = false;
			d.blockStart = _tmp$2;
			d.byteAvailable = _tmp$3;
			d.tokens = $subslice(d.tokens, 0, 0);
			d.length = 3;
			d.offset = 0;
			d.hash = 0;
			d.maxInsertIndex = 0;
		}
	};
	compressor.prototype.reset = function(w) { return this.$val.reset(w); };
	compressor.ptr.prototype.close = function() {
		var d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!($interfaceIsEqual(d.err, $ifaceNil))) {
			$s = -1; return d.err;
		}
		d.sync = true;
		$r = d.step(d); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(d.err, $ifaceNil))) {
			$s = -1; return d.err;
		}
		$r = d.w.writeStoredHeader(0, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(d.w.err, $ifaceNil))) {
			$s = -1; return d.w.err;
		}
		$r = d.w.flush(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return d.w.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compressor.ptr.prototype.close }; } $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	compressor.prototype.close = function() { return this.$val.close(); };
	NewWriter = function(w, level) {
		var _r, dw, err, level, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; dw = $f.dw; err = $f.err; level = $f.level; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dw = [dw];
		dw[0] = new Writer.ptr(new compressor.ptr(new compressionLevel.ptr(0, 0, 0, 0, 0, 0), ptrType$3.nil, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, false, ptrType$4.nil, 0, arrayType$1.zero(), arrayType$2.zero(), 0, 0, sliceType$4.nil, 0, 0, false, sliceType$5.nil, 0, 0, 0, 0, $ifaceNil, arrayType$3.zero()), sliceType$4.nil);
		_r = dw[0].d.init(w, level); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$5.nil, err];
		}
		$s = -1; return [dw[0], $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewWriter }; } $f._r = _r; $f.dw = dw; $f.err = err; $f.level = level; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewWriter = NewWriter;
	NewWriterDict = function(w, level, dict) {
		var _r, _tuple, dict, dw, err, level, w, zw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; dict = $f.dict; dw = $f.dw; err = $f.err; level = $f.level; w = $f.w; zw = $f.zw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dw = new dictWriter.ptr(w);
		_r = NewWriter(dw, level); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		zw = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$5.nil, err];
		}
		$r = zw.d.fillWindow(dict); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		zw.dict = $appendSlice(zw.dict, dict);
		$s = -1; return [zw, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewWriterDict }; } $f._r = _r; $f._tuple = _tuple; $f.dict = dict; $f.dw = dw; $f.err = err; $f.level = level; $f.w = w; $f.zw = zw; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewWriterDict = NewWriterDict;
	dictWriter.ptr.prototype.Write = function(b) {
		var _r, _tuple, b, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		w = this;
		_r = w.w.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: dictWriter.ptr.prototype.Write }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	dictWriter.prototype.Write = function(b) { return this.$val.Write(b); };
	Writer.ptr.prototype.Write = function(data) {
		var _r, _tuple, data, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		w = this;
		_r = w.d.write(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Write }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Write = function(data) { return this.$val.Write(data); };
	Writer.ptr.prototype.Flush = function() {
		var _r, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_r = w.d.syncFlush(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Flush }; } $f._r = _r; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.ptr.prototype.Close = function() {
		var _r, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_r = w.d.close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Close }; } $f._r = _r; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Close = function() { return this.$val.Close(); };
	Writer.ptr.prototype.Reset = function(dst) {
		var _tuple, dst, dw, ok, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; dst = $f.dst; dw = $f.dw; ok = $f.ok; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_tuple = $assertType(w.d.w.writer, ptrType$6, true);
		dw = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			dw.w = dst;
			w.d.reset(dw);
			$r = w.d.fillWindow(w.dict); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			w.d.reset(dst);
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Reset }; } $f._tuple = _tuple; $f.dst = dst; $f.dw = dw; $f.ok = ok; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Reset = function(dst) { return this.$val.Reset(dst); };
	load32 = function(b, i) {
		var b, i;
		b = $subslice(b, i, (i + 4 >> 0), b.$length);
		return ((((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	load64 = function(b, i) {
		var b, i, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		b = $subslice(b, i, (i + 8 >> 0), b.$length);
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$7 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	hash = function(u) {
		var u;
		return (($imul(u, 506832829) >>> 0)) >>> 18 >>> 0;
	};
	newDeflateFast = function() {
		return new deflateFast.ptr(arrayType$4.zero(), $makeSlice(sliceType$4, 0, 65535), 65535);
	};
	deflateFast.ptr.prototype.encode = function(dst, src) {
		var bytesBetweenHashLookups, candidate, currHash, cv, dst, e, l, nextEmit, nextHash, nextS, now, offset, offset$1, prevHash, s, sLimit, skip, src, t, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		e = this;
		if (e.cur > 1073741824) {
			e.resetAll();
		}
		if (src.$length < 17) {
			e.cur = e.cur + (65535) >> 0;
			e.prev = $subslice(e.prev, 0, 0);
			$s = -1; return emitLiteral(dst, src);
		}
		sLimit = (((src.$length - 15 >> 0) >> 0));
		nextEmit = 0;
		s = 0;
		cv = load32(src, s);
		nextHash = hash(cv);
		/* while (true) { */ case 1:
			skip = 32;
			nextS = s;
			candidate = new tableEntry.ptr(0, 0);
			/* while (true) { */ case 3:
				s = nextS;
				bytesBetweenHashLookups = skip >> 5 >> 0;
				nextS = s + bytesBetweenHashLookups >> 0;
				skip = skip + (bytesBetweenHashLookups) >> 0;
				/* */ if (nextS > sLimit) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (nextS > sLimit) { */ case 5:
					/* goto emitRemainder */ $s = 7; continue;
				/* } */ case 6:
				tableEntry.copy(candidate, (x = e.table, x$1 = (nextHash & 16383) >>> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])));
				now = load32(src, nextS);
				tableEntry.copy((x$2 = e.table, x$3 = (nextHash & 16383) >>> 0, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3])), new tableEntry.ptr(cv, s + e.cur >> 0));
				nextHash = hash(now);
				offset = s - ((candidate.offset - e.cur >> 0)) >> 0;
				if (offset > 32768 || !((cv === candidate.val))) {
					cv = now;
					/* continue; */ $s = 3; continue;
				}
				/* break; */ $s = 4; continue;
			/* } */ $s = 3; continue; case 4:
			dst = emitLiteral(dst, $subslice(src, nextEmit, s));
			/* while (true) { */ case 8:
				s = s + (4) >> 0;
				t = (candidate.offset - e.cur >> 0) + 4 >> 0;
				l = e.matchLen(s, t, src);
				dst = $append(dst, matchToken(((((l + 4 >> 0) - 3 >> 0) >>> 0)), ((((s - t >> 0) - 1 >> 0) >>> 0))));
				s = s + (l) >> 0;
				nextEmit = s;
				/* */ if (s >= sLimit) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (s >= sLimit) { */ case 10:
					/* goto emitRemainder */ $s = 7; continue;
				/* } */ case 11:
				x$4 = load64(src, s - 1 >> 0);
				prevHash = hash(((x$4.$low >>> 0)));
				tableEntry.copy((x$5 = e.table, x$6 = (prevHash & 16383) >>> 0, ((x$6 < 0 || x$6 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[x$6])), new tableEntry.ptr(((x$4.$low >>> 0)), (e.cur + s >> 0) - 1 >> 0));
				x$4 = $shiftRightUint64(x$4, (8));
				currHash = hash(((x$4.$low >>> 0)));
				tableEntry.copy(candidate, (x$7 = e.table, x$8 = (currHash & 16383) >>> 0, ((x$8 < 0 || x$8 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[x$8])));
				tableEntry.copy((x$9 = e.table, x$10 = (currHash & 16383) >>> 0, ((x$10 < 0 || x$10 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[x$10])), new tableEntry.ptr(((x$4.$low >>> 0)), e.cur + s >> 0));
				offset$1 = s - ((candidate.offset - e.cur >> 0)) >> 0;
				if (offset$1 > 32768 || !((((x$4.$low >>> 0)) === candidate.val))) {
					cv = (($shiftRightUint64(x$4, 8).$low >>> 0));
					nextHash = hash(cv);
					s = s + (1) >> 0;
					/* break; */ $s = 9; continue;
				}
			/* } */ $s = 8; continue; case 9:
		/* } */ $s = 1; continue; case 2:
		/* emitRemainder: */ case 7:
		if (((nextEmit >> 0)) < src.$length) {
			dst = emitLiteral(dst, $subslice(src, nextEmit));
		}
		e.cur = e.cur + (((src.$length >> 0))) >> 0;
		e.prev = $subslice(e.prev, 0, src.$length);
		$copySlice(e.prev, src);
		$s = -1; return dst;
		/* */ } return; }
	};
	deflateFast.prototype.encode = function(dst, src) { return this.$val.encode(dst, src); };
	emitLiteral = function(dst, lit) {
		var _i, _ref, dst, lit, v;
		_ref = lit;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			dst = $append(dst, literalToken(((v >>> 0))));
			_i++;
		}
		return dst;
	};
	deflateFast.ptr.prototype.matchLen = function(s, t, src) {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, a, a$1, b, b$1, e, i, i$1, i$2, n, s, s1, src, t, tp;
		e = this;
		s1 = (((s >> 0)) + 258 >> 0) - 4 >> 0;
		if (s1 > src.$length) {
			s1 = src.$length;
		}
		if (t >= 0) {
			b = $subslice(src, t);
			a = $subslice(src, s, s1);
			b = $subslice(b, 0, a.$length);
			_ref = a;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				if (!((((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]) === ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i])))) {
					return ((i >> 0));
				}
				_i++;
			}
			return ((a.$length >> 0));
		}
		tp = ((e.prev.$length >> 0)) + t >> 0;
		if (tp < 0) {
			return 0;
		}
		a$1 = $subslice(src, s, s1);
		b$1 = $subslice(e.prev, tp);
		if (b$1.$length > a$1.$length) {
			b$1 = $subslice(b$1, 0, a$1.$length);
		}
		a$1 = $subslice(a$1, 0, b$1.$length);
		_ref$1 = b$1;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			if (!((((i$1 < 0 || i$1 >= a$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : a$1.$array[a$1.$offset + i$1]) === ((i$1 < 0 || i$1 >= b$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : b$1.$array[b$1.$offset + i$1])))) {
				return ((i$1 >> 0));
			}
			_i$1++;
		}
		n = ((b$1.$length >> 0));
		if ((((s + n >> 0) >> 0)) === s1) {
			return n;
		}
		a$1 = $subslice(src, (s + n >> 0), s1);
		b$1 = $subslice(src, 0, a$1.$length);
		_ref$2 = a$1;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < _ref$2.$length)) { break; }
			i$2 = _i$2;
			if (!((((i$2 < 0 || i$2 >= a$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : a$1.$array[a$1.$offset + i$2]) === ((i$2 < 0 || i$2 >= b$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : b$1.$array[b$1.$offset + i$2])))) {
				return ((i$2 >> 0)) + n >> 0;
			}
			_i$2++;
		}
		return ((a$1.$length >> 0)) + n >> 0;
	};
	deflateFast.prototype.matchLen = function(s, t, src) { return this.$val.matchLen(s, t, src); };
	deflateFast.ptr.prototype.reset = function() {
		var e;
		e = this;
		e.prev = $subslice(e.prev, 0, 0);
		e.cur = e.cur + (32768) >> 0;
		if (e.cur > 1073741824) {
			e.resetAll();
		}
	};
	deflateFast.prototype.reset = function() { return this.$val.reset(); };
	deflateFast.ptr.prototype.resetAll = function() {
		var _i, _ref, e, i, x;
		e = this;
		e.cur = 65535;
		e.prev = $subslice(e.prev, 0, 0);
		_ref = e.table;
		_i = 0;
		while (true) {
			if (!(_i < 16384)) { break; }
			i = _i;
			tableEntry.copy((x = e.table, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])), new tableEntry.ptr(0, 0));
			_i++;
		}
	};
	deflateFast.prototype.resetAll = function() { return this.$val.resetAll(); };
	dictDecoder.ptr.prototype.init = function(size, dict) {
		var dd, dict, size;
		dd = this;
		dictDecoder.copy(dd, new dictDecoder.ptr(dd.hist, 0, 0, false));
		if (dd.hist.$capacity < size) {
			dd.hist = $makeSlice(sliceType$4, size);
		}
		dd.hist = $subslice(dd.hist, 0, size);
		if (dict.$length > dd.hist.$length) {
			dict = $subslice(dict, (dict.$length - dd.hist.$length >> 0));
		}
		dd.wrPos = $copySlice(dd.hist, dict);
		if (dd.wrPos === dd.hist.$length) {
			dd.wrPos = 0;
			dd.full = true;
		}
		dd.rdPos = dd.wrPos;
	};
	dictDecoder.prototype.init = function(size, dict) { return this.$val.init(size, dict); };
	dictDecoder.ptr.prototype.histSize = function() {
		var dd;
		dd = this;
		if (dd.full) {
			return dd.hist.$length;
		}
		return dd.wrPos;
	};
	dictDecoder.prototype.histSize = function() { return this.$val.histSize(); };
	dictDecoder.ptr.prototype.availRead = function() {
		var dd;
		dd = this;
		return dd.wrPos - dd.rdPos >> 0;
	};
	dictDecoder.prototype.availRead = function() { return this.$val.availRead(); };
	dictDecoder.ptr.prototype.availWrite = function() {
		var dd;
		dd = this;
		return dd.hist.$length - dd.wrPos >> 0;
	};
	dictDecoder.prototype.availWrite = function() { return this.$val.availWrite(); };
	dictDecoder.ptr.prototype.writeSlice = function() {
		var dd;
		dd = this;
		return $subslice(dd.hist, dd.wrPos);
	};
	dictDecoder.prototype.writeSlice = function() { return this.$val.writeSlice(); };
	dictDecoder.ptr.prototype.writeMark = function(cnt) {
		var cnt, dd;
		dd = this;
		dd.wrPos = dd.wrPos + (cnt) >> 0;
	};
	dictDecoder.prototype.writeMark = function(cnt) { return this.$val.writeMark(cnt); };
	dictDecoder.ptr.prototype.writeByte = function(c) {
		var c, dd, x, x$1;
		dd = this;
		(x = dd.hist, x$1 = dd.wrPos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		dd.wrPos = dd.wrPos + (1) >> 0;
	};
	dictDecoder.prototype.writeByte = function(c) { return this.$val.writeByte(c); };
	dictDecoder.ptr.prototype.writeCopy = function(dist, length) {
		var dd, dist, dstBase, dstPos, endPos, length, srcPos;
		dd = this;
		dstBase = dd.wrPos;
		dstPos = dstBase;
		srcPos = dstPos - dist >> 0;
		endPos = dstPos + length >> 0;
		if (endPos > dd.hist.$length) {
			endPos = dd.hist.$length;
		}
		if (srcPos < 0) {
			srcPos = srcPos + (dd.hist.$length) >> 0;
			dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos))) >> 0;
			srcPos = 0;
		}
		while (true) {
			if (!(dstPos < endPos)) { break; }
			dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos, dstPos))) >> 0;
		}
		dd.wrPos = dstPos;
		return dstPos - dstBase >> 0;
	};
	dictDecoder.prototype.writeCopy = function(dist, length) { return this.$val.writeCopy(dist, length); };
	dictDecoder.ptr.prototype.tryWriteCopy = function(dist, length) {
		var dd, dist, dstBase, dstPos, endPos, length, srcPos, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		dd = this;
		dstPos = dd.wrPos;
		endPos = dstPos + length >> 0;
		if (dstPos < dist || endPos > dd.hist.$length) {
			$s = -1; return 0;
		}
		dstBase = dstPos;
		srcPos = dstPos - dist >> 0;
		/* loop: */ case 1:
		dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos, dstPos))) >> 0;
		/* */ if (dstPos < endPos) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (dstPos < endPos) { */ case 2:
			/* goto loop */ $s = 1; continue;
		/* } */ case 3:
		dd.wrPos = dstPos;
		$s = -1; return dstPos - dstBase >> 0;
		/* */ } return; }
	};
	dictDecoder.prototype.tryWriteCopy = function(dist, length) { return this.$val.tryWriteCopy(dist, length); };
	dictDecoder.ptr.prototype.readFlush = function() {
		var _tmp, _tmp$1, dd, toRead;
		dd = this;
		toRead = $subslice(dd.hist, dd.rdPos, dd.wrPos);
		dd.rdPos = dd.wrPos;
		if (dd.wrPos === dd.hist.$length) {
			_tmp = 0;
			_tmp$1 = 0;
			dd.wrPos = _tmp;
			dd.rdPos = _tmp$1;
			dd.full = true;
		}
		return toRead;
	};
	dictDecoder.prototype.readFlush = function() { return this.$val.readFlush(); };
	newHuffmanBitWriter = function(w) {
		var w;
		return new huffmanBitWriter.ptr(w, new $Uint64(0, 0), 0, arrayType$5.zero(), arrayType$6.zero(), 0, $makeSlice(sliceType$7, 286), $makeSlice(sliceType$7, 30), $makeSlice(sliceType$4, 317), newHuffmanEncoder(286), newHuffmanEncoder(30), newHuffmanEncoder(19), $ifaceNil);
	};
	huffmanBitWriter.ptr.prototype.reset = function(writer) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, w, writer;
		w = this;
		w.writer = writer;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = $ifaceNil;
		w.bits = _tmp;
		w.nbits = _tmp$1;
		w.nbytes = _tmp$2;
		w.err = _tmp$3;
		arrayType$5.copy(w.bytes, arrayType$5.zero());
	};
	huffmanBitWriter.prototype.reset = function(writer) { return this.$val.reset(writer); };
	huffmanBitWriter.ptr.prototype.flush = function() {
		var n, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; n = $f.n; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			w.nbits = 0;
			$s = -1; return;
		}
		n = w.nbytes;
		while (true) {
			if (!(!((w.nbits === 0)))) { break; }
			(x = w.bytes, ((n < 0 || n >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[n] = ((w.bits.$low << 24 >>> 24))));
			w.bits = $shiftRightUint64(w.bits, (8));
			if (w.nbits > 8) {
				w.nbits = w.nbits - (8) >>> 0;
			} else {
				w.nbits = 0;
			}
			n = n + (1) >> 0;
		}
		w.bits = new $Uint64(0, 0);
		$r = w.write($subslice(new sliceType$4(w.bytes), 0, n)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		w.nbytes = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.flush }; } $f.n = n; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.flush = function() { return this.$val.flush(); };
	huffmanBitWriter.ptr.prototype.write = function(b) {
		var _r, _tuple, b, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		_r = w.writer.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		w.err = _tuple[1];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.write }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.write = function(b) { return this.$val.write(b); };
	huffmanBitWriter.ptr.prototype.writeBits = function(b, nb) {
		var b, bits$1, bytes, n, nb, w, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; bits$1 = $f.bits$1; bytes = $f.bytes; n = $f.n; nb = $f.nb; w = $f.w; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		w.bits = (x = w.bits, x$1 = $shiftLeft64((new $Uint64(0, b)), w.nbits), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		w.nbits = w.nbits + (nb) >>> 0;
		/* */ if (w.nbits >= 48) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (w.nbits >= 48) { */ case 1:
			bits$1 = w.bits;
			w.bits = $shiftRightUint64(w.bits, (48));
			w.nbits = w.nbits - (48) >>> 0;
			n = w.nbytes;
			bytes = $subslice(new sliceType$4(w.bytes), n, (n + 6 >> 0));
			(0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0] = ((bits$1.$low << 24 >>> 24)));
			(1 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 1] = (($shiftRightUint64(bits$1, 8).$low << 24 >>> 24)));
			(2 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 2] = (($shiftRightUint64(bits$1, 16).$low << 24 >>> 24)));
			(3 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 3] = (($shiftRightUint64(bits$1, 24).$low << 24 >>> 24)));
			(4 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 4] = (($shiftRightUint64(bits$1, 32).$low << 24 >>> 24)));
			(5 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 5] = (($shiftRightUint64(bits$1, 40).$low << 24 >>> 24)));
			n = n + (6) >> 0;
			/* */ if (n >= 240) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (n >= 240) { */ case 3:
				$r = w.write($subslice(new sliceType$4(w.bytes), 0, n)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				n = 0;
			/* } */ case 4:
			w.nbytes = n;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.writeBits }; } $f.b = b; $f.bits$1 = bits$1; $f.bytes = bytes; $f.n = n; $f.nb = nb; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.writeBits = function(b, nb) { return this.$val.writeBits(b, nb); };
	huffmanBitWriter.ptr.prototype.writeBytes = function(bytes) {
		var bytes, n, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; bytes = $f.bytes; n = $f.n; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		n = w.nbytes;
		if (!((((w.nbits & 7) >>> 0) === 0))) {
			w.err = new InternalError("writeBytes with unfinished bits");
			$s = -1; return;
		}
		while (true) {
			if (!(!((w.nbits === 0)))) { break; }
			(x = w.bytes, ((n < 0 || n >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[n] = ((w.bits.$low << 24 >>> 24))));
			w.bits = $shiftRightUint64(w.bits, (8));
			w.nbits = w.nbits - (8) >>> 0;
			n = n + (1) >> 0;
		}
		/* */ if (!((n === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((n === 0))) { */ case 1:
			$r = w.write($subslice(new sliceType$4(w.bytes), 0, n)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		w.nbytes = 0;
		$r = w.write(bytes); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.writeBytes }; } $f.bytes = bytes; $f.n = n; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.writeBytes = function(bytes) { return this.$val.writeBytes(bytes); };
	huffmanBitWriter.ptr.prototype.generateCodegen = function(numLiterals, numOffsets, litEnc, offEnc) {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, cgnl, codegen, count, i, i$1, i$2, inIndex, litEnc, n, n$1, nextSize, numLiterals, numOffsets, offEnc, outIndex, size, w, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		w = this;
		_ref = w.codegenFreq;
		_i = 0;
		while (true) {
			if (!(_i < 19)) { break; }
			i = _i;
			(x = w.codegenFreq, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = 0));
			_i++;
		}
		codegen = w.codegen;
		cgnl = $subslice(codegen, 0, numLiterals);
		_ref$1 = cgnl;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			((i$1 < 0 || i$1 >= cgnl.$length) ? ($throwRuntimeError("index out of range"), undefined) : cgnl.$array[cgnl.$offset + i$1] = (((x$1 = litEnc.codes, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])).len << 24 >>> 24)));
			_i$1++;
		}
		cgnl = $subslice(codegen, numLiterals, (numLiterals + numOffsets >> 0));
		_ref$2 = cgnl;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < _ref$2.$length)) { break; }
			i$2 = _i$2;
			((i$2 < 0 || i$2 >= cgnl.$length) ? ($throwRuntimeError("index out of range"), undefined) : cgnl.$array[cgnl.$offset + i$2] = (((x$2 = offEnc.codes, ((i$2 < 0 || i$2 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$2])).len << 24 >>> 24)));
			_i$2++;
		}
		(x$3 = numLiterals + numOffsets >> 0, ((x$3 < 0 || x$3 >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + x$3] = 255));
		size = (0 >= codegen.$length ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + 0]);
		count = 1;
		outIndex = 0;
		inIndex = 1;
		while (true) {
			if (!(!((size === 255)))) { break; }
			nextSize = ((inIndex < 0 || inIndex >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + inIndex]);
			if (nextSize === size) {
				count = count + (1) >> 0;
				inIndex = inIndex + (1) >> 0;
				continue;
			}
			if (!((size === 0))) {
				((outIndex < 0 || outIndex >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + outIndex] = size);
				outIndex = outIndex + (1) >> 0;
				(x$5 = w.codegenFreq, ((size < 0 || size >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[size] = ((x$4 = w.codegenFreq, ((size < 0 || size >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[size])) + (1) >> 0)));
				count = count - (1) >> 0;
				while (true) {
					if (!(count >= 3)) { break; }
					n = 6;
					if (n > count) {
						n = count;
					}
					((outIndex < 0 || outIndex >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + outIndex] = 16);
					outIndex = outIndex + (1) >> 0;
					((outIndex < 0 || outIndex >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + outIndex] = (((n - 3 >> 0) << 24 >>> 24)));
					outIndex = outIndex + (1) >> 0;
					w.codegenFreq[16] = (w.codegenFreq[16] + (1) >> 0);
					count = count - (n) >> 0;
				}
			} else {
				while (true) {
					if (!(count >= 11)) { break; }
					n$1 = 138;
					if (n$1 > count) {
						n$1 = count;
					}
					((outIndex < 0 || outIndex >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + outIndex] = 18);
					outIndex = outIndex + (1) >> 0;
					((outIndex < 0 || outIndex >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + outIndex] = (((n$1 - 11 >> 0) << 24 >>> 24)));
					outIndex = outIndex + (1) >> 0;
					w.codegenFreq[18] = (w.codegenFreq[18] + (1) >> 0);
					count = count - (n$1) >> 0;
				}
				if (count >= 3) {
					((outIndex < 0 || outIndex >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + outIndex] = 17);
					outIndex = outIndex + (1) >> 0;
					((outIndex < 0 || outIndex >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + outIndex] = (((count - 3 >> 0) << 24 >>> 24)));
					outIndex = outIndex + (1) >> 0;
					w.codegenFreq[17] = (w.codegenFreq[17] + (1) >> 0);
					count = 0;
				}
			}
			count = count - (1) >> 0;
			while (true) {
				if (!(count >= 0)) { break; }
				((outIndex < 0 || outIndex >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + outIndex] = size);
				outIndex = outIndex + (1) >> 0;
				(x$7 = w.codegenFreq, ((size < 0 || size >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[size] = ((x$6 = w.codegenFreq, ((size < 0 || size >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[size])) + (1) >> 0)));
				count = count - (1) >> 0;
			}
			size = nextSize;
			count = 1;
			inIndex = inIndex + (1) >> 0;
		}
		((outIndex < 0 || outIndex >= codegen.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegen.$array[codegen.$offset + outIndex] = 255);
	};
	huffmanBitWriter.prototype.generateCodegen = function(numLiterals, numOffsets, litEnc, offEnc) { return this.$val.generateCodegen(numLiterals, numOffsets, litEnc, offEnc); };
	huffmanBitWriter.ptr.prototype.dynamicSize = function(litEnc, offEnc, extraBits) {
		var _tmp, _tmp$1, extraBits, header, litEnc, numCodegens, offEnc, size, w, x, x$1, x$2;
		size = 0;
		numCodegens = 0;
		w = this;
		numCodegens = 19;
		while (true) {
			if (!(numCodegens > 4 && ((x = w.codegenFreq, x$1 = (x$2 = numCodegens - 1 >> 0, ((x$2 < 0 || x$2 >= codegenOrder.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegenOrder.$array[codegenOrder.$offset + x$2])), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 0))) { break; }
			numCodegens = numCodegens - (1) >> 0;
		}
		header = ((((17 + (($imul(3, numCodegens))) >> 0) + w.codegenEncoding.bitLength(new sliceType$7(w.codegenFreq)) >> 0) + ($imul(((w.codegenFreq[16] >> 0)), 2)) >> 0) + ($imul(((w.codegenFreq[17] >> 0)), 3)) >> 0) + ($imul(((w.codegenFreq[18] >> 0)), 7)) >> 0;
		size = ((header + litEnc.bitLength(w.literalFreq) >> 0) + offEnc.bitLength(w.offsetFreq) >> 0) + extraBits >> 0;
		_tmp = size;
		_tmp$1 = numCodegens;
		size = _tmp;
		numCodegens = _tmp$1;
		return [size, numCodegens];
	};
	huffmanBitWriter.prototype.dynamicSize = function(litEnc, offEnc, extraBits) { return this.$val.dynamicSize(litEnc, offEnc, extraBits); };
	huffmanBitWriter.ptr.prototype.fixedSize = function(extraBits) {
		var extraBits, w;
		w = this;
		return ((3 + fixedLiteralEncoding.bitLength(w.literalFreq) >> 0) + fixedOffsetEncoding.bitLength(w.offsetFreq) >> 0) + extraBits >> 0;
	};
	huffmanBitWriter.prototype.fixedSize = function(extraBits) { return this.$val.fixedSize(extraBits); };
	huffmanBitWriter.ptr.prototype.storedSize = function(in$1) {
		var in$1, w;
		w = this;
		if (in$1 === sliceType$4.nil) {
			return [0, false];
		}
		if (in$1.$length <= 65535) {
			return [$imul(((in$1.$length + 5 >> 0)), 8), true];
		}
		return [0, false];
	};
	huffmanBitWriter.prototype.storedSize = function(in$1) { return this.$val.storedSize(in$1); };
	huffmanBitWriter.ptr.prototype.writeCode = function(c) {
		var bits$1, bytes, c, n, w, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; bits$1 = $f.bits$1; bytes = $f.bytes; c = $f.c; n = $f.n; w = $f.w; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		w.bits = (x = w.bits, x$1 = $shiftLeft64((new $Uint64(0, c.code)), w.nbits), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		w.nbits = w.nbits + (((c.len >>> 0))) >>> 0;
		/* */ if (w.nbits >= 48) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (w.nbits >= 48) { */ case 1:
			bits$1 = w.bits;
			w.bits = $shiftRightUint64(w.bits, (48));
			w.nbits = w.nbits - (48) >>> 0;
			n = w.nbytes;
			bytes = $subslice(new sliceType$4(w.bytes), n, (n + 6 >> 0));
			(0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0] = ((bits$1.$low << 24 >>> 24)));
			(1 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 1] = (($shiftRightUint64(bits$1, 8).$low << 24 >>> 24)));
			(2 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 2] = (($shiftRightUint64(bits$1, 16).$low << 24 >>> 24)));
			(3 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 3] = (($shiftRightUint64(bits$1, 24).$low << 24 >>> 24)));
			(4 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 4] = (($shiftRightUint64(bits$1, 32).$low << 24 >>> 24)));
			(5 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 5] = (($shiftRightUint64(bits$1, 40).$low << 24 >>> 24)));
			n = n + (6) >> 0;
			/* */ if (n >= 240) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (n >= 240) { */ case 3:
				$r = w.write($subslice(new sliceType$4(w.bytes), 0, n)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				n = 0;
			/* } */ case 4:
			w.nbytes = n;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.writeCode }; } $f.bits$1 = bits$1; $f.bytes = bytes; $f.c = c; $f.n = n; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.writeCode = function(c) { return this.$val.writeCode(c); };
	huffmanBitWriter.ptr.prototype.writeDynamicHeader = function(numLiterals, numOffsets, numCodegens, isEof) {
		var _1, codeWord, firstBits, i, i$1, isEof, numCodegens, numLiterals, numOffsets, value, w, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; codeWord = $f.codeWord; firstBits = $f.firstBits; i = $f.i; i$1 = $f.i$1; isEof = $f.isEof; numCodegens = $f.numCodegens; numLiterals = $f.numLiterals; numOffsets = $f.numOffsets; value = $f.value; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		firstBits = 4;
		if (isEof) {
			firstBits = 5;
		}
		$r = w.writeBits(firstBits, 3); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = w.writeBits((((numLiterals - 257 >> 0) >> 0)), 5); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = w.writeBits((((numOffsets - 1 >> 0) >> 0)), 5); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = w.writeBits((((numCodegens - 4 >> 0) >> 0)), 4); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = 0;
		/* while (true) { */ case 5:
			/* if (!(i < numCodegens)) { break; } */ if(!(i < numCodegens)) { $s = 6; continue; }
			value = (((x = w.codegenEncoding.codes, x$1 = ((i < 0 || i >= codegenOrder.$length) ? ($throwRuntimeError("index out of range"), undefined) : codegenOrder.$array[codegenOrder.$offset + i]), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).len >>> 0));
			$r = w.writeBits(((value >> 0)), 3); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		i$1 = 0;
		/* while (true) { */ case 8:
			codeWord = (((x$2 = w.codegen, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1])) >> 0));
			i$1 = i$1 + (1) >> 0;
			if (codeWord === 255) {
				/* break; */ $s = 9; continue;
			}
			$r = w.writeCode($clone((x$3 = w.codegenEncoding.codes, x$4 = ((codeWord >>> 0)), ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])), hcode)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_1 = codeWord;
				/* */ if (_1 === (16)) { $s = 12; continue; }
				/* */ if (_1 === (17)) { $s = 13; continue; }
				/* */ if (_1 === (18)) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_1 === (16)) { */ case 12:
					$r = w.writeBits((((x$5 = w.codegen, ((i$1 < 0 || i$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i$1])) >> 0)), 2); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
					/* break; */ $s = 11; continue;
					$s = 15; continue;
				/* } else if (_1 === (17)) { */ case 13:
					$r = w.writeBits((((x$6 = w.codegen, ((i$1 < 0 || i$1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i$1])) >> 0)), 3); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
					/* break; */ $s = 11; continue;
					$s = 15; continue;
				/* } else if (_1 === (18)) { */ case 14:
					$r = w.writeBits((((x$7 = w.codegen, ((i$1 < 0 || i$1 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i$1])) >> 0)), 7); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
					/* break; */ $s = 11; continue;
				/* } */ case 15:
			case 11:
		/* } */ $s = 8; continue; case 9:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.writeDynamicHeader }; } $f._1 = _1; $f.codeWord = codeWord; $f.firstBits = firstBits; $f.i = i; $f.i$1 = i$1; $f.isEof = isEof; $f.numCodegens = numCodegens; $f.numLiterals = numLiterals; $f.numOffsets = numOffsets; $f.value = value; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.writeDynamicHeader = function(numLiterals, numOffsets, numCodegens, isEof) { return this.$val.writeDynamicHeader(numLiterals, numOffsets, numCodegens, isEof); };
	huffmanBitWriter.ptr.prototype.writeStoredHeader = function(length, isEof) {
		var flag, isEof, length, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; flag = $f.flag; isEof = $f.isEof; length = $f.length; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		flag = 0;
		if (isEof) {
			flag = 1;
		}
		$r = w.writeBits(flag, 3); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = w.flush(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = w.writeBits(((length >> 0)), 16); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = w.writeBits((((~((length << 16 >>> 16)) << 16 >>> 16) >> 0)), 16); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.writeStoredHeader }; } $f.flag = flag; $f.isEof = isEof; $f.length = length; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.writeStoredHeader = function(length, isEof) { return this.$val.writeStoredHeader(length, isEof); };
	huffmanBitWriter.ptr.prototype.writeFixedHeader = function(isEof) {
		var isEof, value, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; isEof = $f.isEof; value = $f.value; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		value = 2;
		if (isEof) {
			value = 3;
		}
		$r = w.writeBits(value, 3); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.writeFixedHeader }; } $f.isEof = isEof; $f.value = value; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.writeFixedHeader = function(isEof) { return this.$val.writeFixedHeader(isEof); };
	huffmanBitWriter.ptr.prototype.writeBlock = function(tokens, eof, input) {
		var _r, _tuple, _tuple$1, _tuple$2, dynamicSize, eof, extraBits, input, lengthCode$1, literalEncoding, numCodegens, numLiterals, numOffsets, offsetCode$1, offsetEncoding, size, storable, storedSize, tokens, w, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; dynamicSize = $f.dynamicSize; eof = $f.eof; extraBits = $f.extraBits; input = $f.input; lengthCode$1 = $f.lengthCode$1; literalEncoding = $f.literalEncoding; numCodegens = $f.numCodegens; numLiterals = $f.numLiterals; numOffsets = $f.numOffsets; offsetCode$1 = $f.offsetCode$1; offsetEncoding = $f.offsetEncoding; size = $f.size; storable = $f.storable; storedSize = $f.storedSize; tokens = $f.tokens; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		tokens = $append(tokens, 256);
		_r = w.indexTokens(tokens); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		numLiterals = _tuple[0];
		numOffsets = _tuple[1];
		extraBits = 0;
		_tuple$1 = w.storedSize(input);
		storedSize = _tuple$1[0];
		storable = _tuple$1[1];
		if (storable) {
			lengthCode$1 = 265;
			while (true) {
				if (!(lengthCode$1 < numLiterals)) { break; }
				extraBits = extraBits + (($imul((((x = w.literalFreq, ((lengthCode$1 < 0 || lengthCode$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + lengthCode$1])) >> 0)), (((x$1 = lengthCode$1 - 257 >> 0, ((x$1 < 0 || x$1 >= lengthExtraBits.$length) ? ($throwRuntimeError("index out of range"), undefined) : lengthExtraBits.$array[lengthExtraBits.$offset + x$1])) >> 0))))) >> 0;
				lengthCode$1 = lengthCode$1 + (1) >> 0;
			}
			offsetCode$1 = 4;
			while (true) {
				if (!(offsetCode$1 < numOffsets)) { break; }
				extraBits = extraBits + (($imul((((x$2 = w.offsetFreq, ((offsetCode$1 < 0 || offsetCode$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + offsetCode$1])) >> 0)), ((((offsetCode$1 < 0 || offsetCode$1 >= offsetExtraBits.$length) ? ($throwRuntimeError("index out of range"), undefined) : offsetExtraBits.$array[offsetExtraBits.$offset + offsetCode$1]) >> 0))))) >> 0;
				offsetCode$1 = offsetCode$1 + (1) >> 0;
			}
		}
		literalEncoding = fixedLiteralEncoding;
		offsetEncoding = fixedOffsetEncoding;
		size = w.fixedSize(extraBits);
		numCodegens = 0;
		w.generateCodegen(numLiterals, numOffsets, w.literalEncoding, w.offsetEncoding);
		$r = w.codegenEncoding.generate(new sliceType$7(w.codegenFreq), 7); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$2 = w.dynamicSize(w.literalEncoding, w.offsetEncoding, extraBits);
		dynamicSize = _tuple$2[0];
		numCodegens = _tuple$2[1];
		if (dynamicSize < size) {
			size = dynamicSize;
			literalEncoding = w.literalEncoding;
			offsetEncoding = w.offsetEncoding;
		}
		/* */ if (storable && storedSize < size) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (storable && storedSize < size) { */ case 3:
			$r = w.writeStoredHeader(input.$length, eof); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = w.writeBytes(input); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 4:
		/* */ if (literalEncoding === fixedLiteralEncoding) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (literalEncoding === fixedLiteralEncoding) { */ case 7:
			$r = w.writeFixedHeader(eof); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 9; continue;
		/* } else { */ case 8:
			$r = w.writeDynamicHeader(numLiterals, numOffsets, numCodegens, eof); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		$r = w.writeTokens(tokens, literalEncoding.codes, offsetEncoding.codes); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.writeBlock }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.dynamicSize = dynamicSize; $f.eof = eof; $f.extraBits = extraBits; $f.input = input; $f.lengthCode$1 = lengthCode$1; $f.literalEncoding = literalEncoding; $f.numCodegens = numCodegens; $f.numLiterals = numLiterals; $f.numOffsets = numOffsets; $f.offsetCode$1 = offsetCode$1; $f.offsetEncoding = offsetEncoding; $f.size = size; $f.storable = storable; $f.storedSize = storedSize; $f.tokens = tokens; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.writeBlock = function(tokens, eof, input) { return this.$val.writeBlock(tokens, eof, input); };
	huffmanBitWriter.ptr.prototype.writeBlockDynamic = function(tokens, eof, input) {
		var _r, _tuple, _tuple$1, _tuple$2, eof, input, numCodegens, numLiterals, numOffsets, size, ssize, storable, tokens, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; eof = $f.eof; input = $f.input; numCodegens = $f.numCodegens; numLiterals = $f.numLiterals; numOffsets = $f.numOffsets; size = $f.size; ssize = $f.ssize; storable = $f.storable; tokens = $f.tokens; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		tokens = $append(tokens, 256);
		_r = w.indexTokens(tokens); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		numLiterals = _tuple[0];
		numOffsets = _tuple[1];
		w.generateCodegen(numLiterals, numOffsets, w.literalEncoding, w.offsetEncoding);
		$r = w.codegenEncoding.generate(new sliceType$7(w.codegenFreq), 7); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$1 = w.dynamicSize(w.literalEncoding, w.offsetEncoding, 0);
		size = _tuple$1[0];
		numCodegens = _tuple$1[1];
		_tuple$2 = w.storedSize(input);
		ssize = _tuple$2[0];
		storable = _tuple$2[1];
		/* */ if (storable && ssize < ((size + (size >> 4 >> 0) >> 0))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (storable && ssize < ((size + (size >> 4 >> 0) >> 0))) { */ case 3:
			$r = w.writeStoredHeader(input.$length, eof); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = w.writeBytes(input); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 4:
		$r = w.writeDynamicHeader(numLiterals, numOffsets, numCodegens, eof); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = w.writeTokens(tokens, w.literalEncoding.codes, w.offsetEncoding.codes); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.writeBlockDynamic }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.eof = eof; $f.input = input; $f.numCodegens = numCodegens; $f.numLiterals = numLiterals; $f.numOffsets = numOffsets; $f.size = size; $f.ssize = ssize; $f.storable = storable; $f.tokens = tokens; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.writeBlockDynamic = function(tokens, eof, input) { return this.$val.writeBlockDynamic(tokens, eof, input); };
	huffmanBitWriter.ptr.prototype.indexTokens = function(tokens) {
		var _i, _i$1, _i$2, _index, _index$1, _index$2, _ref, _ref$1, _ref$2, i, i$1, length, numLiterals, numOffsets, offset, t, tokens, w, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _index = $f._index; _index$1 = $f._index$1; _index$2 = $f._index$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; i = $f.i; i$1 = $f.i$1; length = $f.length; numLiterals = $f.numLiterals; numOffsets = $f.numOffsets; offset = $f.offset; t = $f.t; tokens = $f.tokens; w = $f.w; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		numLiterals = 0;
		numOffsets = 0;
		w = this;
		_ref = w.literalFreq;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			(x = w.literalFreq, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = 0));
			_i++;
		}
		_ref$1 = w.offsetFreq;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			(x$1 = w.offsetFreq, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1] = 0));
			_i$1++;
		}
		_ref$2 = tokens;
		_i$2 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 2; continue; }
			t = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
			if (t < 1073741824) {
				_index = new token(t).literal();
				(x$3 = w.literalFreq, ((_index < 0 || _index >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + _index] = ((x$2 = w.literalFreq, ((_index < 0 || _index >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + _index])) + (1) >> 0)));
				_i$2++;
				/* continue; */ $s = 1; continue;
			}
			length = new token(t).length();
			offset = new token(t).offset();
			_index$1 = 257 + lengthCode(length) >>> 0;
			(x$5 = w.literalFreq, ((_index$1 < 0 || _index$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index$1] = ((x$4 = w.literalFreq, ((_index$1 < 0 || _index$1 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index$1])) + (1) >> 0)));
			_index$2 = offsetCode(offset);
			(x$7 = w.offsetFreq, ((_index$2 < 0 || _index$2 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + _index$2] = ((x$6 = w.offsetFreq, ((_index$2 < 0 || _index$2 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + _index$2])) + (1) >> 0)));
			_i$2++;
		/* } */ $s = 1; continue; case 2:
		numLiterals = w.literalFreq.$length;
		while (true) {
			if (!((x$8 = w.literalFreq, x$9 = numLiterals - 1 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])) === 0)) { break; }
			numLiterals = numLiterals - (1) >> 0;
		}
		numOffsets = w.offsetFreq.$length;
		while (true) {
			if (!(numOffsets > 0 && ((x$10 = w.offsetFreq, x$11 = numOffsets - 1 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11])) === 0))) { break; }
			numOffsets = numOffsets - (1) >> 0;
		}
		if (numOffsets === 0) {
			(x$12 = w.offsetFreq, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0] = 1));
			numOffsets = 1;
		}
		$r = w.literalEncoding.generate(w.literalFreq, 15); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = w.offsetEncoding.generate(w.offsetFreq, 15); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [numLiterals, numOffsets];
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.indexTokens }; } $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._index = _index; $f._index$1 = _index$1; $f._index$2 = _index$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.i = i; $f.i$1 = i$1; $f.length = length; $f.numLiterals = numLiterals; $f.numOffsets = numOffsets; $f.offset = offset; $f.t = t; $f.tokens = tokens; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.indexTokens = function(tokens) { return this.$val.indexTokens(tokens); };
	huffmanBitWriter.ptr.prototype.writeTokens = function(tokens, leCodes, oeCodes) {
		var _i, _ref, extraLength, extraLengthBits, extraOffset, extraOffsetBits, leCodes, length, lengthCode$1, oeCodes, offset, offsetCode$1, t, tokens, w, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; extraLength = $f.extraLength; extraLengthBits = $f.extraLengthBits; extraOffset = $f.extraOffset; extraOffsetBits = $f.extraOffsetBits; leCodes = $f.leCodes; length = $f.length; lengthCode$1 = $f.lengthCode$1; oeCodes = $f.oeCodes; offset = $f.offset; offsetCode$1 = $f.offsetCode$1; t = $f.t; tokens = $f.tokens; w = $f.w; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		_ref = tokens;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (t < 1073741824) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (t < 1073741824) { */ case 3:
				$r = w.writeCode($clone((x = new token(t).literal(), ((x < 0 || x >= leCodes.$length) ? ($throwRuntimeError("index out of range"), undefined) : leCodes.$array[leCodes.$offset + x])), hcode)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			length = new token(t).length();
			lengthCode$1 = lengthCode(length);
			$r = w.writeCode($clone((x$1 = lengthCode$1 + 257 >>> 0, ((x$1 < 0 || x$1 >= leCodes.$length) ? ($throwRuntimeError("index out of range"), undefined) : leCodes.$array[leCodes.$offset + x$1])), hcode)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			extraLengthBits = ((((lengthCode$1 < 0 || lengthCode$1 >= lengthExtraBits.$length) ? ($throwRuntimeError("index out of range"), undefined) : lengthExtraBits.$array[lengthExtraBits.$offset + lengthCode$1]) >>> 0));
			/* */ if (extraLengthBits > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (extraLengthBits > 0) { */ case 7:
				extraLength = (((length - ((lengthCode$1 < 0 || lengthCode$1 >= lengthBase.$length) ? ($throwRuntimeError("index out of range"), undefined) : lengthBase.$array[lengthBase.$offset + lengthCode$1]) >>> 0) >> 0));
				$r = w.writeBits(extraLength, extraLengthBits); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			offset = new token(t).offset();
			offsetCode$1 = offsetCode(offset);
			$r = w.writeCode($clone(((offsetCode$1 < 0 || offsetCode$1 >= oeCodes.$length) ? ($throwRuntimeError("index out of range"), undefined) : oeCodes.$array[oeCodes.$offset + offsetCode$1]), hcode)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			extraOffsetBits = ((((offsetCode$1 < 0 || offsetCode$1 >= offsetExtraBits.$length) ? ($throwRuntimeError("index out of range"), undefined) : offsetExtraBits.$array[offsetExtraBits.$offset + offsetCode$1]) >>> 0));
			/* */ if (extraOffsetBits > 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (extraOffsetBits > 0) { */ case 11:
				extraOffset = (((offset - ((offsetCode$1 < 0 || offsetCode$1 >= offsetBase.$length) ? ($throwRuntimeError("index out of range"), undefined) : offsetBase.$array[offsetBase.$offset + offsetCode$1]) >>> 0) >> 0));
				$r = w.writeBits(extraOffset, extraOffsetBits); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.writeTokens }; } $f._i = _i; $f._ref = _ref; $f.extraLength = extraLength; $f.extraLengthBits = extraLengthBits; $f.extraOffset = extraOffset; $f.extraOffsetBits = extraOffsetBits; $f.leCodes = leCodes; $f.length = length; $f.lengthCode$1 = lengthCode$1; $f.oeCodes = oeCodes; $f.offset = offset; $f.offsetCode$1 = offsetCode$1; $f.t = t; $f.tokens = tokens; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.writeTokens = function(tokens, leCodes, oeCodes) { return this.$val.writeTokens(tokens, leCodes, oeCodes); };
	init = function() {
		var w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = newHuffmanBitWriter($ifaceNil);
		(x = w.offsetFreq, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0] = 1));
		huffOffset = newHuffmanEncoder(30);
		$r = huffOffset.generate(w.offsetFreq, 15); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.ptr.prototype.writeBlockHuff = function(eof, input) {
		var _i, _i$1, _ref, _ref$1, _tuple, _tuple$1, bits$1, bytes, c, encoding, eof, i, input, n, numCodegens, size, ssize, storable, t, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bits$1 = $f.bits$1; bytes = $f.bytes; c = $f.c; encoding = $f.encoding; eof = $f.eof; i = $f.i; input = $f.input; n = $f.n; numCodegens = $f.numCodegens; size = $f.size; ssize = $f.ssize; storable = $f.storable; t = $f.t; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (!($interfaceIsEqual(w.err, $ifaceNil))) {
			$s = -1; return;
		}
		_ref = w.literalFreq;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			(x = w.literalFreq, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = 0));
			_i++;
		}
		histogram(input, w.literalFreq);
		(x$1 = w.literalFreq, (256 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 256] = 1));
		$r = w.literalEncoding.generate(w.literalFreq, 15); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		numCodegens = 0;
		w.generateCodegen(257, 1, w.literalEncoding, huffOffset);
		$r = w.codegenEncoding.generate(new sliceType$7(w.codegenFreq), 7); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = w.dynamicSize(w.literalEncoding, huffOffset, 0);
		size = _tuple[0];
		numCodegens = _tuple[1];
		_tuple$1 = w.storedSize(input);
		ssize = _tuple$1[0];
		storable = _tuple$1[1];
		/* */ if (storable && ssize < ((size + (size >> 4 >> 0) >> 0))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (storable && ssize < ((size + (size >> 4 >> 0) >> 0))) { */ case 3:
			$r = w.writeStoredHeader(input.$length, eof); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = w.writeBytes(input); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 4:
		$r = w.writeDynamicHeader(257, 1, numCodegens, eof); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		encoding = $subslice(w.literalEncoding.codes, 0, 257);
		n = w.nbytes;
		_ref$1 = input;
		_i$1 = 0;
		/* while (true) { */ case 8:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 9; continue; }
			t = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			c = $clone(((t < 0 || t >= encoding.$length) ? ($throwRuntimeError("index out of range"), undefined) : encoding.$array[encoding.$offset + t]), hcode);
			w.bits = (x$2 = w.bits, x$3 = $shiftLeft64((new $Uint64(0, c.code)), w.nbits), new $Uint64(x$2.$high | x$3.$high, (x$2.$low | x$3.$low) >>> 0));
			w.nbits = w.nbits + (((c.len >>> 0))) >>> 0;
			/* */ if (w.nbits < 48) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (w.nbits < 48) { */ case 10:
				_i$1++;
				/* continue; */ $s = 8; continue;
			/* } */ case 11:
			bits$1 = w.bits;
			w.bits = $shiftRightUint64(w.bits, (48));
			w.nbits = w.nbits - (48) >>> 0;
			bytes = $subslice(new sliceType$4(w.bytes), n, (n + 6 >> 0));
			(0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0] = ((bits$1.$low << 24 >>> 24)));
			(1 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 1] = (($shiftRightUint64(bits$1, 8).$low << 24 >>> 24)));
			(2 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 2] = (($shiftRightUint64(bits$1, 16).$low << 24 >>> 24)));
			(3 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 3] = (($shiftRightUint64(bits$1, 24).$low << 24 >>> 24)));
			(4 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 4] = (($shiftRightUint64(bits$1, 32).$low << 24 >>> 24)));
			(5 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 5] = (($shiftRightUint64(bits$1, 40).$low << 24 >>> 24)));
			n = n + (6) >> 0;
			/* */ if (n < 240) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (n < 240) { */ case 12:
				_i$1++;
				/* continue; */ $s = 8; continue;
			/* } */ case 13:
			$r = w.write($subslice(new sliceType$4(w.bytes), 0, n)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!($interfaceIsEqual(w.err, $ifaceNil))) {
				$s = -1; return;
			}
			n = 0;
			_i$1++;
		/* } */ $s = 8; continue; case 9:
		w.nbytes = n;
		$r = w.writeCode($clone((256 >= encoding.$length ? ($throwRuntimeError("index out of range"), undefined) : encoding.$array[encoding.$offset + 256]), hcode)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanBitWriter.ptr.prototype.writeBlockHuff }; } $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bits$1 = bits$1; $f.bytes = bytes; $f.c = c; $f.encoding = encoding; $f.eof = eof; $f.i = i; $f.input = input; $f.n = n; $f.numCodegens = numCodegens; $f.size = size; $f.ssize = ssize; $f.storable = storable; $f.t = t; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanBitWriter.prototype.writeBlockHuff = function(eof, input) { return this.$val.writeBlockHuff(eof, input); };
	histogram = function(b, h) {
		var _i, _ref, b, h, t;
		h = $subslice(h, 0, 256);
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((t < 0 || t >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + t] = (((t < 0 || t >= h.$length) ? ($throwRuntimeError("index out of range"), undefined) : h.$array[h.$offset + t]) + (1) >> 0));
			_i++;
		}
	};
	hcode.ptr.prototype.set = function(code, length) {
		var code, h, length;
		h = this;
		h.len = length;
		h.code = code;
	};
	hcode.prototype.set = function(code, length) { return this.$val.set(code, length); };
	maxNode = function() {
		return new literalNode.ptr(65535, 2147483647);
	};
	newHuffmanEncoder = function(size) {
		var size;
		return new huffmanEncoder.ptr($makeSlice(sliceType$8, size), sliceType$9.nil, arrayType$7.zero(), byLiteral.nil, byFreq.nil);
	};
	generateFixedLiteralEncoding = function() {
		var bits$1, ch, codes, h, size;
		h = newHuffmanEncoder(286);
		codes = h.codes;
		ch = 0;
		ch = 0;
		while (true) {
			if (!(ch < 286)) { break; }
			bits$1 = 0;
			size = 0;
			switch (0) { default:
				if (ch < 144) {
					bits$1 = ch + 48 << 16 >>> 16;
					size = 8;
					break;
				} else if (ch < 256) {
					bits$1 = (ch + 400 << 16 >>> 16) - 144 << 16 >>> 16;
					size = 9;
					break;
				} else if (ch < 280) {
					bits$1 = ch - 256 << 16 >>> 16;
					size = 7;
					break;
				} else {
					bits$1 = (ch + 192 << 16 >>> 16) - 280 << 16 >>> 16;
					size = 8;
				}
			}
			hcode.copy(((ch < 0 || ch >= codes.$length) ? ($throwRuntimeError("index out of range"), undefined) : codes.$array[codes.$offset + ch]), new hcode.ptr(reverseBits(bits$1, ((size << 24 >>> 24))), size));
			ch = ch + (1) << 16 >>> 16;
		}
		return h;
	};
	generateFixedOffsetEncoding = function() {
		var _i, _ref, ch, codes, h;
		h = newHuffmanEncoder(30);
		codes = h.codes;
		_ref = codes;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ch = _i;
			hcode.copy(((ch < 0 || ch >= codes.$length) ? ($throwRuntimeError("index out of range"), undefined) : codes.$array[codes.$offset + ch]), new hcode.ptr(reverseBits(((ch << 16 >>> 16)), 5), 5));
			_i++;
		}
		return h;
	};
	huffmanEncoder.ptr.prototype.bitLength = function(freq) {
		var _i, _ref, f, freq, h, i, total, x;
		h = this;
		total = 0;
		_ref = freq;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((f === 0))) {
				total = total + (($imul(((f >> 0)), (((x = h.codes, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).len >> 0))))) >> 0;
			}
			_i++;
		}
		return total;
	};
	huffmanEncoder.prototype.bitLength = function(freq) { return this.$val.bitLength(freq); };
	huffmanEncoder.ptr.prototype.bitCounts = function(list, maxBits) {
		var bitCount, bits$1, counts, h, l, leafCounts, level, level$1, level$2, levels$1, list, maxBits, n, n$1, prevFreq, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		h = this;
		if (maxBits >= 16) {
			$panic(new $String("flate: maxBits too large"));
		}
		n = ((list.$length >> 0));
		list = $subslice(list, 0, (n + 1 >> 0));
		literalNode.copy(((n < 0 || n >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + n]), maxNode());
		if (maxBits > (n - 1 >> 0)) {
			maxBits = n - 1 >> 0;
		}
		levels$1 = arrayType$8.zero();
		leafCounts = arrayType$10.zero();
		level = 1;
		while (true) {
			if (!(level <= maxBits)) { break; }
			levelInfo.copy(((level < 0 || level >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level]), new levelInfo.ptr(level, (1 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 1]).freq, (2 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 2]).freq, (0 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 0]).freq + (1 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 1]).freq >> 0, 0));
			(x = ((level < 0 || level >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level]), ((level < 0 || level >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[level] = 2));
			if (level === 1) {
				((level < 0 || level >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level]).nextPairFreq = 2147483647;
			}
			level = level + (1) >> 0;
		}
		((maxBits < 0 || maxBits >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[maxBits]).needed = ($imul(2, n)) - 4 >> 0;
		level$1 = maxBits;
		while (true) {
			l = ((level$1 < 0 || level$1 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level$1]);
			if ((l.nextPairFreq === 2147483647) && (l.nextCharFreq === 2147483647)) {
				l.needed = 0;
				(x$1 = level$1 + 1 >> 0, ((x$1 < 0 || x$1 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$1])).nextPairFreq = 2147483647;
				level$1 = level$1 + (1) >> 0;
				continue;
			}
			prevFreq = l.lastFreq;
			if (l.nextCharFreq < l.nextPairFreq) {
				n$1 = (x$2 = ((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1]), ((level$1 < 0 || level$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[level$1])) + 1 >> 0;
				l.lastFreq = l.nextCharFreq;
				(x$3 = ((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1]), ((level$1 < 0 || level$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[level$1] = n$1));
				l.nextCharFreq = ((n$1 < 0 || n$1 >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + n$1]).freq;
			} else {
				l.lastFreq = l.nextPairFreq;
				$copySlice($subslice(new sliceType$7(((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1])), 0, level$1), $subslice(new sliceType$7((x$4 = level$1 - 1 >> 0, ((x$4 < 0 || x$4 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[x$4]))), 0, level$1));
				(x$5 = l.level - 1 >> 0, ((x$5 < 0 || x$5 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$5])).needed = 2;
			}
			l.needed = l.needed - (1) >> 0;
			if (l.needed === 0) {
				if (l.level === maxBits) {
					break;
				}
				(x$6 = l.level + 1 >> 0, ((x$6 < 0 || x$6 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$6])).nextPairFreq = prevFreq + l.lastFreq >> 0;
				level$1 = level$1 + (1) >> 0;
			} else {
				while (true) {
					if (!((x$7 = level$1 - 1 >> 0, ((x$7 < 0 || x$7 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$7])).needed > 0)) { break; }
					level$1 = level$1 - (1) >> 0;
				}
			}
		}
		if (!(((x$8 = ((maxBits < 0 || maxBits >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[maxBits]), ((maxBits < 0 || maxBits >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[maxBits])) === n))) {
			$panic(new $String("leafCounts[maxBits][maxBits] != n"));
		}
		bitCount = $subslice(new sliceType$7(h.bitCount), 0, (maxBits + 1 >> 0));
		bits$1 = 1;
		counts = ((maxBits < 0 || maxBits >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[maxBits]);
		level$2 = maxBits;
		while (true) {
			if (!(level$2 > 0)) { break; }
			((bits$1 < 0 || bits$1 >= bitCount.$length) ? ($throwRuntimeError("index out of range"), undefined) : bitCount.$array[bitCount.$offset + bits$1] = ((counts.nilCheck, ((level$2 < 0 || level$2 >= counts.length) ? ($throwRuntimeError("index out of range"), undefined) : counts[level$2])) - (x$9 = level$2 - 1 >> 0, (counts.nilCheck, ((x$9 < 0 || x$9 >= counts.length) ? ($throwRuntimeError("index out of range"), undefined) : counts[x$9]))) >> 0));
			bits$1 = bits$1 + (1) >> 0;
			level$2 = level$2 - (1) >> 0;
		}
		return bitCount;
	};
	huffmanEncoder.prototype.bitCounts = function(list, maxBits) { return this.$val.bitCounts(list, maxBits); };
	huffmanEncoder.ptr.prototype.assignEncodingAndSize = function(bitCount, list) {
		var _i, _i$1, _ref, _ref$1, bitCount, bits$1, chunk, code, h, list, n, node, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; bitCount = $f.bitCount; bits$1 = $f.bits$1; chunk = $f.chunk; code = $f.code; h = $f.h; list = $f.list; n = $f.n; node = $f.node; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		code = 0;
		_ref = bitCount;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			n = _i;
			bits$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			code = (y = (1), y < 32 ? (code << y) : 0) << 16 >>> 16;
			/* */ if ((n === 0) || (bits$1 === 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((n === 0) || (bits$1 === 0)) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			chunk = $subslice(list, (list.$length - ((bits$1 >> 0)) >> 0));
			$r = (h.$ptr_lns || (h.$ptr_lns = new ptrType$7(function() { return this.$target.lns; }, function($v) { this.$target.lns = $v; }, h))).sort(chunk); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref$1 = chunk;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				node = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), literalNode);
				hcode.copy((x = h.codes, x$1 = node.literal, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), new hcode.ptr(reverseBits(code, ((n << 24 >>> 24))), ((n << 16 >>> 16))));
				code = code + (1) << 16 >>> 16;
				_i$1++;
			}
			list = $subslice(list, 0, (list.$length - ((bits$1 >> 0)) >> 0));
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanEncoder.ptr.prototype.assignEncodingAndSize }; } $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitCount = bitCount; $f.bits$1 = bits$1; $f.chunk = chunk; $f.code = code; $f.h = h; $f.list = list; $f.n = n; $f.node = node; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanEncoder.prototype.assignEncodingAndSize = function(bitCount, list) { return this.$val.assignEncodingAndSize(bitCount, list); };
	huffmanEncoder.ptr.prototype.generate = function(freq, maxBits) {
		var _i, _i$1, _ref, _ref$1, bitCount, count, f, freq, h, i, i$1, list, maxBits, node, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; bitCount = $f.bitCount; count = $f.count; f = $f.f; freq = $f.freq; h = $f.h; i = $f.i; i$1 = $f.i$1; list = $f.list; maxBits = $f.maxBits; node = $f.node; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		if (h.freqcache === sliceType$9.nil) {
			h.freqcache = $makeSlice(sliceType$9, 287);
		}
		list = $subslice(h.freqcache, 0, (freq.$length + 1 >> 0));
		count = 0;
		_ref = freq;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((f === 0))) {
				literalNode.copy(((count < 0 || count >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + count]), new literalNode.ptr(((i << 16 >>> 16)), f));
				count = count + (1) >> 0;
			} else {
				literalNode.copy(((count < 0 || count >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + count]), new literalNode.ptr(0, 0));
				(x = h.codes, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).len = 0;
			}
			_i++;
		}
		literalNode.copy((x$1 = freq.$length, ((x$1 < 0 || x$1 >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + x$1])), new literalNode.ptr(0, 0));
		list = $subslice(list, 0, count);
		if (count <= 2) {
			_ref$1 = list;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				node = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), literalNode);
				(x$2 = h.codes, x$3 = node.literal, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).set(((i$1 << 16 >>> 16)), 1);
				_i$1++;
			}
			$s = -1; return;
		}
		$r = (h.$ptr_lfs || (h.$ptr_lfs = new ptrType$8(function() { return this.$target.lfs; }, function($v) { this.$target.lfs = $v; }, h))).sort(list); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		bitCount = h.bitCounts(list, maxBits);
		$r = h.assignEncodingAndSize(bitCount, list); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanEncoder.ptr.prototype.generate }; } $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitCount = bitCount; $f.count = count; $f.f = f; $f.freq = freq; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.list = list; $f.maxBits = maxBits; $f.node = node; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanEncoder.prototype.generate = function(freq, maxBits) { return this.$val.generate(freq, maxBits); };
	$ptrType(byLiteral).prototype.sort = function(a) {
		var a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.$set(($subslice(new byLiteral(a.$array), a.$offset, a.$offset + a.$length)));
		$r = sort.Sort(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(byLiteral).prototype.sort }; } $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	byLiteral.prototype.Len = function() {
		var s;
		s = this;
		return s.$length;
	};
	$ptrType(byLiteral).prototype.Len = function() { return this.$get().Len(); };
	byLiteral.prototype.Less = function(i, j) {
		var i, j, s;
		s = this;
		return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).literal < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).literal;
	};
	$ptrType(byLiteral).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byLiteral.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), literalNode);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), literalNode);
		literalNode.copy(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), _tmp);
		literalNode.copy(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(byLiteral).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	$ptrType(byFreq).prototype.sort = function(a) {
		var a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.$set(($subslice(new byFreq(a.$array), a.$offset, a.$offset + a.$length)));
		$r = sort.Sort(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(byFreq).prototype.sort }; } $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	byFreq.prototype.Len = function() {
		var s;
		s = this;
		return s.$length;
	};
	$ptrType(byFreq).prototype.Len = function() { return this.$get().Len(); };
	byFreq.prototype.Less = function(i, j) {
		var i, j, s;
		s = this;
		if (((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).freq === ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).freq) {
			return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).literal < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).literal;
		}
		return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).freq < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).freq;
	};
	$ptrType(byFreq).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byFreq.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), literalNode);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), literalNode);
		literalNode.copy(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), _tmp);
		literalNode.copy(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(byFreq).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	reverseBits = function(number, bitLength) {
		var bitLength, number, y;
		return bits.Reverse16((y = ((16 - bitLength << 24 >>> 24)), y < 32 ? (number << y) : 0) << 16 >>> 16);
	};
	CorruptInputError.prototype.Error = function() {
		var e;
		e = this;
		return "flate: corrupt input before offset " + strconv.FormatInt((new $Int64(e.$high, e.$low)), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	InternalError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "flate: internal error: " + (e);
	};
	$ptrType(InternalError).prototype.Error = function() { return new InternalError(this.$get()).Error(); };
	huffmanDecoder.ptr.prototype.init = function(bits$1) {
		var _i, _i$1, _i$2, _i$3, _i$4, _r, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, bits$1, chunk, chunk$1, chunk$2, code, code$1, count, h, i, i$1, i$2, j, j$1, link, linktab, linktab$1, max, min, n, n$1, nextcode, numLinks, off, off$1, off$2, reverse, reverse$1, value, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, y, y$1, y$2, y$3, y$4;
		h = this;
		if (!((h.min === 0))) {
			huffmanDecoder.copy(h, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0));
		}
		count = arrayType$11.zero();
		_tmp = 0;
		_tmp$1 = 0;
		min = _tmp;
		max = _tmp$1;
		_ref = bits$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			n = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (n === 0) {
				_i++;
				continue;
			}
			if ((min === 0) || n < min) {
				min = n;
			}
			if (n > max) {
				max = n;
			}
			((n < 0 || n >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[n] = (((n < 0 || n >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[n]) + (1) >> 0));
			_i++;
		}
		if (max === 0) {
			return true;
		}
		code = 0;
		nextcode = arrayType$11.zero();
		i = min;
		while (true) {
			if (!(i <= max)) { break; }
			code = (y = (1), y < 32 ? (code << y) : 0) >> 0;
			((i < 0 || i >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[i] = code);
			code = code + (((i < 0 || i >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[i])) >> 0;
			i = i + (1) >> 0;
		}
		if (!((code === ((y$1 = ((max >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >> 0))) && !((code === 1) && (max === 1))) {
			return false;
		}
		h.min = min;
		if (max > 9) {
			numLinks = (y$2 = ((((max >>> 0)) - 9 >>> 0)), y$2 < 32 ? (1 << y$2) : 0) >> 0;
			h.linkMask = (((numLinks - 1 >> 0) >>> 0));
			link = nextcode[10] >> 1 >> 0;
			h.links = $makeSlice(sliceType$1, (512 - link >> 0));
			j = ((link >>> 0));
			while (true) {
				if (!(j < 512)) { break; }
				reverse = ((bits.Reverse16(((j << 16 >>> 16))) >> 0));
				reverse = (reverse >> $min((7), 31)) >> 0;
				off = j - ((link >>> 0)) >>> 0;
				if (false && !(((x = h.chunks, ((reverse < 0 || reverse >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[reverse])) === 0))) {
					$panic(new $String("impossible: overwriting existing chunk"));
				}
				(x$1 = h.chunks, ((reverse < 0 || reverse >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[reverse] = (((((off << 4 >>> 0) | 10) >>> 0) >>> 0))));
				(x$2 = h.links, ((off < 0 || off >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + off] = $makeSlice(sliceType, numLinks)));
				j = j + (1) >>> 0;
			}
		}
		_ref$1 = bits$1;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (n$1 === 0) {
				_i$1++;
				continue;
			}
			code$1 = ((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1]);
			((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1] = (((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1]) + (1) >> 0));
			chunk = ((((i$1 << 4 >> 0) | n$1) >>> 0));
			reverse$1 = ((bits.Reverse16(((code$1 << 16 >>> 16))) >> 0));
			reverse$1 = (reverse$1 >> $min(((((16 - n$1 >> 0) >>> 0))), 31)) >> 0;
			if (n$1 <= 9) {
				off$1 = reverse$1;
				while (true) {
					if (!(off$1 < 512)) { break; }
					if (false && !(((x$3 = h.chunks, ((off$1 < 0 || off$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[off$1])) === 0))) {
						$panic(new $String("impossible: overwriting existing chunk"));
					}
					(x$4 = h.chunks, ((off$1 < 0 || off$1 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[off$1] = chunk));
					off$1 = off$1 + (((y$3 = ((n$1 >>> 0)), y$3 < 32 ? (1 << y$3) : 0) >> 0)) >> 0;
				}
			} else {
				j$1 = reverse$1 & 511;
				if (false && !(((((x$5 = h.chunks, ((j$1 < 0 || j$1 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[j$1])) & 15) >>> 0) === 10))) {
					$panic(new $String("impossible: not an indirect chunk"));
				}
				value = (x$6 = h.chunks, ((j$1 < 0 || j$1 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[j$1])) >>> 4 >>> 0;
				linktab = (x$7 = h.links, ((value < 0 || value >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + value]));
				reverse$1 = (reverse$1 >> $min((9), 31)) >> 0;
				off$2 = reverse$1;
				while (true) {
					if (!(off$2 < linktab.$length)) { break; }
					if (false && !((((off$2 < 0 || off$2 >= linktab.$length) ? ($throwRuntimeError("index out of range"), undefined) : linktab.$array[linktab.$offset + off$2]) === 0))) {
						$panic(new $String("impossible: overwriting existing chunk"));
					}
					((off$2 < 0 || off$2 >= linktab.$length) ? ($throwRuntimeError("index out of range"), undefined) : linktab.$array[linktab.$offset + off$2] = chunk);
					off$2 = off$2 + (((y$4 = (((n$1 - 9 >> 0) >>> 0)), y$4 < 32 ? (1 << y$4) : 0) >> 0)) >> 0;
				}
			}
			_i$1++;
		}
		if (false) {
			_ref$2 = h.chunks;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < 512)) { break; }
				i$2 = _i$2;
				chunk$1 = ((_i$2 < 0 || _i$2 >= _ref$2.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2[_i$2]);
				if (chunk$1 === 0) {
					if ((code === 1) && ((_r = i$2 % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1)) {
						_i$2++;
						continue;
					}
					$panic(new $String("impossible: missing chunk"));
				}
				_i$2++;
			}
			_ref$3 = h.links;
			_i$3 = 0;
			while (true) {
				if (!(_i$3 < _ref$3.$length)) { break; }
				linktab$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
				_ref$4 = linktab$1;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					chunk$2 = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$4]);
					if (chunk$2 === 0) {
						$panic(new $String("impossible: missing chunk"));
					}
					_i$4++;
				}
				_i$3++;
			}
		}
		return true;
	};
	huffmanDecoder.prototype.init = function(bits$1) { return this.$val.init(bits$1); };
	decompressor.ptr.prototype.nextBlock = function() {
		var _1, _r, _r$1, f, typ, x, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; typ = $f.typ; x = $f.x; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			/* if (!(f.nb < 3)) { break; } */ if(!(f.nb < 3)) { $s = 2; continue; }
			_r = f.moreBits(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			f.err = _r;
			if (!($interfaceIsEqual(f.err, $ifaceNil))) {
				$s = -1; return;
			}
		/* } */ $s = 1; continue; case 2:
		f.final$12 = ((f.b & 1) >>> 0) === 1;
		f.b = (y = (1), y < 32 ? (f.b >>> y) : 0) >>> 0;
		typ = (f.b & 3) >>> 0;
		f.b = (y$1 = (2), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
		f.nb = f.nb - (3) >>> 0;
			_1 = typ;
			/* */ if (_1 === (0)) { $s = 5; continue; }
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (0)) { */ case 5:
				$r = f.dataBlock(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else if (_1 === (1)) { */ case 6:
				f.hl = fixedHuffmanDecoder;
				f.hd = ptrType$9.nil;
				$r = f.huffmanBlock(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else if (_1 === (2)) { */ case 7:
				_r$1 = f.readHuffman(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				f.err = _r$1;
				if (!($interfaceIsEqual(f.err, $ifaceNil))) {
					/* break; */ $s = 4; continue;
				}
				f.hl = f.h1;
				f.hd = f.h2;
				$r = f.huffmanBlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else { */ case 8:
				f.err = ((x = f.roffset, new CorruptInputError(x.$high, x.$low)));
			/* } */ case 9:
		case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.nextBlock }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.typ = typ; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.nextBlock = function() { return this.$val.nextBlock(); };
	decompressor.ptr.prototype.Read = function(b) {
		var b, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			if (f.toRead.$length > 0) {
				n = $copySlice(b, f.toRead);
				f.toRead = $subslice(f.toRead, n);
				if (f.toRead.$length === 0) {
					$s = -1; return [n, f.err];
				}
				$s = -1; return [n, $ifaceNil];
			}
			if (!($interfaceIsEqual(f.err, $ifaceNil))) {
				$s = -1; return [0, f.err];
			}
			$r = f.step(f); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!($interfaceIsEqual(f.err, $ifaceNil)) && (f.toRead.$length === 0)) {
				f.toRead = f.dict.readFlush();
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.Read }; } $f.b = b; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.Read = function(b) { return this.$val.Read(b); };
	decompressor.ptr.prototype.Close = function() {
		var f;
		f = this;
		if ($interfaceIsEqual(f.err, io.EOF)) {
			return $ifaceNil;
		}
		return f.err;
	};
	decompressor.prototype.Close = function() { return this.$val.Close(); };
	decompressor.ptr.prototype.readHuffman = function() {
		var _1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, b, err, err$1, err$2, err$3, f, i, i$1, i$2, j, n, nb, nclen, ndist, nlit, rep, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4, y$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; n = $f.n; nb = $f.nb; nclen = $f.nclen; ndist = $f.ndist; nlit = $f.nlit; rep = $f.rep; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			/* if (!(f.nb < 14)) { break; } */ if(!(f.nb < 14)) { $s = 2; continue; }
			_r = f.moreBits(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
		/* } */ $s = 1; continue; case 2:
		nlit = ((((f.b & 31) >>> 0) >> 0)) + 257 >> 0;
		if (nlit > 286) {
			$s = -1; return ((x = f.roffset, new CorruptInputError(x.$high, x.$low)));
		}
		f.b = (y = (5), y < 32 ? (f.b >>> y) : 0) >>> 0;
		ndist = ((((f.b & 31) >>> 0) >> 0)) + 1 >> 0;
		if (ndist > 30) {
			$s = -1; return ((x$1 = f.roffset, new CorruptInputError(x$1.$high, x$1.$low)));
		}
		f.b = (y$1 = (5), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
		nclen = ((((f.b & 15) >>> 0) >> 0)) + 4 >> 0;
		f.b = (y$2 = (4), y$2 < 32 ? (f.b >>> y$2) : 0) >>> 0;
		f.nb = f.nb - (14) >>> 0;
		i = 0;
		/* while (true) { */ case 4:
			/* if (!(i < nclen)) { break; } */ if(!(i < nclen)) { $s = 5; continue; }
			/* while (true) { */ case 6:
				/* if (!(f.nb < 3)) { break; } */ if(!(f.nb < 3)) { $s = 7; continue; }
				_r$1 = f.moreBits(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err$1 = _r$1;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
			/* } */ $s = 6; continue; case 7:
			(x$2 = f.codebits, x$3 = ((i < 0 || i >= codeOrder.length) ? ($throwRuntimeError("index out of range"), undefined) : codeOrder[i]), x$2.nilCheck, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3] = ((((f.b & 7) >>> 0) >> 0))));
			f.b = (y$3 = (3), y$3 < 32 ? (f.b >>> y$3) : 0) >>> 0;
			f.nb = f.nb - (3) >>> 0;
			i = i + (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		i$1 = nclen;
		while (true) {
			if (!(i$1 < 19)) { break; }
			(x$4 = f.codebits, x$5 = ((i$1 < 0 || i$1 >= codeOrder.length) ? ($throwRuntimeError("index out of range"), undefined) : codeOrder[i$1]), x$4.nilCheck, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5] = 0));
			i$1 = i$1 + (1) >> 0;
		}
		if (!f.h1.init($subslice(new sliceType$10(f.codebits), 0))) {
			$s = -1; return ((x$6 = f.roffset, new CorruptInputError(x$6.$high, x$6.$low)));
		}
		_tmp = 0;
		_tmp$1 = nlit + ndist >> 0;
		i$2 = _tmp;
		n = _tmp$1;
		/* while (true) { */ case 9:
			/* if (!(i$2 < n)) { break; } */ if(!(i$2 < n)) { $s = 10; continue; }
			_r$2 = f.huffSym(f.h1); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			x$7 = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
			/* */ if (x$7 < 16) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (x$7 < 16) { */ case 12:
				(x$8 = f.bits, x$8.nilCheck, ((i$2 < 0 || i$2 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[i$2] = x$7));
				i$2 = i$2 + (1) >> 0;
				/* continue; */ $s = 9; continue;
			/* } */ case 13:
			rep = 0;
			nb = 0;
			b = 0;
			_1 = x$7;
			if (_1 === (16)) {
				rep = 3;
				nb = 2;
				if (i$2 === 0) {
					$s = -1; return ((x$9 = f.roffset, new CorruptInputError(x$9.$high, x$9.$low)));
				}
				b = (x$10 = f.bits, x$11 = i$2 - 1 >> 0, (x$10.nilCheck, ((x$11 < 0 || x$11 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[x$11])));
			} else if (_1 === (17)) {
				rep = 3;
				nb = 3;
				b = 0;
			} else if (_1 === (18)) {
				rep = 11;
				nb = 7;
				b = 0;
			} else {
				$s = -1; return new InternalError("unexpected length code");
			}
			/* while (true) { */ case 14:
				/* if (!(f.nb < nb)) { break; } */ if(!(f.nb < nb)) { $s = 15; continue; }
				_r$3 = f.moreBits(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err$3 = _r$3;
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return err$3;
				}
			/* } */ $s = 14; continue; case 15:
			rep = rep + (((((f.b & ((((y$4 = nb, y$4 < 32 ? (1 << y$4) : 0) >>> 0) - 1 >>> 0))) >>> 0) >> 0))) >> 0;
			f.b = (y$5 = (nb), y$5 < 32 ? (f.b >>> y$5) : 0) >>> 0;
			f.nb = f.nb - (nb) >>> 0;
			if ((i$2 + rep >> 0) > n) {
				$s = -1; return ((x$12 = f.roffset, new CorruptInputError(x$12.$high, x$12.$low)));
			}
			j = 0;
			while (true) {
				if (!(j < rep)) { break; }
				(x$13 = f.bits, x$13.nilCheck, ((i$2 < 0 || i$2 >= x$13.length) ? ($throwRuntimeError("index out of range"), undefined) : x$13[i$2] = b));
				i$2 = i$2 + (1) >> 0;
				j = j + (1) >> 0;
			}
		/* } */ $s = 9; continue; case 10:
		if (!f.h1.init($subslice(new sliceType$10(f.bits), 0, nlit)) || !f.h2.init($subslice(new sliceType$10(f.bits), nlit, (nlit + ndist >> 0)))) {
			$s = -1; return ((x$14 = f.roffset, new CorruptInputError(x$14.$high, x$14.$low)));
		}
		if (f.h1.min < (x$15 = f.bits, (x$15.nilCheck, x$15[256]))) {
			f.h1.min = (x$16 = f.bits, (x$16.nilCheck, x$16[256]));
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.readHuffman }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.n = n; $f.nb = nb; $f.nclen = nclen; $f.ndist = ndist; $f.nlit = nlit; $f.rep = rep; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.readHuffman = function() { return this.$val.readHuffman(); };
	decompressor.ptr.prototype.huffmanBlock = function() {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, cnt, dist, err, extra, f, length, n, nb, v, x, x$1, x$2, y, y$1, y$2, y$3, y$4, y$5, y$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; cnt = $f.cnt; dist = $f.dist; err = $f.err; extra = $f.extra; f = $f.f; length = $f.length; n = $f.n; nb = $f.nb; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
			_1 = f.stepState;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (0)) { */ case 2:
				/* goto readLiteral */ $s = 5; continue;
				$s = 4; continue;
			/* } else if (_1 === (1)) { */ case 3:
				/* goto copyHistory */ $s = 6; continue;
			/* } */ case 4:
		case 1:
		/* readLiteral: */ case 5:
		_r = f.huffSym(f.hl); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		v = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			f.err = err;
			$s = -1; return;
		}
		n = 0;
		length = 0;
			/* */ if (v < 256) { $s = 9; continue; }
			/* */ if ((v === 256)) { $s = 10; continue; }
			/* */ if (v < 265) { $s = 11; continue; }
			/* */ if (v < 269) { $s = 12; continue; }
			/* */ if (v < 273) { $s = 13; continue; }
			/* */ if (v < 277) { $s = 14; continue; }
			/* */ if (v < 281) { $s = 15; continue; }
			/* */ if (v < 285) { $s = 16; continue; }
			/* */ if (v < 286) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (v < 256) { */ case 9:
				f.dict.writeByte(((v << 24 >>> 24)));
				if (f.dict.availWrite() === 0) {
					f.toRead = f.dict.readFlush();
					f.step = $methodExpr(ptrType$10, "huffmanBlock");
					f.stepState = 0;
					$s = -1; return;
				}
				/* goto readLiteral */ $s = 5; continue;
				$s = 19; continue;
			/* } else if ((v === 256)) { */ case 10:
				f.finishBlock();
				$s = -1; return;
			/* } else if (v < 265) { */ case 11:
				length = v - 254 >> 0;
				n = 0;
				$s = 19; continue;
			/* } else if (v < 269) { */ case 12:
				length = ($imul(v, 2)) - 519 >> 0;
				n = 1;
				$s = 19; continue;
			/* } else if (v < 273) { */ case 13:
				length = ($imul(v, 4)) - 1057 >> 0;
				n = 2;
				$s = 19; continue;
			/* } else if (v < 277) { */ case 14:
				length = ($imul(v, 8)) - 2149 >> 0;
				n = 3;
				$s = 19; continue;
			/* } else if (v < 281) { */ case 15:
				length = ($imul(v, 16)) - 4365 >> 0;
				n = 4;
				$s = 19; continue;
			/* } else if (v < 285) { */ case 16:
				length = ($imul(v, 32)) - 8861 >> 0;
				n = 5;
				$s = 19; continue;
			/* } else if (v < 286) { */ case 17:
				length = 258;
				n = 0;
				$s = 19; continue;
			/* } else { */ case 18:
				f.err = ((x = f.roffset, new CorruptInputError(x.$high, x.$low)));
				$s = -1; return;
			/* } */ case 19:
		case 8:
		/* */ if (n > 0) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (n > 0) { */ case 20:
			/* while (true) { */ case 22:
				/* if (!(f.nb < n)) { break; } */ if(!(f.nb < n)) { $s = 23; continue; }
				_r$1 = f.moreBits(); /* */ $s = 24; case 24: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					f.err = err;
					$s = -1; return;
				}
			/* } */ $s = 22; continue; case 23:
			length = length + (((((f.b & ((((y = n, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0))) >>> 0) >> 0))) >> 0;
			f.b = (y$1 = (n), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
			f.nb = f.nb - (n) >>> 0;
		/* } */ case 21:
		dist = 0;
		/* */ if (f.hd === ptrType$9.nil) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if (f.hd === ptrType$9.nil) { */ case 25:
			/* while (true) { */ case 28:
				/* if (!(f.nb < 5)) { break; } */ if(!(f.nb < 5)) { $s = 29; continue; }
				_r$2 = f.moreBits(); /* */ $s = 30; case 30: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					f.err = err;
					$s = -1; return;
				}
			/* } */ $s = 28; continue; case 29:
			dist = ((bits.Reverse8((((((f.b & 31) >>> 0) << 3 >>> 0) << 24 >>> 24))) >> 0));
			f.b = (y$2 = (5), y$2 < 32 ? (f.b >>> y$2) : 0) >>> 0;
			f.nb = f.nb - (5) >>> 0;
			$s = 27; continue;
		/* } else { */ case 26:
			_r$3 = f.huffSym(f.hd); /* */ $s = 31; case 31: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			dist = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				f.err = err;
				$s = -1; return;
			}
		/* } */ case 27:
			/* */ if (dist < 4) { $s = 33; continue; }
			/* */ if (dist < 30) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (dist < 4) { */ case 33:
				dist = dist + (1) >> 0;
				$s = 36; continue;
			/* } else if (dist < 30) { */ case 34:
				nb = (((dist - 2 >> 0) >>> 0)) >>> 1 >>> 0;
				extra = (y$3 = nb, y$3 < 32 ? (((dist & 1)) << y$3) : 0) >> 0;
				/* while (true) { */ case 37:
					/* if (!(f.nb < nb)) { break; } */ if(!(f.nb < nb)) { $s = 38; continue; }
					_r$4 = f.moreBits(); /* */ $s = 39; case 39: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					err = _r$4;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						f.err = err;
						$s = -1; return;
					}
				/* } */ $s = 37; continue; case 38:
				extra = extra | (((((f.b & ((((y$4 = nb, y$4 < 32 ? (1 << y$4) : 0) >>> 0) - 1 >>> 0))) >>> 0) >> 0)));
				f.b = (y$5 = (nb), y$5 < 32 ? (f.b >>> y$5) : 0) >>> 0;
				f.nb = f.nb - (nb) >>> 0;
				dist = (((y$6 = ((nb + 1 >>> 0)), y$6 < 32 ? (1 << y$6) : 0) >> 0) + 1 >> 0) + extra >> 0;
				$s = 36; continue;
			/* } else { */ case 35:
				f.err = ((x$1 = f.roffset, new CorruptInputError(x$1.$high, x$1.$low)));
				$s = -1; return;
			/* } */ case 36:
		case 32:
		if (dist > f.dict.histSize()) {
			f.err = ((x$2 = f.roffset, new CorruptInputError(x$2.$high, x$2.$low)));
			$s = -1; return;
		}
		_tmp = length;
		_tmp$1 = dist;
		f.copyLen = _tmp;
		f.copyDist = _tmp$1;
		/* goto copyHistory */ $s = 6; continue;
		/* copyHistory: */ case 6:
		cnt = f.dict.tryWriteCopy(f.copyDist, f.copyLen);
		if (cnt === 0) {
			cnt = f.dict.writeCopy(f.copyDist, f.copyLen);
		}
		f.copyLen = f.copyLen - (cnt) >> 0;
		if ((f.dict.availWrite() === 0) || f.copyLen > 0) {
			f.toRead = f.dict.readFlush();
			f.step = $methodExpr(ptrType$10, "huffmanBlock");
			f.stepState = 1;
			$s = -1; return;
		}
		/* goto readLiteral */ $s = 5; continue;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.huffmanBlock }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.cnt = cnt; $f.dist = dist; $f.err = err; $f.extra = extra; $f.f = f; $f.length = length; $f.n = n; $f.nb = nb; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.huffmanBlock = function() { return this.$val.huffmanBlock(); };
	decompressor.ptr.prototype.dataBlock = function() {
		var _r, _tuple, err, f, n, nn, nr, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; nn = $f.nn; nr = $f.nr; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		f.nb = 0;
		f.b = 0;
		_r = io.ReadFull(f.r, $subslice(new sliceType$4(f.buf), 0, 4)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		nr = _tuple[0];
		err = _tuple[1];
		f.roffset = (x = f.roffset, x$1 = (new $Int64(0, nr)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			f.err = err;
			$s = -1; return;
		}
		n = ((f.buf[0] >> 0)) | (((f.buf[1] >> 0)) << 8 >> 0);
		nn = ((f.buf[2] >> 0)) | (((f.buf[3] >> 0)) << 8 >> 0);
		if (!((((nn << 16 >>> 16)) === (((~n >> 0) << 16 >>> 16))))) {
			f.err = ((x$2 = f.roffset, new CorruptInputError(x$2.$high, x$2.$low)));
			$s = -1; return;
		}
		if (n === 0) {
			f.toRead = f.dict.readFlush();
			f.finishBlock();
			$s = -1; return;
		}
		f.copyLen = n;
		$r = f.copyData(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.dataBlock }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.nn = nn; $f.nr = nr; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.dataBlock = function() { return this.$val.dataBlock(); };
	decompressor.ptr.prototype.copyData = function() {
		var _r, _tuple, buf, cnt, err, f, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; cnt = $f.cnt; err = $f.err; f = $f.f; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		buf = f.dict.writeSlice();
		if (buf.$length > f.copyLen) {
			buf = $subslice(buf, 0, f.copyLen);
		}
		_r = io.ReadFull(f.r, buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cnt = _tuple[0];
		err = _tuple[1];
		f.roffset = (x = f.roffset, x$1 = (new $Int64(0, cnt)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		f.copyLen = f.copyLen - (cnt) >> 0;
		f.dict.writeMark(cnt);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			f.err = err;
			$s = -1; return;
		}
		if ((f.dict.availWrite() === 0) || f.copyLen > 0) {
			f.toRead = f.dict.readFlush();
			f.step = $methodExpr(ptrType$10, "copyData");
			$s = -1; return;
		}
		f.finishBlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.copyData }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.cnt = cnt; $f.err = err; $f.f = f; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.copyData = function() { return this.$val.copyData(); };
	decompressor.ptr.prototype.finishBlock = function() {
		var f;
		f = this;
		if (f.final$12) {
			if (f.dict.availRead() > 0) {
				f.toRead = f.dict.readFlush();
			}
			f.err = io.EOF;
		}
		f.step = $methodExpr(ptrType$10, "nextBlock");
	};
	decompressor.prototype.finishBlock = function() { return this.$val.finishBlock(); };
	decompressor.ptr.prototype.moreBits = function() {
		var _r, _tuple, c, err, f, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; f = $f.f; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		c = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return err;
		}
		f.roffset = (x = f.roffset, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		f.b = (f.b | (((y = f.nb, y < 32 ? (((c >>> 0)) << y) : 0) >>> 0))) >>> 0;
		f.nb = f.nb + (8) >>> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.moreBits }; } $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.f = f; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.moreBits = function() { return this.$val.moreBits(); };
	decompressor.ptr.prototype.huffSym = function(h) {
		var _r, chunk, err, f, h, n, x, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; chunk = $f.chunk; err = $f.err; f = $f.f; h = $f.h; n = $f.n; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		n = ((h.min >>> 0));
		/* while (true) { */ case 1:
			/* while (true) { */ case 3:
				/* if (!(f.nb < n)) { break; } */ if(!(f.nb < n)) { $s = 4; continue; }
				_r = f.moreBits(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [0, err];
				}
			/* } */ $s = 3; continue; case 4:
			chunk = (x = h.chunks, x$1 = (f.b & 511) >>> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
			n = ((((chunk & 15) >>> 0) >>> 0));
			if (n > 9) {
				chunk = (x$2 = (x$3 = h.links, x$4 = chunk >>> 4 >>> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])), x$5 = (((f.b >>> 9 >>> 0)) & h.linkMask) >>> 0, ((x$5 < 0 || x$5 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$5]));
				n = ((((chunk & 15) >>> 0) >>> 0));
			}
			if (n <= f.nb) {
				if (n === 0) {
					f.err = ((x$6 = f.roffset, new CorruptInputError(x$6.$high, x$6.$low)));
					$s = -1; return [0, f.err];
				}
				f.b = (y = (n), y < 32 ? (f.b >>> y) : 0) >>> 0;
				f.nb = f.nb - (n) >>> 0;
				$s = -1; return [(((chunk >>> 4 >>> 0) >> 0)), $ifaceNil];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.huffSym }; } $f._r = _r; $f.chunk = chunk; $f.err = err; $f.f = f; $f.h = h; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.huffSym = function(h) { return this.$val.huffSym(h); };
	makeReader = function(r) {
		var _tuple, ok, r, rr;
		_tuple = $assertType(r, Reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return rr;
		}
		return bufio.NewReader(r);
	};
	fixedHuffmanDecoderInit = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fixedOnce.Do((function() {
			var bits$1, i, i$1, i$2, i$3;
			bits$1 = arrayType$12.zero();
			i = 0;
			while (true) {
				if (!(i < 144)) { break; }
				((i < 0 || i >= bits$1.length) ? ($throwRuntimeError("index out of range"), undefined) : bits$1[i] = 8);
				i = i + (1) >> 0;
			}
			i$1 = 144;
			while (true) {
				if (!(i$1 < 256)) { break; }
				((i$1 < 0 || i$1 >= bits$1.length) ? ($throwRuntimeError("index out of range"), undefined) : bits$1[i$1] = 9);
				i$1 = i$1 + (1) >> 0;
			}
			i$2 = 256;
			while (true) {
				if (!(i$2 < 280)) { break; }
				((i$2 < 0 || i$2 >= bits$1.length) ? ($throwRuntimeError("index out of range"), undefined) : bits$1[i$2] = 7);
				i$2 = i$2 + (1) >> 0;
			}
			i$3 = 280;
			while (true) {
				if (!(i$3 < 288)) { break; }
				((i$3 < 0 || i$3 >= bits$1.length) ? ($throwRuntimeError("index out of range"), undefined) : bits$1[i$3] = 8);
				i$3 = i$3 + (1) >> 0;
			}
			fixedHuffmanDecoder.init(new sliceType$10(bits$1));
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fixedHuffmanDecoderInit }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.ptr.prototype.Reset = function(r, dict) {
		var dict, f, r;
		f = this;
		decompressor.copy(f, new decompressor.ptr(makeReader(r), new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), f.bits, f.codebits, $clone(f.dict, dictDecoder), arrayType$15.zero(), $methodExpr(ptrType$10, "nextBlock"), 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0));
		f.dict.init(32768, dict);
		return $ifaceNil;
	};
	decompressor.prototype.Reset = function(r, dict) { return this.$val.Reset(r, dict); };
	NewReader = function(r) {
		var f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		$r = fixedHuffmanDecoderInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		f[0] = new decompressor.ptr($ifaceNil, new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), ptrType$11.nil, ptrType$12.nil, new dictDecoder.ptr(sliceType$4.nil, 0, 0, false), arrayType$15.zero(), $throwNilPointerError, 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0);
		f[0].r = makeReader(r);
		f[0].bits = arrayType$13.zero();
		f[0].codebits = arrayType$14.zero();
		f[0].step = $methodExpr(ptrType$10, "nextBlock");
		f[0].dict.init(32768, sliceType$4.nil);
		$s = -1; return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	NewReaderDict = function(r, dict) {
		var dict, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dict = $f.dict; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		$r = fixedHuffmanDecoderInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		f[0] = new decompressor.ptr($ifaceNil, new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), ptrType$11.nil, ptrType$12.nil, new dictDecoder.ptr(sliceType$4.nil, 0, 0, false), arrayType$15.zero(), $throwNilPointerError, 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0);
		f[0].r = makeReader(r);
		f[0].bits = arrayType$13.zero();
		f[0].codebits = arrayType$14.zero();
		f[0].step = $methodExpr(ptrType$10, "nextBlock");
		f[0].dict.init(32768, dict);
		$s = -1; return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReaderDict }; } $f.dict = dict; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReaderDict = NewReaderDict;
	literalToken = function(literal) {
		var literal;
		return (((0 + literal >>> 0) >>> 0));
	};
	matchToken = function(xlength, xoffset) {
		var xlength, xoffset;
		return ((((1073741824 + (xlength << 22 >>> 0) >>> 0) + xoffset >>> 0) >>> 0));
	};
	token.prototype.literal = function() {
		var t;
		t = this.$val;
		return (((t - 0 >>> 0) >>> 0));
	};
	$ptrType(token).prototype.literal = function() { return new token(this.$get()).literal(); };
	token.prototype.offset = function() {
		var t;
		t = this.$val;
		return (((t >>> 0)) & 4194303) >>> 0;
	};
	$ptrType(token).prototype.offset = function() { return new token(this.$get()).offset(); };
	token.prototype.length = function() {
		var t;
		t = this.$val;
		return (((((t - 1073741824 >>> 0)) >>> 22 >>> 0) >>> 0));
	};
	$ptrType(token).prototype.length = function() { return new token(this.$get()).length(); };
	lengthCode = function(len) {
		var len;
		return ((len < 0 || len >= lengthCodes.length) ? ($throwRuntimeError("index out of range"), undefined) : lengthCodes[len]);
	};
	offsetCode = function(off) {
		var off, x, x$1;
		if (off < 256) {
			return ((off < 0 || off >= offsetCodes.length) ? ($throwRuntimeError("index out of range"), undefined) : offsetCodes[off]);
		}
		if ((off >>> 7 >>> 0) < 256) {
			return (x = off >>> 7 >>> 0, ((x < 0 || x >= offsetCodes.length) ? ($throwRuntimeError("index out of range"), undefined) : offsetCodes[x])) + 14 >>> 0;
		}
		return (x$1 = off >>> 14 >>> 0, ((x$1 < 0 || x$1 >= offsetCodes.length) ? ($throwRuntimeError("index out of range"), undefined) : offsetCodes[x$1])) + 28 >>> 0;
	};
	ptrType$2.methods = [{prop: "fillDeflate", name: "fillDeflate", pkg: "compress/flate", typ: $funcType([sliceType$4], [$Int], false)}, {prop: "writeBlock", name: "writeBlock", pkg: "compress/flate", typ: $funcType([sliceType$5, $Int], [$error], false)}, {prop: "fillWindow", name: "fillWindow", pkg: "compress/flate", typ: $funcType([sliceType$4], [], false)}, {prop: "findMatch", name: "findMatch", pkg: "compress/flate", typ: $funcType([$Int, $Int, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "writeStoredBlock", name: "writeStoredBlock", pkg: "compress/flate", typ: $funcType([sliceType$4], [$error], false)}, {prop: "encSpeed", name: "encSpeed", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "initDeflate", name: "initDeflate", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "deflate", name: "deflate", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "fillStore", name: "fillStore", pkg: "compress/flate", typ: $funcType([sliceType$4], [$Int], false)}, {prop: "store", name: "store", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "storeHuff", name: "storeHuff", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "write", name: "write", pkg: "compress/flate", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "syncFlush", name: "syncFlush", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "init", name: "init", pkg: "compress/flate", typ: $funcType([io.Writer, $Int], [$error], false)}, {prop: "reset", name: "reset", pkg: "compress/flate", typ: $funcType([io.Writer], [], false)}, {prop: "close", name: "close", pkg: "compress/flate", typ: $funcType([], [$error], false)}];
	ptrType$6.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Writer], [], false)}];
	ptrType$4.methods = [{prop: "encode", name: "encode", pkg: "compress/flate", typ: $funcType([sliceType$5, sliceType$4], [sliceType$5], false)}, {prop: "matchLen", name: "matchLen", pkg: "compress/flate", typ: $funcType([$Int32, $Int32, sliceType$4], [$Int32], false)}, {prop: "reset", name: "reset", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "resetAll", name: "resetAll", pkg: "compress/flate", typ: $funcType([], [], false)}];
	ptrType$13.methods = [{prop: "init", name: "init", pkg: "compress/flate", typ: $funcType([$Int, sliceType$4], [], false)}, {prop: "histSize", name: "histSize", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "availRead", name: "availRead", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "availWrite", name: "availWrite", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "writeSlice", name: "writeSlice", pkg: "compress/flate", typ: $funcType([], [sliceType$4], false)}, {prop: "writeMark", name: "writeMark", pkg: "compress/flate", typ: $funcType([$Int], [], false)}, {prop: "writeByte", name: "writeByte", pkg: "compress/flate", typ: $funcType([$Uint8], [], false)}, {prop: "writeCopy", name: "writeCopy", pkg: "compress/flate", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "tryWriteCopy", name: "tryWriteCopy", pkg: "compress/flate", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "readFlush", name: "readFlush", pkg: "compress/flate", typ: $funcType([], [sliceType$4], false)}];
	ptrType$3.methods = [{prop: "reset", name: "reset", pkg: "compress/flate", typ: $funcType([io.Writer], [], false)}, {prop: "flush", name: "flush", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "write", name: "write", pkg: "compress/flate", typ: $funcType([sliceType$4], [], false)}, {prop: "writeBits", name: "writeBits", pkg: "compress/flate", typ: $funcType([$Int32, $Uint], [], false)}, {prop: "writeBytes", name: "writeBytes", pkg: "compress/flate", typ: $funcType([sliceType$4], [], false)}, {prop: "generateCodegen", name: "generateCodegen", pkg: "compress/flate", typ: $funcType([$Int, $Int, ptrType, ptrType], [], false)}, {prop: "dynamicSize", name: "dynamicSize", pkg: "compress/flate", typ: $funcType([ptrType, ptrType, $Int], [$Int, $Int], false)}, {prop: "fixedSize", name: "fixedSize", pkg: "compress/flate", typ: $funcType([$Int], [$Int], false)}, {prop: "storedSize", name: "storedSize", pkg: "compress/flate", typ: $funcType([sliceType$4], [$Int, $Bool], false)}, {prop: "writeCode", name: "writeCode", pkg: "compress/flate", typ: $funcType([hcode], [], false)}, {prop: "writeDynamicHeader", name: "writeDynamicHeader", pkg: "compress/flate", typ: $funcType([$Int, $Int, $Int, $Bool], [], false)}, {prop: "writeStoredHeader", name: "writeStoredHeader", pkg: "compress/flate", typ: $funcType([$Int, $Bool], [], false)}, {prop: "writeFixedHeader", name: "writeFixedHeader", pkg: "compress/flate", typ: $funcType([$Bool], [], false)}, {prop: "writeBlock", name: "writeBlock", pkg: "compress/flate", typ: $funcType([sliceType$5, $Bool, sliceType$4], [], false)}, {prop: "writeBlockDynamic", name: "writeBlockDynamic", pkg: "compress/flate", typ: $funcType([sliceType$5, $Bool, sliceType$4], [], false)}, {prop: "indexTokens", name: "indexTokens", pkg: "compress/flate", typ: $funcType([sliceType$5], [$Int, $Int], false)}, {prop: "writeTokens", name: "writeTokens", pkg: "compress/flate", typ: $funcType([sliceType$5, sliceType$8, sliceType$8], [], false)}, {prop: "writeBlockHuff", name: "writeBlockHuff", pkg: "compress/flate", typ: $funcType([$Bool, sliceType$4], [], false)}];
	ptrType$14.methods = [{prop: "set", name: "set", pkg: "compress/flate", typ: $funcType([$Uint16, $Uint16], [], false)}];
	ptrType.methods = [{prop: "bitLength", name: "bitLength", pkg: "compress/flate", typ: $funcType([sliceType$7], [$Int], false)}, {prop: "bitCounts", name: "bitCounts", pkg: "compress/flate", typ: $funcType([sliceType$9, $Int32], [sliceType$7], false)}, {prop: "assignEncodingAndSize", name: "assignEncodingAndSize", pkg: "compress/flate", typ: $funcType([sliceType$7, sliceType$9], [], false)}, {prop: "generate", name: "generate", pkg: "compress/flate", typ: $funcType([sliceType$7, $Int32], [], false)}];
	byLiteral.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$7.methods = [{prop: "sort", name: "sort", pkg: "compress/flate", typ: $funcType([sliceType$9], [], false)}];
	byFreq.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$8.methods = [{prop: "sort", name: "sort", pkg: "compress/flate", typ: $funcType([sliceType$9], [], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	InternalError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$9.methods = [{prop: "init", name: "init", pkg: "compress/flate", typ: $funcType([sliceType$10], [$Bool], false)}];
	ptrType$10.methods = [{prop: "nextBlock", name: "nextBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "readHuffman", name: "readHuffman", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "huffmanBlock", name: "huffmanBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "dataBlock", name: "dataBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "copyData", name: "copyData", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "finishBlock", name: "finishBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "moreBits", name: "moreBits", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "huffSym", name: "huffSym", pkg: "compress/flate", typ: $funcType([ptrType$9], [$Int, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType$4], [$error], false)}];
	token.methods = [{prop: "literal", name: "literal", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}, {prop: "offset", name: "offset", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}, {prop: "length", name: "length", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}];
	compressionLevel.init("compress/flate", [{prop: "level", name: "level", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "good", name: "good", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lazy", name: "lazy", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nice", name: "nice", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "chain", name: "chain", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "fastSkipHashing", name: "fastSkipHashing", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	compressor.init("compress/flate", [{prop: "compressionLevel", name: "compressionLevel", anonymous: true, exported: false, typ: compressionLevel, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "bulkHasher", name: "bulkHasher", anonymous: false, exported: false, typ: funcType, tag: ""}, {prop: "fill", name: "fill", anonymous: false, exported: false, typ: funcType$1, tag: ""}, {prop: "step", name: "step", anonymous: false, exported: false, typ: funcType$2, tag: ""}, {prop: "sync", name: "sync", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "bestSpeed", name: "bestSpeed", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "chainHead", name: "chainHead", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "hashHead", name: "hashHead", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "hashPrev", name: "hashPrev", anonymous: false, exported: false, typ: arrayType$2, tag: ""}, {prop: "hashOffset", name: "hashOffset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "window", name: "window", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "windowEnd", name: "windowEnd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "blockStart", name: "blockStart", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "byteAvailable", name: "byteAvailable", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "tokens", name: "tokens", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "length", name: "length", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "hash", name: "hash", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "maxInsertIndex", name: "maxInsertIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "hashMatch", name: "hashMatch", anonymous: false, exported: false, typ: arrayType$3, tag: ""}]);
	dictWriter.init("compress/flate", [{prop: "w", name: "w", anonymous: false, exported: false, typ: io.Writer, tag: ""}]);
	Writer.init("compress/flate", [{prop: "d", name: "d", anonymous: false, exported: false, typ: compressor, tag: ""}, {prop: "dict", name: "dict", anonymous: false, exported: false, typ: sliceType$4, tag: ""}]);
	tableEntry.init("compress/flate", [{prop: "val", name: "val", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	deflateFast.init("compress/flate", [{prop: "table", name: "table", anonymous: false, exported: false, typ: arrayType$4, tag: ""}, {prop: "prev", name: "prev", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "cur", name: "cur", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	dictDecoder.init("compress/flate", [{prop: "hist", name: "hist", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "wrPos", name: "wrPos", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "rdPos", name: "rdPos", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "full", name: "full", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	huffmanBitWriter.init("compress/flate", [{prop: "writer", name: "writer", anonymous: false, exported: false, typ: io.Writer, tag: ""}, {prop: "bits", name: "bits", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "nbits", name: "nbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "bytes", name: "bytes", anonymous: false, exported: false, typ: arrayType$5, tag: ""}, {prop: "codegenFreq", name: "codegenFreq", anonymous: false, exported: false, typ: arrayType$6, tag: ""}, {prop: "nbytes", name: "nbytes", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "literalFreq", name: "literalFreq", anonymous: false, exported: false, typ: sliceType$7, tag: ""}, {prop: "offsetFreq", name: "offsetFreq", anonymous: false, exported: false, typ: sliceType$7, tag: ""}, {prop: "codegen", name: "codegen", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "literalEncoding", name: "literalEncoding", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "offsetEncoding", name: "offsetEncoding", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "codegenEncoding", name: "codegenEncoding", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	hcode.init("compress/flate", [{prop: "code", name: "code", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Uint16, tag: ""}]);
	huffmanEncoder.init("compress/flate", [{prop: "codes", name: "codes", anonymous: false, exported: false, typ: sliceType$8, tag: ""}, {prop: "freqcache", name: "freqcache", anonymous: false, exported: false, typ: sliceType$9, tag: ""}, {prop: "bitCount", name: "bitCount", anonymous: false, exported: false, typ: arrayType$7, tag: ""}, {prop: "lns", name: "lns", anonymous: false, exported: false, typ: byLiteral, tag: ""}, {prop: "lfs", name: "lfs", anonymous: false, exported: false, typ: byFreq, tag: ""}]);
	literalNode.init("compress/flate", [{prop: "literal", name: "literal", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "freq", name: "freq", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	levelInfo.init("compress/flate", [{prop: "level", name: "level", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "lastFreq", name: "lastFreq", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "nextCharFreq", name: "nextCharFreq", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "nextPairFreq", name: "nextPairFreq", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "needed", name: "needed", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	byLiteral.init(literalNode);
	byFreq.init(literalNode);
	Resetter.init([{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType$4], [$error], false)}]);
	huffmanDecoder.init("compress/flate", [{prop: "min", name: "min", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "chunks", name: "chunks", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "links", name: "links", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "linkMask", name: "linkMask", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	decompressor.init("compress/flate", [{prop: "r", name: "r", anonymous: false, exported: false, typ: Reader, tag: ""}, {prop: "roffset", name: "roffset", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "b", name: "b", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "nb", name: "nb", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "h1", name: "h1", anonymous: false, exported: false, typ: huffmanDecoder, tag: ""}, {prop: "h2", name: "h2", anonymous: false, exported: false, typ: huffmanDecoder, tag: ""}, {prop: "bits", name: "bits", anonymous: false, exported: false, typ: ptrType$11, tag: ""}, {prop: "codebits", name: "codebits", anonymous: false, exported: false, typ: ptrType$12, tag: ""}, {prop: "dict", name: "dict", anonymous: false, exported: false, typ: dictDecoder, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: arrayType$15, tag: ""}, {prop: "step", name: "step", anonymous: false, exported: false, typ: funcType$3, tag: ""}, {prop: "stepState", name: "stepState", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "final$12", name: "final", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "toRead", name: "toRead", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "hl", name: "hl", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "hd", name: "hd", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "copyLen", name: "copyLen", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "copyDist", name: "copyDist", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		huffOffset = ptrType.nil;
		fixedOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		fixedHuffmanDecoder = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
		levels = new sliceType$2([new compressionLevel.ptr(0, 0, 0, 0, 0, 0), new compressionLevel.ptr(1, 0, 0, 0, 0, 0), new compressionLevel.ptr(2, 4, 0, 16, 8, 5), new compressionLevel.ptr(3, 4, 0, 32, 32, 6), new compressionLevel.ptr(4, 4, 4, 16, 16, 2147483647), new compressionLevel.ptr(5, 8, 16, 32, 32, 2147483647), new compressionLevel.ptr(6, 8, 16, 128, 128, 2147483647), new compressionLevel.ptr(7, 8, 32, 128, 256, 2147483647), new compressionLevel.ptr(8, 32, 128, 258, 1024, 2147483647), new compressionLevel.ptr(9, 32, 258, 258, 4096, 2147483647)]);
		lengthExtraBits = new sliceType$3([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]);
		lengthBase = new sliceType([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 255]);
		offsetExtraBits = new sliceType$3([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
		offsetBase = new sliceType([0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576]);
		codegenOrder = new sliceType([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
		fixedOffsetEncoding = generateFixedOffsetEncoding();
		fixedLiteralEncoding = generateFixedLiteralEncoding();
		codeOrder = $toNativeArray($kindInt, [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
		lengthCodes = $toNativeArray($kindUint32, [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28]);
		offsetCodes = $toNativeArray($kindUint32, [0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]);
		$r = init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash"] = (function() {
	var $pkg = {}, $init, io, Hash32, sliceType;
	io = $packages["io"];
	Hash32 = $pkg.Hash32 = $newType(8, $kindInterface, "hash.Hash32", true, "hash", true, null);
	sliceType = $sliceType($Uint8);
	Hash32.init([{prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash/adler32"] = (function() {
	var $pkg = {}, $init, errors, hash, digest, ptrType, sliceType, New, appendUint32, readUint32, update, Checksum;
	errors = $packages["errors"];
	hash = $packages["hash"];
	digest = $pkg.digest = $newType(4, $kindUint32, "adler32.digest", true, "hash/adler32", false, null);
	ptrType = $ptrType(digest);
	sliceType = $sliceType($Uint8);
	$ptrType(digest).prototype.Reset = function() {
		var d;
		d = this;
		d.$set(1);
	};
	New = function() {
		var d;
		d = $newDataPointer(0, ptrType);
		d.Reset();
		return d;
	};
	$pkg.New = New;
	$ptrType(digest).prototype.Size = function() {
		var d;
		d = this;
		return 4;
	};
	$ptrType(digest).prototype.BlockSize = function() {
		var d;
		d = this;
		return 4;
	};
	$ptrType(digest).prototype.MarshalBinary = function() {
		var b, d;
		d = this;
		b = $makeSlice(sliceType, 0, 8);
		b = $appendSlice(b, "adl\x01");
		b = appendUint32(b, ((d.$get() >>> 0)));
		return [b, $ifaceNil];
	};
	$ptrType(digest).prototype.UnmarshalBinary = function(b) {
		var b, d;
		d = this;
		if (b.$length < 4 || !(($bytesToString($subslice(b, 0, 4))) === "adl\x01")) {
			return errors.New("hash/adler32: invalid hash state identifier");
		}
		if (!((b.$length === 8))) {
			return errors.New("hash/adler32: invalid hash state size");
		}
		d.$set(((readUint32($subslice(b, 4)) >>> 0)));
		return $ifaceNil;
	};
	appendUint32 = function(b, x) {
		var a, b, x;
		a = $toNativeArray($kindUint8, [(((x >>> 24 >>> 0) << 24 >>> 24)), (((x >>> 16 >>> 0) << 24 >>> 24)), (((x >>> 8 >>> 0) << 24 >>> 24)), ((x << 24 >>> 24))]);
		return $appendSlice(b, new sliceType(a));
	};
	readUint32 = function(b) {
		var b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	update = function(d, p) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, d, p, q, s1, s2, x;
		_tmp = ((((d & 65535) >>> 0) >>> 0));
		_tmp$1 = (((d >>> 16 >>> 0) >>> 0));
		s1 = _tmp;
		s2 = _tmp$1;
		while (true) {
			if (!(p.$length > 0)) { break; }
			q = sliceType.nil;
			if (p.$length > 5552) {
				_tmp$2 = $subslice(p, 0, 5552);
				_tmp$3 = $subslice(p, 5552);
				p = _tmp$2;
				q = _tmp$3;
			}
			while (true) {
				if (!(p.$length >= 4)) { break; }
				s1 = s1 + ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + ((((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + ((((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + ((((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				p = $subslice(p, 4);
			}
			_ref = p;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				s1 = s1 + (((x >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				_i++;
			}
			s1 = (_r = s1 % (65521), _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			s2 = (_r$1 = s2 % (65521), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			p = q;
		}
		return (((((s2 << 16 >>> 0) | s1) >>> 0) >>> 0));
	};
	$ptrType(digest).prototype.Write = function(p) {
		var _tmp, _tmp$1, d, err, nn, p;
		nn = 0;
		err = $ifaceNil;
		d = this;
		d.$set(update(d.$get(), p));
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		nn = _tmp;
		err = _tmp$1;
		return [nn, err];
	};
	$ptrType(digest).prototype.Sum32 = function() {
		var d;
		d = this;
		return ((d.$get() >>> 0));
	};
	$ptrType(digest).prototype.Sum = function(in$1) {
		var d, in$1, s;
		d = this;
		s = ((d.$get() >>> 0));
		return $append(in$1, (((s >>> 24 >>> 0) << 24 >>> 24)), (((s >>> 16 >>> 0) << 24 >>> 24)), (((s >>> 8 >>> 0) << 24 >>> 24)), ((s << 24 >>> 24)));
	};
	Checksum = function(data) {
		var data;
		return ((update(1, data) >>> 0));
	};
	$pkg.Checksum = Checksum;
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/zlib"] = (function() {
	var $pkg = {}, $init, bufio, flate, errors, fmt, hash, adler32, io, reader, Writer, sliceType, arrayType, ptrType, sliceType$1, ptrType$1, ptrType$2, NewReader, NewReaderDict, NewWriterLevel, NewWriterLevelDict;
	bufio = $packages["bufio"];
	flate = $packages["compress/flate"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	hash = $packages["hash"];
	adler32 = $packages["hash/adler32"];
	io = $packages["io"];
	reader = $pkg.reader = $newType(0, $kindStruct, "zlib.reader", true, "compress/zlib", false, function(r_, decompressor_, digest_, err_, scratch_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.decompressor = $ifaceNil;
			this.digest = $ifaceNil;
			this.err = $ifaceNil;
			this.scratch = arrayType.zero();
			return;
		}
		this.r = r_;
		this.decompressor = decompressor_;
		this.digest = digest_;
		this.err = err_;
		this.scratch = scratch_;
	});
	Writer = $pkg.Writer = $newType(0, $kindStruct, "zlib.Writer", true, "compress/zlib", true, function(w_, level_, dict_, compressor_, digest_, err_, scratch_, wroteHeader_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = $ifaceNil;
			this.level = 0;
			this.dict = sliceType.nil;
			this.compressor = ptrType$1.nil;
			this.digest = $ifaceNil;
			this.err = $ifaceNil;
			this.scratch = arrayType.zero();
			this.wroteHeader = false;
			return;
		}
		this.w = w_;
		this.level = level_;
		this.dict = dict_;
		this.compressor = compressor_;
		this.digest = digest_;
		this.err = err_;
		this.scratch = scratch_;
		this.wroteHeader = wroteHeader_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	ptrType = $ptrType(Writer);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(flate.Writer);
	ptrType$2 = $ptrType(reader);
	NewReader = function(r) {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewReaderDict(r, sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	NewReaderDict = function(r, dict) {
		var _r, dict, err, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; dict = $f.dict; err = $f.err; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = new reader.ptr($ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, arrayType.zero());
		_r = z.Reset(r, dict); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$s = -1; return [z, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReaderDict }; } $f._r = _r; $f.dict = dict; $f.err = err; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReaderDict = NewReaderDict;
	reader.ptr.prototype.Read = function(p) {
		var _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, checksum, err, n, p, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; checksum = $f.checksum; err = $f.err; n = $f.n; p = $f.p; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return [0, z.err];
		}
		n = 0;
		_r = z.decompressor.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		z.err = _tuple[1];
		_r$1 = z.digest.Write($subslice(p, 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		if (!($interfaceIsEqual(z.err, io.EOF))) {
			$s = -1; return [n, z.err];
		}
		_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 4)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			z.err = err;
			$s = -1; return [n, z.err];
		}
		checksum = ((((((((z.scratch[0] >>> 0)) << 24 >>> 0) | (((z.scratch[1] >>> 0)) << 16 >>> 0)) >>> 0) | (((z.scratch[2] >>> 0)) << 8 >>> 0)) >>> 0) | ((z.scratch[3] >>> 0))) >>> 0;
		_r$3 = z.digest.Sum32(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((checksum === _r$3))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((checksum === _r$3))) { */ case 4:
			z.err = $pkg.ErrChecksum;
			$s = -1; return [n, z.err];
		/* } */ case 5:
		$s = -1; return [n, io.EOF];
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.checksum = checksum; $f.err = err; $f.n = n; $f.p = p; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Read = function(p) { return this.$val.Read(p); };
	reader.ptr.prototype.Close = function() {
		var _r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil)) && !($interfaceIsEqual(z.err, io.EOF))) {
			$s = -1; return z.err;
		}
		_r = z.decompressor.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		z.err = _r;
		$s = -1; return z.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Close }; } $f._r = _r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Close = function() { return this.$val.Close(); };
	reader.ptr.prototype.Reset = function(r, dict) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, checksum, dict, fr, h, haveDict, ok, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; checksum = $f.checksum; dict = $f.dict; fr = $f.fr; h = $f.h; haveDict = $f.haveDict; ok = $f.ok; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		reader.copy(z, new reader.ptr($ifaceNil, z.decompressor, $ifaceNil, $ifaceNil, arrayType.zero()));
		_tuple = $assertType(r, flate.Reader, true);
		fr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			z.r = fr;
		} else {
			z.r = bufio.NewReader(r);
		}
		_r = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		z.err = _tuple$1[1];
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			if ($interfaceIsEqual(z.err, io.EOF)) {
				z.err = io.ErrUnexpectedEOF;
			}
			$s = -1; return z.err;
		}
		h = ((((z.scratch[0] >>> 0)) << 8 >>> 0) | ((z.scratch[1] >>> 0))) >>> 0;
		if ((!((((z.scratch[0] & 15) >>> 0) === 8))) || (!(((_r$1 = h % 31, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)))) {
			z.err = $pkg.ErrHeader;
			$s = -1; return z.err;
		}
		haveDict = !((((z.scratch[1] & 32) >>> 0) === 0));
		/* */ if (haveDict) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (haveDict) { */ case 2:
			_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 4)); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			z.err = _tuple$2[1];
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				if ($interfaceIsEqual(z.err, io.EOF)) {
					z.err = io.ErrUnexpectedEOF;
				}
				$s = -1; return z.err;
			}
			checksum = ((((((((z.scratch[0] >>> 0)) << 24 >>> 0) | (((z.scratch[1] >>> 0)) << 16 >>> 0)) >>> 0) | (((z.scratch[2] >>> 0)) << 8 >>> 0)) >>> 0) | ((z.scratch[3] >>> 0))) >>> 0;
			if (!((checksum === adler32.Checksum(dict)))) {
				z.err = $pkg.ErrDictionary;
				$s = -1; return z.err;
			}
		/* } */ case 3:
		/* */ if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { */ case 5:
			/* */ if (haveDict) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (haveDict) { */ case 8:
				_r$3 = flate.NewReaderDict(z.r, dict); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				z.decompressor = _r$3;
				$s = 10; continue;
			/* } else { */ case 9:
				_r$4 = flate.NewReader(z.r); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				z.decompressor = _r$4;
			/* } */ case 10:
			$s = 7; continue;
		/* } else { */ case 6:
			_r$5 = $assertType(z.decompressor, flate.Resetter).Reset(z.r, dict); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 7:
		z.digest = adler32.New();
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Reset }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.checksum = checksum; $f.dict = dict; $f.fr = fr; $f.h = h; $f.haveDict = haveDict; $f.ok = ok; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Reset = function(r, dict) { return this.$val.Reset(r, dict); };
	NewWriterLevel = function(w, level) {
		var _r, level, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; level = $f.level; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewWriterLevelDict(w, level, sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewWriterLevel }; } $f._r = _r; $f.level = level; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewWriterLevel = NewWriterLevel;
	NewWriterLevelDict = function(w, level, dict) {
		var _r, dict, level, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; dict = $f.dict; level = $f.level; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (level < -2 || level > 9) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (level < -2 || level > 9) { */ case 1:
			_r = fmt.Errorf("zlib: invalid compression level: %d", new sliceType$1([new $Int(level)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [ptrType.nil, _r];
		/* } */ case 2:
		$s = -1; return [new Writer.ptr(w, level, dict, ptrType$1.nil, $ifaceNil, $ifaceNil, arrayType.zero(), false), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewWriterLevelDict }; } $f._r = _r; $f.dict = dict; $f.level = level; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewWriterLevelDict = NewWriterLevelDict;
	Writer.ptr.prototype.Reset = function(w) {
		var w, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; w = $f.w; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.w = w;
		/* */ if (!(z.compressor === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z.compressor === ptrType$1.nil)) { */ case 1:
			$r = z.compressor.Reset(w); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ if (!($interfaceIsEqual(z.digest, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(z.digest, $ifaceNil))) { */ case 4:
			$r = z.digest.Reset(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		z.err = $ifaceNil;
		arrayType.copy(z.scratch, arrayType.zero());
		z.wroteHeader = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Reset }; } $f.w = w; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Reset = function(w) { return this.$val.Reset(w); };
	Writer.ptr.prototype.writeHeader = function() {
		var _1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, checksum, err, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; checksum = $f.checksum; err = $f.err; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		z = this;
		z.wroteHeader = true;
		z.scratch[0] = 120;
		_1 = z.level;
		if ((_1 === (-2)) || (_1 === (0)) || (_1 === (1))) {
			z.scratch[1] = 0;
		} else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5))) {
			z.scratch[1] = 64;
		} else if ((_1 === (6)) || (_1 === (-1))) {
			z.scratch[1] = 128;
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9))) {
			z.scratch[1] = 192;
		} else {
			$panic(new $String("unreachable"));
		}
		if (!(z.dict === sliceType.nil)) {
			z.scratch[1] = ((z.scratch[1] | (32)) >>> 0);
		}
		z.scratch[1] = (z.scratch[1] + ((((31 - (_r = (((((z.scratch[0] << 16 >>> 16)) << 8 << 16 >>> 16) + ((z.scratch[1] << 16 >>> 16)) << 16 >>> 16)) % 31, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 16 >>> 16) << 24 >>> 24))) << 24 >>> 24);
		_r$1 = z.w.Write($subslice(new sliceType(z.scratch), 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		/* */ if (!(z.dict === sliceType.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(z.dict === sliceType.nil)) { */ case 2:
			checksum = adler32.Checksum(z.dict);
			z.scratch[0] = (((checksum >>> 24 >>> 0) << 24 >>> 24));
			z.scratch[1] = (((checksum >>> 16 >>> 0) << 24 >>> 24));
			z.scratch[2] = (((checksum >>> 8 >>> 0) << 24 >>> 24));
			z.scratch[3] = (((checksum >>> 0 >>> 0) << 24 >>> 24));
			_r$2 = z.w.Write($subslice(new sliceType(z.scratch), 0, 4)); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				err = err;
				$s = -1; return err;
			}
		/* } */ case 3:
		/* */ if (z.compressor === ptrType$1.nil) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (z.compressor === ptrType$1.nil) { */ case 5:
			_r$3 = flate.NewWriterDict(z.w, z.level, z.dict); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$2 = _r$3;
			z.compressor = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				err = err;
				$s = -1; return err;
			}
			z.digest = adler32.New();
		/* } */ case 6:
		err = $ifaceNil;
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.writeHeader }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.checksum = checksum; $f.err = err; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.writeHeader = function() { return this.$val.writeHeader(); };
	Writer.ptr.prototype.Write = function(p) {
		var _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, n, p, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; err = $f.err; n = $f.n; p = $f.p; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		z = this;
		/* */ if (!z.wroteHeader) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!z.wroteHeader) { */ case 1:
			_r = z.writeHeader(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			z.err = _r;
		/* } */ case 2:
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = z.err;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if (p.$length === 0) {
			_tmp$2 = 0;
			_tmp$3 = $ifaceNil;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		_r$1 = z.compressor.Write(p); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			z.err = err;
			$s = -1; return [n, err];
		}
		_r$2 = z.digest.Write(p); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Write }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.p = p; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Write = function(p) { return this.$val.Write(p); };
	Writer.ptr.prototype.Flush = function() {
		var _r, _r$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (!z.wroteHeader) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!z.wroteHeader) { */ case 1:
			_r = z.writeHeader(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			z.err = _r;
		/* } */ case 2:
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return z.err;
		}
		_r$1 = z.compressor.Flush(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		z.err = _r$1;
		$s = -1; return z.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Flush }; } $f._r = _r; $f._r$1 = _r$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.ptr.prototype.Close = function() {
		var _r, _r$1, _r$2, _r$3, _tuple, checksum, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; checksum = $f.checksum; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (!z.wroteHeader) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!z.wroteHeader) { */ case 1:
			_r = z.writeHeader(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			z.err = _r;
		/* } */ case 2:
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return z.err;
		}
		_r$1 = z.compressor.Close(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		z.err = _r$1;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return z.err;
		}
		_r$2 = z.digest.Sum32(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		checksum = _r$2;
		z.scratch[0] = (((checksum >>> 24 >>> 0) << 24 >>> 24));
		z.scratch[1] = (((checksum >>> 16 >>> 0) << 24 >>> 24));
		z.scratch[2] = (((checksum >>> 8 >>> 0) << 24 >>> 24));
		z.scratch[3] = (((checksum >>> 0 >>> 0) << 24 >>> 24));
		_r$3 = z.w.Write($subslice(new sliceType(z.scratch), 0, 4)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.err = _tuple[1];
		$s = -1; return z.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Close }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.checksum = checksum; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Close = function() { return this.$val.Close(); };
	ptrType$2.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType], [$error], false)}];
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "writeHeader", name: "writeHeader", pkg: "compress/zlib", typ: $funcType([], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	reader.init("compress/zlib", [{prop: "r", name: "r", anonymous: false, exported: false, typ: flate.Reader, tag: ""}, {prop: "decompressor", name: "decompressor", anonymous: false, exported: false, typ: io.ReadCloser, tag: ""}, {prop: "digest", name: "digest", anonymous: false, exported: false, typ: hash.Hash32, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "scratch", name: "scratch", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	Writer.init("compress/zlib", [{prop: "w", name: "w", anonymous: false, exported: false, typ: io.Writer, tag: ""}, {prop: "level", name: "level", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dict", name: "dict", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "compressor", name: "compressor", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "digest", name: "digest", anonymous: false, exported: false, typ: hash.Hash32, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "scratch", name: "scratch", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "wroteHeader", name: "wroteHeader", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = flate.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = adler32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrChecksum = errors.New("zlib: invalid checksum");
		$pkg.ErrDictionary = errors.New("zlib: invalid dictionary");
		$pkg.ErrHeader = errors.New("zlib: invalid header");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, $init, errors, io, math, reflect, bigEndian, sliceType, overflow;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	bigEndian = $pkg.bigEndian = $newType(0, $kindStruct, "binary.bigEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	sliceType = $sliceType($Uint8);
	bigEndian.ptr.prototype.Uint16 = function(b) {
		var b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16)) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	bigEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	bigEndian.ptr.prototype.PutUint16 = function(b, v) {
		var b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	bigEndian.ptr.prototype.Uint32 = function(b) {
		var b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	bigEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	bigEndian.ptr.prototype.PutUint32 = function(b, v) {
		var b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 24 >>> 0) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 16 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((v >>> 8 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	bigEndian.ptr.prototype.Uint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$7 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	bigEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	bigEndian.ptr.prototype.PutUint64 = function(b, v) {
		var b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (($shiftRightUint64(v, 48).$low << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (($shiftRightUint64(v, 40).$low << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (($shiftRightUint64(v, 32).$low << 24 >>> 24)));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = (($shiftRightUint64(v, 24).$low << 24 >>> 24)));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = (($shiftRightUint64(v, 16).$low << 24 >>> 24)));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = (($shiftRightUint64(v, 8).$low << 24 >>> 24)));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = ((v.$low << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	bigEndian.ptr.prototype.String = function() {
		return "BigEndian";
	};
	bigEndian.prototype.String = function() { return this.$val.String(); };
	bigEndian.ptr.prototype.GoString = function() {
		return "binary.BigEndian";
	};
	bigEndian.prototype.GoString = function() { return this.$val.GoString(); };
	bigEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	bigEndian.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.BigEndian = new bigEndian.ptr();
		overflow = errors.New("binary: varint overflows a 64-bit integer");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash/crc32"] = (function() {
	var $pkg = {}, $init, errors, hash, sync, Table, digest, slicing8Table, ptrType, ptrType$1, sliceType, arrayType, arrayType$1, arrayType$2, ptrType$2, castagnoliTable, updateCastagnoli, ieeeTable8, ieeeArchImpl, updateIEEE, ieeeOnce, ieeeInit, New, NewIEEE, appendUint32, readUint32, ChecksumIEEE, tableSum, simpleMakeTable, simplePopulateTable, simpleUpdate, slicingMakeTable, slicingUpdate, archAvailableIEEE, archInitIEEE, archUpdateIEEE;
	errors = $packages["errors"];
	hash = $packages["hash"];
	sync = $packages["sync"];
	Table = $pkg.Table = $newType(1024, $kindArray, "crc32.Table", true, "hash/crc32", true, null);
	digest = $pkg.digest = $newType(0, $kindStruct, "crc32.digest", true, "hash/crc32", false, function(crc_, tab_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.crc = 0;
			this.tab = ptrType.nil;
			return;
		}
		this.crc = crc_;
		this.tab = tab_;
	});
	slicing8Table = $pkg.slicing8Table = $newType(8192, $kindArray, "crc32.slicing8Table", true, "hash/crc32", false, null);
	ptrType = $ptrType(Table);
	ptrType$1 = $ptrType(slicing8Table);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 1024);
	arrayType$1 = $arrayType($Uint32, 256);
	arrayType$2 = $arrayType(Table, 8);
	ptrType$2 = $ptrType(digest);
	ieeeInit = function() {
		ieeeArchImpl = archAvailableIEEE();
		if (ieeeArchImpl) {
			archInitIEEE();
			updateIEEE = archUpdateIEEE;
		} else {
			ieeeTable8 = slicingMakeTable(3988292384);
			updateIEEE = (function(crc, p) {
				var crc, p;
				return slicingUpdate(crc, ieeeTable8, p);
			});
		}
	};
	New = function(tab) {
		var tab, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; tab = $f.tab; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($equal(tab, $pkg.IEEETable, Table)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($equal(tab, $pkg.IEEETable, Table)) { */ case 1:
			$r = ieeeOnce.Do(ieeeInit); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return new digest.ptr(0, tab);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.tab = tab; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	NewIEEE = function() {
		var _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New($pkg.IEEETable); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewIEEE }; } $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewIEEE = NewIEEE;
	digest.ptr.prototype.Size = function() {
		var d;
		d = this;
		return 4;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 1;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Reset = function() {
		var d;
		d = this;
		d.crc = 0;
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	digest.ptr.prototype.MarshalBinary = function() {
		var _arg, _arg$1, _r, _r$1, b, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; b = $f.b; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		b = $makeSlice(sliceType, 0, 12);
		b = $appendSlice(b, "crc\x01");
		_arg = b;
		_r = tableSum(d.tab); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		_r$1 = appendUint32(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		b = appendUint32(b, d.crc);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.MarshalBinary }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	digest.ptr.prototype.UnmarshalBinary = function(b) {
		var _r, b, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (b.$length < 4 || !(($bytesToString($subslice(b, 0, 4))) === "crc\x01")) {
			$s = -1; return errors.New("hash/crc32: invalid hash state identifier");
		}
		if (!((b.$length === 12))) {
			$s = -1; return errors.New("hash/crc32: invalid hash state size");
		}
		_r = tableSum(d.tab); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === readUint32($subslice(b, 4))))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === readUint32($subslice(b, 4))))) { */ case 1:
			$s = -1; return errors.New("hash/crc32: tables do not match");
		/* } */ case 2:
		d.crc = readUint32($subslice(b, 8));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.UnmarshalBinary }; } $f._r = _r; $f.b = b; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.UnmarshalBinary = function(b) { return this.$val.UnmarshalBinary(b); };
	appendUint32 = function(b, x) {
		var a, b, x;
		a = $toNativeArray($kindUint8, [(((x >>> 24 >>> 0) << 24 >>> 24)), (((x >>> 16 >>> 0) << 24 >>> 24)), (((x >>> 8 >>> 0) << 24 >>> 24)), ((x << 24 >>> 24))]);
		return $appendSlice(b, new sliceType(a));
	};
	readUint32 = function(b) {
		var b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	digest.ptr.prototype.Write = function(p) {
		var _1, _r, _r$1, _tmp, _tmp$1, d, err, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; d = $f.d; err = $f.err; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		d = this;
			_1 = d.tab;
			/* */ if ($equal(_1, (castagnoliTable), Table)) { $s = 2; continue; }
			/* */ if ($equal(_1, ($pkg.IEEETable), Table)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($equal(_1, (castagnoliTable), Table)) { */ case 2:
				_r = updateCastagnoli(d.crc, p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				d.crc = _r;
				$s = 5; continue;
			/* } else if ($equal(_1, ($pkg.IEEETable), Table)) { */ case 3:
				_r$1 = updateIEEE(d.crc, p); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				d.crc = _r$1;
				$s = 5; continue;
			/* } else { */ case 4:
				d.crc = simpleUpdate(d.crc, d.tab, p);
			/* } */ case 5:
		case 1:
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.Write }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.d = d; $f.err = err; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum32 = function() {
		var d;
		d = this;
		return d.crc;
	};
	digest.prototype.Sum32 = function() { return this.$val.Sum32(); };
	digest.ptr.prototype.Sum = function(in$1) {
		var d, in$1, s;
		d = this;
		s = d.Sum32();
		return $append(in$1, (((s >>> 24 >>> 0) << 24 >>> 24)), (((s >>> 16 >>> 0) << 24 >>> 24)), (((s >>> 8 >>> 0) << 24 >>> 24)), ((s << 24 >>> 24)));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	ChecksumIEEE = function(data) {
		var _r, data, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ieeeOnce.Do(ieeeInit); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = updateIEEE(0, data); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ChecksumIEEE }; } $f._r = _r; $f.data = data; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ChecksumIEEE = ChecksumIEEE;
	tableSum = function(t) {
		var _i, _r, _ref, a, b, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; a = $f.a; b = $f.b; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = arrayType.zero();
		b = $subslice(new sliceType(a), 0, 0);
		if (!($equal(t, ptrType.nil, Table))) {
			_ref = t;
			_i = 0;
			while (true) {
				if (!(_i < 256)) { break; }
				x = (_ref.nilCheck, ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]));
				b = appendUint32(b, x);
				_i++;
			}
		}
		_r = ChecksumIEEE(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: tableSum }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.a = a; $f.b = b; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	simpleMakeTable = function(poly) {
		var poly, t;
		t = arrayType$1.zero();
		simplePopulateTable(poly, t);
		return t;
	};
	simplePopulateTable = function(poly, t) {
		var crc, i, j, poly, t, y;
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			crc = ((i >>> 0));
			j = 0;
			while (true) {
				if (!(j < 8)) { break; }
				if (((crc & 1) >>> 0) === 1) {
					crc = (((crc >>> 1 >>> 0)) ^ poly) >>> 0;
				} else {
					crc = (y = (1), y < 32 ? (crc >>> y) : 0) >>> 0;
				}
				j = j + (1) >> 0;
			}
			t.nilCheck, ((i < 0 || i >= t.length) ? ($throwRuntimeError("index out of range"), undefined) : t[i] = crc);
			i = i + (1) >> 0;
		}
	};
	simpleUpdate = function(crc, tab, p) {
		var _i, _ref, crc, p, tab, v, x;
		crc = ~crc >>> 0;
		_ref = p;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			crc = ((x = (((crc << 24 >>> 24)) ^ v) << 24 >>> 24, (tab.nilCheck, ((x < 0 || x >= tab.length) ? ($throwRuntimeError("index out of range"), undefined) : tab[x]))) ^ ((crc >>> 8 >>> 0))) >>> 0;
			_i++;
		}
		return ~crc >>> 0;
	};
	slicingMakeTable = function(poly) {
		var crc, i, j, poly, t, x, x$1, x$2, x$3;
		t = arrayType$2.zero();
		simplePopulateTable(poly, (t.nilCheck, t[0]));
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			crc = (x = (t.nilCheck, t[0]), ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			j = 1;
			while (true) {
				if (!(j < 8)) { break; }
				crc = ((x$1 = (t.nilCheck, t[0]), x$2 = (crc & 255) >>> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) ^ ((crc >>> 8 >>> 0))) >>> 0;
				(x$3 = (t.nilCheck, ((j < 0 || j >= t.length) ? ($throwRuntimeError("index out of range"), undefined) : t[j])), ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i] = crc));
				j = j + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return t;
	};
	slicingUpdate = function(crc, tab, p) {
		var crc, p, tab, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if (p.$length >= 16) {
			crc = ~crc >>> 0;
			while (true) {
				if (!(p.$length > 8)) { break; }
				crc = (crc ^ ((((((((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >>> 0)) | ((((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]) >>> 0)) << 24 >>> 0)) >>> 0))) >>> 0;
				crc = ((((((((((((((x = (tab.nilCheck, tab[0]), x$1 = (7 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 7]), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) ^ (x$2 = (tab.nilCheck, tab[1]), x$3 = (6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6]), ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3]))) >>> 0) ^ (x$4 = (tab.nilCheck, tab[2]), x$5 = (5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5]), ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5]))) >>> 0) ^ (x$6 = (tab.nilCheck, tab[3]), x$7 = (4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]), ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7]))) >>> 0) ^ (x$8 = (tab.nilCheck, tab[4]), x$9 = crc >>> 24 >>> 0, ((x$9 < 0 || x$9 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[x$9]))) >>> 0) ^ (x$10 = (tab.nilCheck, tab[5]), x$11 = (((crc >>> 16 >>> 0)) & 255) >>> 0, ((x$11 < 0 || x$11 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[x$11]))) >>> 0) ^ (x$12 = (tab.nilCheck, tab[6]), x$13 = (((crc >>> 8 >>> 0)) & 255) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13]))) >>> 0) ^ (x$14 = (tab.nilCheck, tab[7]), x$15 = (crc & 255) >>> 0, ((x$15 < 0 || x$15 >= x$14.length) ? ($throwRuntimeError("index out of range"), undefined) : x$14[x$15]))) >>> 0;
				p = $subslice(p, 8);
			}
			crc = ~crc >>> 0;
		}
		if (p.$length === 0) {
			return crc;
		}
		return simpleUpdate(crc, (tab.nilCheck, tab[0]), p);
	};
	archAvailableIEEE = function() {
		return false;
	};
	archInitIEEE = function() {
		$panic(new $String("not available"));
	};
	archUpdateIEEE = function(crc, p) {
		var crc, p;
		$panic(new $String("not available"));
	};
	ptrType$2.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}];
	Table.init($Uint32, 256);
	digest.init("hash/crc32", [{prop: "crc", name: "crc", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tab", name: "tab", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	slicing8Table.init(Table, 8);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		castagnoliTable = ptrType.nil;
		updateCastagnoli = $throwNilPointerError;
		ieeeTable8 = ptrType$1.nil;
		ieeeArchImpl = false;
		updateIEEE = $throwNilPointerError;
		ieeeOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		$pkg.IEEETable = simpleMakeTable(3988292384);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/png"] = (function() {
	var $pkg = {}, $init, bufio, zlib, binary, fmt, hash, crc32, image, color, io, strconv, FormatError, UnsupportedError, Encoder, EncoderBufferPool, EncoderBuffer, encoder, CompressionLevel, opaquer, sliceType$1, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$9, arrayType$3, ptrType$10, ptrType$11, ptrType$12, arrayType$4, arrayType$5, arrayType$6, ptrType$13, abs, paeth, init, writeUint32, opaque, abs8, filter, zeroMemory, levelToZlib, Encode;
	bufio = $packages["bufio"];
	zlib = $packages["compress/zlib"];
	binary = $packages["encoding/binary"];
	fmt = $packages["fmt"];
	hash = $packages["hash"];
	crc32 = $packages["hash/crc32"];
	image = $packages["image"];
	color = $packages["image/color"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	FormatError = $pkg.FormatError = $newType(8, $kindString, "png.FormatError", true, "github.com/hajimehoshi/ebiten/internal/png", true, null);
	UnsupportedError = $pkg.UnsupportedError = $newType(8, $kindString, "png.UnsupportedError", true, "github.com/hajimehoshi/ebiten/internal/png", true, null);
	Encoder = $pkg.Encoder = $newType(0, $kindStruct, "png.Encoder", true, "github.com/hajimehoshi/ebiten/internal/png", true, function(CompressionLevel_, BufferPool_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CompressionLevel = 0;
			this.BufferPool = $ifaceNil;
			return;
		}
		this.CompressionLevel = CompressionLevel_;
		this.BufferPool = BufferPool_;
	});
	EncoderBufferPool = $pkg.EncoderBufferPool = $newType(8, $kindInterface, "png.EncoderBufferPool", true, "github.com/hajimehoshi/ebiten/internal/png", true, null);
	EncoderBuffer = $pkg.EncoderBuffer = $newType(0, $kindStruct, "png.EncoderBuffer", true, "github.com/hajimehoshi/ebiten/internal/png", true, function(enc_, w_, m_, cb_, err_, header_, footer_, tmp_, cr_, pr_, zw_, zwLevel_, bw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.enc = ptrType$12.nil;
			this.w = $ifaceNil;
			this.m = $ifaceNil;
			this.cb = 0;
			this.err = $ifaceNil;
			this.header = arrayType$4.zero();
			this.footer = arrayType$5.zero();
			this.tmp = arrayType$6.zero();
			this.cr = arrayType$3.zero();
			this.pr = sliceType$1.nil;
			this.zw = ptrType$9.nil;
			this.zwLevel = 0;
			this.bw = ptrType$10.nil;
			return;
		}
		this.enc = enc_;
		this.w = w_;
		this.m = m_;
		this.cb = cb_;
		this.err = err_;
		this.header = header_;
		this.footer = footer_;
		this.tmp = tmp_;
		this.cr = cr_;
		this.pr = pr_;
		this.zw = zw_;
		this.zwLevel = zwLevel_;
		this.bw = bw_;
	});
	encoder = $pkg.encoder = $newType(0, $kindStruct, "png.encoder", true, "github.com/hajimehoshi/ebiten/internal/png", false, function(enc_, w_, m_, cb_, err_, header_, footer_, tmp_, cr_, pr_, zw_, zwLevel_, bw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.enc = ptrType$12.nil;
			this.w = $ifaceNil;
			this.m = $ifaceNil;
			this.cb = 0;
			this.err = $ifaceNil;
			this.header = arrayType$4.zero();
			this.footer = arrayType$5.zero();
			this.tmp = arrayType$6.zero();
			this.cr = arrayType$3.zero();
			this.pr = sliceType$1.nil;
			this.zw = ptrType$9.nil;
			this.zwLevel = 0;
			this.bw = ptrType$10.nil;
			return;
		}
		this.enc = enc_;
		this.w = w_;
		this.m = m_;
		this.cb = cb_;
		this.err = err_;
		this.header = header_;
		this.footer = footer_;
		this.tmp = tmp_;
		this.cr = cr_;
		this.pr = pr_;
		this.zw = zw_;
		this.zwLevel = zwLevel_;
		this.bw = bw_;
	});
	CompressionLevel = $pkg.CompressionLevel = $newType(4, $kindInt, "png.CompressionLevel", true, "github.com/hajimehoshi/ebiten/internal/png", true, null);
	opaquer = $pkg.opaquer = $newType(8, $kindInterface, "png.opaquer", true, "github.com/hajimehoshi/ebiten/internal/png", false, null);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(image.Gray);
	ptrType$1 = $ptrType(image.RGBA);
	ptrType$2 = $ptrType(image.Paletted);
	ptrType$3 = $ptrType(image.NRGBA);
	ptrType$9 = $ptrType(zlib.Writer);
	arrayType$3 = $arrayType(sliceType$1, 5);
	ptrType$10 = $ptrType(bufio.Writer);
	ptrType$11 = $ptrType(encoder);
	ptrType$12 = $ptrType(Encoder);
	arrayType$4 = $arrayType($Uint8, 8);
	arrayType$5 = $arrayType($Uint8, 4);
	arrayType$6 = $arrayType($Uint8, 1024);
	ptrType$13 = $ptrType(EncoderBuffer);
	abs = function(x) {
		var m, x;
		m = x >> 31 >> 0;
		return (((x ^ m) >> 0)) - m >> 0;
	};
	paeth = function(a, b, c) {
		var a, b, c, pa, pb, pc;
		pc = ((c >> 0));
		pa = ((b >> 0)) - pc >> 0;
		pb = ((a >> 0)) - pc >> 0;
		pc = abs(pa + pb >> 0);
		pa = abs(pa);
		pb = abs(pb);
		if (pa <= pb && pa <= pc) {
			return a;
		} else if (pb <= pc) {
			return b;
		}
		return c;
	};
	FormatError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "png: invalid format: " + (e);
	};
	$ptrType(FormatError).prototype.Error = function() { return new FormatError(this.$get()).Error(); };
	UnsupportedError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "png: unsupported feature: " + (e);
	};
	$ptrType(UnsupportedError).prototype.Error = function() { return new UnsupportedError(this.$get()).Error(); };
	init = function() {
	};
	writeUint32 = function(b, u) {
		var b, u;
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((u >>> 24 >>> 0) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((u >>> 16 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((u >>> 8 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (((u >>> 0 >>> 0) << 24 >>> 24)));
	};
	opaque = function(m) {
		var _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, a, b, m, o, ok, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; m = $f.m; o = $f.o; ok = $f.ok; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(m, opaquer, true);
		o = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = o.Opaque(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = m.Bounds(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = $clone(_r$1, image.Rectangle);
		y = b.Min.Y;
		/* while (true) { */ case 5:
			/* if (!(y < b.Max.Y)) { break; } */ if(!(y < b.Max.Y)) { $s = 6; continue; }
			x = b.Min.X;
			/* while (true) { */ case 7:
				/* if (!(x < b.Max.X)) { break; } */ if(!(x < b.Max.X)) { $s = 8; continue; }
				_r$2 = m.At(x, y); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.RGBA(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				a = _tuple$1[3];
				if (!((a === 65535))) {
					$s = -1; return false;
				}
				x = x + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
			y = y + (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: opaque }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.m = m; $f.o = o; $f.ok = ok; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	abs8 = function(d) {
		var d;
		if (d < 128) {
			return ((d >> 0));
		}
		return 256 - ((d >> 0)) >> 0;
	};
	encoder.ptr.prototype.writeChunk = function(b, name) {
		var _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, b, crc, e, n, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; crc = $f.crc; e = $f.e; n = $f.n; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			$s = -1; return;
		}
		n = ((b.$length >>> 0));
		if (!((((n >> 0)) === b.$length))) {
			e.err = new UnsupportedError((name + " chunk is too large: " + strconv.Itoa(b.$length)));
			$s = -1; return;
		}
		writeUint32($subslice(new sliceType$1(e.header), 0, 4), n);
		e.header[4] = name.charCodeAt(0);
		e.header[5] = name.charCodeAt(1);
		e.header[6] = name.charCodeAt(2);
		e.header[7] = name.charCodeAt(3);
		_r = crc32.NewIEEE(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		crc = _r;
		_r$1 = crc.Write($subslice(new sliceType$1(e.header), 4, 8)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = crc.Write(b); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_arg = $subslice(new sliceType$1(e.footer), 0, 4);
		_r$3 = crc.Sum32(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = _r$3;
		$r = writeUint32(_arg, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$4 = e.w.Write($subslice(new sliceType$1(e.header), 0, 8)); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		e.err = _tuple[1];
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			$s = -1; return;
		}
		_r$5 = e.w.Write(b); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$1 = _r$5;
		e.err = _tuple$1[1];
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			$s = -1; return;
		}
		_r$6 = e.w.Write($subslice(new sliceType$1(e.footer), 0, 4)); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$2 = _r$6;
		e.err = _tuple$2[1];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.writeChunk }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.crc = crc; $f.e = e; $f.n = n; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.writeChunk = function(b, name) { return this.$val.writeChunk(b, name); };
	encoder.ptr.prototype.writeIHDR = function() {
		var _1, _r, b, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; b = $f.b; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.m.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = $clone(_r, image.Rectangle);
		writeUint32($subslice(new sliceType$1(e.tmp), 0, 4), (($clone(b, image.Rectangle).Dx() >>> 0)));
		writeUint32($subslice(new sliceType$1(e.tmp), 4, 8), (($clone(b, image.Rectangle).Dy() >>> 0)));
		_1 = e.cb;
		if (_1 === (4)) {
			e.tmp[8] = 8;
			e.tmp[9] = 0;
		} else if (_1 === (6)) {
			e.tmp[8] = 8;
			e.tmp[9] = 2;
		} else if (_1 === (10)) {
			e.tmp[8] = 8;
			e.tmp[9] = 3;
		} else if (_1 === (11)) {
			e.tmp[8] = 8;
			e.tmp[9] = 6;
		} else if (_1 === (12)) {
			e.tmp[8] = 16;
			e.tmp[9] = 0;
		} else if (_1 === (14)) {
			e.tmp[8] = 16;
			e.tmp[9] = 2;
		} else if (_1 === (15)) {
			e.tmp[8] = 16;
			e.tmp[9] = 6;
		}
		e.tmp[10] = 0;
		e.tmp[11] = 0;
		e.tmp[12] = 0;
		$r = e.writeChunk($subslice(new sliceType$1(e.tmp), 0, 13), "IHDR"); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.writeIHDR }; } $f._1 = _1; $f._r = _r; $f.b = b; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.writeIHDR = function() { return this.$val.writeIHDR(); };
	encoder.ptr.prototype.writePLTEAndTRNS = function(p) {
		var _i, _r, _ref, c, c1, e, i, last, p, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; c1 = $f.c1; e = $f.e; i = $f.i; last = $f.last; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		if (p.$length < 1 || p.$length > 256) {
			e.err = new FormatError(("bad palette length: " + strconv.Itoa(p.$length)));
			$s = -1; return;
		}
		last = -1;
		_ref = p;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = color.NRGBAModel.Convert(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c1 = $clone($assertType(_r, color.NRGBA), color.NRGBA);
			(x = e.tmp, x$1 = ($imul(3, i)) + 0 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = c1.R));
			(x$2 = e.tmp, x$3 = ($imul(3, i)) + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3] = c1.G));
			(x$4 = e.tmp, x$5 = ($imul(3, i)) + 2 >> 0, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5] = c1.B));
			if (!((c1.A === 255))) {
				last = i;
			}
			(x$6 = e.tmp, x$7 = 768 + i >> 0, ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7] = c1.A));
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = e.writeChunk($subslice(new sliceType$1(e.tmp), 0, ($imul(3, p.$length))), "PLTE"); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!((last === -1))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((last === -1))) { */ case 5:
			$r = e.writeChunk($subslice(new sliceType$1(e.tmp), 768, (769 + last >> 0)), "tRNS"); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.writePLTEAndTRNS }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.c1 = c1; $f.e = e; $f.i = i; $f.last = last; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.writePLTEAndTRNS = function(p) { return this.$val.writePLTEAndTRNS(p); };
	encoder.ptr.prototype.Write = function(b) {
		var b, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.writeChunk(b, "IDAT"); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			$s = -1; return [0, e.err];
		}
		$s = -1; return [b.$length, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.Write }; } $f.b = b; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.Write = function(b) { return this.$val.Write(b); };
	filter = function(cr, pr, bpp) {
		var _q, _q$1, best, bpp, cdat0, cdat1, cdat2, cdat3, cdat4, cr, filter$1, i, i$1, i$2, i$3, i$4, i$5, i$6, i$7, n, pdat, pr, sum, x, x$1, x$2, x$3;
		cdat0 = $subslice((cr.nilCheck, cr[0]), 1);
		cdat1 = $subslice((cr.nilCheck, cr[1]), 1);
		cdat2 = $subslice((cr.nilCheck, cr[2]), 1);
		cdat3 = $subslice((cr.nilCheck, cr[3]), 1);
		cdat4 = $subslice((cr.nilCheck, cr[4]), 1);
		pdat = $subslice(pr, 1);
		n = cdat0.$length;
		sum = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= cdat2.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat2.$array[cdat2.$offset + i] = (((i < 0 || i >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + i]) - ((i < 0 || i >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i]) << 24 >>> 24));
			sum = sum + (abs8(((i < 0 || i >= cdat2.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat2.$array[cdat2.$offset + i]))) >> 0;
			i = i + (1) >> 0;
		}
		best = sum;
		filter$1 = 2;
		sum = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < bpp)) { break; }
			((i$1 < 0 || i$1 >= cdat4.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat4.$array[cdat4.$offset + i$1] = (((i$1 < 0 || i$1 >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + i$1]) - ((i$1 < 0 || i$1 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i$1]) << 24 >>> 24));
			sum = sum + (abs8(((i$1 < 0 || i$1 >= cdat4.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat4.$array[cdat4.$offset + i$1]))) >> 0;
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = bpp;
		while (true) {
			if (!(i$2 < n)) { break; }
			((i$2 < 0 || i$2 >= cdat4.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat4.$array[cdat4.$offset + i$2] = (((i$2 < 0 || i$2 >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + i$2]) - paeth((x = i$2 - bpp >> 0, ((x < 0 || x >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + x])), ((i$2 < 0 || i$2 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i$2]), (x$1 = i$2 - bpp >> 0, ((x$1 < 0 || x$1 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + x$1]))) << 24 >>> 24));
			sum = sum + (abs8(((i$2 < 0 || i$2 >= cdat4.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat4.$array[cdat4.$offset + i$2]))) >> 0;
			if (sum >= best) {
				break;
			}
			i$2 = i$2 + (1) >> 0;
		}
		if (sum < best) {
			best = sum;
			filter$1 = 4;
		}
		sum = 0;
		i$3 = 0;
		while (true) {
			if (!(i$3 < n)) { break; }
			sum = sum + (abs8(((i$3 < 0 || i$3 >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + i$3]))) >> 0;
			if (sum >= best) {
				break;
			}
			i$3 = i$3 + (1) >> 0;
		}
		if (sum < best) {
			best = sum;
			filter$1 = 0;
		}
		sum = 0;
		i$4 = 0;
		while (true) {
			if (!(i$4 < bpp)) { break; }
			((i$4 < 0 || i$4 >= cdat1.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat1.$array[cdat1.$offset + i$4] = ((i$4 < 0 || i$4 >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + i$4]));
			sum = sum + (abs8(((i$4 < 0 || i$4 >= cdat1.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat1.$array[cdat1.$offset + i$4]))) >> 0;
			i$4 = i$4 + (1) >> 0;
		}
		i$5 = bpp;
		while (true) {
			if (!(i$5 < n)) { break; }
			((i$5 < 0 || i$5 >= cdat1.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat1.$array[cdat1.$offset + i$5] = (((i$5 < 0 || i$5 >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + i$5]) - (x$2 = i$5 - bpp >> 0, ((x$2 < 0 || x$2 >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + x$2])) << 24 >>> 24));
			sum = sum + (abs8(((i$5 < 0 || i$5 >= cdat1.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat1.$array[cdat1.$offset + i$5]))) >> 0;
			if (sum >= best) {
				break;
			}
			i$5 = i$5 + (1) >> 0;
		}
		if (sum < best) {
			best = sum;
			filter$1 = 1;
		}
		sum = 0;
		i$6 = 0;
		while (true) {
			if (!(i$6 < bpp)) { break; }
			((i$6 < 0 || i$6 >= cdat3.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat3.$array[cdat3.$offset + i$6] = (((i$6 < 0 || i$6 >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + i$6]) - (_q = ((i$6 < 0 || i$6 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i$6]) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24));
			sum = sum + (abs8(((i$6 < 0 || i$6 >= cdat3.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat3.$array[cdat3.$offset + i$6]))) >> 0;
			i$6 = i$6 + (1) >> 0;
		}
		i$7 = bpp;
		while (true) {
			if (!(i$7 < n)) { break; }
			((i$7 < 0 || i$7 >= cdat3.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat3.$array[cdat3.$offset + i$7] = (((i$7 < 0 || i$7 >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + i$7]) - (((_q$1 = (((((x$3 = i$7 - bpp >> 0, ((x$3 < 0 || x$3 >= cdat0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat0.$array[cdat0.$offset + x$3])) >> 0)) + ((((i$7 < 0 || i$7 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i$7]) >> 0)) >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) << 24 >>> 24));
			sum = sum + (abs8(((i$7 < 0 || i$7 >= cdat3.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat3.$array[cdat3.$offset + i$7]))) >> 0;
			if (sum >= best) {
				break;
			}
			i$7 = i$7 + (1) >> 0;
		}
		if (sum < best) {
			best = sum;
			filter$1 = 3;
		}
		return filter$1;
	};
	zeroMemory = function(v) {
		var _i, _ref, i, v;
		_ref = v;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i] = 0);
			_i++;
		}
	};
	encoder.ptr.prototype.writeImage = function(w, m, cb, level) {
		var _1, _2, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, b, b$1, b$2, bpp, c, c$1, c$2, c$3, cb, cr, cr0, e, err, err$1, f, g, g$1, gray, i, i$1, j, j0, j1, level, m, nrgba, offset, offset$1, offset$2, paletted, pi, pix, pr, r, r$1, rgba, stride, sz, w, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$7, x$8, x$9, y, zw, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; bpp = $f.bpp; c = $f.c; c$1 = $f.c$1; c$2 = $f.c$2; c$3 = $f.c$3; cb = $f.cb; cr = $f.cr; cr0 = $f.cr0; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; g = $f.g; g$1 = $f.g$1; gray = $f.gray; i = $f.i; i$1 = $f.i$1; j = $f.j; j0 = $f.j0; j1 = $f.j1; level = $f.level; m = $f.m; nrgba = $f.nrgba; offset = $f.offset; offset$1 = $f.offset$1; offset$2 = $f.offset$2; paletted = $f.paletted; pi = $f.pi; pix = $f.pix; pr = $f.pr; r = $f.r; r$1 = $f.r$1; rgba = $f.rgba; stride = $f.stride; sz = $f.sz; w = $f.w; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$25 = $f.x$25; x$26 = $f.x$26; x$27 = $f.x$27; x$28 = $f.x$28; x$29 = $f.x$29; x$3 = $f.x$3; x$30 = $f.x$30; x$31 = $f.x$31; x$32 = $f.x$32; x$33 = $f.x$33; x$34 = $f.x$34; x$35 = $f.x$35; x$36 = $f.x$36; x$37 = $f.x$37; x$38 = $f.x$38; x$39 = $f.x$39; x$4 = $f.x$4; x$40 = $f.x$40; x$41 = $f.x$41; x$42 = $f.x$42; x$43 = $f.x$43; x$44 = $f.x$44; x$45 = $f.x$45; x$46 = $f.x$46; x$47 = $f.x$47; x$48 = $f.x$48; x$49 = $f.x$49; x$5 = $f.x$5; x$50 = $f.x$50; x$51 = $f.x$51; x$52 = $f.x$52; x$53 = $f.x$53; x$54 = $f.x$54; x$55 = $f.x$55; x$56 = $f.x$56; x$57 = $f.x$57; x$58 = $f.x$58; x$59 = $f.x$59; x$6 = $f.x$6; x$60 = $f.x$60; x$61 = $f.x$61; x$62 = $f.x$62; x$63 = $f.x$63; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; zw = $f.zw; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		cr = [cr];
		e = this;
		/* */ if (e.zw === ptrType$9.nil || !((e.zwLevel === level))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (e.zw === ptrType$9.nil || !((e.zwLevel === level))) { */ case 1:
			_r = zlib.NewWriterLevel(w, level); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			zw = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			e.zw = zw;
			e.zwLevel = level;
			$s = 3; continue;
		/* } else { */ case 2:
			$r = e.zw.Reset(w); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$deferred.push([$methodVal(e.zw, "Close"), []]);
		bpp = 0;
		_1 = cb;
		if (_1 === (4)) {
			bpp = 1;
		} else if (_1 === (6)) {
			bpp = 3;
		} else if (_1 === (10)) {
			bpp = 1;
		} else if (_1 === (11)) {
			bpp = 4;
		} else if (_1 === (14)) {
			bpp = 6;
		} else if (_1 === (15)) {
			bpp = 8;
		} else if (_1 === (12)) {
			bpp = 2;
		}
		_r$1 = m.Bounds(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = $clone(_r$1, image.Rectangle);
		sz = 1 + ($imul(bpp, $clone(b, image.Rectangle).Dx())) >> 0;
		_ref = e.cr;
		_i = 0;
		while (true) {
			if (!(_i < 5)) { break; }
			i = _i;
			if ((x = e.cr, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])).$capacity < sz) {
				(x$1 = e.cr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = $makeSlice(sliceType$1, sz)));
			} else {
				(x$3 = e.cr, ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i] = $subslice((x$2 = e.cr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])), 0, sz)));
			}
			(x$4 = (x$5 = e.cr, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i])), (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0] = ((i << 24 >>> 24))));
			_i++;
		}
		cr[0] = $clone(e.cr, arrayType$3);
		if (e.pr.$capacity < sz) {
			e.pr = $makeSlice(sliceType$1, sz);
		} else {
			e.pr = $subslice(e.pr, 0, sz);
			zeroMemory(e.pr);
		}
		pr = e.pr;
		_tuple$1 = $assertType(m, ptrType, true);
		gray = _tuple$1[0];
		_tuple$2 = $assertType(m, ptrType$1, true);
		rgba = _tuple$2[0];
		_tuple$3 = $assertType(m, ptrType$2, true);
		paletted = _tuple$3[0];
		_tuple$4 = $assertType(m, ptrType$3, true);
		nrgba = _tuple$4[0];
		y = b.Min.Y;
		/* while (true) { */ case 7:
			/* if (!(y < b.Max.Y)) { break; } */ if(!(y < b.Max.Y)) { $s = 8; continue; }
			i$1 = 1;
				_2 = cb;
				/* */ if (_2 === (4)) { $s = 10; continue; }
				/* */ if (_2 === (6)) { $s = 11; continue; }
				/* */ if (_2 === (10)) { $s = 12; continue; }
				/* */ if (_2 === (11)) { $s = 13; continue; }
				/* */ if (_2 === (12)) { $s = 14; continue; }
				/* */ if (_2 === (14)) { $s = 15; continue; }
				/* */ if (_2 === (15)) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_2 === (4)) { */ case 10:
					/* */ if (!(gray === ptrType.nil)) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!(gray === ptrType.nil)) { */ case 18:
						offset = $imul(((y - b.Min.Y >> 0)), gray.Stride);
						$copySlice($subslice(cr[0][0], 1), $subslice(gray.Pix, offset, (offset + $clone(b, image.Rectangle).Dx() >> 0)));
						$s = 20; continue;
					/* } else { */ case 19:
						x$6 = b.Min.X;
						/* while (true) { */ case 21:
							/* if (!(x$6 < b.Max.X)) { break; } */ if(!(x$6 < b.Max.X)) { $s = 22; continue; }
							_r$2 = m.At(x$6, y); /* */ $s = 23; case 23: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_r$3 = color.GrayModel.Convert(_r$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							c = $clone($assertType(_r$3, color.Gray), color.Gray);
							(x$7 = cr[0][0], ((i$1 < 0 || i$1 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i$1] = c.Y));
							i$1 = i$1 + (1) >> 0;
							x$6 = x$6 + (1) >> 0;
						/* } */ $s = 21; continue; case 22:
					/* } */ case 20:
					$s = 17; continue;
				/* } else if (_2 === (6)) { */ case 11:
					cr0 = cr[0][0];
					_tmp = 0;
					_tmp$1 = (sliceType$1.nil);
					stride = _tmp;
					pix = _tmp$1;
					if (!(rgba === ptrType$1.nil)) {
						_tmp$2 = rgba.Stride;
						_tmp$3 = rgba.Pix;
						stride = _tmp$2;
						pix = _tmp$3;
					} else if (!(nrgba === ptrType$3.nil)) {
						_tmp$4 = nrgba.Stride;
						_tmp$5 = nrgba.Pix;
						stride = _tmp$4;
						pix = _tmp$5;
					}
					/* */ if (!((stride === 0))) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!((stride === 0))) { */ case 25:
						j0 = $imul(((y - b.Min.Y >> 0)), stride);
						j1 = j0 + ($imul($clone(b, image.Rectangle).Dx(), 4)) >> 0;
						j = j0;
						while (true) {
							if (!(j < j1)) { break; }
							(x$9 = i$1 + 0 >> 0, ((x$9 < 0 || x$9 >= cr0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cr0.$array[cr0.$offset + x$9] = (x$8 = j + 0 >> 0, ((x$8 < 0 || x$8 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$8]))));
							(x$11 = i$1 + 1 >> 0, ((x$11 < 0 || x$11 >= cr0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cr0.$array[cr0.$offset + x$11] = (x$10 = j + 1 >> 0, ((x$10 < 0 || x$10 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$10]))));
							(x$13 = i$1 + 2 >> 0, ((x$13 < 0 || x$13 >= cr0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cr0.$array[cr0.$offset + x$13] = (x$12 = j + 2 >> 0, ((x$12 < 0 || x$12 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$12]))));
							i$1 = i$1 + (3) >> 0;
							j = j + (4) >> 0;
						}
						$s = 27; continue;
					/* } else { */ case 26:
						x$14 = b.Min.X;
						/* while (true) { */ case 28:
							/* if (!(x$14 < b.Max.X)) { break; } */ if(!(x$14 < b.Max.X)) { $s = 29; continue; }
							_r$4 = m.At(x$14, y); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
							_r$5 = _r$4.RGBA(); /* */ $s = 31; case 31: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
							_tuple$5 = _r$5;
							r = _tuple$5[0];
							g = _tuple$5[1];
							b$1 = _tuple$5[2];
							(x$15 = i$1 + 0 >> 0, ((x$15 < 0 || x$15 >= cr0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cr0.$array[cr0.$offset + x$15] = (((r >>> 8 >>> 0) << 24 >>> 24))));
							(x$16 = i$1 + 1 >> 0, ((x$16 < 0 || x$16 >= cr0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cr0.$array[cr0.$offset + x$16] = (((g >>> 8 >>> 0) << 24 >>> 24))));
							(x$17 = i$1 + 2 >> 0, ((x$17 < 0 || x$17 >= cr0.$length) ? ($throwRuntimeError("index out of range"), undefined) : cr0.$array[cr0.$offset + x$17] = (((b$1 >>> 8 >>> 0) << 24 >>> 24))));
							i$1 = i$1 + (3) >> 0;
							x$14 = x$14 + (1) >> 0;
						/* } */ $s = 28; continue; case 29:
					/* } */ case 27:
					$s = 17; continue;
				/* } else if (_2 === (10)) { */ case 12:
					/* */ if (!(paletted === ptrType$2.nil)) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if (!(paletted === ptrType$2.nil)) { */ case 32:
						offset$1 = $imul(((y - b.Min.Y >> 0)), paletted.Stride);
						$copySlice($subslice(cr[0][0], 1), $subslice(paletted.Pix, offset$1, (offset$1 + $clone(b, image.Rectangle).Dx() >> 0)));
						$s = 34; continue;
					/* } else { */ case 33:
						pi = $assertType(m, image.PalettedImage);
						x$18 = b.Min.X;
						/* while (true) { */ case 35:
							/* if (!(x$18 < b.Max.X)) { break; } */ if(!(x$18 < b.Max.X)) { $s = 36; continue; }
							_r$6 = pi.ColorIndexAt(x$18, y); /* */ $s = 37; case 37: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
							(x$19 = cr[0][0], ((i$1 < 0 || i$1 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + i$1] = _r$6));
							i$1 = i$1 + (1) >> 0;
							x$18 = x$18 + (1) >> 0;
						/* } */ $s = 35; continue; case 36:
					/* } */ case 34:
					$s = 17; continue;
				/* } else if (_2 === (11)) { */ case 13:
					/* */ if (!(nrgba === ptrType$3.nil)) { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (!(nrgba === ptrType$3.nil)) { */ case 38:
						offset$2 = $imul(((y - b.Min.Y >> 0)), nrgba.Stride);
						$copySlice($subslice(cr[0][0], 1), $subslice(nrgba.Pix, offset$2, (offset$2 + ($imul($clone(b, image.Rectangle).Dx(), 4)) >> 0)));
						$s = 40; continue;
					/* } else { */ case 39:
						x$20 = b.Min.X;
						/* while (true) { */ case 41:
							/* if (!(x$20 < b.Max.X)) { break; } */ if(!(x$20 < b.Max.X)) { $s = 42; continue; }
							_r$7 = m.At(x$20, y); /* */ $s = 43; case 43: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							_r$8 = color.NRGBAModel.Convert(_r$7); /* */ $s = 44; case 44: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							c$1 = $clone($assertType(_r$8, color.NRGBA), color.NRGBA);
							(x$21 = cr[0][0], x$22 = i$1 + 0 >> 0, ((x$22 < 0 || x$22 >= x$21.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$21.$array[x$21.$offset + x$22] = c$1.R));
							(x$23 = cr[0][0], x$24 = i$1 + 1 >> 0, ((x$24 < 0 || x$24 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + x$24] = c$1.G));
							(x$25 = cr[0][0], x$26 = i$1 + 2 >> 0, ((x$26 < 0 || x$26 >= x$25.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$25.$array[x$25.$offset + x$26] = c$1.B));
							(x$27 = cr[0][0], x$28 = i$1 + 3 >> 0, ((x$28 < 0 || x$28 >= x$27.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$27.$array[x$27.$offset + x$28] = c$1.A));
							i$1 = i$1 + (4) >> 0;
							x$20 = x$20 + (1) >> 0;
						/* } */ $s = 41; continue; case 42:
					/* } */ case 40:
					$s = 17; continue;
				/* } else if (_2 === (12)) { */ case 14:
					x$29 = b.Min.X;
					/* while (true) { */ case 45:
						/* if (!(x$29 < b.Max.X)) { break; } */ if(!(x$29 < b.Max.X)) { $s = 46; continue; }
						_r$9 = m.At(x$29, y); /* */ $s = 47; case 47: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$10 = color.Gray16Model.Convert(_r$9); /* */ $s = 48; case 48: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						c$2 = $clone($assertType(_r$10, color.Gray16), color.Gray16);
						(x$30 = cr[0][0], x$31 = i$1 + 0 >> 0, ((x$31 < 0 || x$31 >= x$30.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$30.$array[x$30.$offset + x$31] = (((c$2.Y >>> 8 << 16 >>> 16) << 24 >>> 24))));
						(x$32 = cr[0][0], x$33 = i$1 + 1 >> 0, ((x$33 < 0 || x$33 >= x$32.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$32.$array[x$32.$offset + x$33] = ((c$2.Y << 24 >>> 24))));
						i$1 = i$1 + (2) >> 0;
						x$29 = x$29 + (1) >> 0;
					/* } */ $s = 45; continue; case 46:
					$s = 17; continue;
				/* } else if (_2 === (14)) { */ case 15:
					x$34 = b.Min.X;
					/* while (true) { */ case 49:
						/* if (!(x$34 < b.Max.X)) { break; } */ if(!(x$34 < b.Max.X)) { $s = 50; continue; }
						_r$11 = m.At(x$34, y); /* */ $s = 51; case 51: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$12 = _r$11.RGBA(); /* */ $s = 52; case 52: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_tuple$6 = _r$12;
						r$1 = _tuple$6[0];
						g$1 = _tuple$6[1];
						b$2 = _tuple$6[2];
						(x$35 = cr[0][0], x$36 = i$1 + 0 >> 0, ((x$36 < 0 || x$36 >= x$35.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$35.$array[x$35.$offset + x$36] = (((r$1 >>> 8 >>> 0) << 24 >>> 24))));
						(x$37 = cr[0][0], x$38 = i$1 + 1 >> 0, ((x$38 < 0 || x$38 >= x$37.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$37.$array[x$37.$offset + x$38] = ((r$1 << 24 >>> 24))));
						(x$39 = cr[0][0], x$40 = i$1 + 2 >> 0, ((x$40 < 0 || x$40 >= x$39.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$39.$array[x$39.$offset + x$40] = (((g$1 >>> 8 >>> 0) << 24 >>> 24))));
						(x$41 = cr[0][0], x$42 = i$1 + 3 >> 0, ((x$42 < 0 || x$42 >= x$41.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$41.$array[x$41.$offset + x$42] = ((g$1 << 24 >>> 24))));
						(x$43 = cr[0][0], x$44 = i$1 + 4 >> 0, ((x$44 < 0 || x$44 >= x$43.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$43.$array[x$43.$offset + x$44] = (((b$2 >>> 8 >>> 0) << 24 >>> 24))));
						(x$45 = cr[0][0], x$46 = i$1 + 5 >> 0, ((x$46 < 0 || x$46 >= x$45.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$45.$array[x$45.$offset + x$46] = ((b$2 << 24 >>> 24))));
						i$1 = i$1 + (6) >> 0;
						x$34 = x$34 + (1) >> 0;
					/* } */ $s = 49; continue; case 50:
					$s = 17; continue;
				/* } else if (_2 === (15)) { */ case 16:
					x$47 = b.Min.X;
					/* while (true) { */ case 53:
						/* if (!(x$47 < b.Max.X)) { break; } */ if(!(x$47 < b.Max.X)) { $s = 54; continue; }
						_r$13 = m.At(x$47, y); /* */ $s = 55; case 55: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_r$14 = color.NRGBA64Model.Convert(_r$13); /* */ $s = 56; case 56: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						c$3 = $clone($assertType(_r$14, color.NRGBA64), color.NRGBA64);
						(x$48 = cr[0][0], x$49 = i$1 + 0 >> 0, ((x$49 < 0 || x$49 >= x$48.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$48.$array[x$48.$offset + x$49] = (((c$3.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
						(x$50 = cr[0][0], x$51 = i$1 + 1 >> 0, ((x$51 < 0 || x$51 >= x$50.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$50.$array[x$50.$offset + x$51] = ((c$3.R << 24 >>> 24))));
						(x$52 = cr[0][0], x$53 = i$1 + 2 >> 0, ((x$53 < 0 || x$53 >= x$52.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$52.$array[x$52.$offset + x$53] = (((c$3.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
						(x$54 = cr[0][0], x$55 = i$1 + 3 >> 0, ((x$55 < 0 || x$55 >= x$54.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$54.$array[x$54.$offset + x$55] = ((c$3.G << 24 >>> 24))));
						(x$56 = cr[0][0], x$57 = i$1 + 4 >> 0, ((x$57 < 0 || x$57 >= x$56.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$56.$array[x$56.$offset + x$57] = (((c$3.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
						(x$58 = cr[0][0], x$59 = i$1 + 5 >> 0, ((x$59 < 0 || x$59 >= x$58.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$58.$array[x$58.$offset + x$59] = ((c$3.B << 24 >>> 24))));
						(x$60 = cr[0][0], x$61 = i$1 + 6 >> 0, ((x$61 < 0 || x$61 >= x$60.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$60.$array[x$60.$offset + x$61] = (((c$3.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
						(x$62 = cr[0][0], x$63 = i$1 + 7 >> 0, ((x$63 < 0 || x$63 >= x$62.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$62.$array[x$62.$offset + x$63] = ((c$3.A << 24 >>> 24))));
						i$1 = i$1 + (8) >> 0;
						x$47 = x$47 + (1) >> 0;
					/* } */ $s = 53; continue; case 54:
				/* } */ case 17:
			case 9:
			f = 0;
			if (!((level === 0)) && !((cb === 10))) {
				f = filter(cr[0], pr, bpp);
			}
			_r$15 = e.zw.Write(((f < 0 || f >= cr[0].length) ? ($throwRuntimeError("index out of range"), undefined) : cr[0][f])); /* */ $s = 57; case 57: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_tuple$7 = _r$15;
			err$1 = _tuple$7[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return err$1;
			}
			_tmp$6 = cr[0][0];
			_tmp$7 = pr;
			pr = _tmp$6;
			cr[0][0] = _tmp$7;
			y = y + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.writeImage }; } $f._1 = _1; $f._2 = _2; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.bpp = bpp; $f.c = c; $f.c$1 = c$1; $f.c$2 = c$2; $f.c$3 = c$3; $f.cb = cb; $f.cr = cr; $f.cr0 = cr0; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.g = g; $f.g$1 = g$1; $f.gray = gray; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.j0 = j0; $f.j1 = j1; $f.level = level; $f.m = m; $f.nrgba = nrgba; $f.offset = offset; $f.offset$1 = offset$1; $f.offset$2 = offset$2; $f.paletted = paletted; $f.pi = pi; $f.pix = pix; $f.pr = pr; $f.r = r; $f.r$1 = r$1; $f.rgba = rgba; $f.stride = stride; $f.sz = sz; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$25 = x$25; $f.x$26 = x$26; $f.x$27 = x$27; $f.x$28 = x$28; $f.x$29 = x$29; $f.x$3 = x$3; $f.x$30 = x$30; $f.x$31 = x$31; $f.x$32 = x$32; $f.x$33 = x$33; $f.x$34 = x$34; $f.x$35 = x$35; $f.x$36 = x$36; $f.x$37 = x$37; $f.x$38 = x$38; $f.x$39 = x$39; $f.x$4 = x$4; $f.x$40 = x$40; $f.x$41 = x$41; $f.x$42 = x$42; $f.x$43 = x$43; $f.x$44 = x$44; $f.x$45 = x$45; $f.x$46 = x$46; $f.x$47 = x$47; $f.x$48 = x$48; $f.x$49 = x$49; $f.x$5 = x$5; $f.x$50 = x$50; $f.x$51 = x$51; $f.x$52 = x$52; $f.x$53 = x$53; $f.x$54 = x$54; $f.x$55 = x$55; $f.x$56 = x$56; $f.x$57 = x$57; $f.x$58 = x$58; $f.x$59 = x$59; $f.x$6 = x$6; $f.x$60 = x$60; $f.x$61 = x$61; $f.x$62 = x$62; $f.x$63 = x$63; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.zw = zw; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	encoder.prototype.writeImage = function(w, m, cb, level) { return this.$val.writeImage(w, m, cb, level); };
	encoder.ptr.prototype.writeIDATs = function() {
		var _r, _r$1, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			$s = -1; return;
		}
		if (e.bw === ptrType$10.nil) {
			e.bw = bufio.NewWriterSize(e, 32768);
		} else {
			e.bw.Reset(e);
		}
		_r = e.writeImage(e.bw, e.m, e.cb, levelToZlib(e.enc.CompressionLevel)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e.err = _r;
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			$s = -1; return;
		}
		_r$1 = e.bw.Flush(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		e.err = _r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.writeIDATs }; } $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.writeIDATs = function() { return this.$val.writeIDATs(); };
	levelToZlib = function(l) {
		var _1, l;
		_1 = l;
		if (_1 === (0)) {
			return -1;
		} else if (_1 === (-1)) {
			return 0;
		} else if (_1 === (-2)) {
			return 1;
		} else if (_1 === (-3)) {
			return 9;
		} else {
			return -1;
		}
	};
	encoder.ptr.prototype.writeIEND = function() {
		var e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.writeChunk(sliceType$1.nil, "IEND"); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.writeIEND }; } $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.writeIEND = function() { return this.$val.writeIEND(); };
	Encode = function(w, m) {
		var _r, e, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = new Encoder.ptr(0, $ifaceNil);
		_r = e.Encode(w, m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encode }; } $f._r = _r; $f.e = e; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Encode = Encode;
	Encoder.ptr.prototype.Encode = function(w, m) {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, buffer, e, enc, m, mh, mw, ok, pal, w, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; buffer = $f.buffer; e = $f.e; enc = $f.enc; m = $f.m; mh = $f.mh; mw = $f.mw; ok = $f.ok; pal = $f.pal; w = $f.w; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		enc = this;
		_r = m.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, image.Rectangle).Dx(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tmp = (new $Int64(0, _r$1));
		_r$2 = m.Bounds(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $clone(_r$2, image.Rectangle).Dy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tmp$1 = (new $Int64(0, _r$3));
		mw = _tmp;
		mh = _tmp$1;
		if ((mw.$high < 0 || (mw.$high === 0 && mw.$low <= 0)) || (mh.$high < 0 || (mh.$high === 0 && mh.$low <= 0)) || (mw.$high > 1 || (mw.$high === 1 && mw.$low >= 0)) || (mh.$high > 1 || (mh.$high === 1 && mh.$low >= 0))) {
			$s = -1; return new FormatError(("invalid image size: " + strconv.FormatInt(mw, 10) + "x" + strconv.FormatInt(mh, 10)));
		}
		e = ptrType$11.nil;
		/* */ if (!($interfaceIsEqual(enc.BufferPool, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(enc.BufferPool, $ifaceNil))) { */ case 5:
			_r$4 = enc.BufferPool.Get(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			buffer = _r$4;
			e = ($pointerOfStructConversion(buffer, ptrType$11));
		/* } */ case 6:
		if (e === ptrType$11.nil) {
			e = new encoder.ptr(ptrType$12.nil, $ifaceNil, $ifaceNil, 0, $ifaceNil, arrayType$4.zero(), arrayType$5.zero(), arrayType$6.zero(), arrayType$3.zero(), sliceType$1.nil, ptrType$9.nil, 0, ptrType$10.nil);
		}
		/* */ if (!($interfaceIsEqual(enc.BufferPool, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(enc.BufferPool, $ifaceNil))) { */ case 8:
			$deferred.push([$methodVal(enc.BufferPool, "Put"), [($pointerOfStructConversion(e, ptrType$13))]]);
		/* } */ case 9:
		e.enc = enc;
		e.w = w;
		e.m = m;
		pal = color.Palette.nil;
		_tuple = $assertType(m, image.PalettedImage, true);
		ok = _tuple[1];
		/* */ if (ok) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (ok) { */ case 10:
			_r$5 = m.ColorModel(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(_r$5, color.Palette, true);
			pal = _tuple$1[0];
		/* } */ case 11:
		/* */ if (!(pal === color.Palette.nil)) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!(pal === color.Palette.nil)) { */ case 13:
			e.cb = 10;
			$s = 15; continue;
		/* } else { */ case 14:
				_r$6 = m.ColorModel(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_1 = _r$6;
				/* */ if ($interfaceIsEqual(_1, (color.GrayModel))) { $s = 18; continue; }
				/* */ if ($interfaceIsEqual(_1, (color.Gray16Model))) { $s = 19; continue; }
				/* */ if ($interfaceIsEqual(_1, (color.RGBAModel)) || $interfaceIsEqual(_1, (color.NRGBAModel)) || $interfaceIsEqual(_1, (color.AlphaModel))) { $s = 20; continue; }
				_r$7 = opaque(m); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if (_r$7) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if ($interfaceIsEqual(_1, (color.GrayModel))) { */ case 18:
					e.cb = 4;
					$s = 23; continue;
				/* } else if ($interfaceIsEqual(_1, (color.Gray16Model))) { */ case 19:
					e.cb = 12;
					$s = 23; continue;
				/* } else if ($interfaceIsEqual(_1, (color.RGBAModel)) || $interfaceIsEqual(_1, (color.NRGBAModel)) || $interfaceIsEqual(_1, (color.AlphaModel))) { */ case 20:
					_r$8 = opaque(m); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (_r$8) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (_r$8) { */ case 25:
						e.cb = 6;
						$s = 27; continue;
					/* } else { */ case 26:
						e.cb = 11;
					/* } */ case 27:
					$s = 23; continue;
				/* } else if (_r$7) { */ case 21:
					e.cb = 14;
					$s = 23; continue;
				/* } else { */ case 22:
					e.cb = 15;
				/* } */ case 23:
			case 16:
		/* } */ case 15:
		_r$9 = io.WriteString(w, "\x89PNG\r\n\x1A\n"); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tuple$2 = _r$9;
		e.err = _tuple$2[1];
		$r = e.writeIHDR(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(pal === color.Palette.nil)) { $s = 31; continue; }
		/* */ $s = 32; continue;
		/* if (!(pal === color.Palette.nil)) { */ case 31:
			$r = e.writePLTEAndTRNS(pal); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 32:
		$r = e.writeIDATs(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = e.writeIEND(); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return e.err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.Encode }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.buffer = buffer; $f.e = e; $f.enc = enc; $f.m = m; $f.mh = mh; $f.mw = mw; $f.ok = ok; $f.pal = pal; $f.w = w; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Encoder.prototype.Encode = function(w, m) { return this.$val.Encode(w, m); };
	FormatError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnsupportedError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$12.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([io.Writer, image.Image], [$error], false)}];
	ptrType$11.methods = [{prop: "writeChunk", name: "writeChunk", pkg: "github.com/hajimehoshi/ebiten/internal/png", typ: $funcType([sliceType$1, $String], [], false)}, {prop: "writeIHDR", name: "writeIHDR", pkg: "github.com/hajimehoshi/ebiten/internal/png", typ: $funcType([], [], false)}, {prop: "writePLTEAndTRNS", name: "writePLTEAndTRNS", pkg: "github.com/hajimehoshi/ebiten/internal/png", typ: $funcType([color.Palette], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "writeImage", name: "writeImage", pkg: "github.com/hajimehoshi/ebiten/internal/png", typ: $funcType([io.Writer, image.Image, $Int, $Int], [$error], false)}, {prop: "writeIDATs", name: "writeIDATs", pkg: "github.com/hajimehoshi/ebiten/internal/png", typ: $funcType([], [], false)}, {prop: "writeIEND", name: "writeIEND", pkg: "github.com/hajimehoshi/ebiten/internal/png", typ: $funcType([], [], false)}];
	Encoder.init("", [{prop: "CompressionLevel", name: "CompressionLevel", anonymous: false, exported: true, typ: CompressionLevel, tag: ""}, {prop: "BufferPool", name: "BufferPool", anonymous: false, exported: true, typ: EncoderBufferPool, tag: ""}]);
	EncoderBufferPool.init([{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [ptrType$13], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([ptrType$13], [], false)}]);
	EncoderBuffer.init("github.com/hajimehoshi/ebiten/internal/png", [{prop: "enc", name: "enc", anonymous: false, exported: false, typ: ptrType$12, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: io.Writer, tag: ""}, {prop: "m", name: "m", anonymous: false, exported: false, typ: image.Image, tag: ""}, {prop: "cb", name: "cb", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "header", name: "header", anonymous: false, exported: false, typ: arrayType$4, tag: ""}, {prop: "footer", name: "footer", anonymous: false, exported: false, typ: arrayType$5, tag: ""}, {prop: "tmp", name: "tmp", anonymous: false, exported: false, typ: arrayType$6, tag: ""}, {prop: "cr", name: "cr", anonymous: false, exported: false, typ: arrayType$3, tag: ""}, {prop: "pr", name: "pr", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "zw", name: "zw", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "zwLevel", name: "zwLevel", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "bw", name: "bw", anonymous: false, exported: false, typ: ptrType$10, tag: ""}]);
	encoder.init("github.com/hajimehoshi/ebiten/internal/png", [{prop: "enc", name: "enc", anonymous: false, exported: false, typ: ptrType$12, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: io.Writer, tag: ""}, {prop: "m", name: "m", anonymous: false, exported: false, typ: image.Image, tag: ""}, {prop: "cb", name: "cb", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "header", name: "header", anonymous: false, exported: false, typ: arrayType$4, tag: ""}, {prop: "footer", name: "footer", anonymous: false, exported: false, typ: arrayType$5, tag: ""}, {prop: "tmp", name: "tmp", anonymous: false, exported: false, typ: arrayType$6, tag: ""}, {prop: "cr", name: "cr", anonymous: false, exported: false, typ: arrayType$3, tag: ""}, {prop: "pr", name: "pr", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "zw", name: "zw", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "zwLevel", name: "zwLevel", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "bw", name: "bw", anonymous: false, exported: false, typ: ptrType$10, tag: ""}]);
	opaquer.init([{prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = zlib.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crc32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/packing"] = (function() {
	var $pkg = {}, $init, errors, Page, Node, ptrType, sliceType, ptrType$1, NewPage, square, walk;
	errors = $packages["errors"];
	Page = $pkg.Page = $newType(0, $kindStruct, "packing.Page", true, "github.com/hajimehoshi/ebiten/internal/packing", true, function(root_, size_, maxSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = ptrType.nil;
			this.size = 0;
			this.maxSize = 0;
			return;
		}
		this.root = root_;
		this.size = size_;
		this.maxSize = maxSize_;
	});
	Node = $pkg.Node = $newType(0, $kindStruct, "packing.Node", true, "github.com/hajimehoshi/ebiten/internal/packing", true, function(x_, y_, width_, height_, used_, parent_, child0_, child1_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = 0;
			this.y = 0;
			this.width = 0;
			this.height = 0;
			this.used = false;
			this.parent = ptrType.nil;
			this.child0 = ptrType.nil;
			this.child1 = ptrType.nil;
			return;
		}
		this.x = x_;
		this.y = y_;
		this.width = width_;
		this.height = height_;
		this.used = used_;
		this.parent = parent_;
		this.child0 = child0_;
		this.child1 = child1_;
	});
	ptrType = $ptrType(Node);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType(Page);
	NewPage = function(initSize, maxSize) {
		var initSize, maxSize;
		return new Page.ptr(ptrType.nil, initSize, maxSize);
	};
	$pkg.NewPage = NewPage;
	Page.ptr.prototype.IsEmpty = function() {
		var p;
		p = this;
		if (p.root === ptrType.nil) {
			return true;
		}
		return !p.root.used && p.root.child0 === ptrType.nil && p.root.child1 === ptrType.nil;
	};
	Page.prototype.IsEmpty = function() { return this.$val.IsEmpty(); };
	Node.ptr.prototype.canFree = function() {
		var n;
		n = this;
		if (n.used) {
			return false;
		}
		if (n.child0 === ptrType.nil && n.child1 === ptrType.nil) {
			return true;
		}
		return n.child0.canFree() && n.child1.canFree();
	};
	Node.prototype.canFree = function() { return this.$val.canFree(); };
	Node.ptr.prototype.Region = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, height, n, width, x, y;
		x = 0;
		y = 0;
		width = 0;
		height = 0;
		n = this;
		_tmp = n.x;
		_tmp$1 = n.y;
		_tmp$2 = n.width;
		_tmp$3 = n.height;
		x = _tmp;
		y = _tmp$1;
		width = _tmp$2;
		height = _tmp$3;
		return [x, y, width, height];
	};
	Node.prototype.Region = function() { return this.$val.Region(); };
	square = function(width, height) {
		var height, width;
		if ((width === 0) && (height === 0)) {
			return 0;
		}
		if (width <= height) {
			return (width) / (height);
		}
		return (height) / (width);
	};
	Page.ptr.prototype.alloc = function(n, width, height) {
		var height, n, node, node$1, p, width;
		p = this;
		if (n.width < width || n.height < height) {
			return ptrType.nil;
		}
		if (n.used) {
			return ptrType.nil;
		}
		if (n.child0 === ptrType.nil && n.child1 === ptrType.nil) {
			if ((n.width === width) && (n.height === height)) {
				n.used = true;
				return n;
			}
			if (square(n.width - width >> 0, n.height) >= square(n.width, n.height - height >> 0)) {
				n.child0 = new Node.ptr(n.x, n.y, width, n.height, false, n, ptrType.nil, ptrType.nil);
				n.child1 = new Node.ptr(n.x + width >> 0, n.y, n.width - width >> 0, n.height, false, n, ptrType.nil, ptrType.nil);
			} else {
				n.child0 = new Node.ptr(n.x, n.y, n.width, height, false, n, ptrType.nil, ptrType.nil);
				n.child1 = new Node.ptr(n.x, n.y + height >> 0, n.width, n.height - height >> 0, false, n, ptrType.nil, ptrType.nil);
			}
			return p.alloc(n.child0, width, height);
		}
		if (n.child0 === ptrType.nil || n.child1 === ptrType.nil) {
			$panic(new $String("not reached"));
		}
		node = p.alloc(n.child0, width, height);
		if (!(node === ptrType.nil)) {
			return node;
		}
		node$1 = p.alloc(n.child1, width, height);
		if (!(node$1 === ptrType.nil)) {
			return node$1;
		}
		return ptrType.nil;
	};
	Page.prototype.alloc = function(n, width, height) { return this.$val.alloc(n, width, height); };
	Page.ptr.prototype.Size = function() {
		var p;
		p = this;
		return p.size;
	};
	Page.prototype.Size = function() { return this.$val.Size(); };
	Page.ptr.prototype.Alloc = function(width, height) {
		var height, n, p, width;
		p = this;
		if (width <= 0 || height <= 0) {
			$panic(new $String("packing: width and height must > 0"));
		}
		if (p.root === ptrType.nil) {
			p.root = new Node.ptr(0, 0, p.size, p.size, false, ptrType.nil, ptrType.nil, ptrType.nil);
		}
		if (width < 1) {
			width = 1;
		}
		if (height < 1) {
			height = 1;
		}
		n = p.alloc(p.root, width, height);
		return n;
	};
	Page.prototype.Alloc = function(width, height) { return this.$val.Alloc(width, height); };
	Page.ptr.prototype.Free = function(node) {
		var node, p;
		p = this;
		if (!(node.child0 === ptrType.nil) || !(node.child1 === ptrType.nil)) {
			$panic(new $String("packing: can't free the node including children"));
		}
		node.used = false;
		if (node.parent === ptrType.nil) {
			return;
		}
		if (node.parent.child0 === ptrType.nil || node.parent.child1 === ptrType.nil) {
			$panic(new $String("not reached: double free?"));
		}
		if (node.parent.child0.canFree() && node.parent.child1.canFree()) {
			node.parent.child0 = ptrType.nil;
			node.parent.child1 = ptrType.nil;
			p.Free(node.parent);
		}
	};
	Page.prototype.Free = function(node) { return this.$val.Free(node); };
	walk = function(n, f) {
		var _r, _r$1, _r$2, err, err$1, err$2, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = f(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		/* */ if (!(n.child0 === ptrType.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(n.child0 === ptrType.nil)) { */ case 2:
			_r$1 = walk(n.child0, f); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err$1 = _r$1;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return err$1;
			}
		/* } */ case 3:
		/* */ if (!(n.child1 === ptrType.nil)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(n.child1 === ptrType.nil)) { */ case 5:
			_r$2 = walk(n.child1, f); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$2 = _r$2;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ case 6:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: walk }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Page.ptr.prototype.Extend = function() {
		var _i, _r, _ref, abort, aborted, edgeNodes, left, leftLower, leftUpper, n, newSize, p, right, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; abort = $f.abort; aborted = $f.aborted; edgeNodes = $f.edgeNodes; left = $f.left; leftLower = $f.leftLower; leftUpper = $f.leftUpper; n = $f.n; newSize = $f.newSize; p = $f.p; right = $f.right; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		abort = [abort];
		aborted = [aborted];
		edgeNodes = [edgeNodes];
		p = [p];
		p[0] = this;
		if (p[0].size >= p[0].maxSize) {
			$s = -1; return false;
		}
		newSize = $imul(p[0].size, 2);
		edgeNodes[0] = new sliceType([]);
		abort[0] = errors.New("abort");
		aborted[0] = false;
		_r = walk(p[0].root, (function(abort, aborted, edgeNodes, p) { return function(n) {
			var n;
			if ((n.x + n.width >> 0) < p[0].size && (n.y + n.height >> 0) < p[0].size) {
				return $ifaceNil;
			}
			if (n.used) {
				aborted[0] = true;
				return abort[0];
			}
			edgeNodes[0] = $append(edgeNodes[0], n);
			return $ifaceNil;
		}; })(abort, aborted, edgeNodes, p)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$unused(_r);
		if (aborted[0]) {
			leftUpper = p[0].root;
			leftLower = new Node.ptr(0, p[0].size, p[0].size, newSize - p[0].size >> 0, false, ptrType.nil, ptrType.nil, ptrType.nil);
			left = new Node.ptr(0, 0, p[0].size, p[0].size, false, ptrType.nil, leftUpper, leftLower);
			leftUpper.parent = left;
			leftLower.parent = left;
			right = new Node.ptr(p[0].size, 0, newSize - p[0].size >> 0, newSize, false, ptrType.nil, ptrType.nil, ptrType.nil);
			p[0].root = new Node.ptr(0, 0, newSize, newSize, false, ptrType.nil, left, right);
			left.parent = p[0].root;
			right.parent = p[0].root;
		} else {
			_ref = edgeNodes[0];
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				n = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if ((n.x + n.width >> 0) === p[0].size) {
					n.width = n.width + ((newSize - p[0].size >> 0)) >> 0;
				}
				if ((n.y + n.height >> 0) === p[0].size) {
					n.height = n.height + ((newSize - p[0].size >> 0)) >> 0;
				}
				_i++;
			}
		}
		p[0].size = newSize;
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Page.ptr.prototype.Extend }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.abort = abort; $f.aborted = aborted; $f.edgeNodes = edgeNodes; $f.left = left; $f.leftLower = leftLower; $f.leftUpper = leftUpper; $f.n = n; $f.newSize = newSize; $f.p = p; $f.right = right; $f.$s = $s; $f.$r = $r; return $f;
	};
	Page.prototype.Extend = function() { return this.$val.Extend(); };
	Node.ptr.prototype.clone = function() {
		var cloned, n;
		n = this;
		if (n === ptrType.nil) {
			return ptrType.nil;
		}
		cloned = new Node.ptr(n.x, n.y, n.width, n.height, n.used, ptrType.nil, n.child0.clone(), n.child1.clone());
		if (!(cloned.child0 === ptrType.nil)) {
			cloned.child0.parent = cloned;
		}
		if (!(cloned.child1 === ptrType.nil)) {
			cloned.child1.parent = cloned;
		}
		return cloned;
	};
	Node.prototype.clone = function() { return this.$val.clone(); };
	Page.ptr.prototype.Clone = function() {
		var p;
		p = this;
		return new Page.ptr(p.root.clone(), p.size, p.maxSize);
	};
	Page.prototype.Clone = function() { return this.$val.Clone(); };
	ptrType$1.methods = [{prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "alloc", name: "alloc", pkg: "github.com/hajimehoshi/ebiten/internal/packing", typ: $funcType([ptrType, $Int, $Int], [ptrType], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Alloc", name: "Alloc", pkg: "", typ: $funcType([$Int, $Int], [ptrType], false)}, {prop: "Free", name: "Free", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "Extend", name: "Extend", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$1], false)}];
	ptrType.methods = [{prop: "canFree", name: "canFree", pkg: "github.com/hajimehoshi/ebiten/internal/packing", typ: $funcType([], [$Bool], false)}, {prop: "Region", name: "Region", pkg: "", typ: $funcType([], [$Int, $Int, $Int, $Int], false)}, {prop: "clone", name: "clone", pkg: "github.com/hajimehoshi/ebiten/internal/packing", typ: $funcType([], [ptrType], false)}];
	Page.init("github.com/hajimehoshi/ebiten/internal/packing", [{prop: "root", name: "root", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxSize", name: "maxSize", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Node.init("github.com/hajimehoshi/ebiten/internal/packing", [{prop: "x", name: "x", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "y", name: "y", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "used", name: "used", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "parent", name: "parent", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "child0", name: "child0", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "child1", name: "child1", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/restorable"] = (function() {
	var $pkg = {}, $init, errors, fmt, affine, graphics, graphicsutil, math, opengl, web, image, color, drawImageHistoryItem, Image, images, edge, ptrType, ptrType$1, sliceType, ptrType$2, sliceType$1, sliceType$2, ptrType$3, sliceType$3, sliceType$4, structType, sliceType$5, sliceType$6, sliceType$7, mapType, ptrType$4, dummyImage, restoringEnabled, theImages, init, newImageWithoutInit, NewImage, NewScreenFramebufferImage, IsRestoringEnabled, ResolveStaleImages, Restore, Images, InitializeGLState, Error;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	affine = $packages["github.com/hajimehoshi/ebiten/internal/affine"];
	graphics = $packages["github.com/hajimehoshi/ebiten/internal/graphics"];
	graphicsutil = $packages["github.com/hajimehoshi/ebiten/internal/graphicsutil"];
	math = $packages["github.com/hajimehoshi/ebiten/internal/math"];
	opengl = $packages["github.com/hajimehoshi/ebiten/internal/opengl"];
	web = $packages["github.com/hajimehoshi/ebiten/internal/web"];
	image = $packages["image"];
	color = $packages["image/color"];
	drawImageHistoryItem = $pkg.drawImageHistoryItem = $newType(0, $kindStruct, "restorable.drawImageHistoryItem", true, "github.com/hajimehoshi/ebiten/internal/restorable", false, function(image_, vertices_, indices_, colorm_, mode_, filter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.image = ptrType.nil;
			this.vertices = sliceType$3.nil;
			this.indices = sliceType$4.nil;
			this.colorm = ptrType$3.nil;
			this.mode = 0;
			this.filter = 0;
			return;
		}
		this.image = image_;
		this.vertices = vertices_;
		this.indices = indices_;
		this.colorm = colorm_;
		this.mode = mode_;
		this.filter = filter_;
	});
	Image = $pkg.Image = $newType(0, $kindStruct, "restorable.Image", true, "github.com/hajimehoshi/ebiten/internal/restorable", true, function(image_, basePixels_, drawImageHistory_, stale_, volatile$4_, screen_, w2_, h2_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.image = ptrType$1.nil;
			this.basePixels = sliceType.nil;
			this.drawImageHistory = sliceType$1.nil;
			this.stale = false;
			this.volatile$4 = false;
			this.screen = false;
			this.w2 = 0;
			this.h2 = 0;
			return;
		}
		this.image = image_;
		this.basePixels = basePixels_;
		this.drawImageHistory = drawImageHistory_;
		this.stale = stale_;
		this.volatile$4 = volatile$4_;
		this.screen = screen_;
		this.w2 = w2_;
		this.h2 = h2_;
	});
	images = $pkg.images = $newType(0, $kindStruct, "restorable.images", true, "github.com/hajimehoshi/ebiten/internal/restorable", false, function(images_, lastTarget_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.images = false;
			this.lastTarget = ptrType.nil;
			return;
		}
		this.images = images_;
		this.lastTarget = lastTarget_;
	});
	edge = $newType(0, $kindStruct, "restorable.edge", true, "github.com/hajimehoshi/ebiten/internal/restorable", false, function(source_, target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.source = ptrType.nil;
			this.target = ptrType.nil;
			return;
		}
		this.source = source_;
		this.target = target_;
	});
	ptrType = $ptrType(Image);
	ptrType$1 = $ptrType(graphics.Image);
	sliceType = $sliceType($Uint8);
	ptrType$2 = $ptrType(drawImageHistoryItem);
	sliceType$1 = $sliceType(ptrType$2);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(affine.ColorM);
	sliceType$3 = $sliceType($Float32);
	sliceType$4 = $sliceType($Uint16);
	structType = $structType("", []);
	sliceType$5 = $sliceType(image.Image);
	sliceType$6 = $sliceType(ptrType);
	sliceType$7 = $sliceType(edge);
	mapType = $mapType(ptrType, structType);
	ptrType$4 = $ptrType(images);
	init = function() {
		if (web.IsMobileBrowser()) {
			restoringEnabled = false;
		}
	};
	newImageWithoutInit = function(width, height, volatile$1) {
		var height, i, volatile$1, width;
		i = new Image.ptr(graphics.NewImage(width, height), sliceType.nil, sliceType$1.nil, false, volatile$1, false, 0, 0);
		theImages.add(i);
		return i;
	};
	NewImage = function(width, height, volatile$1) {
		var height, i, volatile$1, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; height = $f.height; i = $f.i; volatile$1 = $f.volatile$1; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = newImageWithoutInit(width, height, volatile$1);
		$r = i.ReplacePixels(sliceType.nil, 0, 0, width, height); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewImage }; } $f.height = height; $f.i = i; $f.volatile$1 = volatile$1; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewImage = NewImage;
	NewScreenFramebufferImage = function(width, height) {
		var height, i, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; height = $f.height; i = $f.i; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = new Image.ptr(graphics.NewScreenFramebufferImage(width, height), sliceType.nil, sliceType$1.nil, false, false, true, 0, 0);
		theImages.add(i);
		$r = i.ReplacePixels(sliceType.nil, 0, 0, width, height); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewScreenFramebufferImage }; } $f.height = height; $f.i = i; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewScreenFramebufferImage = NewScreenFramebufferImage;
	Image.ptr.prototype.IsVolatile = function() {
		var i;
		i = this;
		return i.volatile$4;
	};
	Image.prototype.IsVolatile = function() { return this.$val.IsVolatile(); };
	Image.ptr.prototype.BasePixelsForTesting = function() {
		var i;
		i = this;
		return i.basePixels;
	};
	Image.prototype.BasePixelsForTesting = function() { return this.$val.BasePixelsForTesting(); };
	Image.ptr.prototype.Size = function() {
		var i;
		i = this;
		return i.image.Size();
	};
	Image.prototype.Size = function() { return this.$val.Size(); };
	Image.ptr.prototype.SizePowerOf2 = function() {
		var _tuple, h, i, w;
		i = this;
		if ((i.w2 === 0) || (i.h2 === 0)) {
			_tuple = i.image.Size();
			w = _tuple[0];
			h = _tuple[1];
			i.w2 = math.NextPowerOf2Int(w);
			i.h2 = math.NextPowerOf2Int(h);
		}
		return [i.w2, i.h2];
	};
	Image.prototype.SizePowerOf2 = function() { return this.$val.SizePowerOf2(); };
	Image.ptr.prototype.makeStale = function() {
		var i;
		i = this;
		i.basePixels = sliceType.nil;
		i.drawImageHistory = sliceType$1.nil;
		i.stale = true;
	};
	Image.prototype.makeStale = function() { return this.$val.makeStale(); };
	Image.ptr.prototype.ReplacePixels = function(pixels, x, y, width, height) {
		var _r, _tuple, _tuple$1, colorm, h, h$1, height, i, idx, is, j, j$1, pixels, vs, w, w$1, width, x, y, zeros, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; colorm = $f.colorm; h = $f.h; h$1 = $f.h$1; height = $f.height; i = $f.i; idx = $f.idx; is = $f.is; j = $f.j; j$1 = $f.j$1; pixels = $f.pixels; vs = $f.vs; w = $f.w; w$1 = $f.w$1; width = $f.width; x = $f.x; y = $f.y; zeros = $f.zeros; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_tuple = i.image.Size();
		w = _tuple[0];
		h = _tuple[1];
		if (width <= 0 || height <= 0) {
			$panic(new $String("restorable: width/height must be positive"));
		}
		/* */ if (x < 0 || y < 0 || w <= x || h <= y || (x + width >> 0) <= 0 || (y + height >> 0) <= 0 || w < (x + width >> 0) || h < (y + height >> 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x < 0 || y < 0 || w <= x || h <= y || (x + width >> 0) <= 0 || (y + height >> 0) <= 0 || w < (x + width >> 0) || h < (y + height >> 0)) { */ case 1:
			_r = fmt.Sprintf("restorable: out of range x: %d, y: %d, width: %d, height: %d", new sliceType$2([new $Int(x), new $Int(y), new $Int(width), new $Int(height)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String(_r));
		/* } */ case 2:
		theImages.makeStaleIfDependingOn(i);
		/* */ if (!(pixels === sliceType.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(pixels === sliceType.nil)) { */ case 4:
			i.image.ReplacePixels(pixels, x, y, width, height);
			$s = 6; continue;
		/* } else { */ case 5:
			_tuple$1 = dummyImage.Size();
			w$1 = _tuple$1[0];
			h$1 = _tuple$1[1];
			colorm = (ptrType$3.nil).Scale(0, 0, 0, 0);
			vs = graphicsutil.QuadVertices(w$1, h$1, 0, 0, w$1, h$1, $fround((width) / (w$1)), 0, 0, $fround((height) / (h$1)), (x), (y), 1, 1, 1, 1);
			is = graphicsutil.QuadIndices();
			$r = i.image.DrawImage(dummyImage.image, vs, is, colorm, 2, 1); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		if ((x === 0) && (y === 0) && (width === w) && (height === h)) {
			if (i.basePixels === sliceType.nil) {
				i.basePixels = $makeSlice(sliceType, ($imul(($imul(4, w)), h)));
			}
			$copySlice(i.basePixels, pixels);
			i.drawImageHistory = sliceType$1.nil;
			i.stale = false;
			$s = -1; return;
		}
		if (i.basePixels === sliceType.nil) {
			i.makeStale();
			$s = -1; return;
		}
		if (i.drawImageHistory.$length > 0) {
			i.makeStale();
			$s = -1; return;
		}
		idx = $imul(4, ((($imul(y, w)) + x >> 0)));
		if (!(pixels === sliceType.nil)) {
			j = 0;
			while (true) {
				if (!(j < height)) { break; }
				$copySlice($subslice(i.basePixels, idx, (idx + ($imul(4, width)) >> 0)), $subslice(pixels, ($imul(($imul(4, j)), width)), ($imul(($imul(4, ((j + 1 >> 0)))), width))));
				idx = idx + (($imul(4, w))) >> 0;
				j = j + (1) >> 0;
			}
		} else {
			zeros = $makeSlice(sliceType, ($imul(4, width)));
			j$1 = 0;
			while (true) {
				if (!(j$1 < height)) { break; }
				$copySlice($subslice(i.basePixels, idx, (idx + ($imul(4, width)) >> 0)), zeros);
				idx = idx + (($imul(4, w))) >> 0;
				j$1 = j$1 + (1) >> 0;
			}
		}
		i.stale = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.ReplacePixels }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.colorm = colorm; $f.h = h; $f.h$1 = h$1; $f.height = height; $f.i = i; $f.idx = idx; $f.is = is; $f.j = j; $f.j$1 = j$1; $f.pixels = pixels; $f.vs = vs; $f.w = w; $f.w$1 = w$1; $f.width = width; $f.x = x; $f.y = y; $f.zeros = zeros; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.ReplacePixels = function(pixels, x, y, width, height) { return this.$val.ReplacePixels(pixels, x, y, width, height); };
	Image.ptr.prototype.DrawImage = function(img, vertices, indices, colorm, mode, filter) {
		var colorm, filter, i, img, indices, mode, vertices, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; colorm = $f.colorm; filter = $f.filter; i = $f.i; img = $f.img; indices = $f.indices; mode = $f.mode; vertices = $f.vertices; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (vertices.$length === 0) {
			$s = -1; return;
		}
		theImages.makeStaleIfDependingOn(i);
		if (img.stale || img.volatile$4 || i.screen || !IsRestoringEnabled()) {
			i.makeStale();
		} else {
			i.appendDrawImageHistory(img, vertices, indices, colorm, mode, filter);
		}
		$r = i.image.DrawImage(img.image, vertices, indices, colorm, mode, filter); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.DrawImage }; } $f.colorm = colorm; $f.filter = filter; $f.i = i; $f.img = img; $f.indices = indices; $f.mode = mode; $f.vertices = vertices; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.DrawImage = function(img, vertices, indices, colorm, mode, filter) { return this.$val.DrawImage(img, vertices, indices, colorm, mode, filter); };
	Image.ptr.prototype.appendDrawImageHistory = function(image$1, vertices, indices, colorm, mode, filter) {
		var colorm, filter, i, image$1, indices, item, mode, vertices;
		i = this;
		if (i.stale || i.volatile$4 || i.screen) {
			return;
		}
		if ((i.drawImageHistory.$length + 1 >> 0) > 100) {
			i.makeStale();
			return;
		}
		item = new drawImageHistoryItem.ptr(image$1, vertices, indices, colorm, mode, filter);
		i.drawImageHistory = $append(i.drawImageHistory, item);
	};
	Image.prototype.appendDrawImageHistory = function(image$1, vertices, indices, colorm, mode, filter) { return this.$val.appendDrawImageHistory(image$1, vertices, indices, colorm, mode, filter); };
	Image.ptr.prototype.At = function(x, y) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, a, b, g, h, i, idx, r, w, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; a = $f.a; b = $f.b; g = $f.g; h = $f.h; i = $f.i; idx = $f.idx; r = $f.r; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_tuple = i.image.Size();
		w = _tuple[0];
		h = _tuple[1];
		if (x < 0 || y < 0 || w <= x || h <= y) {
			$s = -1; return new color.RGBA.ptr(0, 0, 0, 0);
		}
		/* */ if (i.basePixels === sliceType.nil || !(i.drawImageHistory === sliceType$1.nil) || i.stale) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i.basePixels === sliceType.nil || !(i.drawImageHistory === sliceType$1.nil) || i.stale) { */ case 1:
			$r = graphics.FlushCommands(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = i.readPixelsFromGPU(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i.drawImageHistory = sliceType$1.nil;
			i.stale = false;
		/* } */ case 2:
		if (i.basePixels === sliceType.nil) {
			$s = -1; return new color.RGBA.ptr(0, 0, 0, 0);
		}
		idx = ($imul(4, x)) + ($imul(($imul(4, y)), w)) >> 0;
		_tmp = (x$1 = i.basePixels, ((idx < 0 || idx >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + idx]));
		_tmp$1 = (x$2 = i.basePixels, x$3 = idx + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
		_tmp$2 = (x$4 = i.basePixels, x$5 = idx + 2 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
		_tmp$3 = (x$6 = i.basePixels, x$7 = idx + 3 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7]));
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		$s = -1; return new color.RGBA.ptr(r, g, b, a);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.At }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.g = g; $f.h = h; $f.i = i; $f.idx = idx; $f.r = r; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.At = function(x, y) { return this.$val.At(x, y); };
	Image.ptr.prototype.makeStaleIfDependingOn = function(target) {
		var i, target;
		i = this;
		if (i.stale) {
			return;
		}
		if (i.dependsOn(target)) {
			i.makeStale();
		}
	};
	Image.prototype.makeStaleIfDependingOn = function(target) { return this.$val.makeStaleIfDependingOn(target); };
	Image.ptr.prototype.readPixelsFromGPU = function() {
		var _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = i.image.Pixels(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i.basePixels = _r;
		i.drawImageHistory = sliceType$1.nil;
		i.stale = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.readPixelsFromGPU }; } $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.readPixelsFromGPU = function() { return this.$val.readPixelsFromGPU(); };
	Image.ptr.prototype.resolveStale = function() {
		var i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (!IsRestoringEnabled()) {
			$s = -1; return;
		}
		if (i.volatile$4) {
			$s = -1; return;
		}
		if (i.screen) {
			$s = -1; return;
		}
		if (!i.stale) {
			$s = -1; return;
		}
		$r = i.readPixelsFromGPU(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.resolveStale }; } $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.resolveStale = function() { return this.$val.resolveStale(); };
	Image.ptr.prototype.dependsOn = function(target) {
		var _i, _ref, c, i, target;
		i = this;
		_ref = i.drawImageHistory;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (c.image === target) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Image.prototype.dependsOn = function(target) { return this.$val.dependsOn(target); };
	Image.ptr.prototype.dependingImages = function() {
		var _i, _key, _ref, c, i, r;
		i = this;
		r = $makeMap(ptrType.keyFor, []);
		_ref = i.drawImageHistory;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_key = c.image; (r || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: new structType.ptr() };
			_i++;
		}
		return r;
	};
	Image.prototype.dependingImages = function() { return this.$val.dependingImages(); };
	Image.ptr.prototype.hasDependency = function() {
		var i;
		i = this;
		if (i.stale) {
			return false;
		}
		return i.drawImageHistory.$length > 0;
	};
	Image.prototype.hasDependency = function() { return this.$val.hasDependency(); };
	Image.ptr.prototype.restore = function() {
		var _i, _r, _ref, _tuple, c, gimg, h, i, pix, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; gimg = $f.gimg; h = $f.h; i = $f.i; pix = $f.pix; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_tuple = i.image.Size();
		w = _tuple[0];
		h = _tuple[1];
		if (i.screen) {
			i.image = graphics.NewScreenFramebufferImage(w, h);
			i.basePixels = sliceType.nil;
			i.drawImageHistory = sliceType$1.nil;
			i.stale = false;
			$s = -1; return $ifaceNil;
		}
		if (i.volatile$4) {
			i.image = graphics.NewImage(w, h);
			i.basePixels = sliceType.nil;
			i.drawImageHistory = sliceType$1.nil;
			i.stale = false;
			$s = -1; return $ifaceNil;
		}
		if (i.stale) {
			$s = -1; return errors.New("restorable: pixels must not be stale when restoring");
		}
		gimg = graphics.NewImage(w, h);
		if (!(i.basePixels === sliceType.nil)) {
			gimg.ReplacePixels(i.basePixels, 0, 0, w, h);
		} else {
			pix = $makeSlice(sliceType, ($imul(($imul(w, h)), 4)));
			gimg.ReplacePixels(pix, 0, 0, w, h);
		}
		_ref = i.drawImageHistory;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (c.image.hasDependency()) {
				$panic(new $String("not reached"));
			}
			$r = gimg.DrawImage(c.image.image, c.vertices, c.indices, c.colorm, c.mode, c.filter); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		i.image = gimg;
		_r = gimg.Pixels(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i.basePixels = _r;
		i.drawImageHistory = sliceType$1.nil;
		i.stale = false;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.restore }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.gimg = gimg; $f.h = h; $f.i = i; $f.pix = pix; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.restore = function() { return this.$val.restore(); };
	Image.ptr.prototype.Dispose = function() {
		var i;
		i = this;
		theImages.remove(i);
		i.image.Dispose();
		i.image = ptrType$1.nil;
		i.basePixels = sliceType.nil;
		i.drawImageHistory = sliceType$1.nil;
		i.stale = false;
	};
	Image.prototype.Dispose = function() { return this.$val.Dispose(); };
	Image.ptr.prototype.IsInvalidated = function() {
		var _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		$r = graphics.FlushCommands(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!IsRestoringEnabled()) {
			$s = -1; return [false, $ifaceNil];
		}
		_r = i.image.IsInvalidated(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return [_r, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.IsInvalidated }; } $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.IsInvalidated = function() { return this.$val.IsInvalidated(); };
	IsRestoringEnabled = function() {
		return restoringEnabled;
	};
	$pkg.IsRestoringEnabled = IsRestoringEnabled;
	ResolveStaleImages = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = graphics.FlushCommands(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!restoringEnabled) {
			$s = -1; return;
		}
		$r = theImages.resolveStaleImages(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ResolveStaleImages }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ResolveStaleImages = ResolveStaleImages;
	Restore = function() {
		var _r, _r$1, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = graphics.ResetGLState(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = theImages.restore(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Restore }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Restore = Restore;
	Images = function() {
		var _entry, _i, _keys, _r, _ref, _tuple, c, h, i, img, imgs, j, pix, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; h = $f.h; i = $f.i; img = $f.img; imgs = $f.imgs; j = $f.j; pix = $f.pix; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		imgs = sliceType$5.nil;
		_ref = theImages.images;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			img = _entry.k;
			/* */ if (img.volatile$4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (img.volatile$4) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			/* */ if (img.screen) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (img.screen) { */ case 5:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			_tuple = img.Size();
			w = _tuple[0];
			h = _tuple[1];
			pix = $makeSlice(sliceType, ($imul(($imul(4, w)), h)));
			j = 0;
			/* while (true) { */ case 7:
				/* if (!(j < h)) { break; } */ if(!(j < h)) { $s = 8; continue; }
				i = 0;
				/* while (true) { */ case 9:
					/* if (!(i < w)) { break; } */ if(!(i < w)) { $s = 10; continue; }
					_r = img.At(i, j); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					c = $clone(_r, color.RGBA);
					(x = $imul(4, ((i + ($imul(j, w)) >> 0))), ((x < 0 || x >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x] = (c.R)));
					(x$1 = ($imul(4, ((i + ($imul(j, w)) >> 0)))) + 1 >> 0, ((x$1 < 0 || x$1 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$1] = (c.G)));
					(x$2 = ($imul(4, ((i + ($imul(j, w)) >> 0)))) + 2 >> 0, ((x$2 < 0 || x$2 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$2] = (c.B)));
					(x$3 = ($imul(4, ((i + ($imul(j, w)) >> 0)))) + 3 >> 0, ((x$3 < 0 || x$3 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$3] = (c.A)));
					i = i + (1) >> 0;
				/* } */ $s = 9; continue; case 10:
				j = j + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
			imgs = $append(imgs, new image.RGBA.ptr(pix, $imul(4, w), $clone(image.Rect(0, 0, w, h), image.Rectangle)));
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return imgs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Images }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.h = h; $f.i = i; $f.img = img; $f.imgs = imgs; $f.j = j; $f.pix = pix; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Images = Images;
	images.ptr.prototype.add = function(img) {
		var _key, i, img;
		i = this;
		_key = img; (i.images || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: new structType.ptr() };
	};
	images.prototype.add = function(img) { return this.$val.add(img); };
	images.ptr.prototype.remove = function(img) {
		var i, img;
		i = this;
		i.makeStaleIfDependingOnImpl(img);
		delete i.images[ptrType.keyFor(img)];
	};
	images.prototype.remove = function(img) { return this.$val.remove(img); };
	images.ptr.prototype.resolveStaleImages = function() {
		var _entry, _i, _keys, _ref, i, img, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; i = $f.i; img = $f.img; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		i.lastTarget = ptrType.nil;
		_ref = i.images;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			img = _entry.k;
			$r = img.resolveStale(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: images.ptr.prototype.resolveStaleImages }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.i = i; $f.img = img; $f.$s = $s; $f.$r = $r; return $f;
	};
	images.prototype.resolveStaleImages = function() { return this.$val.resolveStaleImages(); };
	images.ptr.prototype.makeStaleIfDependingOn = function(target) {
		var i, target;
		i = this;
		i.makeStaleIfDependingOnImpl(target);
	};
	images.prototype.makeStaleIfDependingOn = function(target) { return this.$val.makeStaleIfDependingOn(target); };
	images.ptr.prototype.makeStaleIfDependingOnImpl = function(target) {
		var _entry, _i, _keys, _ref, i, img, target;
		i = this;
		if (target === ptrType.nil) {
			$panic(new $String("not reached"));
		}
		if (i.lastTarget === target) {
			return;
		}
		i.lastTarget = target;
		_ref = i.images;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			img = _entry.k;
			img.makeStaleIfDependingOn(target);
			_i++;
		}
	};
	images.prototype.makeStaleIfDependingOnImpl = function(target) { return this.$val.makeStaleIfDependingOnImpl(target); };
	images.ptr.prototype.restore = function() {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _i$7, _i$8, _i$9, _key, _key$1, _key$2, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _keys$5, _keys$6, _keys$7, _r, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, _tuple, _tuple$1, current, e, e$1, e$2, edges, err, i, i$1, i$2, i$3, images$1, img, img$1, ok, ok$1, removed, s, sorted, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _i$7 = $f._i$7; _i$8 = $f._i$8; _i$9 = $f._i$9; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _keys$4 = $f._keys$4; _keys$5 = $f._keys$5; _keys$6 = $f._keys$6; _keys$7 = $f._keys$7; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; _ref$9 = $f._ref$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; current = $f.current; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; edges = $f.edges; err = $f.err; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; images$1 = $f.images$1; img = $f.img; img$1 = $f.img$1; ok = $f.ok; ok$1 = $f.ok$1; removed = $f.removed; s = $f.s; sorted = $f.sorted; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (!IsRestoringEnabled()) {
			$panic(new $String("not reached"));
		}
		_ref = i.images;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			img = _entry.k;
			img.image.Dispose();
			_i++;
		}
		images$1 = $makeMap(ptrType.keyFor, []);
		_ref$1 = i.images;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys$1.length)) { break; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			i$1 = _entry$1.k;
			_key = i$1; (images$1 || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: new structType.ptr() };
			_i$1++;
		}
		edges = $makeMap(edge.keyFor, []);
		_ref$2 = images$1;
		_i$2 = 0;
		_keys$2 = $keys(_ref$2);
		while (true) {
			if (!(_i$2 < _keys$2.length)) { break; }
			_entry$2 = _ref$2[_keys$2[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				continue;
			}
			t = _entry$2.k;
			_ref$3 = t.dependingImages();
			_i$3 = 0;
			_keys$3 = $keys(_ref$3);
			while (true) {
				if (!(_i$3 < _keys$3.length)) { break; }
				_entry$3 = _ref$3[_keys$3[_i$3]];
				if (_entry$3 === undefined) {
					_i$3++;
					continue;
				}
				s = _entry$3.k;
				_key$1 = new edge.ptr(s, t); (edges || $throwRuntimeError("assignment to entry in nil map"))[edge.keyFor(_key$1)] = { k: _key$1, v: new structType.ptr() };
				_i$3++;
			}
			_i$2++;
		}
		sorted = new sliceType$6([]);
		while (true) {
			if (!($keys(images$1).length > 0)) { break; }
			current = $makeMap(ptrType.keyFor, []);
			_ref$4 = images$1;
			_i$4 = 0;
			_keys$4 = $keys(_ref$4);
			while (true) {
				if (!(_i$4 < _keys$4.length)) { break; }
				_entry$4 = _ref$4[_keys$4[_i$4]];
				if (_entry$4 === undefined) {
					_i$4++;
					continue;
				}
				i$2 = _entry$4.k;
				_key$2 = i$2; (current || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key$2)] = { k: _key$2, v: new structType.ptr() };
				_i$4++;
			}
			_ref$5 = edges;
			_i$5 = 0;
			_keys$5 = $keys(_ref$5);
			while (true) {
				if (!(_i$5 < _keys$5.length)) { break; }
				_entry$5 = _ref$5[_keys$5[_i$5]];
				if (_entry$5 === undefined) {
					_i$5++;
					continue;
				}
				e = $clone(_entry$5.k, edge);
				_tuple = (_entry$6 = current[ptrType.keyFor(e.target)], _entry$6 !== undefined ? [_entry$6.v, true] : [new structType.ptr(), false]);
				ok = _tuple[1];
				if (ok) {
					delete current[ptrType.keyFor(e.target)];
				}
				_i$5++;
			}
			_ref$6 = current;
			_i$6 = 0;
			_keys$6 = $keys(_ref$6);
			while (true) {
				if (!(_i$6 < _keys$6.length)) { break; }
				_entry$7 = _ref$6[_keys$6[_i$6]];
				if (_entry$7 === undefined) {
					_i$6++;
					continue;
				}
				i$3 = _entry$7.k;
				delete images$1[ptrType.keyFor(i$3)];
				sorted = $append(sorted, i$3);
				_i$6++;
			}
			removed = new sliceType$7([]);
			_ref$7 = edges;
			_i$7 = 0;
			_keys$7 = $keys(_ref$7);
			while (true) {
				if (!(_i$7 < _keys$7.length)) { break; }
				_entry$8 = _ref$7[_keys$7[_i$7]];
				if (_entry$8 === undefined) {
					_i$7++;
					continue;
				}
				e$1 = $clone(_entry$8.k, edge);
				_tuple$1 = (_entry$9 = current[ptrType.keyFor(e$1.source)], _entry$9 !== undefined ? [_entry$9.v, true] : [new structType.ptr(), false]);
				ok$1 = _tuple$1[1];
				if (ok$1) {
					removed = $append(removed, e$1);
				}
				_i$7++;
			}
			_ref$8 = removed;
			_i$8 = 0;
			while (true) {
				if (!(_i$8 < _ref$8.$length)) { break; }
				e$2 = $clone(((_i$8 < 0 || _i$8 >= _ref$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$8.$array[_ref$8.$offset + _i$8]), edge);
				delete edges[edge.keyFor(e$2)];
				_i$8++;
			}
		}
		_ref$9 = sorted;
		_i$9 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$9 < _ref$9.$length)) { break; } */ if(!(_i$9 < _ref$9.$length)) { $s = 2; continue; }
			img$1 = ((_i$9 < 0 || _i$9 >= _ref$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$9.$array[_ref$9.$offset + _i$9]);
			_r = img$1.restore(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_i$9++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: images.ptr.prototype.restore }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._i$7 = _i$7; $f._i$8 = _i$8; $f._i$9 = _i$9; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._keys$4 = _keys$4; $f._keys$5 = _keys$5; $f._keys$6 = _keys$6; $f._keys$7 = _keys$7; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f._ref$9 = _ref$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.current = current; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.edges = edges; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.images$1 = images$1; $f.img = img; $f.img$1 = img$1; $f.ok = ok; $f.ok$1 = ok$1; $f.removed = removed; $f.s = s; $f.sorted = sorted; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	images.prototype.restore = function() { return this.$val.restore(); };
	InitializeGLState = function() {
		var _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = graphics.ResetGLState(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InitializeGLState }; } $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.InitializeGLState = InitializeGLState;
	Error = function() {
		return graphics.Error();
	};
	$pkg.Error = Error;
	ptrType.methods = [{prop: "IsVolatile", name: "IsVolatile", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "BasePixelsForTesting", name: "BasePixelsForTesting", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "SizePowerOf2", name: "SizePowerOf2", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "makeStale", name: "makeStale", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [], false)}, {prop: "ReplacePixels", name: "ReplacePixels", pkg: "", typ: $funcType([sliceType, $Int, $Int, $Int, $Int], [], false)}, {prop: "DrawImage", name: "DrawImage", pkg: "", typ: $funcType([ptrType, sliceType$3, sliceType$4, ptrType$3, opengl.CompositeMode, graphics.Filter], [], false)}, {prop: "appendDrawImageHistory", name: "appendDrawImageHistory", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType, sliceType$3, sliceType$4, ptrType$3, opengl.CompositeMode, graphics.Filter], [], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.RGBA], false)}, {prop: "makeStaleIfDependingOn", name: "makeStaleIfDependingOn", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [], false)}, {prop: "readPixelsFromGPU", name: "readPixelsFromGPU", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [], false)}, {prop: "resolveStale", name: "resolveStale", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [], false)}, {prop: "dependsOn", name: "dependsOn", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [$Bool], false)}, {prop: "dependingImages", name: "dependingImages", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [mapType], false)}, {prop: "hasDependency", name: "hasDependency", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [$Bool], false)}, {prop: "restore", name: "restore", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [$error], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "IsInvalidated", name: "IsInvalidated", pkg: "", typ: $funcType([], [$Bool, $error], false)}];
	ptrType$4.methods = [{prop: "add", name: "add", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [], false)}, {prop: "remove", name: "remove", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [], false)}, {prop: "resolveStaleImages", name: "resolveStaleImages", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [], false)}, {prop: "makeStaleIfDependingOn", name: "makeStaleIfDependingOn", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [], false)}, {prop: "makeStaleIfDependingOnImpl", name: "makeStaleIfDependingOnImpl", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [], false)}, {prop: "restore", name: "restore", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [$error], false)}];
	drawImageHistoryItem.init("github.com/hajimehoshi/ebiten/internal/restorable", [{prop: "image", name: "image", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "vertices", name: "vertices", anonymous: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "indices", name: "indices", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "colorm", name: "colorm", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: opengl.CompositeMode, tag: ""}, {prop: "filter", name: "filter", anonymous: false, exported: false, typ: graphics.Filter, tag: ""}]);
	Image.init("github.com/hajimehoshi/ebiten/internal/restorable", [{prop: "image", name: "image", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "basePixels", name: "basePixels", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "drawImageHistory", name: "drawImageHistory", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "stale", name: "stale", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "volatile$4", name: "volatile", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "screen", name: "screen", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "w2", name: "w2", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "h2", name: "h2", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	images.init("github.com/hajimehoshi/ebiten/internal/restorable", [{prop: "images", name: "images", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "lastTarget", name: "lastTarget", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	edge.init("github.com/hajimehoshi/ebiten/internal/restorable", [{prop: "source", name: "source", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "target", name: "target", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = affine.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphics.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphicsutil.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = web.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		restoringEnabled = true;
		theImages = new images.ptr($makeMap(ptrType.keyFor, []), ptrType.nil);
		dummyImage = newImageWithoutInit(16, 16, false);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/shareable"] = (function() {
	var $pkg = {}, $init, fmt, affine, graphics, graphicsutil, opengl, packing, restorable, image, color, runtime, sync, backend, Image, ptrType, sliceType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, sliceType$1, sliceType$2, ptrType$5, funcType, sliceType$3, sliceType$4, sliceType$5, backendsM, theBackends, NewImage, NewVolatileImage, NewScreenFramebufferImage, InitializeGLState, ResolveStaleImages, IsRestoringEnabled, Restore, Images, Error;
	fmt = $packages["fmt"];
	affine = $packages["github.com/hajimehoshi/ebiten/internal/affine"];
	graphics = $packages["github.com/hajimehoshi/ebiten/internal/graphics"];
	graphicsutil = $packages["github.com/hajimehoshi/ebiten/internal/graphicsutil"];
	opengl = $packages["github.com/hajimehoshi/ebiten/internal/opengl"];
	packing = $packages["github.com/hajimehoshi/ebiten/internal/packing"];
	restorable = $packages["github.com/hajimehoshi/ebiten/internal/restorable"];
	image = $packages["image"];
	color = $packages["image/color"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	backend = $pkg.backend = $newType(0, $kindStruct, "shareable.backend", true, "github.com/hajimehoshi/ebiten/internal/shareable", false, function(restorable_, page_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.restorable = ptrType$3.nil;
			this.page = ptrType$4.nil;
			return;
		}
		this.restorable = restorable_;
		this.page = page_;
	});
	Image = $pkg.Image = $newType(0, $kindStruct, "shareable.Image", true, "github.com/hajimehoshi/ebiten/internal/shareable", true, function(width_, height_, disposed_, backend_, node_, countForShare_, neverShared_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.width = 0;
			this.height = 0;
			this.disposed = false;
			this.backend = ptrType.nil;
			this.node = ptrType$1.nil;
			this.countForShare = 0;
			this.neverShared = false;
			return;
		}
		this.width = width_;
		this.height = height_;
		this.disposed = disposed_;
		this.backend = backend_;
		this.node = node_;
		this.countForShare = countForShare_;
		this.neverShared = neverShared_;
	});
	ptrType = $ptrType(backend);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType(packing.Node);
	ptrType$2 = $ptrType(affine.ColorM);
	ptrType$3 = $ptrType(restorable.Image);
	ptrType$4 = $ptrType(packing.Page);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType$5 = $ptrType(Image);
	funcType = $funcType([ptrType$5], [], false);
	sliceType$3 = $sliceType(image.Image);
	sliceType$4 = $sliceType($Float32);
	sliceType$5 = $sliceType($Uint16);
	backend.ptr.prototype.TryAlloc = function(width, height) {
		var _r, _r$1, _r$2, _tuple, b, h, height, i, is, n, n$1, n$2, nExtended, newImg, oldImg, page, s, vs, w, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; b = $f.b; h = $f.h; height = $f.height; i = $f.i; is = $f.is; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; nExtended = $f.nExtended; newImg = $f.newImg; oldImg = $f.oldImg; page = $f.page; s = $f.s; vs = $f.vs; w = $f.w; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		n = b.page.Alloc(width, height);
		if (!(n === ptrType$1.nil)) {
			$s = -1; return [n, true];
		}
		page = b.page.Clone();
		nExtended = 0;
		/* while (true) { */ case 1:
			_r = page.Extend(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				$s = -1; return [ptrType$1.nil, false];
			/* } */ case 4:
			nExtended = nExtended + (1) >> 0;
			n$1 = page.Alloc(width, height);
			if (!(n$1 === ptrType$1.nil)) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		i = 0;
		/* while (true) { */ case 6:
			/* if (!(i < nExtended)) { break; } */ if(!(i < nExtended)) { $s = 7; continue; }
			_r$1 = b.page.Extend(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 6; continue; case 7:
		s = b.page.Size();
		_r$2 = restorable.NewImage(s, s, false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		newImg = _r$2;
		oldImg = b.restorable;
		_tuple = oldImg.Size();
		w = _tuple[0];
		h = _tuple[1];
		vs = graphicsutil.QuadVertices(w, h, 0, 0, w, h, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1);
		is = graphicsutil.QuadIndices();
		$r = newImg.DrawImage(oldImg, vs, is, ptrType$2.nil, 2, 1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		oldImg.Dispose();
		b.restorable = newImg;
		n$2 = b.page.Alloc(width, height);
		if (n$2 === ptrType$1.nil) {
			$panic(new $String("not reached"));
		}
		$s = -1; return [n$2, true];
		/* */ } return; } if ($f === undefined) { $f = { $blk: backend.ptr.prototype.TryAlloc }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.b = b; $f.h = h; $f.height = height; $f.i = i; $f.is = is; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.nExtended = nExtended; $f.newImg = newImg; $f.oldImg = oldImg; $f.page = page; $f.s = s; $f.vs = vs; $f.w = w; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	backend.prototype.TryAlloc = function(width, height) { return this.$val.TryAlloc(width, height); };
	Image.ptr.prototype.isShared = function() {
		var i;
		i = this;
		return !(i.node === ptrType$1.nil);
	};
	Image.prototype.isShared = function() { return this.$val.isShared(); };
	Image.ptr.prototype.IsSharedForTesting = function() {
		var i, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		$s = -1; return i.isShared();
		/* */ } return; } } catch(err) { $err = err; $s = -1; return false; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Image.ptr.prototype.IsSharedForTesting }; } $f.i = i; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Image.prototype.IsSharedForTesting = function() { return this.$val.IsSharedForTesting(); };
	Image.ptr.prototype.ensureNotShared = function() {
		var _r, _tuple, _tuple$1, h, i, is, newImg, vh, vs, vw, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; h = $f.h; i = $f.i; is = $f.is; newImg = $f.newImg; vh = $f.vh; vs = $f.vs; vw = $f.vw; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		/* */ if (i.backend === ptrType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i.backend === ptrType.nil) { */ case 1:
			$r = i.allocate(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		if (!i.isShared()) {
			$s = -1; return;
		}
		_tuple = i.region();
		x = _tuple[0];
		y = _tuple[1];
		w = _tuple[2];
		h = _tuple[3];
		_r = restorable.NewImage(w, h, false); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		newImg = _r;
		_tuple$1 = i.backend.restorable.Size();
		vw = _tuple$1[0];
		vh = _tuple$1[1];
		vs = graphicsutil.QuadVertices(vw, vh, x, y, x + w >> 0, y + h >> 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1);
		is = graphicsutil.QuadIndices();
		$r = newImg.DrawImage(i.backend.restorable, vs, is, ptrType$2.nil, 2, 1); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = i.dispose(false); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i.backend = new backend.ptr(newImg, ptrType$4.nil);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.ensureNotShared }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.h = h; $f.i = i; $f.is = is; $f.newImg = newImg; $f.vh = vh; $f.vs = vs; $f.vw = vw; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.ensureNotShared = function() { return this.$val.ensureNotShared(); };
	Image.ptr.prototype.region = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, h, height, i, w, width, x, y;
		x = 0;
		y = 0;
		width = 0;
		height = 0;
		i = this;
		if (i.backend === ptrType.nil) {
			$panic(new $String("not reached"));
		}
		if (!i.isShared()) {
			_tuple = i.backend.restorable.Size();
			w = _tuple[0];
			h = _tuple[1];
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = w;
			_tmp$3 = h;
			x = _tmp;
			y = _tmp$1;
			width = _tmp$2;
			height = _tmp$3;
			return [x, y, width, height];
		}
		_tuple$1 = i.node.Region();
		x = _tuple$1[0];
		y = _tuple$1[1];
		width = _tuple$1[2];
		height = _tuple$1[3];
		return [x, y, width, height];
	};
	Image.prototype.region = function() { return this.$val.region(); };
	Image.ptr.prototype.Size = function() {
		var _tmp, _tmp$1, height, i, width;
		width = 0;
		height = 0;
		i = this;
		_tmp = i.width;
		_tmp$1 = i.height;
		width = _tmp;
		height = _tmp$1;
		return [width, height];
	};
	Image.prototype.Size = function() { return this.$val.Size(); };
	Image.ptr.prototype.QuadVertices = function(sx0, sy0, sx1, sy1, a, b, c, d, tx, ty, cr, cg, cb, ca) {
		var _tuple, _tuple$1, a, b, c, ca, cb, cg, cr, d, h, i, ox, oy, sx0, sx1, sy0, sy1, tx, ty, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; ca = $f.ca; cb = $f.cb; cg = $f.cg; cr = $f.cr; d = $f.d; h = $f.h; i = $f.i; ox = $f.ox; oy = $f.oy; sx0 = $f.sx0; sx1 = $f.sx1; sy0 = $f.sy0; sy1 = $f.sy1; tx = $f.tx; ty = $f.ty; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		/* */ if (i.backend === ptrType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i.backend === ptrType.nil) { */ case 1:
			$r = i.allocate(true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_tuple = i.region();
		ox = _tuple[0];
		oy = _tuple[1];
		_tuple$1 = i.backend.restorable.SizePowerOf2();
		w = _tuple$1[0];
		h = _tuple$1[1];
		$s = -1; return graphicsutil.QuadVertices(w, h, sx0 + ox >> 0, sy0 + oy >> 0, sx1 + ox >> 0, sy1 + oy >> 0, a, b, c, d, tx, ty, cr, cg, cb, ca);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.QuadVertices }; } $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.ca = ca; $f.cb = cb; $f.cg = cg; $f.cr = cr; $f.d = d; $f.h = h; $f.i = i; $f.ox = ox; $f.oy = oy; $f.sx0 = sx0; $f.sx1 = sx1; $f.sy0 = sy0; $f.sy1 = sy1; $f.tx = tx; $f.ty = ty; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.QuadVertices = function(sx0, sy0, sx1, sy1, a, b, c, d, tx, ty, cr, cg, cb, ca) { return this.$val.QuadVertices(sx0, sy0, sx1, sy1, a, b, c, d, tx, ty, cr, cg, cb, ca); };
	Image.ptr.prototype.Vertex = function(dx, dy, sx, sy, cr, cg, cb, ca) {
		var _tuple, _tuple$1, ca, cb, cg, cr, dx, dy, h, i, ox, oy, sx, sy, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ca = $f.ca; cb = $f.cb; cg = $f.cg; cr = $f.cr; dx = $f.dx; dy = $f.dy; h = $f.h; i = $f.i; ox = $f.ox; oy = $f.oy; sx = $f.sx; sy = $f.sy; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		/* */ if (i.backend === ptrType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i.backend === ptrType.nil) { */ case 1:
			$r = i.allocate(true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_tuple = i.region();
		ox = _tuple[0];
		oy = _tuple[1];
		_tuple$1 = i.backend.restorable.SizePowerOf2();
		w = _tuple$1[0];
		h = _tuple$1[1];
		$s = -1; return graphicsutil.Vertex(w, h, dx, dy, $fround(sx + (ox)), $fround(sy + (oy)), cr, cg, cb, ca);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.Vertex }; } $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ca = ca; $f.cb = cb; $f.cg = cg; $f.cr = cr; $f.dx = dx; $f.dy = dy; $f.h = h; $f.i = i; $f.ox = ox; $f.oy = oy; $f.sx = sx; $f.sy = sy; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.Vertex = function(dx, dy, sx, sy, cr, cg, cb, ca) { return this.$val.Vertex(dx, dy, sx, sy, cr, cg, cb, ca); };
	Image.ptr.prototype.DrawImage = function(img, vertices, indices, colorm, mode, filter) {
		var colorm, filter, i, img, indices, mode, vertices, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; colorm = $f.colorm; filter = $f.filter; i = $f.i; img = $f.img; indices = $f.indices; mode = $f.mode; vertices = $f.vertices; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		if (img.disposed) {
			$panic(new $String("shareable: the drawing source image must not be disposed"));
		}
		if (i.disposed) {
			$panic(new $String("shareable: the drawing target image must not be disposed"));
		}
		/* */ if (img.backend === ptrType.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (img.backend === ptrType.nil) { */ case 2:
			$r = img.allocate(true); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$r = i.ensureNotShared(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (i.backend.restorable === img.backend.restorable) {
			$panic(new $String("shareable: Image.DrawImage: img must be different from the receiver"));
		}
		$r = i.backend.restorable.DrawImage(img.backend.restorable, vertices, indices, colorm, mode, filter); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i.countForShare = 0;
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Image.ptr.prototype.DrawImage }; } $f.colorm = colorm; $f.filter = filter; $f.i = i; $f.img = img; $f.indices = indices; $f.mode = mode; $f.vertices = vertices; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Image.prototype.DrawImage = function(img, vertices, indices, colorm, mode, filter) { return this.$val.DrawImage(img, vertices, indices, colorm, mode, filter); };
	Image.ptr.prototype.ReplacePixels = function(p) {
		var i, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		$r = i.replacePixels(p); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Image.ptr.prototype.ReplacePixels }; } $f.i = i; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Image.prototype.ReplacePixels = function(p) { return this.$val.ReplacePixels(p); };
	Image.ptr.prototype.replacePixels = function(p) {
		var _r, _tuple, h, i, l, p, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; h = $f.h; i = $f.i; l = $f.l; p = $f.p; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (i.disposed) {
			$panic(new $String("shareable: the image must not be disposed"));
		}
		/* */ if (i.backend === ptrType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i.backend === ptrType.nil) { */ case 1:
			if (p === sliceType$1.nil) {
				$s = -1; return;
			}
			$r = i.allocate(true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_tuple = i.region();
		x = _tuple[0];
		y = _tuple[1];
		w = _tuple[2];
		h = _tuple[3];
		/* */ if (!(p === sliceType$1.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(p === sliceType$1.nil)) { */ case 4:
			l = $imul(($imul(4, w)), h);
			/* */ if (!((p.$length === l))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!((p.$length === l))) { */ case 6:
				_r = fmt.Sprintf("shareable: len(p) was %d but must be %d", new sliceType$2([new $Int(p.$length), new $Int(l)])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$panic(new $String(_r));
			/* } */ case 7:
		/* } */ case 5:
		$r = i.backend.restorable.ReplacePixels(p, x, y, w, h); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.replacePixels }; } $f._r = _r; $f._tuple = _tuple; $f.h = h; $f.i = i; $f.l = l; $f.p = p; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.replacePixels = function(p) { return this.$val.replacePixels(p); };
	Image.ptr.prototype.At = function(x, y) {
		var _r, i, x, y, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; x = $f.x; y = $f.y; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		_r = i.at(x, y); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return new color.RGBA.ptr(0, 0, 0, 0); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Image.ptr.prototype.At }; } $f._r = _r; $f.i = i; $f.x = x; $f.y = y; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Image.prototype.At = function(x, y) { return this.$val.At(x, y); };
	Image.ptr.prototype.at = function(x, y) {
		var _r, _tuple, h, i, ox, oy, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; h = $f.h; i = $f.i; ox = $f.ox; oy = $f.oy; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (i.backend === ptrType.nil) {
			$s = -1; return new color.RGBA.ptr(0, 0, 0, 0);
		}
		_tuple = i.region();
		ox = _tuple[0];
		oy = _tuple[1];
		w = _tuple[2];
		h = _tuple[3];
		if (x < 0 || y < 0 || x >= w || y >= h) {
			$s = -1; return new color.RGBA.ptr(0, 0, 0, 0);
		}
		_r = i.backend.restorable.At(x + ox >> 0, y + oy >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.at }; } $f._r = _r; $f._tuple = _tuple; $f.h = h; $f.i = i; $f.ox = ox; $f.oy = oy; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.at = function(x, y) { return this.$val.at(x, y); };
	Image.ptr.prototype.Dispose = function() {
		var i, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		$r = i.dispose(true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Image.ptr.prototype.Dispose }; } $f.i = i; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Image.prototype.Dispose = function() { return this.$val.Dispose(); };
	Image.ptr.prototype.dispose = function(markDisposed) {
		var _i, _ref, _tuple, i, idx, index, markDisposed, sh, x0, x1, y0, y1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; _tuple = $f._tuple; i = $f.i; idx = $f.idx; index = $f.index; markDisposed = $f.markDisposed; sh = $f.sh; x0 = $f.x0; x1 = $f.x1; y0 = $f.y0; y1 = $f.y1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = [i];
		markDisposed = [markDisposed];
		i[0] = this;
		$deferred.push([(function(i, markDisposed) { return function() {
			if (markDisposed[0]) {
				i[0].disposed = true;
			}
			i[0].backend = ptrType.nil;
			i[0].node = ptrType$1.nil;
			if (markDisposed[0]) {
				runtime.SetFinalizer(i[0], $ifaceNil);
			}
		}; })(i, markDisposed), []]);
		if (i[0].disposed) {
			$s = -1; return;
		}
		if (i[0].backend === ptrType.nil) {
			$s = -1; return;
		}
		if (!i[0].isShared()) {
			i[0].backend.restorable.Dispose();
			$s = -1; return;
		}
		i[0].backend.page.Free(i[0].node);
		/* */ if (!i[0].backend.page.IsEmpty()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!i[0].backend.page.IsEmpty()) { */ case 1:
			_tuple = i[0].region();
			x0 = _tuple[0];
			y0 = _tuple[1];
			x1 = _tuple[2];
			y1 = _tuple[3];
			$r = i[0].backend.restorable.ReplacePixels(sliceType$1.nil, x0, y0, x1, y1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		i[0].backend.restorable.Dispose();
		index = -1;
		_ref = theBackends;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			idx = _i;
			sh = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (sh === i[0].backend) {
				index = idx;
				break;
			}
			_i++;
		}
		if (index === -1) {
			$panic(new $String("not reached"));
		}
		theBackends = $appendSlice($subslice(theBackends, 0, index), $subslice(theBackends, (index + 1 >> 0)));
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Image.ptr.prototype.dispose }; } $f._i = _i; $f._ref = _ref; $f._tuple = _tuple; $f.i = i; $f.idx = idx; $f.index = index; $f.markDisposed = markDisposed; $f.sh = sh; $f.x0 = x0; $f.x1 = x1; $f.y0 = y0; $f.y1 = y1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Image.prototype.dispose = function(markDisposed) { return this.$val.dispose(markDisposed); };
	Image.ptr.prototype.IsVolatile = function() {
		var i, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		if (i.backend === ptrType.nil) {
			$s = -1; return false;
		}
		$s = -1; return i.backend.restorable.IsVolatile();
		/* */ } return; } } catch(err) { $err = err; $s = -1; return false; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Image.ptr.prototype.IsVolatile }; } $f.i = i; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Image.prototype.IsVolatile = function() { return this.$val.IsVolatile(); };
	Image.ptr.prototype.IsInvalidated = function() {
		var _r, _tuple, err, i, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; i = $f.i; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		_r = i.backend.restorable.IsInvalidated(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		v = _tuple[0];
		err = _tuple[1];
		$s = -1; return [v, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [false, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Image.ptr.prototype.IsInvalidated }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Image.prototype.IsInvalidated = function() { return this.$val.IsInvalidated(); };
	NewImage = function(width, height) {
		var height, width;
		return new Image.ptr(width, height, false, ptrType.nil, ptrType$1.nil, 0, false);
	};
	$pkg.NewImage = NewImage;
	Image.ptr.prototype.shareable = function() {
		var i;
		i = this;
		if (i.neverShared) {
			return false;
		}
		return i.width <= 4096 && i.height <= 4096;
	};
	Image.prototype.shareable = function() { return this.$val.shareable(); };
	Image.ptr.prototype.allocate = function(shareable) {
		var _i, _r, _r$1, _r$2, _ref, _tuple, b, b$1, i, n, n$1, ok, shareable, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; b = $f.b; b$1 = $f.b$1; i = $f.i; n = $f.n; n$1 = $f.n$1; ok = $f.ok; shareable = $f.shareable; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (!(i.backend === ptrType.nil)) {
			$panic(new $String("not reached"));
		}
		/* */ if (!shareable || !i.shareable()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!shareable || !i.shareable()) { */ case 1:
			_r = restorable.NewImage(i.width, i.height, false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			i.backend = new backend.ptr(_r, ptrType$4.nil);
			runtime.SetFinalizer(i, new funcType($methodExpr(ptrType$5, "Dispose")));
			$s = -1; return;
		/* } */ case 2:
		_ref = theBackends;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = b.TryAlloc(i.width, i.height); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				i.backend = b;
				i.node = n;
				runtime.SetFinalizer(i, new funcType($methodExpr(ptrType$5, "Dispose")));
				$s = -1; return;
			}
			_i++;
		/* } */ $s = 4; continue; case 5:
		size = 1024;
		while (true) {
			if (!(i.width > size || i.height > size)) { break; }
			if (size === 4096) {
				$panic(new $String("not reached"));
			}
			size = $imul(size, (2));
		}
		_r$2 = restorable.NewImage(size, size, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		b$1 = new backend.ptr(_r$2, packing.NewPage(size, 4096));
		theBackends = $append(theBackends, b$1);
		n$1 = b$1.page.Alloc(i.width, i.height);
		if (n$1 === ptrType$1.nil) {
			$panic(new $String("not reached"));
		}
		i.backend = b$1;
		i.node = n$1;
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType$5, "Dispose")));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.allocate }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.b = b; $f.b$1 = b$1; $f.i = i; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.shareable = shareable; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.allocate = function(shareable) { return this.$val.allocate(shareable); };
	NewVolatileImage = function(width, height) {
		var _r, height, i, r, width, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; height = $f.height; i = $f.i; r = $f.r; width = $f.width; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		_r = restorable.NewImage(width, height, true); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		i = new Image.ptr(width, height, false, new backend.ptr(r, ptrType$4.nil), ptrType$1.nil, 0, true);
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType$5, "Dispose")));
		$s = -1; return i;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$5.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: NewVolatileImage }; } $f._r = _r; $f.height = height; $f.i = i; $f.r = r; $f.width = width; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.NewVolatileImage = NewVolatileImage;
	NewScreenFramebufferImage = function(width, height) {
		var _r, height, i, r, width, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; height = $f.height; i = $f.i; r = $f.r; width = $f.width; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		_r = restorable.NewScreenFramebufferImage(width, height); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		i = new Image.ptr(width, height, false, new backend.ptr(r, ptrType$4.nil), ptrType$1.nil, 0, true);
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType$5, "Dispose")));
		$s = -1; return i;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$5.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: NewScreenFramebufferImage }; } $f._r = _r; $f.height = height; $f.i = i; $f.r = r; $f.width = width; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.NewScreenFramebufferImage = NewScreenFramebufferImage;
	InitializeGLState = function() {
		var _r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		_r = restorable.InitializeGLState(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: InitializeGLState }; } $f._r = _r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.InitializeGLState = InitializeGLState;
	ResolveStaleImages = function() {
		var $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		$r = restorable.ResolveStaleImages(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ResolveStaleImages }; } $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.ResolveStaleImages = ResolveStaleImages;
	IsRestoringEnabled = function() {
		return restorable.IsRestoringEnabled();
	};
	$pkg.IsRestoringEnabled = IsRestoringEnabled;
	Restore = function() {
		var _r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		_r = restorable.Restore(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Restore }; } $f._r = _r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Restore = Restore;
	Images = function() {
		var _r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		_r = restorable.Images(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return sliceType$3.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Images }; } $f._r = _r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Images = Images;
	Error = function() {
		var $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = backendsM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(backendsM, "Unlock"), []]);
		$s = -1; return restorable.Error();
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Error }; } $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Error = Error;
	ptrType.methods = [{prop: "TryAlloc", name: "TryAlloc", pkg: "", typ: $funcType([$Int, $Int], [ptrType$1, $Bool], false)}];
	ptrType$5.methods = [{prop: "moveTo", name: "moveTo", pkg: "github.com/hajimehoshi/ebiten/internal/shareable", typ: $funcType([ptrType$5], [], false)}, {prop: "isShared", name: "isShared", pkg: "github.com/hajimehoshi/ebiten/internal/shareable", typ: $funcType([], [$Bool], false)}, {prop: "IsSharedForTesting", name: "IsSharedForTesting", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ensureNotShared", name: "ensureNotShared", pkg: "github.com/hajimehoshi/ebiten/internal/shareable", typ: $funcType([], [], false)}, {prop: "forceShared", name: "forceShared", pkg: "github.com/hajimehoshi/ebiten/internal/shareable", typ: $funcType([], [], false)}, {prop: "region", name: "region", pkg: "github.com/hajimehoshi/ebiten/internal/shareable", typ: $funcType([], [$Int, $Int, $Int, $Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "QuadVertices", name: "QuadVertices", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Float32, $Float32, $Float32, $Float32, $Float32, $Float32, $Float32, $Float32, $Float32, $Float32], [sliceType$4], false)}, {prop: "Vertex", name: "Vertex", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32, $Float32, $Float32, $Float32, $Float32], [sliceType$4], false)}, {prop: "DrawImage", name: "DrawImage", pkg: "", typ: $funcType([ptrType$5, sliceType$4, sliceType$5, ptrType$2, opengl.CompositeMode, graphics.Filter], [], false)}, {prop: "ReplacePixels", name: "ReplacePixels", pkg: "", typ: $funcType([sliceType$1], [], false)}, {prop: "replacePixels", name: "replacePixels", pkg: "github.com/hajimehoshi/ebiten/internal/shareable", typ: $funcType([sliceType$1], [], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.RGBA], false)}, {prop: "at", name: "at", pkg: "github.com/hajimehoshi/ebiten/internal/shareable", typ: $funcType([$Int, $Int], [color.RGBA], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "dispose", name: "dispose", pkg: "github.com/hajimehoshi/ebiten/internal/shareable", typ: $funcType([$Bool], [], false)}, {prop: "IsVolatile", name: "IsVolatile", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsInvalidated", name: "IsInvalidated", pkg: "", typ: $funcType([], [$Bool, $error], false)}, {prop: "shareable", name: "shareable", pkg: "github.com/hajimehoshi/ebiten/internal/shareable", typ: $funcType([], [$Bool], false)}, {prop: "allocate", name: "allocate", pkg: "github.com/hajimehoshi/ebiten/internal/shareable", typ: $funcType([$Bool], [], false)}];
	backend.init("github.com/hajimehoshi/ebiten/internal/shareable", [{prop: "restorable", name: "restorable", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "page", name: "page", anonymous: false, exported: false, typ: ptrType$4, tag: ""}]);
	Image.init("github.com/hajimehoshi/ebiten/internal/shareable", [{prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "disposed", name: "disposed", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "backend", name: "backend", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "node", name: "node", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "countForShare", name: "countForShare", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neverShared", name: "neverShared", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = affine.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphics.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphicsutil.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = packing.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = restorable.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		backendsM = new sync.Mutex.ptr(0, 0);
		theBackends = new sliceType([]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/ui"] = (function() {
	var $pkg = {}, $init, errors, js, devicescale, hooks, input, opengl, image, strconv, GraphicsContext, userInterface, sliceType, ptrType, sliceType$1, sliceType$2, structType, funcType, ptrType$1, canvas, currentUI, window, document, requestAnimationFrame, setTimeout, ScreenPadding, adjustPosition, AdjustedCursorPosition, AdjustedTouches, init, RunMainThreadLoop, Run;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherwasm/js"];
	devicescale = $packages["github.com/hajimehoshi/ebiten/internal/devicescale"];
	hooks = $packages["github.com/hajimehoshi/ebiten/internal/hooks"];
	input = $packages["github.com/hajimehoshi/ebiten/internal/input"];
	opengl = $packages["github.com/hajimehoshi/ebiten/internal/opengl"];
	image = $packages["image"];
	strconv = $packages["strconv"];
	GraphicsContext = $pkg.GraphicsContext = $newType(8, $kindInterface, "ui.GraphicsContext", true, "github.com/hajimehoshi/ebiten/internal/ui", true, null);
	userInterface = $pkg.userInterface = $newType(0, $kindStruct, "ui.userInterface", true, "github.com/hajimehoshi/ebiten/internal/ui", false, function(width_, height_, scale_, fullscreen_, runnableInBackground_, vsync_, sizeChanged_, windowFocus_, pageVisible_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.width = 0;
			this.height = 0;
			this.scale = 0;
			this.fullscreen = false;
			this.runnableInBackground = false;
			this.vsync = false;
			this.sizeChanged = false;
			this.windowFocus = false;
			this.pageVisible = false;
			return;
		}
		this.width = width_;
		this.height = height_;
		this.scale = scale_;
		this.fullscreen = fullscreen_;
		this.runnableInBackground = runnableInBackground_;
		this.vsync = vsync_;
		this.sizeChanged = sizeChanged_;
		this.windowFocus = windowFocus_;
		this.pageVisible = pageVisible_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(input.Touch);
	sliceType$1 = $sliceType(ptrType);
	sliceType$2 = $sliceType(js.Value);
	structType = $structType("", []);
	funcType = $funcType([], [], false);
	ptrType$1 = $ptrType(userInterface);
	ScreenPadding = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, x0, x1, y0, y1;
		x0 = 0;
		y0 = 0;
		x1 = 0;
		y1 = 0;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 0;
		x0 = _tmp;
		y0 = _tmp$1;
		x1 = _tmp$2;
		y1 = _tmp$3;
		return [x0, y0, x1, y1];
	};
	$pkg.ScreenPadding = ScreenPadding;
	adjustPosition = function(x, y) {
		var _r, rect, scale, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; rect = $f.rect; scale = $f.scale; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(canvas, js.Value).Call("getBoundingClientRect", new sliceType([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rect = $clone(_r, js.Value);
		x = x - ($clone($clone(rect, js.Value).Get("left"), js.Value).Int()) >> 0;
		y = y - ($clone($clone(rect, js.Value).Get("top"), js.Value).Int()) >> 0;
		scale = currentUI.getScale();
		$s = -1; return [(((x) / scale >> 0)), (((y) / scale >> 0))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: adjustPosition }; } $f._r = _r; $f.rect = rect; $f.scale = scale; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	AdjustedCursorPosition = function() {
		var _r, _tuple, _tuple$1, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = 0;
		y = 0;
		_tuple$1 = input.Get().CursorPosition();
		_r = adjustPosition(_tuple$1[0], _tuple$1[1]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		y = _tuple[1];
		$s = -1; return [x, y];
		/* */ } return; } if ($f === undefined) { $f = { $blk: AdjustedCursorPosition }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.AdjustedCursorPosition = AdjustedCursorPosition;
	AdjustedTouches = function() {
		var _i, _r, _ref, _tuple, _tuple$1, adjusted, i, t, ts, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; adjusted = $f.adjusted; i = $f.i; t = $f.t; ts = $f.ts; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ts = input.Get().Touches();
		adjusted = $makeSlice(sliceType$1, ts.$length);
		_ref = ts;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tuple$1 = t.Position();
			_r = adjustPosition(_tuple$1[0], _tuple$1[1]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			x = _tuple[0];
			y = _tuple[1];
			((i < 0 || i >= adjusted.$length) ? ($throwRuntimeError("index out of range"), undefined) : adjusted.$array[adjusted.$offset + i] = input.NewTouch(t.ID(), x, y));
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return adjusted;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AdjustedTouches }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.adjusted = adjusted; $f.i = i; $f.t = t; $f.ts = ts; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.AdjustedTouches = AdjustedTouches;
	userInterface.ptr.prototype.getScale = function() {
		var bh, body, bw, sh, sw, u;
		u = this;
		if (!u.fullscreen) {
			return u.scale;
		}
		body = $clone($clone(document, js.Value).Get("body"), js.Value);
		bw = $clone($clone(body, js.Value).Get("clientWidth"), js.Value).Float();
		bh = $clone($clone(body, js.Value).Get("clientHeight"), js.Value).Float();
		sw = bw / (u.width);
		sh = bh / (u.height);
		if (sw > sh) {
			return sh;
		}
		return sw;
	};
	userInterface.prototype.getScale = function() { return this.$val.getScale(); };
	userInterface.ptr.prototype.actualScreenScale = function() {
		var _r, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		_r = devicescale.DeviceScale(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return u.getScale() * _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.actualScreenScale }; } $f._r = _r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.actualScreenScale = function() { return this.$val.actualScreenScale(); };
	userInterface.ptr.prototype.updateGraphicsContext = function(g) {
		var _arg, _arg$1, _arg$2, _r, g, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; g = $f.g; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		/* */ if (u.sizeChanged) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (u.sizeChanged) { */ case 1:
			u.sizeChanged = false;
			_arg = u.width;
			_arg$1 = u.height;
			_r = u.actualScreenScale(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$2 = _r;
			$r = g.SetSize(_arg, _arg$1, _arg$2); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.updateGraphicsContext }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f.g = g; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.updateGraphicsContext = function(g) { return this.$val.updateGraphicsContext(g); };
	userInterface.ptr.prototype.suspended = function() {
		var u;
		u = this;
		return !u.runnableInBackground && (!u.windowFocus || !u.pageVisible);
	};
	userInterface.prototype.suspended = function() { return this.$val.suspended(); };
	userInterface.ptr.prototype.update = function(g) {
		var _r, _r$1, err, g, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; g = $f.g; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = [g];
		u = [u];
		u[0] = this;
		/* */ if (u[0].suspended()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (u[0].suspended()) { */ case 1:
			$r = hooks.SuspendAudio(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		$r = hooks.ResumeAudio(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = opengl.GetContext().IsContextLost(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r) { */ case 5:
			$r = opengl.GetContext().RestoreContext(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g[0].Invalidate(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
		/* } */ case 6:
		$r = input.Get().UpdateGamepads(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = u[0].updateGraphicsContext(g[0]); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = g[0].Update((function(g, u) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			input.Get().ClearRuneBuffer();
			$r = u[0].updateGraphicsContext(g[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(g, u)); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.update }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.g = g; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.update = function(g) { return this.$val.update(g); };
	userInterface.ptr.prototype.loop = function(g) {
		var _r, cf, ch, f, g, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; cf = $f.cf; ch = $f.ch; f = $f.f; g = $f.g; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cf = [cf];
		ch = [ch];
		f = [f];
		g = [g];
		u = [u];
		u[0] = this;
		ch[0] = new $Chan($error, 0);
		f[0] = $throwNilPointerError;
		cf[0] = new js.Callback.ptr(new js.Value.ptr(null));
		f[0] = (function(cf, ch, f, g, u) { return function $b(param) {
			var _r, _r$1, _r$2, err, param, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; err = $f.err; param = $f.param; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = u[0].update(g[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
				$r = $send(ch[0], err); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$close(ch[0]);
				$s = -1; return;
			/* } */ case 3:
			/* */ if (u[0].vsync) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (u[0].vsync) { */ case 5:
				_r$1 = $clone(requestAnimationFrame, js.Value).Invoke(new sliceType([new cf[0].constructor.elem(cf[0])])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$s = 7; continue;
			/* } else { */ case 6:
				_r$2 = $clone(setTimeout, js.Value).Invoke(new sliceType([new cf[0].constructor.elem(cf[0]), new $Int(0)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
			/* } */ case 7:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.err = err; $f.param = param; $f.$s = $s; $f.$r = $r; return $f;
		}; })(cf, ch, f, g, u);
		js.Callback.copy(cf[0], js.NewCallback(f[0]));
		$go((function(cf, ch, f, g, u) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = f[0](sliceType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(cf, ch, f, g, u), []);
		_r = $recv(ch[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.loop }; } $f._r = _r; $f.cf = cf; $f.ch = ch; $f.f = f; $f.g = g; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.loop = function(g) { return this.$val.loop(g); };
	init = function() {
		var _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, bodyStyle, canvasStyle, ch, htmlStyle, meta, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; bodyStyle = $f.bodyStyle; canvasStyle = $f.canvasStyle; ch = $f.ch; htmlStyle = $f.htmlStyle; meta = $f.meta; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch = [ch];
		/* */ if ($equal($clone(document, js.Value).Get("body"), js.Null(), js.Value)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($equal($clone(document, js.Value).Get("body"), js.Null(), js.Value)) { */ case 1:
			ch[0] = new $Chan(structType, 0);
			_r = $clone(window, js.Value).Call("addEventListener", new sliceType([new $String("load"), (x = js.NewCallback((function(ch) { return function(param) {
				var param;
				$close(ch[0]);
			}; })(ch)), new x.constructor.elem(x))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_r$1 = $recv(ch[0]); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1[0];
		/* } */ case 2:
		_r$2 = $clone(window, js.Value).Call("addEventListener", new sliceType([new $String("focus"), (x$1 = js.NewCallback((function(ch) { return function $b(param) {
			var param, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; param = $f.param; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			currentUI.windowFocus = true;
			/* */ if (currentUI.suspended()) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (currentUI.suspended()) { */ case 1:
				$r = hooks.SuspendAudio(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 3; continue;
			/* } else { */ case 2:
				$r = hooks.ResumeAudio(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 3:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.param = param; $f.$s = $s; $f.$r = $r; return $f;
		}; })(ch)), new x$1.constructor.elem(x$1))])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = $clone(window, js.Value).Call("addEventListener", new sliceType([new $String("blur"), (x$2 = js.NewCallback((function(ch) { return function $b(param) {
			var param, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; param = $f.param; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			currentUI.windowFocus = false;
			/* */ if (currentUI.suspended()) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (currentUI.suspended()) { */ case 1:
				$r = hooks.SuspendAudio(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 3; continue;
			/* } else { */ case 2:
				$r = hooks.ResumeAudio(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 3:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.param = param; $f.$s = $s; $f.$r = $r; return $f;
		}; })(ch)), new x$2.constructor.elem(x$2))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = $clone(document, js.Value).Call("addEventListener", new sliceType([new $String("visibilitychange"), (x$3 = js.NewCallback((function(ch) { return function $b(param) {
			var param, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; param = $f.param; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			currentUI.pageVisible = !$clone($clone(document, js.Value).Get("hidden"), js.Value).Bool();
			/* */ if (currentUI.suspended()) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (currentUI.suspended()) { */ case 1:
				$r = hooks.SuspendAudio(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 3; continue;
			/* } else { */ case 2:
				$r = hooks.ResumeAudio(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 3:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.param = param; $f.$s = $s; $f.$r = $r; return $f;
		}; })(ch)), new x$3.constructor.elem(x$3))])); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = $clone(window, js.Value).Call("addEventListener", new sliceType([new $String("resize"), (x$4 = js.NewCallback((function(ch) { return function $b(param) {
			var param, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; param = $f.param; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = currentUI.updateScreenSize(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.param = param; $f.$s = $s; $f.$r = $r; return $f;
		}; })(ch)), new x$4.constructor.elem(x$4))])); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = $clone(document, js.Value).Call("createElement", new sliceType([new $String("meta")])); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		meta = $clone(_r$6, js.Value);
		$clone(meta, js.Value).Set("name", new $String("viewport"));
		$clone(meta, js.Value).Set("content", new $String("width=device-width, initial-scale=1"));
		_r$7 = $clone($clone(document, js.Value).Get("head"), js.Value).Call("appendChild", new sliceType([new meta.constructor.elem(meta)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = $clone(document, js.Value).Call("createElement", new sliceType([new $String("canvas")])); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		js.Value.copy(canvas, _r$8);
		$clone(canvas, js.Value).Set("width", new $Int(16));
		$clone(canvas, js.Value).Set("height", new $Int(16));
		_r$9 = $clone($clone(document, js.Value).Get("body"), js.Value).Call("appendChild", new sliceType([new canvas.constructor.elem(canvas)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$9;
		htmlStyle = $clone($clone($clone(document, js.Value).Get("documentElement"), js.Value).Get("style"), js.Value);
		$clone(htmlStyle, js.Value).Set("height", new $String("100%"));
		$clone(htmlStyle, js.Value).Set("margin", new $String("0"));
		$clone(htmlStyle, js.Value).Set("padding", new $String("0"));
		bodyStyle = $clone($clone($clone(document, js.Value).Get("body"), js.Value).Get("style"), js.Value);
		$clone(bodyStyle, js.Value).Set("backgroundColor", new $String("#000"));
		$clone(bodyStyle, js.Value).Set("position", new $String("relative"));
		$clone(bodyStyle, js.Value).Set("height", new $String("100%"));
		$clone(bodyStyle, js.Value).Set("margin", new $String("0"));
		$clone(bodyStyle, js.Value).Set("padding", new $String("0"));
		_r$10 = $clone($clone(document, js.Value).Get("body"), js.Value).Call("addEventListener", new sliceType([new $String("click"), (x$5 = js.NewCallback((function(ch) { return function $b(param) {
			var _r$10, param, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; param = $f.param; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$10 = $clone(canvas, js.Value).Call("focus", new sliceType([])); /* */ $s = 1; case 1: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$10 = _r$10; $f.param = param; $f.$s = $s; $f.$r = $r; return $f;
		}; })(ch)), new x$5.constructor.elem(x$5))])); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		canvasStyle = $clone($clone(canvas, js.Value).Get("style"), js.Value);
		$clone(canvasStyle, js.Value).Set("position", new $String("absolute"));
		_r$11 = $clone(canvas, js.Value).Call("setAttribute", new sliceType([new $String("tabindex"), new $Int(1)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		$clone($clone(canvas, js.Value).Get("style"), js.Value).Set("outline", new $String("none"));
		_r$12 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("keydown"), (x$6 = js.NewEventCallback(1, input.OnKeyDown), new x$6.constructor.elem(x$6))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$12;
		_r$13 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("keypress"), (x$7 = js.NewEventCallback(1, input.OnKeyPress), new x$7.constructor.elem(x$7))])); /* */ $s = 16; case 16: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13;
		_r$14 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("keyup"), (x$8 = js.NewEventCallback(1, input.OnKeyUp), new x$8.constructor.elem(x$8))])); /* */ $s = 17; case 17: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		_r$15 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("mousedown"), (x$9 = js.NewEventCallback(1, input.OnMouseDown), new x$9.constructor.elem(x$9))])); /* */ $s = 18; case 18: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15;
		_r$16 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("mouseup"), (x$10 = js.NewEventCallback(1, input.OnMouseUp), new x$10.constructor.elem(x$10))])); /* */ $s = 19; case 19: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$16;
		_r$17 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("mousemove"), (x$11 = js.NewEventCallback(1, input.OnMouseMove), new x$11.constructor.elem(x$11))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$17;
		_r$18 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("touchstart"), (x$12 = js.NewEventCallback(0, input.OnTouchStart), new x$12.constructor.elem(x$12))])); /* */ $s = 21; case 21: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_r$18;
		_r$19 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("touchend"), (x$13 = js.NewEventCallback(0, input.OnTouchEnd), new x$13.constructor.elem(x$13))])); /* */ $s = 22; case 22: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_r$19;
		_r$20 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("touchmove"), (x$14 = js.NewEventCallback(0, input.OnTouchMove), new x$14.constructor.elem(x$14))])); /* */ $s = 23; case 23: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		_r$20;
		_r$21 = $clone(window, js.Value).Call("addEventListener", new sliceType([new $String("gamepadconnected"), (x$15 = js.NewCallback((function(ch) { return function(e) {
			var e;
		}; })(ch)), new x$15.constructor.elem(x$15))])); /* */ $s = 24; case 24: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_r$21;
		_r$22 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("contextmenu"), (x$16 = js.NewEventCallback(1, (function(ch) { return function(param) {
			var param;
		}; })(ch)), new x$16.constructor.elem(x$16))])); /* */ $s = 25; case 25: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$22;
		_r$23 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("webglcontextlost"), (x$17 = js.NewEventCallback(1, (function(ch) { return function(param) {
			var param;
		}; })(ch)), new x$17.constructor.elem(x$17))])); /* */ $s = 26; case 26: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_r$23;
		_r$24 = $clone(canvas, js.Value).Call("addEventListener", new sliceType([new $String("webglcontextrestored"), (x$18 = js.NewCallback((function(ch) { return function(e) {
			var e;
		}; })(ch)), new x$18.constructor.elem(x$18))])); /* */ $s = 27; case 27: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$24;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.bodyStyle = bodyStyle; $f.canvasStyle = canvasStyle; $f.ch = ch; $f.htmlStyle = htmlStyle; $f.meta = meta; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	RunMainThreadLoop = function(ch) {
		var _r, ch, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $recv(ch); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: RunMainThreadLoop }; } $f._r = _r; $f.ch = ch; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.RunMainThreadLoop = RunMainThreadLoop;
	Run = function(width, height, scale, title, g, mainloop) {
		var _r, _r$1, _r$2, _r$3, err, g, height, mainloop, scale, title, u, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; err = $f.err; g = $f.g; height = $f.height; mainloop = $f.mainloop; scale = $f.scale; title = $f.title; u = $f.u; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = currentUI;
		$clone(document, js.Value).Set("title", new $String(title));
		_r = u.setScreenSize(width, height, scale, u.fullscreen); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = $clone(canvas, js.Value).Call("focus", new sliceType([])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = opengl.Init(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = u.loop(g); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Run }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.err = err; $f.g = g; $f.height = height; $f.mainloop = mainloop; $f.scale = scale; $f.title = title; $f.u = u; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Run = Run;
	userInterface.ptr.prototype.setScreenSize = function(width, height, scale, fullscreen) {
		var fullscreen, height, scale, u, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; fullscreen = $f.fullscreen; height = $f.height; scale = $f.scale; u = $f.u; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		if ((u.width === width) && (u.height === height) && (u.scale === scale) && fullscreen === u.fullscreen) {
			$s = -1; return false;
		}
		u.width = width;
		u.height = height;
		u.scale = scale;
		u.fullscreen = fullscreen;
		$r = u.updateScreenSize(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.setScreenSize }; } $f.fullscreen = fullscreen; $f.height = height; $f.scale = scale; $f.u = u; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.setScreenSize = function(width, height, scale, fullscreen) { return this.$val.setScreenSize(width, height, scale, fullscreen); };
	userInterface.ptr.prototype.updateScreenSize = function() {
		var _arg, _arg$1, _r, _r$1, canvasStyle, cssHeight, cssWidth, s, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; canvasStyle = $f.canvasStyle; cssHeight = $f.cssHeight; cssWidth = $f.cssWidth; s = $f.s; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		_r = u.actualScreenScale(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = new $Int((((u.width) * _r >> 0)));
		$r = $clone(canvas, js.Value).Set("width", _arg); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = u.actualScreenScale(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = new $Int((((u.height) * _r$1 >> 0)));
		$r = $clone(canvas, js.Value).Set("height", _arg$1); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		canvasStyle = $clone($clone(canvas, js.Value).Get("style"), js.Value);
		s = u.getScale();
		cssWidth = (((u.width) * s >> 0));
		cssHeight = (((u.height) * s >> 0));
		$clone(canvasStyle, js.Value).Set("width", new $String(strconv.Itoa(cssWidth) + "px"));
		$clone(canvasStyle, js.Value).Set("height", new $String(strconv.Itoa(cssHeight) + "px"));
		$clone(canvasStyle, js.Value).Set("left", new $String("calc((100% - " + strconv.Itoa(cssWidth) + "px) / 2)"));
		$clone(canvasStyle, js.Value).Set("top", new $String("calc((100% - " + strconv.Itoa(cssHeight) + "px) / 2)"));
		u.sizeChanged = true;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.updateScreenSize }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.canvasStyle = canvasStyle; $f.cssHeight = cssHeight; $f.cssWidth = cssWidth; $f.s = s; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.updateScreenSize = function() { return this.$val.updateScreenSize(); };
	ptrType$1.methods = [{prop: "getScale", name: "getScale", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([], [$Float64], false)}, {prop: "actualScreenScale", name: "actualScreenScale", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([], [$Float64], false)}, {prop: "updateGraphicsContext", name: "updateGraphicsContext", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([GraphicsContext], [], false)}, {prop: "suspended", name: "suspended", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([], [$Bool], false)}, {prop: "update", name: "update", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([GraphicsContext], [$error], false)}, {prop: "loop", name: "loop", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([GraphicsContext], [$error], false)}, {prop: "setScreenSize", name: "setScreenSize", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([$Int, $Int, $Float64, $Bool], [$Bool], false)}, {prop: "updateScreenSize", name: "updateScreenSize", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([], [], false)}];
	GraphicsContext.init([{prop: "Invalidate", name: "Invalidate", pkg: "", typ: $funcType([], [], false)}, {prop: "SetSize", name: "SetSize", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([funcType], [$error], false)}]);
	userInterface.init("github.com/hajimehoshi/ebiten/internal/ui", [{prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "scale", name: "scale", anonymous: false, exported: false, typ: $Float64, tag: ""}, {prop: "fullscreen", name: "fullscreen", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "runnableInBackground", name: "runnableInBackground", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "vsync", name: "vsync", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sizeChanged", name: "sizeChanged", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "windowFocus", name: "windowFocus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "pageVisible", name: "pageVisible", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = devicescale.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hooks.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = input.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		canvas = new js.Value.ptr(null);
		$pkg.RegularTermination = errors.New("regular termination");
		currentUI = new userInterface.ptr(0, 0, 0, false, false, true, true, true, true);
		window = $clone($clone(js.Global(), js.Value).Get("window"), js.Value);
		document = $clone($clone(js.Global(), js.Value).Get("document"), js.Value);
		requestAnimationFrame = $clone($clone(window, js.Value).Get("requestAnimationFrame"), js.Value);
		setTimeout = $clone($clone(window, js.Value).Get("setTimeout"), js.Value);
		$r = init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, errors, os, runtime, sort, strings, utf8, lazybuf, sliceType$1, ptrType$1, Clean, FromSlash, Join, volumeNameLen, join;
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	lazybuf = $pkg.lazybuf = $newType(0, $kindStruct, "filepath.lazybuf", true, "path/filepath", false, function(path_, buf_, w_, volAndPath_, volLen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.buf = sliceType$1.nil;
			this.w = 0;
			this.volAndPath = "";
			this.volLen = 0;
			return;
		}
		this.path = path_;
		this.buf = buf_;
		this.w = w_;
		this.volAndPath = volAndPath_;
		this.volLen = volLen_;
	});
	sliceType$1 = $sliceType($Uint8);
	ptrType$1 = $ptrType(lazybuf);
	lazybuf.ptr.prototype.index = function(i) {
		var b, i, x;
		b = this;
		if (!(b.buf === sliceType$1.nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.ptr.prototype.append = function(c) {
		var b, c, x, x$1;
		b = this;
		if (b.buf === sliceType$1.nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = $makeSlice(sliceType$1, b.path.length);
			$copyString(b.buf, $substring(b.path, 0, b.w));
		}
		(x = b.buf, x$1 = b.w, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === sliceType$1.nil) {
			return $substring(b.volAndPath, 0, (b.volLen + b.w >> 0));
		}
		return $substring(b.volAndPath, 0, b.volLen) + ($bytesToString($subslice(b.buf, 0, b.w)));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = function(path) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dotdot, n, originalPath, out, path, r, rooted, volLen;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = $substring(path, volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.ptr(path, sliceType$1.nil, 0, originalPath, volLen);
		_tmp = 0;
		_tmp$1 = 0;
		r = _tmp;
		dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1;
			_tmp$3 = 1;
			r = _tmp$2;
			dotdot = _tmp$3;
		}
		while (true) {
			if (!(r < n)) { break; }
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (true) {
						if (!(out.w > dotdot && !os.IsPathSeparator(out.index(out.w)))) { break; }
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (true) {
					if (!(r < n && !os.IsPathSeparator(path.charCodeAt(r)))) { break; }
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	$pkg.Clean = Clean;
	FromSlash = function(path) {
		var path;
		if (true) {
			return path;
		}
		return strings.Replace(path, "/", "/", -1);
	};
	$pkg.FromSlash = FromSlash;
	Join = function(elem) {
		var elem;
		return join(elem);
	};
	$pkg.Join = Join;
	volumeNameLen = function(path) {
		var path;
		return 0;
	};
	join = function(elem) {
		var _i, _ref, e, elem, i;
		_ref = elem;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(e === "")) {
				return Clean(strings.Join($subslice(elem, i), "/"));
			}
			_i++;
		}
		return "";
	};
	ptrType$1.methods = [{prop: "index", name: "index", pkg: "path/filepath", typ: $funcType([$Int], [$Uint8], false)}, {prop: "append", name: "append", pkg: "path/filepath", typ: $funcType([$Uint8], [], false)}, {prop: "string", name: "string", pkg: "path/filepath", typ: $funcType([], [$String], false)}];
	lazybuf.init("path/filepath", [{prop: "path", name: "path", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "volAndPath", name: "volAndPath", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "volLen", name: "volLen", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, $init, bytes, io, os, filepath, sort, strconv, sync, time, sliceType, sliceType$1, ptrType, ptrType$1, sliceType$3, blackHolePool, rand, randmu, reseed, nextSuffix, TempFile, TempDir;
	bytes = $packages["bytes"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	time = $packages["time"];
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$1);
	ptrType$1 = $ptrType(os.File);
	sliceType$3 = $sliceType($String);
	reseed = function() {
		var x, x$1;
		return (((x = $clone(time.Now(), time.Time).UnixNano(), x$1 = (new $Int64(0, os.Getpid())), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low)).$low >>> 0));
	};
	nextSuffix = function() {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = randmu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = rand;
		if (r === 0) {
			r = reseed();
		}
		r = ($imul(r, 1664525) >>> 0) + 1013904223 >>> 0;
		rand = r;
		$r = randmu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $substring(strconv.Itoa((((1000000000 + (_r = r % 1000000000, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0))), 1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: nextSuffix }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	TempFile = function(dir, prefix) {
		var _arg, _arg$1, _r, _r$1, _r$2, _r$3, _tuple, dir, err, f, i, name, nconflict, prefix, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; dir = $f.dir; err = $f.err; f = $f.f; i = $f.i; name = $f.name; nconflict = $f.nconflict; prefix = $f.prefix; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = ptrType$1.nil;
		err = $ifaceNil;
		/* */ if (dir === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (dir === "") { */ case 1:
			_r = os.TempDir(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			dir = _r;
		/* } */ case 2:
		nconflict = 0;
		i = 0;
		/* while (true) { */ case 4:
			/* if (!(i < 10000)) { break; } */ if(!(i < 10000)) { $s = 5; continue; }
			_arg = dir;
			_r$1 = nextSuffix(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = prefix + _r$1;
			_r$2 = filepath.Join(new sliceType$3([_arg, _arg$1])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			name = _r$2;
			_r$3 = os.OpenFile(name, 2562, 384); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			f = _tuple[0];
			err = _tuple[1];
			/* */ if (os.IsExist(err)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (os.IsExist(err)) { */ case 9:
				nconflict = nconflict + (1) >> 0;
				/* */ if (nconflict > 10) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (nconflict > 10) { */ case 11:
					$r = randmu.Lock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					rand = reseed();
					$r = randmu.Unlock(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 12:
				i = i + (1) >> 0;
				/* continue; */ $s = 4; continue;
			/* } */ case 10:
			/* break; */ $s = 5; continue;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return [f, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: TempFile }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.dir = dir; $f.err = err; $f.f = f; $f.i = i; $f.name = name; $f.nconflict = nconflict; $f.prefix = prefix; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TempFile = TempFile;
	TempDir = function(dir, prefix) {
		var _arg, _arg$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, dir, err, err$1, i, name, nconflict, prefix, try$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; dir = $f.dir; err = $f.err; err$1 = $f.err$1; i = $f.i; name = $f.name; nconflict = $f.nconflict; prefix = $f.prefix; try$1 = $f.try$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		err = $ifaceNil;
		/* */ if (dir === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (dir === "") { */ case 1:
			_r = os.TempDir(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			dir = _r;
		/* } */ case 2:
		nconflict = 0;
		i = 0;
		/* while (true) { */ case 4:
			/* if (!(i < 10000)) { break; } */ if(!(i < 10000)) { $s = 5; continue; }
			_arg = dir;
			_r$1 = nextSuffix(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = prefix + _r$1;
			_r$2 = filepath.Join(new sliceType$3([_arg, _arg$1])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			try$1 = _r$2;
			err = os.Mkdir(try$1, 448);
			/* */ if (os.IsExist(err)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (os.IsExist(err)) { */ case 8:
				nconflict = nconflict + (1) >> 0;
				/* */ if (nconflict > 10) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (nconflict > 10) { */ case 10:
					$r = randmu.Lock(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					rand = reseed();
					$r = randmu.Unlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 11:
				i = i + (1) >> 0;
				/* continue; */ $s = 4; continue;
			/* } */ case 9:
			/* */ if (os.IsNotExist(err)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (os.IsNotExist(err)) { */ case 14:
				_r$3 = os.Stat(dir); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = _r$3;
				err$1 = _tuple[1];
				if (os.IsNotExist(err$1)) {
					_tmp = "";
					_tmp$1 = err$1;
					name = _tmp;
					err = _tmp$1;
					$s = -1; return [name, err];
				}
			/* } */ case 15:
			if ($interfaceIsEqual(err, $ifaceNil)) {
				name = try$1;
			}
			/* break; */ $s = 5; continue;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return [name, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: TempDir }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.dir = dir; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.name = name; $f.nconflict = nconflict; $f.prefix = prefix; $f.try$1 = try$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TempDir = TempDir;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		rand = 0;
		randmu = new sync.Mutex.ptr(0, 0);
		blackHolePool = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType(function() { return b; }, function($v) { b = $subslice(new sliceType$1($v.$array), $v.$offset, $v.$offset + $v.$length); })));
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten"] = (function() {
	var $pkg = {}, $init, fmt, affine, clock, devicescale, graphics, graphicsutil, hooks, input, opengl, png, shareable, ui, web, image, color, ioutil, math, os, filepath, runtime, strings, atomic, ColorM, GamepadButton, GeoM, Filter, CompositeMode, graphicsContext, Image, Vertex, DrawTrianglesOptions, DrawImageOptions, ImagePart, ImageParts, imageParts, Key, MouseButton, imageDumper, ptrType, sliceType, ptrType$1, ptrType$2, sliceType$1, sliceType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$3, sliceType$4, funcType, sliceType$6, ptrType$6, structType, sliceType$8, ptrType$7, ptrType$8, funcType$1, ptrType$9, sliceType$9, sliceType$10, ptrType$10, mapType, emptyImage, isDrawingSkipped, isDrawingSkipped$24ptr, currentMaxTPS, currentMaxTPS$24ptr, theGraphicsContext, isDebug, newGraphicsContext, init, NewImage, newVolatileImage, NewImageFromImage, newImageWithScreenFramebuffer, IsKeyPressed, CursorPosition, IsMouseButtonPressed, GamepadIDs, GamepadButtonNum, IsGamepadButtonPressed, TouchIDs, TouchPosition, keyNameToKey, init$1, setDrawingSkipped, IsDrawingSkipped, run, Run, DeviceScaleFactor, MaxTPS;
	fmt = $packages["fmt"];
	affine = $packages["github.com/hajimehoshi/ebiten/internal/affine"];
	clock = $packages["github.com/hajimehoshi/ebiten/internal/clock"];
	devicescale = $packages["github.com/hajimehoshi/ebiten/internal/devicescale"];
	graphics = $packages["github.com/hajimehoshi/ebiten/internal/graphics"];
	graphicsutil = $packages["github.com/hajimehoshi/ebiten/internal/graphicsutil"];
	hooks = $packages["github.com/hajimehoshi/ebiten/internal/hooks"];
	input = $packages["github.com/hajimehoshi/ebiten/internal/input"];
	opengl = $packages["github.com/hajimehoshi/ebiten/internal/opengl"];
	png = $packages["github.com/hajimehoshi/ebiten/internal/png"];
	shareable = $packages["github.com/hajimehoshi/ebiten/internal/shareable"];
	ui = $packages["github.com/hajimehoshi/ebiten/internal/ui"];
	web = $packages["github.com/hajimehoshi/ebiten/internal/web"];
	image = $packages["image"];
	color = $packages["image/color"];
	ioutil = $packages["io/ioutil"];
	math = $packages["math"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	runtime = $packages["runtime"];
	strings = $packages["strings"];
	atomic = $packages["sync/atomic"];
	ColorM = $pkg.ColorM = $newType(0, $kindStruct, "ebiten.ColorM", true, "github.com/hajimehoshi/ebiten", true, function(impl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.impl = ptrType$1.nil;
			return;
		}
		this.impl = impl_;
	});
	GamepadButton = $pkg.GamepadButton = $newType(4, $kindInt, "ebiten.GamepadButton", true, "github.com/hajimehoshi/ebiten", true, null);
	GeoM = $pkg.GeoM = $newType(0, $kindStruct, "ebiten.GeoM", true, "github.com/hajimehoshi/ebiten", true, function(a_1_, b_, c_, d_1_, tx_, ty_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a_1 = 0;
			this.b = 0;
			this.c = 0;
			this.d_1 = 0;
			this.tx = 0;
			this.ty = 0;
			return;
		}
		this.a_1 = a_1_;
		this.b = b_;
		this.c = c_;
		this.d_1 = d_1_;
		this.tx = tx_;
		this.ty = ty_;
	});
	Filter = $pkg.Filter = $newType(4, $kindInt, "ebiten.Filter", true, "github.com/hajimehoshi/ebiten", true, null);
	CompositeMode = $pkg.CompositeMode = $newType(4, $kindInt, "ebiten.CompositeMode", true, "github.com/hajimehoshi/ebiten", true, null);
	graphicsContext = $pkg.graphicsContext = $newType(0, $kindStruct, "ebiten.graphicsContext", true, "github.com/hajimehoshi/ebiten", false, function(f_, offscreen_, screen_, screenScale_, initialized_, invalidated_, offsetX_, offsetY_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = $throwNilPointerError;
			this.offscreen = ptrType.nil;
			this.screen = ptrType.nil;
			this.screenScale = 0;
			this.initialized = false;
			this.invalidated = false;
			this.offsetX = 0;
			this.offsetY = 0;
			return;
		}
		this.f = f_;
		this.offscreen = offscreen_;
		this.screen = screen_;
		this.screenScale = screenScale_;
		this.initialized = initialized_;
		this.invalidated = invalidated_;
		this.offsetX = offsetX_;
		this.offsetY = offsetY_;
	});
	Image = $pkg.Image = $newType(0, $kindStruct, "ebiten.Image", true, "github.com/hajimehoshi/ebiten", true, function(addr_, shareableImages_, filter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.addr = ptrType.nil;
			this.shareableImages = sliceType$4.nil;
			this.filter = 0;
			return;
		}
		this.addr = addr_;
		this.shareableImages = shareableImages_;
		this.filter = filter_;
	});
	Vertex = $pkg.Vertex = $newType(0, $kindStruct, "ebiten.Vertex", true, "github.com/hajimehoshi/ebiten", true, function(DstX_, DstY_, SrcX_, SrcY_, ColorR_, ColorG_, ColorB_, ColorA_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DstX = 0;
			this.DstY = 0;
			this.SrcX = 0;
			this.SrcY = 0;
			this.ColorR = 0;
			this.ColorG = 0;
			this.ColorB = 0;
			this.ColorA = 0;
			return;
		}
		this.DstX = DstX_;
		this.DstY = DstY_;
		this.SrcX = SrcX_;
		this.SrcY = SrcY_;
		this.ColorR = ColorR_;
		this.ColorG = ColorG_;
		this.ColorB = ColorB_;
		this.ColorA = ColorA_;
	});
	DrawTrianglesOptions = $pkg.DrawTrianglesOptions = $newType(0, $kindStruct, "ebiten.DrawTrianglesOptions", true, "github.com/hajimehoshi/ebiten", true, function(ColorM_, CompositeMode_, Filter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ColorM = new ColorM.ptr(ptrType$1.nil);
			this.CompositeMode = 0;
			this.Filter = 0;
			return;
		}
		this.ColorM = ColorM_;
		this.CompositeMode = CompositeMode_;
		this.Filter = Filter_;
	});
	DrawImageOptions = $pkg.DrawImageOptions = $newType(0, $kindStruct, "ebiten.DrawImageOptions", true, "github.com/hajimehoshi/ebiten", true, function(SourceRect_, GeoM_, ColorM_, CompositeMode_, Filter_, ImageParts_, Parts_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.SourceRect = ptrType$2.nil;
			this.GeoM = new GeoM.ptr(0, 0, 0, 0, 0, 0);
			this.ColorM = new ColorM.ptr(ptrType$1.nil);
			this.CompositeMode = 0;
			this.Filter = 0;
			this.ImageParts = $ifaceNil;
			this.Parts = sliceType$1.nil;
			return;
		}
		this.SourceRect = SourceRect_;
		this.GeoM = GeoM_;
		this.ColorM = ColorM_;
		this.CompositeMode = CompositeMode_;
		this.Filter = Filter_;
		this.ImageParts = ImageParts_;
		this.Parts = Parts_;
	});
	ImagePart = $pkg.ImagePart = $newType(0, $kindStruct, "ebiten.ImagePart", true, "github.com/hajimehoshi/ebiten", true, function(Dst_, Src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dst = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
			this.Src = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
			return;
		}
		this.Dst = Dst_;
		this.Src = Src_;
	});
	ImageParts = $pkg.ImageParts = $newType(8, $kindInterface, "ebiten.ImageParts", true, "github.com/hajimehoshi/ebiten", true, null);
	imageParts = $pkg.imageParts = $newType(12, $kindSlice, "ebiten.imageParts", true, "github.com/hajimehoshi/ebiten", false, null);
	Key = $pkg.Key = $newType(4, $kindInt, "ebiten.Key", true, "github.com/hajimehoshi/ebiten", true, null);
	MouseButton = $pkg.MouseButton = $newType(4, $kindInt, "ebiten.MouseButton", true, "github.com/hajimehoshi/ebiten", true, null);
	imageDumper = $pkg.imageDumper = $newType(0, $kindStruct, "ebiten.imageDumper", true, "github.com/hajimehoshi/ebiten", false, function(f_, keyState_, hasScreenshotKey_, screenshotKey_, toTakeScreenshot_, hasDumpInternalImagesKey_, dumpInternalImagesKey_, toDumpInternalImages_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = $throwNilPointerError;
			this.keyState = false;
			this.hasScreenshotKey = false;
			this.screenshotKey = 0;
			this.toTakeScreenshot = false;
			this.hasDumpInternalImagesKey = false;
			this.dumpInternalImagesKey = 0;
			this.toDumpInternalImages = false;
			return;
		}
		this.f = f_;
		this.keyState = keyState_;
		this.hasScreenshotKey = hasScreenshotKey_;
		this.screenshotKey = screenshotKey_;
		this.toTakeScreenshot = toTakeScreenshot_;
		this.hasDumpInternalImagesKey = hasDumpInternalImagesKey_;
		this.dumpInternalImagesKey = dumpInternalImagesKey_;
		this.toDumpInternalImages = toDumpInternalImages_;
	});
	ptrType = $ptrType(Image);
	sliceType = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(affine.ColorM);
	ptrType$2 = $ptrType(image.Rectangle);
	sliceType$1 = $sliceType(ImagePart);
	sliceType$2 = $sliceType($Uint8);
	ptrType$3 = $ptrType(DrawImageOptions);
	ptrType$4 = $ptrType(shareable.Image);
	ptrType$5 = $ptrType(DrawTrianglesOptions);
	sliceType$3 = $sliceType($Float32);
	sliceType$4 = $sliceType(ptrType$4);
	funcType = $funcType([ptrType], [$error], false);
	sliceType$6 = $sliceType($Int);
	ptrType$6 = $ptrType($Int32);
	structType = $structType("", []);
	sliceType$8 = $sliceType($String);
	ptrType$7 = $ptrType(ColorM);
	ptrType$8 = $ptrType(GeoM);
	funcType$1 = $funcType([], [], false);
	ptrType$9 = $ptrType(graphicsContext);
	sliceType$9 = $sliceType(Vertex);
	sliceType$10 = $sliceType($Uint16);
	ptrType$10 = $ptrType(imageDumper);
	mapType = $mapType(Key, $Int);
	ColorM.ptr.prototype.String = function() {
		var _r, _tuple, b, c, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; c = $f.c; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_tuple = c.impl.UnsafeElements();
		b = _tuple[0];
		t = _tuple[1];
		_r = fmt.Sprintf("[[%f, %f, %f, %f, %f], [%f, %f, %f, %f, %f], [%f, %f, %f, %f, %f], [%f, %f, %f, %f, %f]]", new sliceType([new $Float32((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])), new $Float32((4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4])), new $Float32((8 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 8])), new $Float32((12 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 12])), new $Float32((0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0])), new $Float32((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1])), new $Float32((5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5])), new $Float32((9 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 9])), new $Float32((13 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 13])), new $Float32((1 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 1])), new $Float32((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2])), new $Float32((6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6])), new $Float32((10 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 10])), new $Float32((14 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 14])), new $Float32((2 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 2])), new $Float32((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3])), new $Float32((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7])), new $Float32((11 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 11])), new $Float32((15 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 15])), new $Float32((3 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 3]))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ColorM.ptr.prototype.String }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.c = c; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ColorM.prototype.String = function() { return this.$val.String(); };
	ColorM.ptr.prototype.Reset = function() {
		var c;
		c = this;
		c.impl = ptrType$1.nil;
	};
	ColorM.prototype.Reset = function() { return this.$val.Reset(); };
	ColorM.ptr.prototype.Apply = function(clr) {
		var _r, c, clr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; clr = $f.clr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.impl.Apply(clr); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ColorM.ptr.prototype.Apply }; } $f._r = _r; $f.c = c; $f.clr = clr; $f.$s = $s; $f.$r = $r; return $f;
	};
	ColorM.prototype.Apply = function(clr) { return this.$val.Apply(clr); };
	ColorM.ptr.prototype.Concat = function(other) {
		var c, other;
		c = this;
		c.impl = c.impl.Concat(other.impl);
	};
	ColorM.prototype.Concat = function(other) { return this.$val.Concat(other); };
	ColorM.ptr.prototype.Add = function(other) {
		var c, other;
		c = this;
		c.impl = c.impl.Add(other.impl);
	};
	ColorM.prototype.Add = function(other) { return this.$val.Add(other); };
	ColorM.ptr.prototype.Scale = function(r, g, b, a) {
		var a, b, c, g, r;
		c = this;
		c.impl = c.impl.Scale(($fround(r)), ($fround(g)), ($fround(b)), ($fround(a)));
	};
	ColorM.prototype.Scale = function(r, g, b, a) { return this.$val.Scale(r, g, b, a); };
	ColorM.ptr.prototype.Translate = function(r, g, b, a) {
		var a, b, c, g, r;
		c = this;
		c.impl = c.impl.Translate(($fround(r)), ($fround(g)), ($fround(b)), ($fround(a)));
	};
	ColorM.prototype.Translate = function(r, g, b, a) { return this.$val.Translate(r, g, b, a); };
	ColorM.ptr.prototype.RotateHue = function(theta) {
		var c, theta;
		c = this;
		c.ChangeHSV(theta, 1, 1);
	};
	ColorM.prototype.RotateHue = function(theta) { return this.$val.RotateHue(theta); };
	ColorM.ptr.prototype.ChangeHSV = function(hueTheta, saturationScale, valueScale) {
		var c, hueTheta, saturationScale, valueScale;
		c = this;
		c.impl = c.impl.ChangeHSV(hueTheta, ($fround(saturationScale)), ($fround(valueScale)));
	};
	ColorM.prototype.ChangeHSV = function(hueTheta, saturationScale, valueScale) { return this.$val.ChangeHSV(hueTheta, saturationScale, valueScale); };
	ColorM.ptr.prototype.Element = function(i, j) {
		var _tuple, b, c, i, j, t, x;
		c = this;
		_tuple = c.impl.UnsafeElements();
		b = _tuple[0];
		t = _tuple[1];
		if (j < 4) {
			return ((x = i + ($imul(j, 4)) >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])));
		}
		return (((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]));
	};
	ColorM.prototype.Element = function(i, j) { return this.$val.Element(i, j); };
	ColorM.ptr.prototype.SetElement = function(i, j, element) {
		var c, element, i, j;
		c = this;
		c.impl = c.impl.SetElement(i, j, ($fround(element)));
	};
	ColorM.prototype.SetElement = function(i, j, element) { return this.$val.SetElement(i, j, element); };
	isDebug = function() {
		return false;
	};
	GeoM.ptr.prototype.String = function() {
		var _r, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = fmt.Sprintf("[[%f, %f, %f], [%f, %f, %f]]", new sliceType([new $Float32($fround(g.a_1 + 1)), new $Float32(g.b), new $Float32(g.tx), new $Float32(g.c), new $Float32($fround(g.d_1 + 1)), new $Float32(g.ty)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: GeoM.ptr.prototype.String }; } $f._r = _r; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	GeoM.prototype.String = function() { return this.$val.String(); };
	GeoM.ptr.prototype.Reset = function() {
		var g;
		g = this;
		g.a_1 = 0;
		g.b = 0;
		g.c = 0;
		g.d_1 = 0;
		g.tx = 0;
		g.ty = 0;
	};
	GeoM.prototype.Reset = function() { return this.$val.Reset(); };
	GeoM.ptr.prototype.Apply = function(x, y) {
		var _tuple, g, x, x2, y, y2;
		g = this;
		_tuple = g.apply32(($fround(x)), ($fround(y)));
		x2 = _tuple[0];
		y2 = _tuple[1];
		return [(x2), (y2)];
	};
	GeoM.prototype.Apply = function(x, y) { return this.$val.Apply(x, y); };
	GeoM.ptr.prototype.apply32 = function(x, y) {
		var _tmp, _tmp$1, g, x, x2, y, y2;
		x2 = 0;
		y2 = 0;
		g = this;
		_tmp = $fround($fround($fround(($fround(g.a_1 + 1)) * x) + $fround(g.b * y)) + g.tx);
		_tmp$1 = $fround($fround($fround(g.c * x) + $fround(($fround(g.d_1 + 1)) * y)) + g.ty);
		x2 = _tmp;
		y2 = _tmp$1;
		return [x2, y2];
	};
	GeoM.prototype.apply32 = function(x, y) { return this.$val.apply32(x, y); };
	GeoM.ptr.prototype.elements = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, c, d, g, tx, ty;
		a = 0;
		b = 0;
		c = 0;
		d = 0;
		tx = 0;
		ty = 0;
		g = this;
		_tmp = $fround(g.a_1 + 1);
		_tmp$1 = g.b;
		_tmp$2 = g.c;
		_tmp$3 = $fround(g.d_1 + 1);
		_tmp$4 = g.tx;
		_tmp$5 = g.ty;
		a = _tmp;
		b = _tmp$1;
		c = _tmp$2;
		d = _tmp$3;
		tx = _tmp$4;
		ty = _tmp$5;
		return [a, b, c, d, tx, ty];
	};
	GeoM.prototype.elements = function() { return this.$val.elements(); };
	GeoM.ptr.prototype.Element = function(i, j) {
		var g, i, j;
		g = this;
		if ((i === 0) && (j === 0)) {
			return (g.a_1) + 1;
		} else if ((i === 0) && (j === 1)) {
			return (g.b);
		} else if ((i === 0) && (j === 2)) {
			return (g.tx);
		} else if ((i === 1) && (j === 0)) {
			return (g.c);
		} else if ((i === 1) && (j === 1)) {
			return (g.d_1) + 1;
		} else if ((i === 1) && (j === 2)) {
			return (g.ty);
		} else {
			$panic(new $String("ebiten: i or j is out of index"));
		}
	};
	GeoM.prototype.Element = function(i, j) { return this.$val.Element(i, j); };
	GeoM.ptr.prototype.Concat = function(other) {
		var a, b, c, d, g, other, tx, ty;
		g = this;
		a = $fround($fround(($fround(other.a_1 + 1)) * ($fround(g.a_1 + 1))) + $fround(other.b * g.c));
		b = $fround($fround(($fround(other.a_1 + 1)) * g.b) + $fround(other.b * ($fround(g.d_1 + 1))));
		tx = $fround($fround($fround(($fround(other.a_1 + 1)) * g.tx) + $fround(other.b * g.ty)) + other.tx);
		c = $fround($fround(other.c * ($fround(g.a_1 + 1))) + $fround(($fround(other.d_1 + 1)) * g.c));
		d = $fround($fround(other.c * g.b) + $fround(($fround(other.d_1 + 1)) * ($fround(g.d_1 + 1))));
		ty = $fround($fround($fround(other.c * g.tx) + $fround(($fround(other.d_1 + 1)) * g.ty)) + other.ty);
		g.a_1 = $fround(a - 1);
		g.b = b;
		g.c = c;
		g.d_1 = $fround(d - 1);
		g.tx = tx;
		g.ty = ty;
	};
	GeoM.prototype.Concat = function(other) { return this.$val.Concat(other); };
	GeoM.ptr.prototype.Add = function(other) {
		var g, other;
		g = this;
		g.a_1 = $fround(g.a_1 + (other.a_1));
		g.b = $fround(g.b + (other.b));
		g.c = $fround(g.c + (other.c));
		g.d_1 = $fround(g.d_1 + (other.d_1));
		g.tx = $fround(g.tx + (other.tx));
		g.ty = $fround(g.ty + (other.ty));
	};
	GeoM.prototype.Add = function(other) { return this.$val.Add(other); };
	GeoM.ptr.prototype.Scale = function(x, y) {
		var a, b, c, d, g, tx, ty, x, y;
		g = this;
		a = ((g.a_1) + 1) * x;
		b = (g.b) * x;
		tx = (g.tx) * x;
		c = (g.c) * y;
		d = ((g.d_1) + 1) * y;
		ty = (g.ty) * y;
		g.a_1 = $fround(($fround(a)) - 1);
		g.b = ($fround(b));
		g.c = ($fround(c));
		g.d_1 = $fround(($fround(d)) - 1);
		g.tx = ($fround(tx));
		g.ty = ($fround(ty));
	};
	GeoM.prototype.Scale = function(x, y) { return this.$val.Scale(x, y); };
	GeoM.ptr.prototype.Translate = function(tx, ty) {
		var g, tx, ty;
		g = this;
		g.tx = $fround(g.tx + (($fround(tx))));
		g.ty = $fround(g.ty + (($fround(ty))));
	};
	GeoM.prototype.Translate = function(tx, ty) { return this.$val.Translate(tx, ty); };
	GeoM.ptr.prototype.Rotate = function(theta) {
		var _tmp, _tmp$1, _tuple, a, b, c, cos, cos64, d, g, sin, sin64, theta, tx, ty;
		g = this;
		if (theta === 0) {
			return;
		}
		_tuple = math.Sincos(theta);
		sin64 = _tuple[0];
		cos64 = _tuple[1];
		_tmp = ($fround(sin64));
		_tmp$1 = ($fround(cos64));
		sin = _tmp;
		cos = _tmp$1;
		a = $fround($fround(cos * ($fround(g.a_1 + 1))) - $fround(sin * g.c));
		b = $fround($fround(cos * g.b) - $fround(sin * ($fround(g.d_1 + 1))));
		tx = $fround($fround(cos * g.tx) - $fround(sin * g.ty));
		c = $fround($fround(sin * ($fround(g.a_1 + 1))) + $fround(cos * g.c));
		d = $fround($fround(sin * g.b) + $fround(cos * ($fround(g.d_1 + 1))));
		ty = $fround($fround(sin * g.tx) + $fround(cos * g.ty));
		g.a_1 = $fround(a - 1);
		g.b = b;
		g.c = c;
		g.d_1 = $fround(d - 1);
		g.tx = tx;
		g.ty = ty;
	};
	GeoM.prototype.Rotate = function(theta) { return this.$val.Rotate(theta); };
	GeoM.ptr.prototype.Skew = function(skewX, skewY) {
		var _tmp, _tmp$1, a, b, c, d, g, skewX, skewY, sx, sx64, sy, sy64, tx, ty;
		g = this;
		sx64 = math.Tan(skewX);
		sy64 = math.Tan(skewY);
		_tmp = ($fround(sx64));
		_tmp$1 = ($fround(sy64));
		sx = _tmp;
		sy = _tmp$1;
		a = $fround(($fround(g.a_1 + 1)) + $fround(g.c * sx));
		b = $fround(g.b + $fround(($fround(g.d_1 + 1)) * sx));
		c = $fround($fround(($fround(g.a_1 + 1)) * sy) + g.c);
		d = $fround($fround(g.b * sy) + ($fround(g.d_1 + 1)));
		tx = $fround(g.tx + $fround(g.ty * sx));
		ty = $fround(g.ty + $fround(g.tx * sy));
		g.a_1 = $fround(a - 1);
		g.b = b;
		g.c = c;
		g.d_1 = $fround(d - 1);
		g.tx = tx;
		g.ty = ty;
	};
	GeoM.prototype.Skew = function(skewX, skewY) { return this.$val.Skew(skewX, skewY); };
	GeoM.ptr.prototype.det = function() {
		var g;
		g = this;
		return $fround($fround(($fround(g.a_1 + 1)) * ($fround(g.d_1 + 1))) - $fround(g.b * g.c));
	};
	GeoM.prototype.det = function() { return this.$val.det(); };
	GeoM.ptr.prototype.IsInvertible = function() {
		var g;
		g = this;
		return !((g.det() === 0));
	};
	GeoM.prototype.IsInvertible = function() { return this.$val.IsInvertible(); };
	GeoM.ptr.prototype.Invert = function() {
		var a, b, c, d, det, g, tx, ty;
		g = this;
		det = g.det();
		if (det === 0) {
			$panic(new $String("ebiten: g is not invertible"));
		}
		a = $fround(($fround(g.d_1 + 1)) / det);
		b = $fround(-g.b / det);
		c = $fround(-g.c / det);
		d = $fround(($fround(g.a_1 + 1)) / det);
		tx = $fround(($fround($fround(-($fround(g.d_1 + 1)) * g.tx) + $fround(g.b * g.ty))) / det);
		ty = $fround(($fround($fround(g.c * g.tx) + $fround(-($fround(g.a_1 + 1)) * g.ty))) / det);
		g.a_1 = $fround(a - 1);
		g.b = b;
		g.c = c;
		g.d_1 = $fround(d - 1);
		g.tx = tx;
		g.ty = ty;
	};
	GeoM.prototype.Invert = function() { return this.$val.Invert(); };
	GeoM.ptr.prototype.SetElement = function(i, j, element) {
		var e, element, g, i, j;
		g = this;
		e = ($fround(element));
		if ((i === 0) && (j === 0)) {
			g.a_1 = $fround(e - 1);
		} else if ((i === 0) && (j === 1)) {
			g.b = e;
		} else if ((i === 0) && (j === 2)) {
			g.tx = e;
		} else if ((i === 1) && (j === 0)) {
			g.c = e;
		} else if ((i === 1) && (j === 1)) {
			g.d_1 = $fround(e - 1);
		} else if ((i === 1) && (j === 2)) {
			g.ty = e;
		} else {
			$panic(new $String("ebiten: i or j is out of index"));
		}
	};
	GeoM.prototype.SetElement = function(i, j, element) { return this.$val.SetElement(i, j, element); };
	newGraphicsContext = function(f) {
		var f;
		return new graphicsContext.ptr(f, ptrType.nil, ptrType.nil, 0, false, false, 0, 0);
	};
	graphicsContext.ptr.prototype.Invalidate = function() {
		var c;
		c = this;
		c.invalidated = true;
	};
	graphicsContext.prototype.Invalidate = function() { return this.$val.Invalidate(); };
	graphicsContext.ptr.prototype.SetSize = function(screenWidth, screenHeight, screenScale) {
		var _r, _r$1, _r$2, _r$3, _tuple, c, h, px0, py0, screenHeight, screenScale, screenWidth, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; c = $f.c; h = $f.h; px0 = $f.px0; py0 = $f.py0; screenHeight = $f.screenHeight; screenScale = $f.screenScale; screenWidth = $f.screenWidth; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		c.screenScale = screenScale;
		/* */ if (!(c.screen === ptrType.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(c.screen === ptrType.nil)) { */ case 1:
			_r = c.screen.Dispose(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$unused(_r);
		/* } */ case 2:
		/* */ if (!(c.offscreen === ptrType.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(c.offscreen === ptrType.nil)) { */ case 4:
			_r$1 = c.offscreen.Dispose(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$unused(_r$1);
		/* } */ case 5:
		_r$2 = newVolatileImage(screenWidth, screenHeight); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		c.offscreen = _r$2;
		w = (((screenWidth) * screenScale >> 0));
		h = (((screenHeight) * screenScale >> 0));
		_tuple = ui.ScreenPadding();
		px0 = _tuple[0];
		py0 = _tuple[1];
		_r$3 = newImageWithScreenFramebuffer(w, h); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		c.screen = _r$3;
		c.offsetX = px0;
		c.offsetY = py0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: graphicsContext.ptr.prototype.SetSize }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.c = c; $f.h = h; $f.px0 = px0; $f.py0 = py0; $f.screenHeight = screenHeight; $f.screenScale = screenScale; $f.screenWidth = screenWidth; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	graphicsContext.prototype.SetSize = function(screenWidth, screenHeight, screenScale) { return this.$val.SetSize(screenWidth, screenHeight, screenScale); };
	graphicsContext.ptr.prototype.initializeIfNeeded = function() {
		var _r, _r$1, c, err, err$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; err = $f.err; err$1 = $f.err$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (!c.initialized) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!c.initialized) { */ case 1:
			_r = shareable.InitializeGLState(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			c.initialized = true;
		/* } */ case 2:
		_r$1 = c.restoreIfNeeded(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$1 = _r$1;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: graphicsContext.ptr.prototype.initializeIfNeeded }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	graphicsContext.prototype.initializeIfNeeded = function() { return this.$val.initializeIfNeeded(); };
	graphicsContext.ptr.prototype.Update = function(afterFrameUpdate) {
		var _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, afterFrameUpdate, c, dh, err, err$1, err$2, err$3, h, i, op, op$1, s, tps, updateCount, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; afterFrameUpdate = $f.afterFrameUpdate; c = $f.c; dh = $f.dh; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; h = $f.h; i = $f.i; op = $f.op; op$1 = $f.op$1; s = $f.s; tps = $f.tps; updateCount = $f.updateCount; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		tps = (MaxTPS());
		_r = clock.Update(tps); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		updateCount = _r;
		_r$1 = c.initializeIfNeeded(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		i = 0;
		/* while (true) { */ case 3:
			/* if (!(i < updateCount)) { break; } */ if(!(i < updateCount)) { $s = 4; continue; }
			$r = c.offscreen.fill(0, 0, 0, 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			setDrawingSkipped(i < (updateCount - 1 >> 0));
			_r$2 = hooks.RunBeforeUpdateHooks(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$1 = _r$2;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return err$1;
			}
			_r$3 = c.f(c.offscreen); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err$2 = _r$3;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
			$r = afterFrameUpdate(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 3; continue; case 4:
		/* */ if (c.offsetX > 0 || c.offsetY > 0) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (c.offsetX > 0 || c.offsetY > 0) { */ case 9:
			op = new DrawImageOptions.ptr(ptrType$2.nil, new GeoM.ptr(0, 0, 0, 0, 0, 0), new ColorM.ptr(ptrType$1.nil), 0, 0, $ifaceNil, sliceType$1.nil);
			_tuple = emptyImage.Size();
			w = _tuple[0];
			h = _tuple[1];
			_r$4 = graphics.MaxImageSize(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			s = (_r$4);
			op.GeoM.Scale(s / (w), s / (h));
			op.CompositeMode = 2;
			_r$5 = c.screen.DrawImage(emptyImage, op); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 10:
		_tuple$1 = c.screen.Size();
		dh = _tuple$1[1];
		op$1 = new DrawImageOptions.ptr(ptrType$2.nil, new GeoM.ptr(0, 0, 0, 0, 0, 0), new ColorM.ptr(ptrType$1.nil), 0, 0, $ifaceNil, sliceType$1.nil);
		op$1.GeoM.Scale(c.screenScale, -c.screenScale);
		op$1.GeoM.Translate(0, (($imul((_q = ((dh + 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 2))));
		op$1.GeoM.Translate(c.offsetX, c.offsetY);
		op$1.CompositeMode = 2;
		op$1.Filter = 3;
		_r$6 = c.screen.DrawImage(c.offscreen, op$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$unused(_r$6);
		$r = shareable.ResolveStaleImages(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$7 = shareable.Error(); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		err$3 = _r$7;
		if (!($interfaceIsEqual(err$3, $ifaceNil))) {
			$s = -1; return err$3;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: graphicsContext.ptr.prototype.Update }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.afterFrameUpdate = afterFrameUpdate; $f.c = c; $f.dh = dh; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.h = h; $f.i = i; $f.op = op; $f.op$1 = op$1; $f.s = s; $f.tps = tps; $f.updateCount = updateCount; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	graphicsContext.prototype.Update = function(afterFrameUpdate) { return this.$val.Update(afterFrameUpdate); };
	graphicsContext.ptr.prototype.needsRestoring = function() {
		var _r, c, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (web.IsBrowser()) {
			$s = -1; return [c.invalidated, $ifaceNil];
		}
		_r = (x = c.offscreen.shareableImages, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).IsInvalidated(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: graphicsContext.ptr.prototype.needsRestoring }; } $f._r = _r; $f.c = c; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	graphicsContext.prototype.needsRestoring = function() { return this.$val.needsRestoring(); };
	graphicsContext.ptr.prototype.restoreIfNeeded = function() {
		var _r, _r$1, _tuple, c, err, err$1, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; c = $f.c; err = $f.err; err$1 = $f.err$1; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (!shareable.IsRestoringEnabled()) {
			$s = -1; return $ifaceNil;
		}
		_r = c.needsRestoring(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (!r) {
			$s = -1; return $ifaceNil;
		}
		_r$1 = shareable.Restore(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$1 = _r$1;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		c.invalidated = false;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: graphicsContext.ptr.prototype.restoreIfNeeded }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	graphicsContext.prototype.restoreIfNeeded = function() { return this.$val.restoreIfNeeded(); };
	init = function() {
		var _tuple;
		_tuple = NewImage(16, 16, 0);
		emptyImage = _tuple[0];
	};
	Image.ptr.prototype.copyCheck = function() {
		var i;
		i = this;
		if (!(i.addr === i)) {
			$panic(new $String("ebiten: illegal use of non-zero Image copied by value"));
		}
	};
	Image.prototype.copyCheck = function() { return this.$val.copyCheck(); };
	Image.ptr.prototype.Size = function() {
		var _tuple, height, i, width, x;
		width = 0;
		height = 0;
		i = this;
		_tuple = (x = i.shareableImages, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).Size();
		width = _tuple[0];
		height = _tuple[1];
		return [width, height];
	};
	Image.prototype.Size = function() { return this.$val.Size(); };
	Image.ptr.prototype.isDisposed = function() {
		var i;
		i = this;
		return i.shareableImages.$length === 0;
	};
	Image.prototype.isDisposed = function() { return this.$val.isDisposed(); };
	Image.ptr.prototype.Clear = function() {
		var i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		i.copyCheck();
		if (i.isDisposed()) {
			$s = -1; return $ifaceNil;
		}
		$r = i.fill(0, 0, 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.Clear }; } $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.Clear = function() { return this.$val.Clear(); };
	Image.ptr.prototype.Fill = function(clr) {
		var _r, _tuple, a, b, clr, g, i, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; b = $f.b; clr = $f.clr; g = $f.g; i = $f.i; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		i.copyCheck();
		if (i.isDisposed()) {
			$s = -1; return $ifaceNil;
		}
		_r = clr.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		g = _tuple[1];
		b = _tuple[2];
		a = _tuple[3];
		$r = i.fill((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), (((a >>> 8 >>> 0) << 24 >>> 24))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.Fill }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.clr = clr; $f.g = g; $f.i = i; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.Fill = function(clr) { return this.$val.Fill(clr); };
	Image.ptr.prototype.fill = function(r, g, b, a) {
		var _r, _tuple, _tuple$1, a, af, b, bf, g, gf, hd, hs, i, i$1, op, pix, r, rf, sh, sw, wd, ws, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; af = $f.af; b = $f.b; bf = $f.bf; g = $f.g; gf = $f.gf; hd = $f.hd; hs = $f.hs; i = $f.i; i$1 = $f.i$1; op = $f.op; pix = $f.pix; r = $f.r; rf = $f.rf; sh = $f.sh; sw = $f.sw; wd = $f.wd; ws = $f.ws; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		/* */ if ((r === 0) && (g === 0) && (b === 0) && (a === 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((r === 0) && (g === 0) && (b === 0) && (a === 0)) { */ case 1:
			$r = (x = i.shareableImages, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).ReplacePixels(sliceType$2.nil); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = i.disposeMipmaps(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		_tuple = i.Size();
		wd = _tuple[0];
		hd = _tuple[1];
		/* */ if (($imul(wd, hd)) <= 256) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (($imul(wd, hd)) <= 256) { */ case 5:
			pix = $makeSlice(sliceType$2, ($imul(($imul(4, wd)), hd)));
			i$1 = 0;
			while (true) {
				if (!(i$1 < ($imul(wd, hd)))) { break; }
				(x$1 = $imul(4, i$1), ((x$1 < 0 || x$1 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$1] = r));
				(x$2 = ($imul(4, i$1)) + 1 >> 0, ((x$2 < 0 || x$2 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$2] = g));
				(x$3 = ($imul(4, i$1)) + 2 >> 0, ((x$3 < 0 || x$3 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$3] = b));
				(x$4 = ($imul(4, i$1)) + 3 >> 0, ((x$4 < 0 || x$4 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$4] = a));
				i$1 = i$1 + (1) >> 0;
			}
			_r = i.ReplacePixels(pix); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = -1; return;
		/* } */ case 6:
		_tuple$1 = emptyImage.Size();
		ws = _tuple$1[0];
		hs = _tuple$1[1];
		sw = (wd) / (ws);
		sh = (hd) / (hs);
		op = new DrawImageOptions.ptr(ptrType$2.nil, new GeoM.ptr(0, 0, 0, 0, 0, 0), new ColorM.ptr(ptrType$1.nil), 0, 0, $ifaceNil, sliceType$1.nil);
		op.GeoM.Scale(sw, sh);
		if (a > 0) {
			rf = (r) / (a);
			gf = (g) / (a);
			bf = (b) / (a);
			af = (a) / 255;
			op.ColorM.Translate(rf, gf, bf, af);
		}
		op.CompositeMode = 2;
		op.Filter = 1;
		$r = i.drawImage(emptyImage, op); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.fill }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.af = af; $f.b = b; $f.bf = bf; $f.g = g; $f.gf = gf; $f.hd = hd; $f.hs = hs; $f.i = i; $f.i$1 = i$1; $f.op = op; $f.pix = pix; $f.r = r; $f.rf = rf; $f.sh = sh; $f.sw = sw; $f.wd = wd; $f.ws = ws; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.fill = function(r, g, b, a) { return this.$val.fill(r, g, b, a); };
	Image.ptr.prototype.disposeMipmaps = function() {
		var i, idx, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; idx = $f.idx; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (i.isDisposed()) {
			$panic(new $String("not reached"));
		}
		idx = 1;
		/* while (true) { */ case 1:
			/* if (!(idx < i.shareableImages.$length)) { break; } */ if(!(idx < i.shareableImages.$length)) { $s = 2; continue; }
			$r = (x = i.shareableImages, ((idx < 0 || idx >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + idx])).Dispose(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			idx = idx + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i.shareableImages = $subslice(i.shareableImages, 0, 1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.disposeMipmaps }; } $f.i = i; $f.idx = idx; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.disposeMipmaps = function() { return this.$val.disposeMipmaps(); };
	Image.ptr.prototype.DrawImage = function(img, options) {
		var i, img, options, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; img = $f.img; options = $f.options; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		$r = i.drawImage(img, options); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.DrawImage }; } $f.i = i; $f.img = img; $f.options = options; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.DrawImage = function(img, options) { return this.$val.DrawImage(img, options); };
	Image.ptr.prototype.drawImage = function(img, options) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, b, body, c, ca, cb, cg, colorm, cr, d, det, dx, dx0, dx1, dy, dy0, dy1, filter, geom, h, h2, i, idx, img, is, is$1, l, lastl, level, mode, op, options, parts, r, r$1, s, s$1, src, src$1, sx0, sx0$1, sx1, sx1$1, sy0, sy0$1, sy1, sy1$1, tx, ty, vs, vs$1, w, w2, x, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; a = $f.a; b = $f.b; body = $f.body; c = $f.c; ca = $f.ca; cb = $f.cb; cg = $f.cg; colorm = $f.colorm; cr = $f.cr; d = $f.d; det = $f.det; dx = $f.dx; dx0 = $f.dx0; dx1 = $f.dx1; dy = $f.dy; dy0 = $f.dy0; dy1 = $f.dy1; filter = $f.filter; geom = $f.geom; h = $f.h; h2 = $f.h2; i = $f.i; idx = $f.idx; img = $f.img; is = $f.is; is$1 = $f.is$1; l = $f.l; lastl = $f.lastl; level = $f.level; mode = $f.mode; op = $f.op; options = $f.options; parts = $f.parts; r = $f.r; r$1 = $f.r$1; s = $f.s; s$1 = $f.s$1; src = $f.src; src$1 = $f.src$1; sx0 = $f.sx0; sx0$1 = $f.sx0$1; sx1 = $f.sx1; sx1$1 = $f.sx1$1; sy0 = $f.sy0; sy0$1 = $f.sy0$1; sy1 = $f.sy1; sy1$1 = $f.sy1$1; tx = $f.tx; ty = $f.ty; vs = $f.vs; vs$1 = $f.vs$1; w = $f.w; w2 = $f.w2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		i.copyCheck();
		if (img.isDisposed()) {
			$panic(new $String("ebiten: the given image to DrawImage must not be disposed"));
		}
		if (i.isDisposed()) {
			$s = -1; return;
		}
		if (options === ptrType$3.nil) {
			options = new DrawImageOptions.ptr(ptrType$2.nil, new GeoM.ptr(0, 0, 0, 0, 0, 0), new ColorM.ptr(ptrType$1.nil), 0, 0, $ifaceNil, sliceType$1.nil);
		}
		parts = options.ImageParts;
		if ($interfaceIsEqual(parts, $ifaceNil) && !(options.Parts === sliceType$1.nil)) {
			parts = ((x = options.Parts, $subslice(new imageParts(x.$array), x.$offset, x.$offset + x.$length)));
		}
		/* */ if (!($interfaceIsEqual(parts, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(parts, $ifaceNil))) { */ case 1:
			_r = parts.Len(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
			idx = 0;
			/* while (true) { */ case 4:
				/* if (!(idx < l)) { break; } */ if(!(idx < l)) { $s = 5; continue; }
				r = [r];
				_r$1 = parts.Src(idx); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				sx0 = _tuple[0];
				sy0 = _tuple[1];
				sx1 = _tuple[2];
				sy1 = _tuple[3];
				_r$2 = parts.Dst(idx); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				dx0 = _tuple$1[0];
				dy0 = _tuple$1[1];
				dx1 = _tuple$1[2];
				dy1 = _tuple$1[3];
				op = new DrawImageOptions.ptr(ptrType$2.nil, new GeoM.ptr(0, 0, 0, 0, 0, 0), $clone(options.ColorM, ColorM), options.CompositeMode, 0, $ifaceNil, sliceType$1.nil);
				r[0] = $clone(image.Rect(sx0, sy0, sx1, sy1), image.Rectangle);
				op.SourceRect = r[0];
				op.GeoM.Scale(((dx1 - dx0 >> 0)) / ((sx1 - sx0 >> 0)), ((dy1 - dy0 >> 0)) / ((sy1 - sy0 >> 0)));
				op.GeoM.Translate((dx0), (dy0));
				op.GeoM.Concat($clone(options.GeoM, GeoM));
				_r$3 = i.DrawImage(img, op); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				idx = idx + (1) >> 0;
			/* } */ $s = 4; continue; case 5:
			$s = -1; return;
		/* } */ case 2:
		_tuple$2 = img.Size();
		w = _tuple$2[0];
		h = _tuple$2[1];
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = w;
		_tmp$3 = h;
		sx0$1 = _tmp;
		sy0$1 = _tmp$1;
		sx1$1 = _tmp$2;
		sy1$1 = _tmp$3;
		r$1 = options.SourceRect;
		if (!(r$1 === ptrType$2.nil)) {
			sx0$1 = r$1.Min.X;
			sy0$1 = r$1.Min.Y;
			if (sx1$1 > r$1.Max.X) {
				sx1$1 = r$1.Max.X;
			}
			if (sy1$1 > r$1.Max.Y) {
				sy1$1 = r$1.Max.Y;
			}
		}
		geom = options.GeoM;
		if (sx0$1 < 0 || sy0$1 < 0) {
			dx = 0;
			dy = 0;
			if (sx0$1 < 0) {
				dx = -(sx0$1);
				sx0$1 = 0;
			}
			if (sy0$1 < 0) {
				dy = -(sy0$1);
				sy0$1 = 0;
			}
			geom = new GeoM.ptr(0, 0, 0, 0, 0, 0);
			geom.Translate(dx, dy);
			geom.Concat($clone(options.GeoM, GeoM));
		}
		mode = ((options.CompositeMode >> 0));
		filter = 1;
		if (!((options.Filter === 0))) {
			filter = ((options.Filter >> 0));
		} else if (!((img.filter === 0))) {
			filter = ((img.filter >> 0));
		}
		_tuple$3 = geom.elements();
		a = _tuple$3[0];
		b = _tuple$3[1];
		c = _tuple$3[2];
		d = _tuple$3[3];
		tx = _tuple$3[4];
		ty = _tuple$3[5];
		level = 0;
		if (filter === 2) {
			det = geom.det();
			if (det === 0) {
				$s = -1; return;
			}
			if (math.IsNaN((det))) {
				$s = -1; return;
			}
			level = graphicsutil.MipmapLevel(det);
			if (level < 0) {
				$panic(new $String("not reached"));
			}
		}
		if (level > 6) {
			level = 6;
		}
		if (level > 0) {
			s = (y = ((level >>> 0)), y < 32 ? (1 << y) : 0) >> 0;
			a = $fround(a * ((s)));
			b = $fround(b * ((s)));
			c = $fround(c * ((s)));
			d = $fround(d * ((s)));
			sx0$1 = (_q = sx0$1 / s, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			sy0$1 = (_q$1 = sy0$1 / s, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			sx1$1 = (_q$2 = sx1$1 / s, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
			sy1$1 = (_q$3 = sy1$1 / s, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		_tuple$4 = (x$1 = img.shareableImages, x$2 = img.shareableImages.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])).Size();
		w = _tuple$4[0];
		h = _tuple$4[1];
		/* while (true) { */ case 9:
			/* if (!(img.shareableImages.$length < (level + 1 >> 0))) { break; } */ if(!(img.shareableImages.$length < (level + 1 >> 0))) { $s = 10; continue; }
			lastl = img.shareableImages.$length - 1 >> 0;
			src = (x$3 = img.shareableImages, ((lastl < 0 || lastl >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + lastl]));
			w2 = (_q$4 = w / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
			h2 = (_q$5 = h / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
			if ((w2 === 0) || (h2 === 0)) {
				/* break; */ $s = 10; continue;
			}
			s$1 = ptrType$4.nil;
			_r$4 = (x$4 = img.shareableImages, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).IsVolatile(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_r$4) { */ case 11:
				_r$5 = shareable.NewVolatileImage(w2, h2); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				s$1 = _r$5;
				$s = 13; continue;
			/* } else { */ case 12:
				s$1 = shareable.NewImage(w2, h2);
			/* } */ case 13:
			_r$6 = src.QuadVertices(0, 0, w, h, 0.5, 0, 0, 0.5, 0, 0, 1, 1, 1, 1); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			vs = _r$6;
			is = graphicsutil.QuadIndices();
			$r = s$1.DrawImage(src, vs, is, options.ColorM.impl, 2, 2); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			img.shareableImages = $append(img.shareableImages, s$1);
			w = w2;
			h = h2;
		/* } */ $s = 9; continue; case 10:
		/* */ if (level < img.shareableImages.$length) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (level < img.shareableImages.$length) { */ case 18:
			src$1 = (x$5 = img.shareableImages, ((level < 0 || level >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + level]));
			colorm = options.ColorM.impl;
			_tmp$4 = 1;
			_tmp$5 = 1;
			_tmp$6 = 1;
			_tmp$7 = 1;
			cr = _tmp$4;
			cg = _tmp$5;
			cb = _tmp$6;
			ca = _tmp$7;
			if (colorm.ScaleOnly()) {
				_tuple$5 = colorm.UnsafeElements();
				body = _tuple$5[0];
				cr = (0 >= body.$length ? ($throwRuntimeError("index out of range"), undefined) : body.$array[body.$offset + 0]);
				cg = (5 >= body.$length ? ($throwRuntimeError("index out of range"), undefined) : body.$array[body.$offset + 5]);
				cb = (10 >= body.$length ? ($throwRuntimeError("index out of range"), undefined) : body.$array[body.$offset + 10]);
				ca = (15 >= body.$length ? ($throwRuntimeError("index out of range"), undefined) : body.$array[body.$offset + 15]);
			}
			_r$7 = src$1.QuadVertices(sx0$1, sy0$1, sx1$1, sy1$1, a, b, c, d, tx, ty, cr, cg, cb, ca); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			vs$1 = _r$7;
			is$1 = graphicsutil.QuadIndices();
			if (colorm.ScaleOnly()) {
				colorm = ptrType$1.nil;
			}
			$r = (x$6 = i.shareableImages, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0])).DrawImage(src$1, vs$1, is$1, colorm, mode, filter); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 19:
		$r = i.disposeMipmaps(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.drawImage }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.a = a; $f.b = b; $f.body = body; $f.c = c; $f.ca = ca; $f.cb = cb; $f.cg = cg; $f.colorm = colorm; $f.cr = cr; $f.d = d; $f.det = det; $f.dx = dx; $f.dx0 = dx0; $f.dx1 = dx1; $f.dy = dy; $f.dy0 = dy0; $f.dy1 = dy1; $f.filter = filter; $f.geom = geom; $f.h = h; $f.h2 = h2; $f.i = i; $f.idx = idx; $f.img = img; $f.is = is; $f.is$1 = is$1; $f.l = l; $f.lastl = lastl; $f.level = level; $f.mode = mode; $f.op = op; $f.options = options; $f.parts = parts; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.s$1 = s$1; $f.src = src; $f.src$1 = src$1; $f.sx0 = sx0; $f.sx0$1 = sx0$1; $f.sx1 = sx1; $f.sx1$1 = sx1$1; $f.sy0 = sy0; $f.sy0$1 = sy0$1; $f.sy1 = sy1; $f.sy1$1 = sy1$1; $f.tx = tx; $f.ty = ty; $f.vs = vs; $f.vs$1 = vs$1; $f.w = w; $f.w2 = w2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.drawImage = function(img, options) { return this.$val.drawImage(img, options); };
	Image.ptr.prototype.DrawTriangles = function(vertices, indices, img, options) {
		var _arg, _arg$1, _i, _r, _r$1, _ref, filter, i, img, indices, mode, options, src, v, vertices, vs, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; filter = $f.filter; i = $f.i; img = $f.img; indices = $f.indices; mode = $f.mode; options = $f.options; src = $f.src; v = $f.v; vertices = $f.vertices; vs = $f.vs; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (!(((_r = indices.$length % 3, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
			$panic(new $String("ebiten: len(indices) % 3 must be 0"));
		}
		if (options === ptrType$5.nil) {
			options = new DrawTrianglesOptions.ptr(new ColorM.ptr(ptrType$1.nil), 0, 0);
		}
		mode = ((options.CompositeMode >> 0));
		filter = 1;
		if (!((options.Filter === 0))) {
			filter = ((options.Filter >> 0));
		} else if (!((img.filter === 0))) {
			filter = ((img.filter >> 0));
		}
		vs = new sliceType$3([]);
		src = (x = img.shareableImages, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		_ref = vertices;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			v = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), Vertex);
			_arg = vs;
			_r$1 = src.Vertex((v.DstX), (v.DstY), v.SrcX, v.SrcY, v.ColorR, v.ColorG, v.ColorB, v.ColorA); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = _r$1;
			vs = $appendSlice(_arg, _arg$1);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = (x$1 = i.shareableImages, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])).DrawImage((x$2 = img.shareableImages, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])), vs, indices, options.ColorM.impl, mode, filter); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.DrawTriangles }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.filter = filter; $f.i = i; $f.img = img; $f.indices = indices; $f.mode = mode; $f.options = options; $f.src = src; $f.v = v; $f.vertices = vertices; $f.vs = vs; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.DrawTriangles = function(vertices, indices, img, options) { return this.$val.DrawTriangles(vertices, indices, img, options); };
	Image.ptr.prototype.Bounds = function() {
		var _tuple, h, i, w;
		i = this;
		_tuple = i.Size();
		w = _tuple[0];
		h = _tuple[1];
		return image.Rect(0, 0, w, h);
	};
	Image.prototype.Bounds = function() { return this.$val.Bounds(); };
	Image.ptr.prototype.ColorModel = function() {
		var i;
		i = this;
		return color.RGBAModel;
	};
	Image.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Image.ptr.prototype.At = function(x, y) {
		var _r, i, x, x$1, x$2, x$3, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (i.isDisposed()) {
			$s = -1; return (x$1 = new color.RGBA.ptr(0, 0, 0, 0), new x$1.constructor.elem(x$1));
		}
		_r = (x$3 = i.shareableImages, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).At(x, y); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (x$2 = _r, new x$2.constructor.elem(x$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.At }; } $f._r = _r; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.At = function(x, y) { return this.$val.At(x, y); };
	Image.ptr.prototype.Dispose = function() {
		var _i, _ref, i, img, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; i = $f.i; img = $f.img; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		i.copyCheck();
		if (i.isDisposed()) {
			$s = -1; return $ifaceNil;
		}
		_ref = i.shareableImages;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			img = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = img.Dispose(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		i.shareableImages = sliceType$4.nil;
		runtime.SetFinalizer(i, $ifaceNil);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.Dispose }; } $f._i = _i; $f._ref = _ref; $f.i = i; $f.img = img; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.Dispose = function() { return this.$val.Dispose(); };
	Image.ptr.prototype.ReplacePixels = function(p) {
		var i, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		i.copyCheck();
		if (i.isDisposed()) {
			$s = -1; return $ifaceNil;
		}
		$r = (x = i.shareableImages, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).ReplacePixels(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = i.disposeMipmaps(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.ReplacePixels }; } $f.i = i; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.ReplacePixels = function(p) { return this.$val.ReplacePixels(p); };
	NewImage = function(width, height, filter) {
		var filter, height, i, s, width;
		s = shareable.NewImage(width, height);
		i = new Image.ptr(ptrType.nil, new sliceType$4([s]), filter);
		i.addr = i;
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		return [i, $ifaceNil];
	};
	$pkg.NewImage = NewImage;
	newVolatileImage = function(width, height) {
		var _r, height, i, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; height = $f.height; i = $f.i; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = shareable.NewVolatileImage(width, height); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = new Image.ptr(ptrType.nil, new sliceType$4([_r]), 0);
		i.addr = i;
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newVolatileImage }; } $f._r = _r; $f.height = height; $f.i = i; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewImageFromImage = function(source, filter) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, filter, height, i, s, size, source, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; filter = $f.filter; height = $f.height; i = $f.i; s = $f.s; size = $f.size; source = $f.source; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = source.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, image.Rectangle).Size(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		size = $clone(_r$1, image.Point);
		_tmp = size.X;
		_tmp$1 = size.Y;
		width = _tmp;
		height = _tmp$1;
		s = shareable.NewImage(width, height);
		i = new Image.ptr(ptrType.nil, new sliceType$4([s]), filter);
		i.addr = i;
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		_r$2 = graphicsutil.CopyImage(source); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = i.ReplacePixels(_r$2); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$unused(_r$3);
		$s = -1; return [i, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewImageFromImage }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.filter = filter; $f.height = height; $f.i = i; $f.s = s; $f.size = size; $f.source = source; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewImageFromImage = NewImageFromImage;
	newImageWithScreenFramebuffer = function(width, height) {
		var _r, height, i, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; height = $f.height; i = $f.i; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = shareable.NewScreenFramebufferImage(width, height); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = new Image.ptr(ptrType.nil, new sliceType$4([_r]), 0);
		i.addr = i;
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newImageWithScreenFramebuffer }; } $f._r = _r; $f.height = height; $f.i = i; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	imageParts.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(imageParts).prototype.Len = function() { return this.$get().Len(); };
	imageParts.prototype.Dst = function(i) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dst, i, p, x0, x1, y0, y1;
		x0 = 0;
		y0 = 0;
		x1 = 0;
		y1 = 0;
		p = this;
		dst = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]).Dst;
		_tmp = dst.Min.X;
		_tmp$1 = dst.Min.Y;
		_tmp$2 = dst.Max.X;
		_tmp$3 = dst.Max.Y;
		x0 = _tmp;
		y0 = _tmp$1;
		x1 = _tmp$2;
		y1 = _tmp$3;
		return [x0, y0, x1, y1];
	};
	$ptrType(imageParts).prototype.Dst = function(i) { return this.$get().Dst(i); };
	imageParts.prototype.Src = function(i) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, i, p, src, x0, x1, y0, y1;
		x0 = 0;
		y0 = 0;
		x1 = 0;
		y1 = 0;
		p = this;
		src = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]).Src;
		_tmp = src.Min.X;
		_tmp$1 = src.Min.Y;
		_tmp$2 = src.Max.X;
		_tmp$3 = src.Max.Y;
		x0 = _tmp;
		y0 = _tmp$1;
		x1 = _tmp$2;
		y1 = _tmp$3;
		return [x0, y0, x1, y1];
	};
	$ptrType(imageParts).prototype.Src = function(i) { return this.$get().Src(i); };
	IsKeyPressed = function(key) {
		var key;
		return input.Get().IsKeyPressed(((key >> 0)));
	};
	$pkg.IsKeyPressed = IsKeyPressed;
	CursorPosition = function() {
		var _r, _tuple, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = 0;
		y = 0;
		_r = ui.AdjustedCursorPosition(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		y = _tuple[1];
		$s = -1; return [x, y];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CursorPosition }; } $f._r = _r; $f._tuple = _tuple; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CursorPosition = CursorPosition;
	IsMouseButtonPressed = function(mouseButton) {
		var mouseButton;
		return input.Get().IsMouseButtonPressed(((mouseButton >> 0)));
	};
	$pkg.IsMouseButtonPressed = IsMouseButtonPressed;
	GamepadIDs = function() {
		return input.Get().GamepadIDs();
	};
	$pkg.GamepadIDs = GamepadIDs;
	GamepadButtonNum = function(id) {
		var id;
		return input.Get().GamepadButtonNum(id);
	};
	$pkg.GamepadButtonNum = GamepadButtonNum;
	IsGamepadButtonPressed = function(id, button) {
		var button, id;
		return input.Get().IsGamepadButtonPressed(id, ((button >> 0)));
	};
	$pkg.IsGamepadButtonPressed = IsGamepadButtonPressed;
	TouchIDs = function() {
		var _i, _r, _ref, ids, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; ids = $f.ids; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ids = sliceType$6.nil;
		_r = ui.AdjustedTouches(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			ids = $append(ids, t.ID());
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return ids;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TouchIDs }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.ids = ids; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TouchIDs = TouchIDs;
	TouchPosition = function(id) {
		var _i, _r, _ref, id, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; id = $f.id; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ui.AdjustedTouches(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (t.ID() === id) {
				$s = -1; return t.Position();
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [0, 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: TouchPosition }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.id = id; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TouchPosition = TouchPosition;
	Key.prototype.String = function() {
		var _1, k;
		k = this.$val;
		_1 = k;
		if (_1 === (0)) {
			return "0";
		} else if (_1 === (1)) {
			return "1";
		} else if (_1 === (2)) {
			return "2";
		} else if (_1 === (3)) {
			return "3";
		} else if (_1 === (4)) {
			return "4";
		} else if (_1 === (5)) {
			return "5";
		} else if (_1 === (6)) {
			return "6";
		} else if (_1 === (7)) {
			return "7";
		} else if (_1 === (8)) {
			return "8";
		} else if (_1 === (9)) {
			return "9";
		} else if (_1 === (10)) {
			return "A";
		} else if (_1 === (11)) {
			return "B";
		} else if (_1 === (12)) {
			return "C";
		} else if (_1 === (13)) {
			return "D";
		} else if (_1 === (14)) {
			return "E";
		} else if (_1 === (15)) {
			return "F";
		} else if (_1 === (16)) {
			return "G";
		} else if (_1 === (17)) {
			return "H";
		} else if (_1 === (18)) {
			return "I";
		} else if (_1 === (19)) {
			return "J";
		} else if (_1 === (20)) {
			return "K";
		} else if (_1 === (21)) {
			return "L";
		} else if (_1 === (22)) {
			return "M";
		} else if (_1 === (23)) {
			return "N";
		} else if (_1 === (24)) {
			return "O";
		} else if (_1 === (25)) {
			return "P";
		} else if (_1 === (26)) {
			return "Q";
		} else if (_1 === (27)) {
			return "R";
		} else if (_1 === (28)) {
			return "S";
		} else if (_1 === (29)) {
			return "T";
		} else if (_1 === (30)) {
			return "U";
		} else if (_1 === (31)) {
			return "V";
		} else if (_1 === (32)) {
			return "W";
		} else if (_1 === (33)) {
			return "X";
		} else if (_1 === (34)) {
			return "Y";
		} else if (_1 === (35)) {
			return "Z";
		} else if (_1 === (36)) {
			return "Alt";
		} else if (_1 === (37)) {
			return "Apostrophe";
		} else if (_1 === (38)) {
			return "Backslash";
		} else if (_1 === (39)) {
			return "Backspace";
		} else if (_1 === (40)) {
			return "CapsLock";
		} else if (_1 === (41)) {
			return "Comma";
		} else if (_1 === (42)) {
			return "Control";
		} else if (_1 === (43)) {
			return "Delete";
		} else if (_1 === (44)) {
			return "Down";
		} else if (_1 === (45)) {
			return "End";
		} else if (_1 === (46)) {
			return "Enter";
		} else if (_1 === (47)) {
			return "Equal";
		} else if (_1 === (48)) {
			return "Escape";
		} else if (_1 === (49)) {
			return "F1";
		} else if (_1 === (50)) {
			return "F2";
		} else if (_1 === (51)) {
			return "F3";
		} else if (_1 === (52)) {
			return "F4";
		} else if (_1 === (53)) {
			return "F5";
		} else if (_1 === (54)) {
			return "F6";
		} else if (_1 === (55)) {
			return "F7";
		} else if (_1 === (56)) {
			return "F8";
		} else if (_1 === (57)) {
			return "F9";
		} else if (_1 === (58)) {
			return "F10";
		} else if (_1 === (59)) {
			return "F11";
		} else if (_1 === (60)) {
			return "F12";
		} else if (_1 === (61)) {
			return "GraveAccent";
		} else if (_1 === (62)) {
			return "Home";
		} else if (_1 === (63)) {
			return "Insert";
		} else if (_1 === (64)) {
			return "KP0";
		} else if (_1 === (65)) {
			return "KP1";
		} else if (_1 === (66)) {
			return "KP2";
		} else if (_1 === (67)) {
			return "KP3";
		} else if (_1 === (68)) {
			return "KP4";
		} else if (_1 === (69)) {
			return "KP5";
		} else if (_1 === (70)) {
			return "KP6";
		} else if (_1 === (71)) {
			return "KP7";
		} else if (_1 === (72)) {
			return "KP8";
		} else if (_1 === (73)) {
			return "KP9";
		} else if (_1 === (74)) {
			return "KPAdd";
		} else if (_1 === (75)) {
			return "KPDecimal";
		} else if (_1 === (76)) {
			return "KPDivide";
		} else if (_1 === (77)) {
			return "KPEnter";
		} else if (_1 === (78)) {
			return "KPEqual";
		} else if (_1 === (79)) {
			return "KPMultiply";
		} else if (_1 === (80)) {
			return "KPSubtract";
		} else if (_1 === (81)) {
			return "Left";
		} else if (_1 === (82)) {
			return "LeftBracket";
		} else if (_1 === (83)) {
			return "Menu";
		} else if (_1 === (84)) {
			return "Minus";
		} else if (_1 === (85)) {
			return "NumLock";
		} else if (_1 === (86)) {
			return "PageDown";
		} else if (_1 === (87)) {
			return "PageUp";
		} else if (_1 === (88)) {
			return "Pause";
		} else if (_1 === (89)) {
			return "Period";
		} else if (_1 === (90)) {
			return "PrintScreen";
		} else if (_1 === (91)) {
			return "Right";
		} else if (_1 === (92)) {
			return "RightBracket";
		} else if (_1 === (93)) {
			return "ScrollLock";
		} else if (_1 === (94)) {
			return "Semicolon";
		} else if (_1 === (95)) {
			return "Shift";
		} else if (_1 === (96)) {
			return "Slash";
		} else if (_1 === (97)) {
			return "Space";
		} else if (_1 === (98)) {
			return "Tab";
		} else if (_1 === (99)) {
			return "Up";
		}
		return "";
	};
	$ptrType(Key).prototype.String = function() { return new Key(this.$get()).String(); };
	keyNameToKey = function(name) {
		var _1, _r, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = strings.ToLower(name); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			if (_1 === ("0")) {
				$s = -1; return [0, true];
			} else if (_1 === ("1")) {
				$s = -1; return [1, true];
			} else if (_1 === ("2")) {
				$s = -1; return [2, true];
			} else if (_1 === ("3")) {
				$s = -1; return [3, true];
			} else if (_1 === ("4")) {
				$s = -1; return [4, true];
			} else if (_1 === ("5")) {
				$s = -1; return [5, true];
			} else if (_1 === ("6")) {
				$s = -1; return [6, true];
			} else if (_1 === ("7")) {
				$s = -1; return [7, true];
			} else if (_1 === ("8")) {
				$s = -1; return [8, true];
			} else if (_1 === ("9")) {
				$s = -1; return [9, true];
			} else if (_1 === ("a")) {
				$s = -1; return [10, true];
			} else if (_1 === ("b")) {
				$s = -1; return [11, true];
			} else if (_1 === ("c")) {
				$s = -1; return [12, true];
			} else if (_1 === ("d")) {
				$s = -1; return [13, true];
			} else if (_1 === ("e")) {
				$s = -1; return [14, true];
			} else if (_1 === ("f")) {
				$s = -1; return [15, true];
			} else if (_1 === ("g")) {
				$s = -1; return [16, true];
			} else if (_1 === ("h")) {
				$s = -1; return [17, true];
			} else if (_1 === ("i")) {
				$s = -1; return [18, true];
			} else if (_1 === ("j")) {
				$s = -1; return [19, true];
			} else if (_1 === ("k")) {
				$s = -1; return [20, true];
			} else if (_1 === ("l")) {
				$s = -1; return [21, true];
			} else if (_1 === ("m")) {
				$s = -1; return [22, true];
			} else if (_1 === ("n")) {
				$s = -1; return [23, true];
			} else if (_1 === ("o")) {
				$s = -1; return [24, true];
			} else if (_1 === ("p")) {
				$s = -1; return [25, true];
			} else if (_1 === ("q")) {
				$s = -1; return [26, true];
			} else if (_1 === ("r")) {
				$s = -1; return [27, true];
			} else if (_1 === ("s")) {
				$s = -1; return [28, true];
			} else if (_1 === ("t")) {
				$s = -1; return [29, true];
			} else if (_1 === ("u")) {
				$s = -1; return [30, true];
			} else if (_1 === ("v")) {
				$s = -1; return [31, true];
			} else if (_1 === ("w")) {
				$s = -1; return [32, true];
			} else if (_1 === ("x")) {
				$s = -1; return [33, true];
			} else if (_1 === ("y")) {
				$s = -1; return [34, true];
			} else if (_1 === ("z")) {
				$s = -1; return [35, true];
			} else if (_1 === ("alt")) {
				$s = -1; return [36, true];
			} else if (_1 === ("apostrophe")) {
				$s = -1; return [37, true];
			} else if (_1 === ("backslash")) {
				$s = -1; return [38, true];
			} else if (_1 === ("backspace")) {
				$s = -1; return [39, true];
			} else if (_1 === ("capslock")) {
				$s = -1; return [40, true];
			} else if (_1 === ("comma")) {
				$s = -1; return [41, true];
			} else if (_1 === ("control")) {
				$s = -1; return [42, true];
			} else if (_1 === ("delete")) {
				$s = -1; return [43, true];
			} else if (_1 === ("down")) {
				$s = -1; return [44, true];
			} else if (_1 === ("end")) {
				$s = -1; return [45, true];
			} else if (_1 === ("enter")) {
				$s = -1; return [46, true];
			} else if (_1 === ("equal")) {
				$s = -1; return [47, true];
			} else if (_1 === ("escape")) {
				$s = -1; return [48, true];
			} else if (_1 === ("f1")) {
				$s = -1; return [49, true];
			} else if (_1 === ("f2")) {
				$s = -1; return [50, true];
			} else if (_1 === ("f3")) {
				$s = -1; return [51, true];
			} else if (_1 === ("f4")) {
				$s = -1; return [52, true];
			} else if (_1 === ("f5")) {
				$s = -1; return [53, true];
			} else if (_1 === ("f6")) {
				$s = -1; return [54, true];
			} else if (_1 === ("f7")) {
				$s = -1; return [55, true];
			} else if (_1 === ("f8")) {
				$s = -1; return [56, true];
			} else if (_1 === ("f9")) {
				$s = -1; return [57, true];
			} else if (_1 === ("f10")) {
				$s = -1; return [58, true];
			} else if (_1 === ("f11")) {
				$s = -1; return [59, true];
			} else if (_1 === ("f12")) {
				$s = -1; return [60, true];
			} else if (_1 === ("graveaccent")) {
				$s = -1; return [61, true];
			} else if (_1 === ("home")) {
				$s = -1; return [62, true];
			} else if (_1 === ("insert")) {
				$s = -1; return [63, true];
			} else if (_1 === ("kp0")) {
				$s = -1; return [64, true];
			} else if (_1 === ("kp1")) {
				$s = -1; return [65, true];
			} else if (_1 === ("kp2")) {
				$s = -1; return [66, true];
			} else if (_1 === ("kp3")) {
				$s = -1; return [67, true];
			} else if (_1 === ("kp4")) {
				$s = -1; return [68, true];
			} else if (_1 === ("kp5")) {
				$s = -1; return [69, true];
			} else if (_1 === ("kp6")) {
				$s = -1; return [70, true];
			} else if (_1 === ("kp7")) {
				$s = -1; return [71, true];
			} else if (_1 === ("kp8")) {
				$s = -1; return [72, true];
			} else if (_1 === ("kp9")) {
				$s = -1; return [73, true];
			} else if (_1 === ("kpadd")) {
				$s = -1; return [74, true];
			} else if (_1 === ("kpdecimal")) {
				$s = -1; return [75, true];
			} else if (_1 === ("kpdivide")) {
				$s = -1; return [76, true];
			} else if (_1 === ("kpenter")) {
				$s = -1; return [77, true];
			} else if (_1 === ("kpequal")) {
				$s = -1; return [78, true];
			} else if (_1 === ("kpmultiply")) {
				$s = -1; return [79, true];
			} else if (_1 === ("kpsubtract")) {
				$s = -1; return [80, true];
			} else if (_1 === ("left")) {
				$s = -1; return [81, true];
			} else if (_1 === ("leftbracket")) {
				$s = -1; return [82, true];
			} else if (_1 === ("menu")) {
				$s = -1; return [83, true];
			} else if (_1 === ("minus")) {
				$s = -1; return [84, true];
			} else if (_1 === ("numlock")) {
				$s = -1; return [85, true];
			} else if (_1 === ("pagedown")) {
				$s = -1; return [86, true];
			} else if (_1 === ("pageup")) {
				$s = -1; return [87, true];
			} else if (_1 === ("pause")) {
				$s = -1; return [88, true];
			} else if (_1 === ("period")) {
				$s = -1; return [89, true];
			} else if (_1 === ("printscreen")) {
				$s = -1; return [90, true];
			} else if (_1 === ("right")) {
				$s = -1; return [91, true];
			} else if (_1 === ("rightbracket")) {
				$s = -1; return [92, true];
			} else if (_1 === ("scrolllock")) {
				$s = -1; return [93, true];
			} else if (_1 === ("semicolon")) {
				$s = -1; return [94, true];
			} else if (_1 === ("shift")) {
				$s = -1; return [95, true];
			} else if (_1 === ("slash")) {
				$s = -1; return [96, true];
			} else if (_1 === ("space")) {
				$s = -1; return [97, true];
			} else if (_1 === ("tab")) {
				$s = -1; return [98, true];
			} else if (_1 === ("up")) {
				$s = -1; return [99, true];
			}
		case 1:
		$s = -1; return [0, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: keyNameToKey }; } $f._1 = _1; $f._r = _r; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	init$1 = function() {
		atomic.StoreInt32((currentMaxTPS$24ptr || (currentMaxTPS$24ptr = new ptrType$6(function() { return currentMaxTPS; }, function($v) { currentMaxTPS = $v; }))), 60);
	};
	setDrawingSkipped = function(skipped) {
		var skipped, v;
		v = 0;
		if (skipped) {
			v = 1;
		}
		atomic.StoreInt32((isDrawingSkipped$24ptr || (isDrawingSkipped$24ptr = new ptrType$6(function() { return isDrawingSkipped; }, function($v) { isDrawingSkipped = $v; }))), v);
	};
	IsDrawingSkipped = function() {
		return !((atomic.LoadInt32((isDrawingSkipped$24ptr || (isDrawingSkipped$24ptr = new ptrType$6(function() { return isDrawingSkipped; }, function($v) { isDrawingSkipped = $v; })))) === 0));
	};
	$pkg.IsDrawingSkipped = IsDrawingSkipped;
	run = function(width, height, scale, title, g, mainloop) {
		var _r, err, g, height, mainloop, scale, title, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; g = $f.g; height = $f.height; mainloop = $f.mainloop; scale = $f.scale; title = $f.title; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ui.Run(width, height, scale, title, g, mainloop); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, ui.RegularTermination)) {
				$s = -1; return $ifaceNil;
			}
			$s = -1; return err;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: run }; } $f._r = _r; $f.err = err; $f.g = g; $f.height = height; $f.mainloop = mainloop; $f.scale = scale; $f.title = title; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	imageDumper.ptr.prototype.update = function(screen) {
		var _entry, _entry$1, _entry$2, _i, _i$1, _key, _key$1, _key$2, _key$3, _keys, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, dir, dump, dump$1, err, err$1, err$2, err$3, err$4, i, i$1, img, key, key$1, key$2, keyname, keyname$1, keys, name, ok, ok$1, screen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; dir = $f.dir; dump = $f.dump; dump$1 = $f.dump$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; i = $f.i; i$1 = $f.i$1; img = $f.img; key = $f.key; key$1 = $f.key$1; key$2 = $f.key$2; keyname = $f.keyname; keyname$1 = $f.keyname$1; keys = $f.keys; name = $f.name; ok = $f.ok; ok$1 = $f.ok$1; screen = $f.screen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dir = [dir];
		screen = [screen];
		i = this;
		_r = i.f(screen[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		/* */ if (i.keyState === false) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (i.keyState === false) { */ case 2:
			i.keyState = $makeMap(Key.keyFor, []);
			_r$1 = os.Getenv("EBITEN_SCREENSHOT_KEY"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			keyname = _r$1;
			/* */ if (!(keyname === "")) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!(keyname === "")) { */ case 5:
				_r$2 = keyNameToKey(keyname); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				key = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					i.hasScreenshotKey = true;
					i.screenshotKey = key;
				}
			/* } */ case 6:
			_r$3 = os.Getenv("EBITEN_INTERNAL_IMAGES_KEY"); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			keyname$1 = _r$3;
			/* */ if (!(keyname$1 === "")) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!(keyname$1 === "")) { */ case 9:
				/* */ if (isDebug()) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (isDebug()) { */ case 11:
					_r$4 = keyNameToKey(keyname$1); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$1 = _r$4;
					key$1 = _tuple$1[0];
					ok$1 = _tuple$1[1];
					if (ok$1) {
						i.hasDumpInternalImagesKey = true;
						i.dumpInternalImagesKey = key$1;
					}
					$s = 13; continue;
				/* } else { */ case 12:
					_r$5 = fmt.Fprintf(os.Stderr, "%s is disabled. Specify a build tag 'ebitendebug' to enable it.\n", new sliceType([new $String("EBITEN_INTERNAL_IMAGES_KEY")])); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
				/* } */ case 13:
			/* } */ case 10:
		/* } */ case 3:
		keys = $makeMap(Key.keyFor, []);
		if (i.hasScreenshotKey) {
			_key = i.screenshotKey; (keys || $throwRuntimeError("assignment to entry in nil map"))[Key.keyFor(_key)] = { k: _key, v: new structType.ptr() };
		}
		if (i.hasDumpInternalImagesKey) {
			_key$1 = i.dumpInternalImagesKey; (keys || $throwRuntimeError("assignment to entry in nil map"))[Key.keyFor(_key$1)] = { k: _key$1, v: new structType.ptr() };
		}
		_ref = keys;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			key$2 = _entry.k;
			if (IsKeyPressed(key$2)) {
				_key$2 = key$2; (i.keyState || $throwRuntimeError("assignment to entry in nil map"))[Key.keyFor(_key$2)] = { k: _key$2, v: (_entry$1 = i.keyState[Key.keyFor(key$2)], _entry$1 !== undefined ? _entry$1.v : 0) + (1) >> 0 };
				if ((_entry$2 = i.keyState[Key.keyFor(key$2)], _entry$2 !== undefined ? _entry$2.v : 0) === 1) {
					if (i.hasScreenshotKey && (key$2 === i.screenshotKey)) {
						i.toTakeScreenshot = true;
					}
					if (i.hasDumpInternalImagesKey && (key$2 === i.dumpInternalImagesKey)) {
						i.toDumpInternalImages = true;
					}
				}
			} else {
				_key$3 = key$2; (i.keyState || $throwRuntimeError("assignment to entry in nil map"))[Key.keyFor(_key$3)] = { k: _key$3, v: 0 };
			}
			_i++;
		}
		if (IsDrawingSkipped()) {
			$s = -1; return $ifaceNil;
		}
		/* */ if (i.toTakeScreenshot) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (i.toTakeScreenshot) { */ case 16:
			dump = (function(dir, screen) { return function $b() {
				var _r$6, _r$7, _tuple$2, err$1, err$2, f, $s, $deferred, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple$2 = $f._tuple$2; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
				_r$6 = ioutil.TempFile("", "ebiten_screenshot_"); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$2 = _r$6;
				f = _tuple$2[0];
				err$1 = _tuple$2[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return ["", err$1];
				}
				$deferred.push([$methodVal(f, "Close"), []]);
				_r$7 = png.Encode(f, screen[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err$2 = _r$7;
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return ["", err$2];
				}
				$s = -1; return [f.Name(), $ifaceNil];
				/* */ } return; } } catch(err) { $err = err; $s = -1; return ["", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: $b }; } $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple$2 = _tuple$2; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
			}; })(dir, screen);
			_r$6 = dump(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$2 = _r$6;
			name = _tuple$2[0];
			err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return err$1;
			}
			_r$7 = os.Rename(name, name + ".png"); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			err$2 = _r$7;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
			i.toTakeScreenshot = false;
			_r$8 = fmt.Fprintf(os.Stderr, "Saved screenshot: %s.png\n", new sliceType([new $String(name)])); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
		/* } */ case 17:
		/* */ if (i.toDumpInternalImages) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (i.toDumpInternalImages) { */ case 21:
			_r$9 = ioutil.TempDir("", "ebiten_internal_images_"); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$3 = _r$9;
			dir[0] = _tuple$3[0];
			err$3 = _tuple$3[1];
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				$s = -1; return err$3;
			}
			dump$1 = (function(dir, screen) { return function $b(img, index) {
				var _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _tuple$4, err$4, err$5, f, filename, img, index, $s, $deferred, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _tuple$4 = $f._tuple$4; err$4 = $f.err$4; err$5 = $f.err$5; f = $f.f; filename = $f.filename; img = $f.img; index = $f.index; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
				_arg = dir[0];
				_r$10 = fmt.Sprintf("%d.png", new sliceType([new $Int(index)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_arg$1 = _r$10;
				_r$11 = filepath.Join(new sliceType$8([_arg, _arg$1])); /* */ $s = 2; case 2: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				filename = _r$11;
				_r$12 = os.Create(filename); /* */ $s = 3; case 3: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_tuple$4 = _r$12;
				f = _tuple$4[0];
				err$4 = _tuple$4[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					$s = -1; return err$4;
				}
				$deferred.push([$methodVal(f, "Close"), []]);
				_r$13 = png.Encode(f, img); /* */ $s = 4; case 4: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				err$5 = _r$13;
				if (!($interfaceIsEqual(err$5, $ifaceNil))) {
					$s = -1; return err$5;
				}
				$s = -1; return $ifaceNil;
				/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._tuple$4 = _tuple$4; $f.err$4 = err$4; $f.err$5 = err$5; $f.f = f; $f.filename = filename; $f.img = img; $f.index = index; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
			}; })(dir, screen);
			_r$10 = shareable.Images(); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_ref$1 = _r$10;
			_i$1 = 0;
			/* while (true) { */ case 25:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 26; continue; }
				i$1 = _i$1;
				img = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$11 = dump$1(img, i$1); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				err$4 = _r$11;
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					$s = -1; return err$4;
				}
				_i$1++;
			/* } */ $s = 25; continue; case 26:
			i.toDumpInternalImages = false;
			_r$12 = fmt.Fprintf(os.Stderr, "Dumped the internal images at: %s\n", new sliceType([new $String(dir[0])])); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
		/* } */ case 22:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: imageDumper.ptr.prototype.update }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.dir = dir; $f.dump = dump; $f.dump$1 = dump$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.i = i; $f.i$1 = i$1; $f.img = img; $f.key = key; $f.key$1 = key$1; $f.key$2 = key$2; $f.keyname = keyname; $f.keyname$1 = keyname$1; $f.keys = keys; $f.name = name; $f.ok = ok; $f.ok$1 = ok$1; $f.screen = screen; $f.$s = $s; $f.$r = $r; return $f;
	};
	imageDumper.prototype.update = function(screen) { return this.$val.update(screen); };
	Run = function(f, width, height, scale, title) {
		var _r, ch, err, f, height, scale, title, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; err = $f.err; f = $f.f; height = $f.height; scale = $f.scale; title = $f.title; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch = [ch];
		f = [f];
		height = [height];
		scale = [scale];
		title = [title];
		width = [width];
		f[0] = $methodVal((new imageDumper.ptr(f[0], false, false, 0, false, false, 0, false)), "update");
		ch[0] = new $Chan($error, 0);
		$go((function(ch, f, height, scale, title, width) { return function $b() {
			var _arg, _r, err, g, $s, $deferred, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; err = $f.err; g = $f.g; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			$deferred.push([function(_arg) { $close(_arg); }, [ch[0]]]);
			g = newGraphicsContext(f[0]);
			theGraphicsContext.Store(g);
			_r = run(width[0], height[0], scale[0], title[0], g, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
				$r = $send(ch[0], err); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 3:
			$s = -1; return;
			/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._r = _r; $f.err = err; $f.g = g; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
		}; })(ch, f, height, scale, title, width), []);
		_r = ui.RunMainThreadLoop(ch[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Run }; } $f._r = _r; $f.ch = ch; $f.err = err; $f.f = f; $f.height = height; $f.scale = scale; $f.title = title; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Run = Run;
	DeviceScaleFactor = function() {
		var _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = devicescale.DeviceScale(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DeviceScaleFactor }; } $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DeviceScaleFactor = DeviceScaleFactor;
	MaxTPS = function() {
		return ((atomic.LoadInt32((currentMaxTPS$24ptr || (currentMaxTPS$24ptr = new ptrType$6(function() { return currentMaxTPS; }, function($v) { currentMaxTPS = $v; })))) >> 0));
	};
	$pkg.MaxTPS = MaxTPS;
	ptrType$7.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Apply", name: "Apply", pkg: "", typ: $funcType([color.Color], [color.Color], false)}, {prop: "Concat", name: "Concat", pkg: "", typ: $funcType([ColorM], [], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ColorM], [], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [], false)}, {prop: "RotateHue", name: "RotateHue", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "ChangeHSV", name: "ChangeHSV", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [], false)}, {prop: "Element", name: "Element", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "SetElement", name: "SetElement", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	ptrType$8.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Apply", name: "Apply", pkg: "", typ: $funcType([$Float64, $Float64], [$Float64, $Float64], false)}, {prop: "apply32", name: "apply32", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([$Float32, $Float32], [$Float32, $Float32], false)}, {prop: "elements", name: "elements", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$Float32, $Float32, $Float32, $Float32, $Float32, $Float32], false)}, {prop: "Element", name: "Element", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Concat", name: "Concat", pkg: "", typ: $funcType([GeoM], [], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([GeoM], [], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "Rotate", name: "Rotate", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "Skew", name: "Skew", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "det", name: "det", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$Float32], false)}, {prop: "IsInvertible", name: "IsInvertible", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Invert", name: "Invert", pkg: "", typ: $funcType([], [], false)}, {prop: "SetElement", name: "SetElement", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	ptrType$9.methods = [{prop: "Invalidate", name: "Invalidate", pkg: "", typ: $funcType([], [], false)}, {prop: "SetSize", name: "SetSize", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}, {prop: "initializeIfNeeded", name: "initializeIfNeeded", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$error], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "needsRestoring", name: "needsRestoring", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$Bool, $error], false)}, {prop: "restoreIfNeeded", name: "restoreIfNeeded", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "copyCheck", name: "copyCheck", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "isDisposed", name: "isDisposed", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$Bool], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fill", name: "Fill", pkg: "", typ: $funcType([color.Color], [$error], false)}, {prop: "fill", name: "fill", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([$Uint8, $Uint8, $Uint8, $Uint8], [], false)}, {prop: "disposeMipmaps", name: "disposeMipmaps", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [], false)}, {prop: "DrawImage", name: "DrawImage", pkg: "", typ: $funcType([ptrType, ptrType$3], [$error], false)}, {prop: "drawImage", name: "drawImage", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([ptrType, ptrType$3], [], false)}, {prop: "DrawTriangles", name: "DrawTriangles", pkg: "", typ: $funcType([sliceType$9, sliceType$10, ptrType, ptrType$5], [], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [image.Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReplacePixels", name: "ReplacePixels", pkg: "", typ: $funcType([sliceType$2], [$error], false)}];
	imageParts.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Dst", name: "Dst", pkg: "", typ: $funcType([$Int], [$Int, $Int, $Int, $Int], false)}, {prop: "Src", name: "Src", pkg: "", typ: $funcType([$Int], [$Int, $Int, $Int, $Int], false)}];
	Key.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$10.methods = [{prop: "update", name: "update", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([ptrType], [$error], false)}];
	ColorM.init("github.com/hajimehoshi/ebiten", [{prop: "impl", name: "impl", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	GeoM.init("github.com/hajimehoshi/ebiten", [{prop: "a_1", name: "a_1", anonymous: false, exported: false, typ: $Float32, tag: ""}, {prop: "b", name: "b", anonymous: false, exported: false, typ: $Float32, tag: ""}, {prop: "c", name: "c", anonymous: false, exported: false, typ: $Float32, tag: ""}, {prop: "d_1", name: "d_1", anonymous: false, exported: false, typ: $Float32, tag: ""}, {prop: "tx", name: "tx", anonymous: false, exported: false, typ: $Float32, tag: ""}, {prop: "ty", name: "ty", anonymous: false, exported: false, typ: $Float32, tag: ""}]);
	graphicsContext.init("github.com/hajimehoshi/ebiten", [{prop: "f", name: "f", anonymous: false, exported: false, typ: funcType, tag: ""}, {prop: "offscreen", name: "offscreen", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "screen", name: "screen", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "screenScale", name: "screenScale", anonymous: false, exported: false, typ: $Float64, tag: ""}, {prop: "initialized", name: "initialized", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "invalidated", name: "invalidated", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "offsetX", name: "offsetX", anonymous: false, exported: false, typ: $Float64, tag: ""}, {prop: "offsetY", name: "offsetY", anonymous: false, exported: false, typ: $Float64, tag: ""}]);
	Image.init("github.com/hajimehoshi/ebiten", [{prop: "addr", name: "addr", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "shareableImages", name: "shareableImages", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "filter", name: "filter", anonymous: false, exported: false, typ: Filter, tag: ""}]);
	Vertex.init("", [{prop: "DstX", name: "DstX", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "DstY", name: "DstY", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "SrcX", name: "SrcX", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "SrcY", name: "SrcY", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "ColorR", name: "ColorR", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "ColorG", name: "ColorG", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "ColorB", name: "ColorB", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "ColorA", name: "ColorA", anonymous: false, exported: true, typ: $Float32, tag: ""}]);
	DrawTrianglesOptions.init("", [{prop: "ColorM", name: "ColorM", anonymous: false, exported: true, typ: ColorM, tag: ""}, {prop: "CompositeMode", name: "CompositeMode", anonymous: false, exported: true, typ: CompositeMode, tag: ""}, {prop: "Filter", name: "Filter", anonymous: false, exported: true, typ: Filter, tag: ""}]);
	DrawImageOptions.init("", [{prop: "SourceRect", name: "SourceRect", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "GeoM", name: "GeoM", anonymous: false, exported: true, typ: GeoM, tag: ""}, {prop: "ColorM", name: "ColorM", anonymous: false, exported: true, typ: ColorM, tag: ""}, {prop: "CompositeMode", name: "CompositeMode", anonymous: false, exported: true, typ: CompositeMode, tag: ""}, {prop: "Filter", name: "Filter", anonymous: false, exported: true, typ: Filter, tag: ""}, {prop: "ImageParts", name: "ImageParts", anonymous: false, exported: true, typ: ImageParts, tag: ""}, {prop: "Parts", name: "Parts", anonymous: false, exported: true, typ: sliceType$1, tag: ""}]);
	ImagePart.init("", [{prop: "Dst", name: "Dst", anonymous: false, exported: true, typ: image.Rectangle, tag: ""}, {prop: "Src", name: "Src", anonymous: false, exported: true, typ: image.Rectangle, tag: ""}]);
	ImageParts.init([{prop: "Dst", name: "Dst", pkg: "", typ: $funcType([$Int], [$Int, $Int, $Int, $Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Src", name: "Src", pkg: "", typ: $funcType([$Int], [$Int, $Int, $Int, $Int], false)}]);
	imageParts.init(ImagePart);
	imageDumper.init("github.com/hajimehoshi/ebiten", [{prop: "f", name: "f", anonymous: false, exported: false, typ: funcType, tag: ""}, {prop: "keyState", name: "keyState", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "hasScreenshotKey", name: "hasScreenshotKey", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "screenshotKey", name: "screenshotKey", anonymous: false, exported: false, typ: Key, tag: ""}, {prop: "toTakeScreenshot", name: "toTakeScreenshot", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "hasDumpInternalImagesKey", name: "hasDumpInternalImagesKey", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "dumpInternalImagesKey", name: "dumpInternalImagesKey", anonymous: false, exported: false, typ: Key, tag: ""}, {prop: "toDumpInternalImages", name: "toDumpInternalImages", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = affine.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = clock.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = devicescale.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphics.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphicsutil.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hooks.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = input.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = png.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = shareable.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = web.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		emptyImage = ptrType.nil;
		theGraphicsContext = new atomic.Value.ptr($ifaceNil);
		isDrawingSkipped = 0;
		currentMaxTPS = 0;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/lei-cao/programming/code/algoman/pkg/defaults"] = (function() {
	var $pkg = {}, $init, ebiten, color, _r;
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	color = $packages["image/color"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ebiten.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.BackgroundColor = new color.RGBA.ptr(1, 42, 54, 255);
		$pkg.BarColor = new color.RGBA.ptr(168, 167, 160, 255);
		$pkg.ColorA = new color.RGBA.ptr(42, 183, 183, 255);
		$pkg.ColorB = new color.RGBA.ptr(14, 124, 123, 255);
		_r = ebiten.DeviceScaleFactor(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$pkg.DeviceScale = ((_r >> 0));
		$pkg.ButtonPadding = $imul(10, $pkg.DeviceScale);
		$pkg.ButtonMinHeight = $imul(36, $pkg.DeviceScale);
		$pkg.ButtonMinWidth = $imul(36, $pkg.DeviceScale);
		$pkg.ScreenWidth = $imul(320, $pkg.DeviceScale);
		$pkg.ScreenHeight = $imul(580, $pkg.DeviceScale);
		$pkg.Speed = 300;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/lei-cao/programming/code/v2/visualizer"] = (function() {
	var $pkg = {}, $init, js, math, time, Stepper, Step, ptrType, NewFirstStep;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	time = $packages["time"];
	Stepper = $pkg.Stepper = $newType(8, $kindInterface, "visualizer.Stepper", true, "github.com/lei-cao/programming/code/v2/visualizer", true, null);
	Step = $pkg.Step = $newType(0, $kindStruct, "visualizer.Step", true, "github.com/lei-cao/programming/code/v2/visualizer", true, function(next_, last_, current_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.next = ptrType.nil;
			this.last = ptrType.nil;
			this.current = ptrType.nil;
			return;
		}
		this.next = next_;
		this.last = last_;
		this.current = current_;
	});
	ptrType = $ptrType(Step);
	NewFirstStep = function() {
		var s;
		s = new Step.ptr(ptrType.nil, ptrType.nil, ptrType.nil);
		s.last = s;
		s.current = s;
		return s;
	};
	$pkg.NewFirstStep = NewFirstStep;
	Step.ptr.prototype.AddStep = function(stepper) {
		var _tuple, ok, s, step, stepper;
		s = this;
		_tuple = $assertType(stepper, ptrType, true);
		step = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			s.last.next = step;
			s.last = step;
		} else {
			console.log("Can't add step");
		}
	};
	Step.prototype.AddStep = function(stepper) { return this.$val.AddStep(stepper); };
	Step.ptr.prototype.Finished = function() {
		var s;
		s = this;
		return s.current.next === ptrType.nil;
	};
	Step.prototype.Finished = function() { return this.$val.Finished(); };
	Step.ptr.prototype.NextStep = function() {
		var s;
		s = this;
		if (s.Finished()) {
			return $ifaceNil;
		}
		s.current = s.current.next;
		return s.current;
	};
	Step.prototype.NextStep = function() { return this.$val.NextStep(); };
	Step.ptr.prototype.CurrentStep = function() {
		var s;
		s = this;
		return s.current;
	};
	Step.prototype.CurrentStep = function() { return this.$val.CurrentStep(); };
	ptrType.methods = [{prop: "AddStep", name: "AddStep", pkg: "", typ: $funcType([Stepper], [], false)}, {prop: "Finished", name: "Finished", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NextStep", name: "NextStep", pkg: "", typ: $funcType([], [Stepper], false)}, {prop: "CurrentStep", name: "CurrentStep", pkg: "", typ: $funcType([], [Stepper], false)}];
	Stepper.init([{prop: "AddStep", name: "AddStep", pkg: "", typ: $funcType([Stepper], [], false)}, {prop: "CurrentStep", name: "CurrentStep", pkg: "", typ: $funcType([], [Stepper], false)}, {prop: "Finished", name: "Finished", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NextStep", name: "NextStep", pkg: "", typ: $funcType([], [Stepper], false)}]);
	Step.init("github.com/lei-cao/programming/code/v2/visualizer", [{prop: "next", name: "next", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "last", name: "last", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "current", name: "current", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/lei-cao/programming/code/v2/algorithms/sorting"] = (function() {
	var $pkg = {}, $init, visualizer, Sorter, sliceType;
	visualizer = $packages["github.com/lei-cao/programming/code/v2/visualizer"];
	Sorter = $pkg.Sorter = $newType(8, $kindInterface, "sorting.Sorter", true, "github.com/lei-cao/programming/code/v2/algorithms/sorting", true, null);
	sliceType = $sliceType($Int);
	Sorter.init([{prop: "Sort", name: "Sort", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "Steps", name: "Steps", pkg: "", typ: $funcType([], [visualizer.Stepper], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = visualizer.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort"] = (function() {
	var $pkg = {}, $init, sorting, visualizer, math, BubbleSort, HeapSort, InsertionSort, QuickSort, SelectionSort, BasicSort, Step, ptrType, sliceType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, NewBubbleSort, NewInsertionSort, NewQuickSort, NewSelectionSort, NewHeapSort, NewFirstStep, NewStep;
	sorting = $packages["github.com/lei-cao/programming/code/v2/algorithms/sorting"];
	visualizer = $packages["github.com/lei-cao/programming/code/v2/visualizer"];
	math = $packages["math"];
	BubbleSort = $pkg.BubbleSort = $newType(0, $kindStruct, "basicsort.BubbleSort", true, "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", true, function(BasicSort_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicSort = new BasicSort.ptr($ifaceNil);
			return;
		}
		this.BasicSort = BasicSort_;
	});
	HeapSort = $pkg.HeapSort = $newType(0, $kindStruct, "basicsort.HeapSort", true, "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", true, function(BasicSort_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicSort = new BasicSort.ptr($ifaceNil);
			return;
		}
		this.BasicSort = BasicSort_;
	});
	InsertionSort = $pkg.InsertionSort = $newType(0, $kindStruct, "basicsort.InsertionSort", true, "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", true, function(BasicSort_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicSort = new BasicSort.ptr($ifaceNil);
			return;
		}
		this.BasicSort = BasicSort_;
	});
	QuickSort = $pkg.QuickSort = $newType(0, $kindStruct, "basicsort.QuickSort", true, "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", true, function(BasicSort_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicSort = new BasicSort.ptr($ifaceNil);
			return;
		}
		this.BasicSort = BasicSort_;
	});
	SelectionSort = $pkg.SelectionSort = $newType(0, $kindStruct, "basicsort.SelectionSort", true, "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", true, function(BasicSort_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicSort = new BasicSort.ptr($ifaceNil);
			return;
		}
		this.BasicSort = BasicSort_;
	});
	BasicSort = $pkg.BasicSort = $newType(0, $kindStruct, "basicsort.BasicSort", true, "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", true, function(steps_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.steps = $ifaceNil;
			return;
		}
		this.steps = steps_;
	});
	Step = $pkg.Step = $newType(0, $kindStruct, "basicsort.Step", true, "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", true, function(a_, b_, doSwap_, next_, last_, current_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a = 0;
			this.b = 0;
			this.doSwap = false;
			this.next = ptrType.nil;
			this.last = ptrType.nil;
			this.current = ptrType.nil;
			return;
		}
		this.a = a_;
		this.b = b_;
		this.doSwap = doSwap_;
		this.next = next_;
		this.last = last_;
		this.current = current_;
	});
	ptrType = $ptrType(Step);
	sliceType = $sliceType($Int);
	ptrType$1 = $ptrType(BubbleSort);
	ptrType$2 = $ptrType(HeapSort);
	ptrType$3 = $ptrType(InsertionSort);
	ptrType$4 = $ptrType(QuickSort);
	ptrType$5 = $ptrType(SelectionSort);
	ptrType$6 = $ptrType(BasicSort);
	BubbleSort.ptr.prototype.Sort = function(a) {
		var a, i, j, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; i = $f.i; j = $f.j; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			j = 0;
			/* while (true) { */ case 3:
				/* if (!(j < (a.$length - 1 >> 0))) { break; } */ if(!(j < (a.$length - 1 >> 0))) { $s = 4; continue; }
				/* */ if (((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]) > (x = j + 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x]))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]) > (x = j + 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x]))) { */ case 5:
					$r = s.BasicSort.swap(a, j, j + 1 >> 0); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else { */ case 6:
					$r = s.BasicSort.pass(j, j + 1 >> 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
				j = j + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BubbleSort.ptr.prototype.Sort }; } $f.a = a; $f.i = i; $f.j = j; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BubbleSort.prototype.Sort = function(a) { return this.$val.Sort(a); };
	HeapSort.ptr.prototype.Sort = function(a) {
		var a, end, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; end = $f.end; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		$r = h.heapify(a); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		end = a.$length - 1 >> 0;
		/* while (true) { */ case 2:
			/* if (!(end > 0)) { break; } */ if(!(end > 0)) { $s = 3; continue; }
			$r = h.BasicSort.swap(a, end, 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			end = end - (1) >> 0;
			$r = h.shiftDown(a, 0, end); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HeapSort.ptr.prototype.Sort }; } $f.a = a; $f.end = end; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	HeapSort.prototype.Sort = function(a) { return this.$val.Sort(a); };
	HeapSort.ptr.prototype.heapify = function(a) {
		var a, h, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; h = $f.h; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		start = h.iParent(a.$length - 1 >> 0);
		/* while (true) { */ case 1:
			/* if (!(start >= 0)) { break; } */ if(!(start >= 0)) { $s = 2; continue; }
			$r = h.shiftDown(a, start, a.$length - 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			start = start - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HeapSort.ptr.prototype.heapify }; } $f.a = a; $f.h = h; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	HeapSort.prototype.heapify = function(a) { return this.$val.heapify(a); };
	HeapSort.ptr.prototype.shiftDown = function(a, start, end) {
		var a, child, end, h, root, start, swap, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; child = $f.child; end = $f.end; h = $f.h; root = $f.root; start = $f.start; swap = $f.swap; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		root = start;
		/* while (true) { */ case 1:
			/* if (!(h.iLeftChild(root) <= end)) { break; } */ if(!(h.iLeftChild(root) <= end)) { $s = 2; continue; }
			child = h.iLeftChild(root);
			swap = root;
			if (((swap < 0 || swap >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + swap]) < ((child < 0 || child >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + child])) {
				swap = child;
			}
			if ((child + 1 >> 0) <= end && ((swap < 0 || swap >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + swap]) < (x = child + 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x]))) {
				swap = child + 1 >> 0;
			}
			/* */ if (swap === root) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (swap === root) { */ case 3:
				$r = h.BasicSort.pass(swap, root); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			$r = h.BasicSort.swap(a, root, swap); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = swap;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HeapSort.ptr.prototype.shiftDown }; } $f.a = a; $f.child = child; $f.end = end; $f.h = h; $f.root = root; $f.start = start; $f.swap = swap; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	HeapSort.prototype.shiftDown = function(a, start, end) { return this.$val.shiftDown(a, start, end); };
	HeapSort.ptr.prototype.iParent = function(i) {
		var _q, h, i;
		h = this;
		return ((math.Floor(((_q = ((i - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))) >> 0));
	};
	HeapSort.prototype.iParent = function(i) { return this.$val.iParent(i); };
	HeapSort.ptr.prototype.iLeftChild = function(i) {
		var h, i;
		h = this;
		return ($imul(i, 2)) + 1 >> 0;
	};
	HeapSort.prototype.iLeftChild = function(i) { return this.$val.iLeftChild(i); };
	InsertionSort.ptr.prototype.Sort = function(a) {
		var a, i, j, s, temp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; i = $f.i; j = $f.j; s = $f.s; temp = $f.temp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			temp = ((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]);
			j = i - 1 >> 0;
			/* while (true) { */ case 3:
				/* if (!(j >= 0)) { break; } */ if(!(j >= 0)) { $s = 4; continue; }
				/* */ if (((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]) > temp) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]) > temp) { */ case 5:
					$r = s.BasicSort.swap(a, j + 1 >> 0, j); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else { */ case 6:
					$r = s.BasicSort.pass(j + 1 >> 0, j); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InsertionSort.ptr.prototype.Sort }; } $f.a = a; $f.i = i; $f.j = j; $f.s = s; $f.temp = temp; $f.$s = $s; $f.$r = $r; return $f;
	};
	InsertionSort.prototype.Sort = function(a) { return this.$val.Sort(a); };
	QuickSort.ptr.prototype.Sort = function(a) {
		var a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.quickSort(a, 0, a.$length - 1 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: QuickSort.ptr.prototype.Sort }; } $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	QuickSort.prototype.Sort = function(a) { return this.$val.Sort(a); };
	QuickSort.ptr.prototype.quickSort = function(a, lo, hi) {
		var _r, a, hi, lo, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; hi = $f.hi; lo = $f.lo; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (lo < hi) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (lo < hi) { */ case 1:
			_r = s.partition(a, lo, hi); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p = _r;
			$r = s.quickSort(a, lo, p - 1 >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = s.quickSort(a, p + 1 >> 0, hi); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: QuickSort.ptr.prototype.quickSort }; } $f._r = _r; $f.a = a; $f.hi = hi; $f.lo = lo; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	QuickSort.prototype.quickSort = function(a, lo, hi) { return this.$val.quickSort(a, lo, hi); };
	QuickSort.ptr.prototype.partition = function(a, lo, hi) {
		var a, hi, i, j, lo, pivot, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; hi = $f.hi; i = $f.i; j = $f.j; lo = $f.lo; pivot = $f.pivot; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		pivot = ((hi < 0 || hi >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + hi]);
		i = lo - 1 >> 0;
		j = lo;
		/* while (true) { */ case 1:
			/* if (!(j < hi)) { break; } */ if(!(j < hi)) { $s = 2; continue; }
			/* */ if (((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]) < pivot) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j]) < pivot) { */ case 3:
				i = i + (1) >> 0;
				$r = s.BasicSort.swap(a, i, j); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				$r = s.BasicSort.pass(hi, j); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			j = j + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = s.BasicSort.swap(a, hi, i + 1 >> 0); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return i + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: QuickSort.ptr.prototype.partition }; } $f.a = a; $f.hi = hi; $f.i = i; $f.j = j; $f.lo = lo; $f.pivot = pivot; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	QuickSort.prototype.partition = function(a, lo, hi) { return this.$val.partition(a, lo, hi); };
	SelectionSort.ptr.prototype.Sort = function(a) {
		var a, i, j, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; i = $f.i; j = $f.j; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			j = i + 1 >> 0;
			/* while (true) { */ case 3:
				/* if (!(j < a.$length)) { break; } */ if(!(j < a.$length)) { $s = 4; continue; }
				/* */ if (((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]) > ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j])) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]) > ((j < 0 || j >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + j])) { */ case 5:
					$r = s.BasicSort.swap(a, i, j); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else { */ case 6:
					$r = s.BasicSort.pass(i, j); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
				j = j + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SelectionSort.ptr.prototype.Sort }; } $f.a = a; $f.i = i; $f.j = j; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	SelectionSort.prototype.Sort = function(a) { return this.$val.Sort(a); };
	NewBubbleSort = function() {
		var s;
		s = new BubbleSort.ptr(new BasicSort.ptr($ifaceNil));
		s.BasicSort.steps = NewFirstStep();
		return s;
	};
	$pkg.NewBubbleSort = NewBubbleSort;
	NewInsertionSort = function() {
		var s;
		s = new InsertionSort.ptr(new BasicSort.ptr($ifaceNil));
		s.BasicSort.steps = NewFirstStep();
		return s;
	};
	$pkg.NewInsertionSort = NewInsertionSort;
	NewQuickSort = function() {
		var s;
		s = new QuickSort.ptr(new BasicSort.ptr($ifaceNil));
		s.BasicSort.steps = NewFirstStep();
		return s;
	};
	$pkg.NewQuickSort = NewQuickSort;
	NewSelectionSort = function() {
		var s;
		s = new SelectionSort.ptr(new BasicSort.ptr($ifaceNil));
		s.BasicSort.steps = NewFirstStep();
		return s;
	};
	$pkg.NewSelectionSort = NewSelectionSort;
	NewHeapSort = function() {
		var m;
		m = new HeapSort.ptr(new BasicSort.ptr($ifaceNil));
		m.BasicSort.steps = NewFirstStep();
		return m;
	};
	$pkg.NewHeapSort = NewHeapSort;
	BasicSort.ptr.prototype.Steps = function() {
		var s;
		s = this;
		return s.steps;
	};
	BasicSort.prototype.Steps = function() { return this.$val.Steps(); };
	BasicSort.ptr.prototype.swap = function(a, ia, ib) {
		var _tmp, _tmp$1, a, ia, ib, s, step, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; ia = $f.ia; ib = $f.ib; s = $f.s; step = $f.step; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		step = NewStep(ia, ib, true);
		$r = s.steps.AddStep(step); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = ((ib < 0 || ib >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ib]);
		_tmp$1 = ((ia < 0 || ia >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ia]);
		((ia < 0 || ia >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ia] = _tmp);
		((ib < 0 || ib >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + ib] = _tmp$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BasicSort.ptr.prototype.swap }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.ia = ia; $f.ib = ib; $f.s = s; $f.step = step; $f.$s = $s; $f.$r = $r; return $f;
	};
	BasicSort.prototype.swap = function(a, ia, ib) { return this.$val.swap(a, ia, ib); };
	BasicSort.ptr.prototype.pass = function(a, b) {
		var a, b, s, step, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; b = $f.b; s = $f.s; step = $f.step; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		step = NewStep(a, b, false);
		$r = s.steps.AddStep(step); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BasicSort.ptr.prototype.pass }; } $f.a = a; $f.b = b; $f.s = s; $f.step = step; $f.$s = $s; $f.$r = $r; return $f;
	};
	BasicSort.prototype.pass = function(a, b) { return this.$val.pass(a, b); };
	NewFirstStep = function() {
		var s;
		s = new Step.ptr(0, 0, false, ptrType.nil, ptrType.nil, ptrType.nil);
		s.last = s;
		s.current = s;
		return s;
	};
	$pkg.NewFirstStep = NewFirstStep;
	NewStep = function(a, b, doSwap) {
		var a, b, doSwap, s;
		s = new Step.ptr(0, 0, false, ptrType.nil, ptrType.nil, ptrType.nil);
		s.a = a;
		s.b = b;
		s.doSwap = doSwap;
		return s;
	};
	$pkg.NewStep = NewStep;
	Step.ptr.prototype.AddStep = function(stepper) {
		var _tuple, ok, s, step, stepper;
		s = this;
		_tuple = $assertType(stepper, ptrType, true);
		step = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			s.last.next = step;
			s.last = step;
		} else {
			console.log("Can't add step");
		}
	};
	Step.prototype.AddStep = function(stepper) { return this.$val.AddStep(stepper); };
	Step.ptr.prototype.Finished = function() {
		var s;
		s = this;
		return s.current.next === ptrType.nil;
	};
	Step.prototype.Finished = function() { return this.$val.Finished(); };
	Step.ptr.prototype.NextStep = function() {
		var s;
		s = this;
		if (s.Finished()) {
			return $ifaceNil;
		}
		s.current = s.current.next;
		return s.current;
	};
	Step.prototype.NextStep = function() { return this.$val.NextStep(); };
	Step.ptr.prototype.CurrentStep = function() {
		var s;
		s = this;
		return s.current;
	};
	Step.prototype.CurrentStep = function() { return this.$val.CurrentStep(); };
	Step.ptr.prototype.A = function() {
		var s;
		s = this;
		return s.a;
	};
	Step.prototype.A = function() { return this.$val.A(); };
	Step.ptr.prototype.B = function() {
		var s;
		s = this;
		return s.b;
	};
	Step.prototype.B = function() { return this.$val.B(); };
	Step.ptr.prototype.DoSwap = function() {
		var s;
		s = this;
		return s.doSwap;
	};
	Step.prototype.DoSwap = function() { return this.$val.DoSwap(); };
	ptrType$1.methods = [{prop: "Sort", name: "Sort", pkg: "", typ: $funcType([sliceType], [], false)}];
	ptrType$2.methods = [{prop: "Sort", name: "Sort", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "heapify", name: "heapify", pkg: "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", typ: $funcType([sliceType], [], false)}, {prop: "shiftDown", name: "shiftDown", pkg: "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", typ: $funcType([sliceType, $Int, $Int], [], false)}, {prop: "iParent", name: "iParent", pkg: "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", typ: $funcType([$Int], [$Int], false)}, {prop: "iLeftChild", name: "iLeftChild", pkg: "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", typ: $funcType([$Int], [$Int], false)}, {prop: "iRightChild", name: "iRightChild", pkg: "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", typ: $funcType([$Int], [$Int], false)}];
	ptrType$3.methods = [{prop: "Sort", name: "Sort", pkg: "", typ: $funcType([sliceType], [], false)}];
	ptrType$4.methods = [{prop: "Sort", name: "Sort", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "quickSort", name: "quickSort", pkg: "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", typ: $funcType([sliceType, $Int, $Int], [], false)}, {prop: "partition", name: "partition", pkg: "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", typ: $funcType([sliceType, $Int, $Int], [$Int], false)}];
	ptrType$5.methods = [{prop: "Sort", name: "Sort", pkg: "", typ: $funcType([sliceType], [], false)}];
	ptrType$6.methods = [{prop: "Steps", name: "Steps", pkg: "", typ: $funcType([], [visualizer.Stepper], false)}, {prop: "swap", name: "swap", pkg: "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", typ: $funcType([sliceType, $Int, $Int], [], false)}, {prop: "pass", name: "pass", pkg: "github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", typ: $funcType([$Int, $Int], [], false)}];
	ptrType.methods = [{prop: "AddStep", name: "AddStep", pkg: "", typ: $funcType([visualizer.Stepper], [], false)}, {prop: "Finished", name: "Finished", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NextStep", name: "NextStep", pkg: "", typ: $funcType([], [visualizer.Stepper], false)}, {prop: "CurrentStep", name: "CurrentStep", pkg: "", typ: $funcType([], [visualizer.Stepper], false)}, {prop: "A", name: "A", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "B", name: "B", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "DoSwap", name: "DoSwap", pkg: "", typ: $funcType([], [$Bool], false)}];
	BubbleSort.init("", [{prop: "BasicSort", name: "BasicSort", anonymous: true, exported: true, typ: BasicSort, tag: ""}]);
	HeapSort.init("", [{prop: "BasicSort", name: "BasicSort", anonymous: true, exported: true, typ: BasicSort, tag: ""}]);
	InsertionSort.init("", [{prop: "BasicSort", name: "BasicSort", anonymous: true, exported: true, typ: BasicSort, tag: ""}]);
	QuickSort.init("", [{prop: "BasicSort", name: "BasicSort", anonymous: true, exported: true, typ: BasicSort, tag: ""}]);
	SelectionSort.init("", [{prop: "BasicSort", name: "BasicSort", anonymous: true, exported: true, typ: BasicSort, tag: ""}]);
	BasicSort.init("github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", [{prop: "steps", name: "steps", anonymous: false, exported: false, typ: visualizer.Stepper, tag: ""}]);
	Step.init("github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort", [{prop: "a", name: "a", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "b", name: "b", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "doSwap", name: "doSwap", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "next", name: "next", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "last", name: "last", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "current", name: "current", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sorting.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = visualizer.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/lei-cao/programming/code/algoman/pkg/shapes"] = (function() {
	var $pkg = {}, $init, ebiten, defaults, basicsort, visualizer, image, Rectangle, RectSlice, ptrType, ptrType$1, ptrType$2, sliceType, ptrType$3, sliceType$1, ptrType$4, sliceType$2, ptrType$5, ptrType$6, barWidth, barHeightUnit, barMargin, NewRectangle, NewRectSlice;
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	defaults = $packages["github.com/lei-cao/programming/code/algoman/pkg/defaults"];
	basicsort = $packages["github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort"];
	visualizer = $packages["github.com/lei-cao/programming/code/v2/visualizer"];
	image = $packages["image"];
	Rectangle = $pkg.Rectangle = $newType(0, $kindStruct, "shapes.Rectangle", true, "github.com/lei-cao/programming/code/algoman/pkg/shapes", true, function(barImage_, startOp_, startIndex_, endIndex_, isA_, isB_, rect_, V_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.barImage = ptrType.nil;
			this.startOp = ptrType$1.nil;
			this.startIndex = 0;
			this.endIndex = 0;
			this.isA = false;
			this.isB = false;
			this.rect = ptrType$2.nil;
			this.V = 0;
			return;
		}
		this.barImage = barImage_;
		this.startOp = startOp_;
		this.startIndex = startIndex_;
		this.endIndex = endIndex_;
		this.isA = isA_;
		this.isB = isB_;
		this.rect = rect_;
		this.V = V_;
	});
	RectSlice = $pkg.RectSlice = $newType(0, $kindStruct, "shapes.RectSlice", true, "github.com/lei-cao/programming/code/algoman/pkg/shapes", true, function(values_, rectangles_, aIndex_, bIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.values = sliceType.nil;
			this.rectangles = sliceType$1.nil;
			this.aIndex = 0;
			this.bIndex = 0;
			return;
		}
		this.values = values_;
		this.rectangles = rectangles_;
		this.aIndex = aIndex_;
		this.bIndex = bIndex_;
	});
	ptrType = $ptrType(ebiten.Image);
	ptrType$1 = $ptrType(ebiten.DrawImageOptions);
	ptrType$2 = $ptrType(image.Rectangle);
	sliceType = $sliceType($Int);
	ptrType$3 = $ptrType(Rectangle);
	sliceType$1 = $sliceType(ptrType$3);
	ptrType$4 = $ptrType($packages["github.com/hajimehoshi/ebiten/internal/affine"].ColorM);
	sliceType$2 = $sliceType(ebiten.ImagePart);
	ptrType$5 = $ptrType(basicsort.Step);
	ptrType$6 = $ptrType(RectSlice);
	NewRectangle = function(value) {
		var _r, _tuple, r, rect, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; r = $f.r; rect = $f.rect; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rect = [rect];
		r = new Rectangle.ptr(ptrType.nil, ptrType$1.nil, 0, 0, false, false, ptrType$2.nil, 0);
		rect[0] = $clone(image.Rect(0, 0, barWidth, $imul(value, barHeightUnit)), image.Rectangle);
		_tuple = ebiten.NewImage(barWidth, $imul(value, barHeightUnit), 0);
		r.barImage = _tuple[0];
		_r = r.barImage.Fill((x = defaults.BarColor, new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		r.rect = rect[0];
		r.V = value;
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewRectangle }; } $f._r = _r; $f._tuple = _tuple; $f.r = r; $f.rect = rect; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewRectangle = NewRectangle;
	NewRectSlice = function(values) {
		var _i, _r, _ref, k, op, r, rs, v, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; k = $f.k; op = $f.op; r = $f.r; rs = $f.rs; v = $f.v; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rs = new RectSlice.ptr(sliceType.nil, sliceType$1.nil, 0, 0);
		rs.values = values;
		_ref = rs.values;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			k = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = NewRectangle(v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			op = new ebiten.DrawImageOptions.ptr(ptrType$2.nil, new ebiten.GeoM.ptr(0, 0, 0, 0, 0, 0), new ebiten.ColorM.ptr(ptrType$4.nil), 0, 0, $ifaceNil, sliceType$2.nil);
			op.GeoM.Translate((($imul(((k + 1 >> 0)), ((barWidth + barMargin >> 0))))), (($imul((((rs.values.$length - r.V >> 0) + 2 >> 0)), barHeightUnit))));
			r.startOp = op;
			r.startIndex = k;
			r.endIndex = k;
			rs.rectangles = $append(rs.rectangles, r);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return rs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewRectSlice }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.k = k; $f.op = op; $f.r = r; $f.rs = rs; $f.v = v; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewRectSlice = NewRectSlice;
	RectSlice.ptr.prototype.Update = function(progress) {
		var _i, _ref, dx, progress, r, rs;
		rs = this;
		_ref = rs.rectangles;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((r.endIndex === r.startIndex))) {
				r.startOp.GeoM.Reset();
				dx = (($imul(((r.startIndex + 1 >> 0)), ((barWidth + barMargin >> 0))))) + progress * (($imul(((r.endIndex - r.startIndex >> 0)), ((barWidth + barMargin >> 0)))));
				r.startOp.GeoM.Translate(dx, (($imul((((rs.values.$length - r.V >> 0) + 2 >> 0)), barHeightUnit))));
				if (progress === 1) {
					r.startIndex = r.endIndex;
				}
			} else {
				r.startOp.ColorM.Reset();
			}
			_i++;
		}
	};
	RectSlice.prototype.Update = function(progress) { return this.$val.Update(progress); };
	RectSlice.ptr.prototype.NextStep = function(s) {
		var _tuple, ok, rs, s, step;
		rs = this;
		_tuple = $assertType(s, ptrType$5, true);
		step = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			if (step.DoSwap()) {
				rs.swap(step.A(), step.B());
			} else {
				rs.pass(step.A(), step.B());
			}
		}
	};
	RectSlice.prototype.NextStep = function(s) { return this.$val.NextStep(s); };
	RectSlice.ptr.prototype.Draw = function(image$1) {
		var _i, _r, _r$1, _r$2, _r$3, _ref, image$1, r, rs, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; image$1 = $f.image$1; r = $f.r; rs = $f.rs; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rs = this;
		_ref = rs.rectangles;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			r.isB = false;
			r.isA = false;
			_r = r.barImage.Fill((x = defaults.BarColor, new x.constructor.elem(x))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			/* */ if (rs.aIndex === r.startIndex) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (rs.aIndex === r.startIndex) { */ case 4:
				_r$1 = r.barImage.Fill((x$1 = defaults.ColorA, new x$1.constructor.elem(x$1))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 5:
			/* */ if (rs.bIndex === r.startIndex) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (rs.bIndex === r.startIndex) { */ case 7:
				_r$2 = r.barImage.Fill((x$2 = defaults.ColorB, new x$2.constructor.elem(x$2))); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
			/* } */ case 8:
			_r$3 = image$1.DrawImage(r.barImage, r.startOp); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RectSlice.ptr.prototype.Draw }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.image$1 = image$1; $f.r = r; $f.rs = rs; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	RectSlice.prototype.Draw = function(image$1) { return this.$val.Draw(image$1); };
	RectSlice.ptr.prototype.swap = function(ia, ib) {
		var ia, ib, ra, rb, rs, x, x$1, x$2, x$3;
		rs = this;
		if (ia < 0 || ib < 0 || ia > (rs.rectangles.$length - 1 >> 0) || ib > (rs.rectangles.$length - 1 >> 0)) {
			return;
		}
		rs.aIndex = ia;
		rs.bIndex = ib;
		ra = (x = rs.rectangles, ((ia < 0 || ia >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + ia]));
		rb = (x$1 = rs.rectangles, ((ib < 0 || ib >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + ib]));
		ra.endIndex = ib;
		rb.endIndex = ia;
		ra.isA = true;
		rb.isB = true;
		(x$2 = rs.rectangles, ((ia < 0 || ia >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ia] = rb));
		(x$3 = rs.rectangles, ((ib < 0 || ib >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + ib] = ra));
	};
	RectSlice.prototype.swap = function(ia, ib) { return this.$val.swap(ia, ib); };
	RectSlice.ptr.prototype.pass = function(ia, ib) {
		var ia, ib, rs, x, x$1;
		rs = this;
		if (ia < 0 || ib < 0 || ia > (rs.rectangles.$length - 1 >> 0) || ib > (rs.rectangles.$length - 1 >> 0)) {
			return;
		}
		(x = rs.rectangles, ((ia < 0 || ia >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + ia])).isA = true;
		(x$1 = rs.rectangles, ((ib < 0 || ib >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + ib])).isB = true;
		rs.aIndex = ia;
		rs.bIndex = ib;
	};
	RectSlice.prototype.pass = function(ia, ib) { return this.$val.pass(ia, ib); };
	ptrType$6.methods = [{prop: "Update", name: "Update", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "NextStep", name: "NextStep", pkg: "", typ: $funcType([visualizer.Stepper], [], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "swap", name: "swap", pkg: "github.com/lei-cao/programming/code/algoman/pkg/shapes", typ: $funcType([$Int, $Int], [], false)}, {prop: "pass", name: "pass", pkg: "github.com/lei-cao/programming/code/algoman/pkg/shapes", typ: $funcType([$Int, $Int], [], false)}];
	Rectangle.init("github.com/lei-cao/programming/code/algoman/pkg/shapes", [{prop: "barImage", name: "barImage", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "startOp", name: "startOp", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "startIndex", name: "startIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "endIndex", name: "endIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "isA", name: "isA", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "isB", name: "isB", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "rect", name: "rect", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "V", name: "V", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	RectSlice.init("github.com/lei-cao/programming/code/algoman/pkg/shapes", [{prop: "values", name: "values", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "rectangles", name: "rectangles", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "aIndex", name: "aIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "bIndex", name: "bIndex", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ebiten.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = defaults.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = basicsort.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = visualizer.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		barWidth = $imul(8, defaults.DeviceScale);
		barHeightUnit = $imul(5, defaults.DeviceScale);
		barMargin = $imul(2, defaults.DeviceScale);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/lei-cao/programming/code/algoman/pkg/board"] = (function() {
	var $pkg = {}, $init, ebiten, defaults, shapes, visualizer, Board, ptrType, sliceType, ptrType$1, ptrType$2, init, NewBoard;
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	defaults = $packages["github.com/lei-cao/programming/code/algoman/pkg/defaults"];
	shapes = $packages["github.com/lei-cao/programming/code/algoman/pkg/shapes"];
	visualizer = $packages["github.com/lei-cao/programming/code/v2/visualizer"];
	Board = $pkg.Board = $newType(0, $kindStruct, "board.Board", true, "github.com/lei-cao/programming/code/algoman/pkg/board", true, function(BoardImage_, Finished_, progress_, values_, rs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BoardImage = ptrType.nil;
			this.Finished = false;
			this.progress = 0;
			this.values = sliceType.nil;
			this.rs = ptrType$1.nil;
			return;
		}
		this.BoardImage = BoardImage_;
		this.Finished = Finished_;
		this.progress = progress_;
		this.values = values_;
		this.rs = rs_;
	});
	ptrType = $ptrType(ebiten.Image);
	sliceType = $sliceType($Int);
	ptrType$1 = $ptrType(shapes.RectSlice);
	ptrType$2 = $ptrType(Board);
	init = function() {
	};
	NewBoard = function(values) {
		var _r, _r$1, _tuple, b, values, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; b = $f.b; values = $f.values; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = new Board.ptr(ptrType.nil, false, 0, values, ptrType$1.nil);
		_r = shapes.NewRectSlice(b.values); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b.rs = _r;
		_tuple = ebiten.NewImage(defaults.ScreenWidth, defaults.ScreenHeight, 0);
		b.BoardImage = _tuple[0];
		_r$1 = b.BoardImage.Fill((x = defaults.BackgroundColor, new x.constructor.elem(x))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBoard }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.b = b; $f.values = values; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBoard = NewBoard;
	Board.ptr.prototype.Draw = function() {
		var _r, _r$1, b, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.BoardImage.Clear(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = b.BoardImage.Fill((x = defaults.BackgroundColor, new x.constructor.elem(x))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$r = b.rs.Draw(b.BoardImage); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Board.ptr.prototype.Draw }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Board.prototype.Draw = function() { return this.$val.Draw(); };
	Board.ptr.prototype.Update = function(progress) {
		var b, progress;
		b = this;
		b.progress = progress;
		b.rs.Update(progress);
	};
	Board.prototype.Update = function(progress) { return this.$val.Update(progress); };
	Board.ptr.prototype.NextStep = function(step) {
		var b, step;
		b = this;
		b.rs.NextStep(step);
	};
	Board.prototype.NextStep = function(step) { return this.$val.NextStep(step); };
	Board.ptr.prototype.Ready = function() {
		var b;
		b = this;
		if (b.progress === 1) {
			return true;
		}
		return false;
	};
	Board.prototype.Ready = function() { return this.$val.Ready(); };
	ptrType$2.methods = [{prop: "Draw", name: "Draw", pkg: "", typ: $funcType([], [], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "NextStep", name: "NextStep", pkg: "", typ: $funcType([visualizer.Stepper], [], false)}, {prop: "Ready", name: "Ready", pkg: "", typ: $funcType([], [$Bool], false)}];
	Board.init("github.com/lei-cao/programming/code/algoman/pkg/board", [{prop: "BoardImage", name: "BoardImage", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "Finished", name: "Finished", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "progress", name: "progress", anonymous: false, exported: false, typ: $Float64, tag: ""}, {prop: "values", name: "values", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "rs", name: "rs", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ebiten.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = defaults.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = shapes.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = visualizer.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/math/fixed"] = (function() {
	var $pkg = {}, $init, fmt, Int26_6, Int52_12, Point26_6, Rectangle26_6, sliceType, I, muli64;
	fmt = $packages["fmt"];
	Int26_6 = $pkg.Int26_6 = $newType(4, $kindInt32, "fixed.Int26_6", true, "golang.org/x/image/math/fixed", true, null);
	Int52_12 = $pkg.Int52_12 = $newType(8, $kindInt64, "fixed.Int52_12", true, "golang.org/x/image/math/fixed", true, null);
	Point26_6 = $pkg.Point26_6 = $newType(0, $kindStruct, "fixed.Point26_6", true, "golang.org/x/image/math/fixed", true, function(X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
	});
	Rectangle26_6 = $pkg.Rectangle26_6 = $newType(0, $kindStruct, "fixed.Rectangle26_6", true, "golang.org/x/image/math/fixed", true, function(Min_, Max_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Min = new Point26_6.ptr(0, 0);
			this.Max = new Point26_6.ptr(0, 0);
			return;
		}
		this.Min = Min_;
		this.Max = Max_;
	});
	sliceType = $sliceType($emptyInterface);
	I = function(i) {
		var i;
		return (((i << 6 >> 0) >> 0));
	};
	$pkg.I = I;
	Int26_6.prototype.String = function() {
		var _r, _r$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this.$val;
		/* */ if (x >= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x >= 0) { */ case 1:
			_r = fmt.Sprintf("%d:%02d", new sliceType([new $Int32((((x >> 6 >> 0) >> 0))), new $Int32((((x & 63) >> 0)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		x = -x;
		/* */ if (x >= 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (x >= 0) { */ case 4:
			_r$1 = fmt.Sprintf("-%d:%02d", new sliceType([new $Int32((((x >> 6 >> 0) >> 0))), new $Int32((((x & 63) >> 0)))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 5:
		$s = -1; return "-33554432:00";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int26_6.prototype.String }; } $f._r = _r; $f._r$1 = _r$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Int26_6).prototype.String = function() { return new Int26_6(this.$get()).String(); };
	Int26_6.prototype.Floor = function() {
		var x;
		x = this.$val;
		return (((((x + 0 >> 0)) >> 6 >> 0) >> 0));
	};
	$ptrType(Int26_6).prototype.Floor = function() { return new Int26_6(this.$get()).Floor(); };
	Int26_6.prototype.Round = function() {
		var x;
		x = this.$val;
		return (((((x + 32 >> 0)) >> 6 >> 0) >> 0));
	};
	$ptrType(Int26_6).prototype.Round = function() { return new Int26_6(this.$get()).Round(); };
	Int26_6.prototype.Ceil = function() {
		var x;
		x = this.$val;
		return (((((x + 63 >> 0)) >> 6 >> 0) >> 0));
	};
	$ptrType(Int26_6).prototype.Ceil = function() { return new Int26_6(this.$get()).Ceil(); };
	Int26_6.prototype.Mul = function(y) {
		var x, x$1, x$2, y;
		x = this.$val;
		return (((x$1 = $shiftRightInt64(((x$2 = $mul64((new $Int64(0, x)), (new $Int64(0, y))), new $Int64(x$2.$high + 0, x$2.$low + 32))), 6), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int26_6).prototype.Mul = function(y) { return new Int26_6(this.$get()).Mul(y); };
	Int52_12.prototype.String = function() {
		var _r, _r$1, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { */ case 1:
			_r = fmt.Sprintf("%d:%04d", new sliceType([((x$1 = $shiftRightInt64(x, 12), new $Int64(x$1.$high, x$1.$low))), ((x$2 = new Int52_12(x.$high & 0, (x.$low & 4095) >>> 0), new $Int64(x$2.$high, x$2.$low)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		x = new Int52_12(-x.$high, -x.$low);
		/* */ if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { */ case 4:
			_r$1 = fmt.Sprintf("-%d:%04d", new sliceType([((x$3 = $shiftRightInt64(x, 12), new $Int64(x$3.$high, x$3.$low))), ((x$4 = new Int52_12(x.$high & 0, (x.$low & 4095) >>> 0), new $Int64(x$4.$high, x$4.$low)))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 5:
		$s = -1; return "-2251799813685248:0000";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int52_12.prototype.String }; } $f._r = _r; $f._r$1 = _r$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Int52_12).prototype.String = function() { return this.$get().String(); };
	Int52_12.prototype.Floor = function() {
		var x, x$1;
		x = this;
		return (((x$1 = $shiftRightInt64((new Int52_12(x.$high + 0, x.$low + 0)), 12), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int52_12).prototype.Floor = function() { return this.$get().Floor(); };
	Int52_12.prototype.Round = function() {
		var x, x$1;
		x = this;
		return (((x$1 = $shiftRightInt64((new Int52_12(x.$high + 0, x.$low + 2048)), 12), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int52_12).prototype.Round = function() { return this.$get().Round(); };
	Int52_12.prototype.Ceil = function() {
		var x, x$1;
		x = this;
		return (((x$1 = $shiftRightInt64((new Int52_12(x.$high + 0, x.$low + 4095)), 12), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int52_12).prototype.Ceil = function() { return this.$get().Ceil(); };
	Int52_12.prototype.Mul = function(y) {
		var _tuple, hi, lo, ret, x, x$1, x$2, x$3, x$4, x$5, x$6, y;
		x = this;
		_tuple = muli64((new $Int64(x.$high, x.$low)), (new $Int64(y.$high, y.$low)));
		lo = _tuple[0];
		hi = _tuple[1];
		ret = ((x$1 = (x$2 = $shiftLeft64(hi, 52), x$3 = $shiftRightUint64(lo, 12), new $Uint64(x$2.$high | x$3.$high, (x$2.$low | x$3.$low) >>> 0)), new Int52_12(x$1.$high, x$1.$low)));
		ret = (x$4 = ((x$5 = (x$6 = $shiftRightUint64(lo, 11), new $Uint64(x$6.$high & 0, (x$6.$low & 1) >>> 0)), new Int52_12(x$5.$high, x$5.$low))), new Int52_12(ret.$high + x$4.$high, ret.$low + x$4.$low));
		return ret;
	};
	$ptrType(Int52_12).prototype.Mul = function(y) { return this.$get().Mul(y); };
	muli64 = function(u, v) {
		var _tmp, _tmp$1, hi, lo, t, u, u0, u1, v, v0, v1, w0, w1, w2, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		lo = new $Uint64(0, 0);
		hi = new $Uint64(0, 0);
		u1 = ((x = $shiftRightInt64(u, 32), new $Uint64(x.$high, x.$low)));
		u0 = ((x$1 = new $Int64(u.$high & 0, (u.$low & 4294967295) >>> 0), new $Uint64(x$1.$high, x$1.$low)));
		v1 = ((x$2 = $shiftRightInt64(v, 32), new $Uint64(x$2.$high, x$2.$low)));
		v0 = ((x$3 = new $Int64(v.$high & 0, (v.$low & 4294967295) >>> 0), new $Uint64(x$3.$high, x$3.$low)));
		w0 = $mul64(u0, v0);
		t = (x$4 = $mul64(u1, v0), x$5 = $shiftRightUint64(w0, 32), new $Uint64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		w1 = new $Uint64(t.$high & 0, (t.$low & 4294967295) >>> 0);
		w2 = ((x$6 = $shiftRightInt64((new $Int64(t.$high, t.$low)), 32), new $Uint64(x$6.$high, x$6.$low)));
		w1 = (x$7 = $mul64(u0, v1), new $Uint64(w1.$high + x$7.$high, w1.$low + x$7.$low));
		_tmp = $mul64((new $Uint64(u.$high, u.$low)), (new $Uint64(v.$high, v.$low)));
		_tmp$1 = (x$8 = (x$9 = $mul64(u1, v1), new $Uint64(x$9.$high + w2.$high, x$9.$low + w2.$low)), x$10 = ((x$11 = $shiftRightInt64((new $Int64(w1.$high, w1.$low)), 32), new $Uint64(x$11.$high, x$11.$low))), new $Uint64(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		lo = _tmp;
		hi = _tmp$1;
		return [lo, hi];
	};
	Point26_6.ptr.prototype.Add = function(q) {
		var p, q;
		p = this;
		return new Point26_6.ptr(p.X + q.X >> 0, p.Y + q.Y >> 0);
	};
	Point26_6.prototype.Add = function(q) { return this.$val.Add(q); };
	Point26_6.ptr.prototype.Sub = function(q) {
		var p, q;
		p = this;
		return new Point26_6.ptr(p.X - q.X >> 0, p.Y - q.Y >> 0);
	};
	Point26_6.prototype.Sub = function(q) { return this.$val.Sub(q); };
	Point26_6.ptr.prototype.Mul = function(k) {
		var _q, _q$1, k, p;
		p = this;
		return new Point26_6.ptr((_q = ($imul(p.X, k)) / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ($imul(p.Y, k)) / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	Point26_6.prototype.Mul = function(k) { return this.$val.Mul(k); };
	Point26_6.ptr.prototype.Div = function(k) {
		var _q, _q$1, k, p;
		p = this;
		return new Point26_6.ptr((_q = ($imul(p.X, 64)) / k, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ($imul(p.Y, 64)) / k, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	Point26_6.prototype.Div = function(k) { return this.$val.Div(k); };
	Point26_6.ptr.prototype.In = function(r) {
		var p, r;
		p = this;
		return r.Min.X <= p.X && p.X < r.Max.X && r.Min.Y <= p.Y && p.Y < r.Max.Y;
	};
	Point26_6.prototype.In = function(r) { return this.$val.In(r); };
	Rectangle26_6.ptr.prototype.Add = function(p) {
		var p, r;
		r = this;
		return new Rectangle26_6.ptr(new Point26_6.ptr(r.Min.X + p.X >> 0, r.Min.Y + p.Y >> 0), new Point26_6.ptr(r.Max.X + p.X >> 0, r.Max.Y + p.Y >> 0));
	};
	Rectangle26_6.prototype.Add = function(p) { return this.$val.Add(p); };
	Rectangle26_6.ptr.prototype.Sub = function(p) {
		var p, r;
		r = this;
		return new Rectangle26_6.ptr(new Point26_6.ptr(r.Min.X - p.X >> 0, r.Min.Y - p.Y >> 0), new Point26_6.ptr(r.Max.X - p.X >> 0, r.Max.Y - p.Y >> 0));
	};
	Rectangle26_6.prototype.Sub = function(p) { return this.$val.Sub(p); };
	Rectangle26_6.ptr.prototype.Intersect = function(s) {
		var r, s;
		r = this;
		if (r.Min.X < s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y < s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X > s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y > s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		if ($clone(r, Rectangle26_6).Empty()) {
			return new Rectangle26_6.ptr(new Point26_6.ptr(0, 0), new Point26_6.ptr(0, 0));
		}
		return r;
	};
	Rectangle26_6.prototype.Intersect = function(s) { return this.$val.Intersect(s); };
	Rectangle26_6.ptr.prototype.Union = function(s) {
		var r, s;
		r = this;
		if ($clone(r, Rectangle26_6).Empty()) {
			return s;
		}
		if ($clone(s, Rectangle26_6).Empty()) {
			return r;
		}
		if (r.Min.X > s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y > s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X < s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y < s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		return r;
	};
	Rectangle26_6.prototype.Union = function(s) { return this.$val.Union(s); };
	Rectangle26_6.ptr.prototype.Empty = function() {
		var r;
		r = this;
		return r.Min.X >= r.Max.X || r.Min.Y >= r.Max.Y;
	};
	Rectangle26_6.prototype.Empty = function() { return this.$val.Empty(); };
	Rectangle26_6.ptr.prototype.In = function(s) {
		var r, s;
		r = this;
		if ($clone(r, Rectangle26_6).Empty()) {
			return true;
		}
		return s.Min.X <= r.Min.X && r.Max.X <= s.Max.X && s.Min.Y <= r.Min.Y && r.Max.Y <= s.Max.Y;
	};
	Rectangle26_6.prototype.In = function(s) { return this.$val.In(s); };
	Int26_6.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Floor", name: "Floor", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Ceil", name: "Ceil", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([Int26_6], [Int26_6], false)}];
	Int52_12.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Floor", name: "Floor", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Ceil", name: "Ceil", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([Int52_12], [Int52_12], false)}];
	Point26_6.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Point26_6], [Point26_6], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point26_6], [Point26_6], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([Int26_6], [Point26_6], false)}, {prop: "Div", name: "Div", pkg: "", typ: $funcType([Int26_6], [Point26_6], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle26_6], [$Bool], false)}];
	Rectangle26_6.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Point26_6], [Rectangle26_6], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point26_6], [Rectangle26_6], false)}, {prop: "Intersect", name: "Intersect", pkg: "", typ: $funcType([Rectangle26_6], [Rectangle26_6], false)}, {prop: "Union", name: "Union", pkg: "", typ: $funcType([Rectangle26_6], [Rectangle26_6], false)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle26_6], [$Bool], false)}];
	Point26_6.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: Int26_6, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: Int26_6, tag: ""}]);
	Rectangle26_6.init("", [{prop: "Min", name: "Min", anonymous: false, exported: true, typ: Point26_6, tag: ""}, {prop: "Max", name: "Max", anonymous: false, exported: true, typ: Point26_6, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/golang/freetype/raster"] = (function() {
	var $pkg = {}, $init, fmt, fixed, image, color, draw, math, strconv, Adder, Path, Span, Painter, cell, Rasterizer, Capper, CapperFunc, Joiner, JoinerFunc, stroker, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType$1, arrayType$2, sliceType$4, arrayType$3, sliceType$5, arrayType$4, arrayType$5, arrayType$6, arrayType$7, arrayType$8, ptrType$1, ptrType$6, ptrType$7, maxAbs, pNeg, pDot, pLen, pNorm, pRot45CW, pRot90CW, pRot45CCW, pRot90CCW, addPathReversed, roundCapper, roundJoiner, addArc, midpoint, angleGreaterThan45, interpolate, curviest2, Stroke;
	fmt = $packages["fmt"];
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	color = $packages["image/color"];
	draw = $packages["image/draw"];
	math = $packages["math"];
	strconv = $packages["strconv"];
	Adder = $pkg.Adder = $newType(8, $kindInterface, "raster.Adder", true, "github.com/golang/freetype/raster", true, null);
	Path = $pkg.Path = $newType(12, $kindSlice, "raster.Path", true, "github.com/golang/freetype/raster", true, null);
	Span = $pkg.Span = $newType(0, $kindStruct, "raster.Span", true, "github.com/golang/freetype/raster", true, function(Y_, X0_, X1_, Alpha_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			this.X0 = 0;
			this.X1 = 0;
			this.Alpha = 0;
			return;
		}
		this.Y = Y_;
		this.X0 = X0_;
		this.X1 = X1_;
		this.Alpha = Alpha_;
	});
	Painter = $pkg.Painter = $newType(8, $kindInterface, "raster.Painter", true, "github.com/golang/freetype/raster", true, null);
	cell = $pkg.cell = $newType(0, $kindStruct, "raster.cell", true, "github.com/golang/freetype/raster", false, function(xi_, area_, cover_, next_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.xi = 0;
			this.area = 0;
			this.cover = 0;
			this.next = 0;
			return;
		}
		this.xi = xi_;
		this.area = area_;
		this.cover = cover_;
		this.next = next_;
	});
	Rasterizer = $pkg.Rasterizer = $newType(0, $kindStruct, "raster.Rasterizer", true, "github.com/golang/freetype/raster", true, function(UseNonZeroWinding_, Dx_, Dy_, width_, splitScale2_, splitScale3_, a_, xi_, yi_, area_, cover_, cell_, cellIndex_, cellBuf_, cellIndexBuf_, spanBuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.UseNonZeroWinding = false;
			this.Dx = 0;
			this.Dy = 0;
			this.width = 0;
			this.splitScale2 = 0;
			this.splitScale3 = 0;
			this.a = new fixed.Point26_6.ptr(0, 0);
			this.xi = 0;
			this.yi = 0;
			this.area = 0;
			this.cover = 0;
			this.cell = sliceType$3.nil;
			this.cellIndex = sliceType$5.nil;
			this.cellBuf = arrayType$4.zero();
			this.cellIndexBuf = arrayType$5.zero();
			this.spanBuf = arrayType$6.zero();
			return;
		}
		this.UseNonZeroWinding = UseNonZeroWinding_;
		this.Dx = Dx_;
		this.Dy = Dy_;
		this.width = width_;
		this.splitScale2 = splitScale2_;
		this.splitScale3 = splitScale3_;
		this.a = a_;
		this.xi = xi_;
		this.yi = yi_;
		this.area = area_;
		this.cover = cover_;
		this.cell = cell_;
		this.cellIndex = cellIndex_;
		this.cellBuf = cellBuf_;
		this.cellIndexBuf = cellIndexBuf_;
		this.spanBuf = spanBuf_;
	});
	Capper = $pkg.Capper = $newType(8, $kindInterface, "raster.Capper", true, "github.com/golang/freetype/raster", true, null);
	CapperFunc = $pkg.CapperFunc = $newType(4, $kindFunc, "raster.CapperFunc", true, "github.com/golang/freetype/raster", true, null);
	Joiner = $pkg.Joiner = $newType(8, $kindInterface, "raster.Joiner", true, "github.com/golang/freetype/raster", true, null);
	JoinerFunc = $pkg.JoinerFunc = $newType(4, $kindFunc, "raster.JoinerFunc", true, "github.com/golang/freetype/raster", true, null);
	stroker = $pkg.stroker = $newType(0, $kindStruct, "raster.stroker", true, "github.com/golang/freetype/raster", false, function(p_, u_, cr_, jr_, r_, a_, anorm_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = $ifaceNil;
			this.u = 0;
			this.cr = $ifaceNil;
			this.jr = $ifaceNil;
			this.r = Path.nil;
			this.a = new fixed.Point26_6.ptr(0, 0);
			this.anorm = new fixed.Point26_6.ptr(0, 0);
			return;
		}
		this.p = p_;
		this.u = u_;
		this.cr = cr_;
		this.jr = jr_;
		this.r = r_;
		this.a = a_;
		this.anorm = anorm_;
	});
	sliceType = $sliceType(fixed.Int26_6);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType(Span);
	sliceType$3 = $sliceType(cell);
	arrayType$1 = $arrayType(fixed.Point26_6, 35);
	arrayType$2 = $arrayType($Int, 17);
	sliceType$4 = $sliceType(fixed.Point26_6);
	arrayType$3 = $arrayType(fixed.Point26_6, 52);
	sliceType$5 = $sliceType($Int);
	arrayType$4 = $arrayType(cell, 256);
	arrayType$5 = $arrayType($Int, 64);
	arrayType$6 = $arrayType(Span, 64);
	arrayType$7 = $arrayType($Int, 6);
	arrayType$8 = $arrayType(fixed.Point26_6, 13);
	ptrType$1 = $ptrType(Path);
	ptrType$6 = $ptrType(Rasterizer);
	ptrType$7 = $ptrType(stroker);
	maxAbs = function(a, b) {
		var a, b;
		if (a < 0) {
			a = -a;
		}
		if (b < 0) {
			b = -b;
		}
		if (a < b) {
			return b;
		}
		return a;
	};
	pNeg = function(p) {
		var p;
		return new fixed.Point26_6.ptr(-p.X, -p.Y);
	};
	pDot = function(p, q) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, p, px, py, q, qx, qy, x, x$1, x$2;
		_tmp = (new $Int64(0, p.X));
		_tmp$1 = (new $Int64(0, p.Y));
		px = _tmp;
		py = _tmp$1;
		_tmp$2 = (new $Int64(0, q.X));
		_tmp$3 = (new $Int64(0, q.Y));
		qx = _tmp$2;
		qy = _tmp$3;
		return ((x = (x$1 = $mul64(px, qx), x$2 = $mul64(py, qy), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), new fixed.Int52_12(x.$high, x.$low)));
	};
	pLen = function(p) {
		var p, x, y;
		x = (p.X);
		y = (p.Y);
		return ((math.Sqrt(x * x + y * y) >> 0));
	};
	pNorm = function(p, length) {
		var _tmp, _tmp$1, d, length, p, s, t, x, y;
		d = pLen($clone(p, fixed.Point26_6));
		if (d === 0) {
			return new fixed.Point26_6.ptr(0, 0);
		}
		_tmp = (new $Int64(0, length));
		_tmp$1 = (new $Int64(0, d));
		s = _tmp;
		t = _tmp$1;
		x = $div64($mul64((new $Int64(0, p.X)), s), t, false);
		y = $div64($mul64((new $Int64(0, p.Y)), s), t, false);
		return new fixed.Point26_6.ptr((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)), (((y.$low + ((y.$high >> 31) * 4294967296)) >> 0)));
	};
	pRot45CW = function(p) {
		var _tmp, _tmp$1, p, px, py, qx, qy, x, x$1;
		_tmp = (new $Int64(0, p.X));
		_tmp$1 = (new $Int64(0, p.Y));
		px = _tmp;
		py = _tmp$1;
		qx = $div64($mul64(((x = px, new $Int64(x.$high - py.$high, x.$low - py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		qy = $div64($mul64(((x$1 = px, new $Int64(x$1.$high + py.$high, x$1.$low + py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		return new fixed.Point26_6.ptr((((qx.$low + ((qx.$high >> 31) * 4294967296)) >> 0)), (((qy.$low + ((qy.$high >> 31) * 4294967296)) >> 0)));
	};
	pRot90CW = function(p) {
		var p;
		return new fixed.Point26_6.ptr(-p.Y, p.X);
	};
	pRot45CCW = function(p) {
		var _tmp, _tmp$1, p, px, py, qx, qy, x, x$1;
		_tmp = (new $Int64(0, p.X));
		_tmp$1 = (new $Int64(0, p.Y));
		px = _tmp;
		py = _tmp$1;
		qx = $div64($mul64(((x = px, new $Int64(x.$high + py.$high, x.$low + py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		qy = $div64($mul64(((x$1 = new $Int64(-px.$high, -px.$low), new $Int64(x$1.$high + py.$high, x$1.$low + py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		return new fixed.Point26_6.ptr((((qx.$low + ((qx.$high >> 31) * 4294967296)) >> 0)), (((qy.$low + ((qy.$high >> 31) * 4294967296)) >> 0)));
	};
	pRot90CCW = function(p) {
		var p;
		return new fixed.Point26_6.ptr(p.Y, -p.X);
	};
	Path.prototype.String = function() {
		var _1, _r, _r$1, _r$2, _r$3, i, p, s, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; p = $f.p; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		s = "";
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < p.$length)) { break; } */ if(!(i < p.$length)) { $s = 2; continue; }
			if (!((i === 0))) {
				s = s + (" ");
			}
				_1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (0)) { */ case 4:
					_r = fmt.Sprint(new sliceType$1([((x = $subslice(p, (i + 1 >> 0), (i + 3 >> 0)), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					s = s + ("S0" + _r);
					i = i + (4) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (1)) { */ case 5:
					_r$1 = fmt.Sprint(new sliceType$1([((x$1 = $subslice(p, (i + 1 >> 0), (i + 3 >> 0)), $subslice(new sliceType(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					s = s + ("A1" + _r$1);
					i = i + (4) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (2)) { */ case 6:
					_r$2 = fmt.Sprint(new sliceType$1([((x$2 = $subslice(p, (i + 1 >> 0), (i + 5 >> 0)), $subslice(new sliceType(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					s = s + ("A2" + _r$2);
					i = i + (6) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (3)) { */ case 7:
					_r$3 = fmt.Sprint(new sliceType$1([((x$3 = $subslice(p, (i + 1 >> 0), (i + 7 >> 0)), $subslice(new sliceType(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)))])); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					s = s + ("A3" + _r$3);
					i = i + (8) >> 0;
					$s = 9; continue;
				/* } else { */ case 8:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 9:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Path.prototype.String }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.p = p; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Path).prototype.String = function() { return this.$get().String(); };
	$ptrType(Path).prototype.Clear = function() {
		var p;
		p = this;
		p.$set($subslice((p.$get()), 0, 0));
	};
	$ptrType(Path).prototype.Start = function(a) {
		var a, p;
		p = this;
		p.$set($append(p.$get(), 0, a.X, a.Y, 0));
	};
	$ptrType(Path).prototype.Add1 = function(b) {
		var b, p;
		p = this;
		p.$set($append(p.$get(), 1, b.X, b.Y, 1));
	};
	$ptrType(Path).prototype.Add2 = function(b, c) {
		var b, c, p;
		p = this;
		p.$set($append(p.$get(), 2, b.X, b.Y, c.X, c.Y, 2));
	};
	$ptrType(Path).prototype.Add3 = function(b, c, d) {
		var b, c, d, p;
		p = this;
		p.$set($append(p.$get(), 3, b.X, b.Y, c.X, c.Y, d.X, d.Y, 3));
	};
	$ptrType(Path).prototype.AddPath = function(q) {
		var p, q;
		p = this;
		p.$set($appendSlice(p.$get(), $subslice(new sliceType(q.$array), q.$offset, q.$offset + q.$length)));
	};
	$ptrType(Path).prototype.AddStroke = function(q, width, cr, jr) {
		var cr, jr, p, q, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; cr = $f.cr; jr = $f.jr; p = $f.p; q = $f.q; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Stroke(p, q, width, cr, jr); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(Path).prototype.AddStroke }; } $f.cr = cr; $f.jr = jr; $f.p = p; $f.q = q; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Path.prototype.firstPoint = function() {
		var p;
		p = this;
		return new fixed.Point26_6.ptr((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]), (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
	};
	$ptrType(Path).prototype.firstPoint = function() { return this.$get().firstPoint(); };
	Path.prototype.lastPoint = function() {
		var p, x, x$1;
		p = this;
		return new fixed.Point26_6.ptr((x = p.$length - 3 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])), (x$1 = p.$length - 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1])));
	};
	$ptrType(Path).prototype.lastPoint = function() { return this.$get().lastPoint(); };
	addPathReversed = function(p, q) {
		var _1, i, p, q, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; i = $f.i; p = $f.p; q = $f.q; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (q.$length === 0) {
			$s = -1; return;
		}
		i = q.$length - 1 >> 0;
		/* while (true) { */ case 1:
				_1 = ((i < 0 || i >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + i]);
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (0)) { */ case 4:
					$s = -1; return;
				/* } else if (_1 === (1)) { */ case 5:
					i = i - (4) >> 0;
					$r = p.Add1(new fixed.Point26_6.ptr((x = i - 2 >> 0, ((x < 0 || x >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x])), (x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$1])))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else if (_1 === (2)) { */ case 6:
					i = i - (6) >> 0;
					$r = p.Add2(new fixed.Point26_6.ptr((x$2 = i + 2 >> 0, ((x$2 < 0 || x$2 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$2])), (x$3 = i + 3 >> 0, ((x$3 < 0 || x$3 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$3]))), new fixed.Point26_6.ptr((x$4 = i - 2 >> 0, ((x$4 < 0 || x$4 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$4])), (x$5 = i - 1 >> 0, ((x$5 < 0 || x$5 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$5])))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else if (_1 === (3)) { */ case 7:
					i = i - (8) >> 0;
					$r = p.Add3(new fixed.Point26_6.ptr((x$6 = i + 4 >> 0, ((x$6 < 0 || x$6 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$6])), (x$7 = i + 5 >> 0, ((x$7 < 0 || x$7 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$7]))), new fixed.Point26_6.ptr((x$8 = i + 2 >> 0, ((x$8 < 0 || x$8 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$8])), (x$9 = i + 3 >> 0, ((x$9 < 0 || x$9 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$9]))), new fixed.Point26_6.ptr((x$10 = i - 2 >> 0, ((x$10 < 0 || x$10 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$10])), (x$11 = i - 1 >> 0, ((x$11 < 0 || x$11 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$11])))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else { */ case 8:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 9:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: addPathReversed }; } $f._1 = _1; $f.i = i; $f.p = p; $f.q = q; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rasterizer.ptr.prototype.findCell = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, buf, c, i, prev, r, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, xi;
		r = this;
		if (r.yi < 0 || r.yi >= r.cellIndex.$length) {
			return -1;
		}
		xi = r.xi;
		if (xi < 0) {
			xi = -1;
		} else if (xi > r.width) {
			xi = r.width;
		}
		_tmp = (x = r.cellIndex, x$1 = r.yi, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_tmp$1 = -1;
		i = _tmp;
		prev = _tmp$1;
		while (true) {
			if (!(!((i === -1)) && (x$2 = r.cell, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])).xi <= xi)) { break; }
			if ((x$3 = r.cell, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i])).xi === xi) {
				return i;
			}
			_tmp$2 = (x$4 = r.cell, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])).next;
			_tmp$3 = i;
			i = _tmp$2;
			prev = _tmp$3;
		}
		c = r.cell.$length;
		if (c === r.cell.$capacity) {
			buf = $makeSlice(sliceType$3, c, ($imul(4, c)));
			$copySlice(buf, r.cell);
			r.cell = $subslice(buf, 0, (c + 1 >> 0));
		} else {
			r.cell = $subslice(r.cell, 0, (c + 1 >> 0));
		}
		cell.copy((x$5 = r.cell, ((c < 0 || c >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + c])), new cell.ptr(xi, 0, 0, i));
		if (prev === -1) {
			(x$6 = r.cellIndex, x$7 = r.yi, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7] = c));
		} else {
			(x$8 = r.cell, ((prev < 0 || prev >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + prev])).next = c;
		}
		return c;
	};
	Rasterizer.prototype.findCell = function() { return this.$val.findCell(); };
	Rasterizer.ptr.prototype.saveCell = function() {
		var i, r, x, x$1, x$2, x$3;
		r = this;
		if (!((r.area === 0)) || !((r.cover === 0))) {
			i = r.findCell();
			if (!((i === -1))) {
				(x$1 = r.cell, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).area = (x = r.cell, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).area + (r.area) >> 0;
				(x$3 = r.cell, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i])).cover = (x$2 = r.cell, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])).cover + (r.cover) >> 0;
			}
			r.area = 0;
			r.cover = 0;
		}
	};
	Rasterizer.prototype.saveCell = function() { return this.$val.saveCell(); };
	Rasterizer.ptr.prototype.setCell = function(xi, yi) {
		var _tmp, _tmp$1, r, xi, yi;
		r = this;
		if (!((r.xi === xi)) || !((r.yi === yi))) {
			r.saveCell();
			_tmp = xi;
			_tmp$1 = yi;
			r.xi = _tmp;
			r.yi = _tmp$1;
		}
	};
	Rasterizer.prototype.setCell = function(xi, yi) { return this.$val.setCell(xi, yi); };
	Rasterizer.ptr.prototype.scan = function(yi, x0, y0f, x1, y1f) {
		var _q, _q$1, _q$2, _q$3, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dx, dy, edge0, edge1, fullDelta, fullRem, p, q, r, x0, x0f, x0i, x1, x1f, x1i, xi, xiDelta, y, y0f, y1f, yDelta, yRem, yi;
		r = this;
		x0i = (_q = ((x0 >> 0)) / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		x0f = x0 - ((($imul(64, x0i)) >> 0)) >> 0;
		x1i = (_q$1 = ((x1 >> 0)) / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		x1f = x1 - ((($imul(64, x1i)) >> 0)) >> 0;
		if (y0f === y1f) {
			r.setCell(x1i, yi);
			return;
		}
		_tmp = x1 - x0 >> 0;
		_tmp$1 = y1f - y0f >> 0;
		dx = _tmp;
		dy = _tmp$1;
		if (x0i === x1i) {
			r.area = r.area + (((($imul(((x0f + x1f >> 0)), dy)) >> 0))) >> 0;
			r.cover = r.cover + (((dy >> 0))) >> 0;
			return;
		}
		_tmp$2 = 0;
		_tmp$3 = 0;
		_tmp$4 = 0;
		_tmp$5 = 0;
		p = _tmp$2;
		q = _tmp$3;
		edge0 = _tmp$4;
		edge1 = _tmp$5;
		xiDelta = 0;
		if (dx > 0) {
			_tmp$6 = $imul(((64 - x0f >> 0)), dy);
			_tmp$7 = dx;
			p = _tmp$6;
			q = _tmp$7;
			_tmp$8 = 0;
			_tmp$9 = 64;
			_tmp$10 = 1;
			edge0 = _tmp$8;
			edge1 = _tmp$9;
			xiDelta = _tmp$10;
		} else {
			_tmp$11 = $imul(x0f, dy);
			_tmp$12 = -dx;
			p = _tmp$11;
			q = _tmp$12;
			_tmp$13 = 64;
			_tmp$14 = 0;
			_tmp$15 = -1;
			edge0 = _tmp$13;
			edge1 = _tmp$14;
			xiDelta = _tmp$15;
		}
		_tmp$16 = (_q$2 = p / q, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
		_tmp$17 = (_r = p % q, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		yDelta = _tmp$16;
		yRem = _tmp$17;
		if (yRem < 0) {
			yDelta = yDelta - (1) >> 0;
			yRem = yRem + (q) >> 0;
		}
		_tmp$18 = x0i;
		_tmp$19 = y0f;
		xi = _tmp$18;
		y = _tmp$19;
		r.area = r.area + (((($imul(((x0f + edge1 >> 0)), yDelta)) >> 0))) >> 0;
		r.cover = r.cover + (((yDelta >> 0))) >> 0;
		_tmp$20 = xi + xiDelta >> 0;
		_tmp$21 = y + yDelta >> 0;
		xi = _tmp$20;
		y = _tmp$21;
		r.setCell(xi, yi);
		if (!((xi === x1i))) {
			p = $imul(64, (((y1f - y >> 0) + yDelta >> 0)));
			_tmp$22 = (_q$3 = p / q, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$23 = (_r$1 = p % q, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			fullDelta = _tmp$22;
			fullRem = _tmp$23;
			if (fullRem < 0) {
				fullDelta = fullDelta - (1) >> 0;
				fullRem = fullRem + (q) >> 0;
			}
			yRem = yRem - (q) >> 0;
			while (true) {
				if (!(!((xi === x1i)))) { break; }
				yDelta = fullDelta;
				yRem = yRem + (fullRem) >> 0;
				if (yRem >= 0) {
					yDelta = yDelta + (1) >> 0;
					yRem = yRem - (q) >> 0;
				}
				r.area = r.area + (((($imul(64, yDelta)) >> 0))) >> 0;
				r.cover = r.cover + (((yDelta >> 0))) >> 0;
				_tmp$24 = xi + xiDelta >> 0;
				_tmp$25 = y + yDelta >> 0;
				xi = _tmp$24;
				y = _tmp$25;
				r.setCell(xi, yi);
			}
		}
		yDelta = y1f - y >> 0;
		r.area = r.area + (((($imul(((edge0 + x1f >> 0)), yDelta)) >> 0))) >> 0;
		r.cover = r.cover + (((yDelta >> 0))) >> 0;
	};
	Rasterizer.prototype.scan = function(yi, x0, y0f, x1, y1f) { return this.$val.scan(yi, x0, y0f, x1, y1f); };
	Rasterizer.ptr.prototype.Start = function(a) {
		var _q, _q$1, a, r;
		r = this;
		r.setCell((((_q = a.X / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), (((_q$1 = a.Y / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)));
		fixed.Point26_6.copy(r.a, a);
	};
	Rasterizer.prototype.Start = function(a) { return this.$val.Start(a); };
	Rasterizer.ptr.prototype.Add1 = function(b) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, b, darea, dcover, dx, dy, edge0, edge0$1, edge1, edge1$1, fullDelta, fullRem, p, q, r, x, x0, x0fTimes2, x0i, x1, xDelta, xRem, y0, y0f, y0i, y1, y1f, y1i, yi, yi$1, yiDelta, yiDelta$1;
		r = this;
		_tmp = r.a.X;
		_tmp$1 = r.a.Y;
		x0 = _tmp;
		y0 = _tmp$1;
		_tmp$2 = b.X;
		_tmp$3 = b.Y;
		x1 = _tmp$2;
		y1 = _tmp$3;
		_tmp$4 = x1 - x0 >> 0;
		_tmp$5 = y1 - y0 >> 0;
		dx = _tmp$4;
		dy = _tmp$5;
		y0i = (_q = ((y0 >> 0)) / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		y0f = y0 - ((($imul(64, y0i)) >> 0)) >> 0;
		y1i = (_q$1 = ((y1 >> 0)) / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		y1f = y1 - ((($imul(64, y1i)) >> 0)) >> 0;
		if (y0i === y1i) {
			r.scan(y0i, x0, y0f, x1, y1f);
		} else if (dx === 0) {
			_tmp$6 = 0;
			_tmp$7 = 0;
			edge0 = _tmp$6;
			edge1 = _tmp$7;
			yiDelta = 0;
			if (dy > 0) {
				_tmp$8 = 0;
				_tmp$9 = 64;
				_tmp$10 = 1;
				edge0 = _tmp$8;
				edge1 = _tmp$9;
				yiDelta = _tmp$10;
			} else {
				_tmp$11 = 64;
				_tmp$12 = 0;
				_tmp$13 = -1;
				edge0 = _tmp$11;
				edge1 = _tmp$12;
				yiDelta = _tmp$13;
			}
			_tmp$14 = (_q$2 = ((x0 >> 0)) / 64, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$15 = y0i;
			x0i = _tmp$14;
			yi = _tmp$15;
			x0fTimes2 = $imul(((((x0 >> 0)) - (($imul(64, x0i))) >> 0)), 2);
			dcover = (((edge1 - y0f >> 0) >> 0));
			darea = (($imul(x0fTimes2, dcover)));
			r.area = r.area + (darea) >> 0;
			r.cover = r.cover + (dcover) >> 0;
			yi = yi + (yiDelta) >> 0;
			r.setCell(x0i, yi);
			dcover = (((edge1 - edge0 >> 0) >> 0));
			darea = (($imul(x0fTimes2, dcover)));
			while (true) {
				if (!(!((yi === y1i)))) { break; }
				r.area = r.area + (darea) >> 0;
				r.cover = r.cover + (dcover) >> 0;
				yi = yi + (yiDelta) >> 0;
				r.setCell(x0i, yi);
			}
			dcover = (((y1f - edge0 >> 0) >> 0));
			darea = (($imul(x0fTimes2, dcover)));
			r.area = r.area + (darea) >> 0;
			r.cover = r.cover + (dcover) >> 0;
		} else {
			_tmp$16 = 0;
			_tmp$17 = 0;
			_tmp$18 = 0;
			_tmp$19 = 0;
			p = _tmp$16;
			q = _tmp$17;
			edge0$1 = _tmp$18;
			edge1$1 = _tmp$19;
			yiDelta$1 = 0;
			if (dy > 0) {
				_tmp$20 = $imul(((64 - y0f >> 0)), dx);
				_tmp$21 = dy;
				p = _tmp$20;
				q = _tmp$21;
				_tmp$22 = 0;
				_tmp$23 = 64;
				_tmp$24 = 1;
				edge0$1 = _tmp$22;
				edge1$1 = _tmp$23;
				yiDelta$1 = _tmp$24;
			} else {
				_tmp$25 = $imul(y0f, dx);
				_tmp$26 = -dy;
				p = _tmp$25;
				q = _tmp$26;
				_tmp$27 = 64;
				_tmp$28 = 0;
				_tmp$29 = -1;
				edge0$1 = _tmp$27;
				edge1$1 = _tmp$28;
				yiDelta$1 = _tmp$29;
			}
			_tmp$30 = (_q$3 = p / q, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$31 = (_r = p % q, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			xDelta = _tmp$30;
			xRem = _tmp$31;
			if (xRem < 0) {
				xDelta = xDelta - (1) >> 0;
				xRem = xRem + (q) >> 0;
			}
			_tmp$32 = x0;
			_tmp$33 = y0i;
			x = _tmp$32;
			yi$1 = _tmp$33;
			r.scan(yi$1, x, y0f, x + xDelta >> 0, edge1$1);
			_tmp$34 = x + xDelta >> 0;
			_tmp$35 = yi$1 + yiDelta$1 >> 0;
			x = _tmp$34;
			yi$1 = _tmp$35;
			r.setCell((_q$4 = ((x >> 0)) / 64, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")), yi$1);
			if (!((yi$1 === y1i))) {
				p = $imul(64, dx);
				_tmp$36 = (_q$5 = p / q, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
				_tmp$37 = (_r$1 = p % q, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
				fullDelta = _tmp$36;
				fullRem = _tmp$37;
				if (fullRem < 0) {
					fullDelta = fullDelta - (1) >> 0;
					fullRem = fullRem + (q) >> 0;
				}
				xRem = xRem - (q) >> 0;
				while (true) {
					if (!(!((yi$1 === y1i)))) { break; }
					xDelta = fullDelta;
					xRem = xRem + (fullRem) >> 0;
					if (xRem >= 0) {
						xDelta = xDelta + (1) >> 0;
						xRem = xRem - (q) >> 0;
					}
					r.scan(yi$1, x, edge0$1, x + xDelta >> 0, edge1$1);
					_tmp$38 = x + xDelta >> 0;
					_tmp$39 = yi$1 + yiDelta$1 >> 0;
					x = _tmp$38;
					yi$1 = _tmp$39;
					r.setCell((_q$6 = ((x >> 0)) / 64, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")), yi$1);
				}
			}
			r.scan(yi$1, x, edge0$1, x1, y1f);
		}
		fixed.Point26_6.copy(r.a, b);
	};
	Rasterizer.prototype.Add1 = function(b) { return this.$val.Add1(b); };
	Rasterizer.ptr.prototype.Add2 = function(b, c) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, b, c, dev, i, midx, midy, mx, my, nsplit, p, pStack, r, s, sStack, x;
		r = this;
		dev = (_q = maxAbs((r.a.X - ($imul(2, b.X)) >> 0) + c.X >> 0, (r.a.Y - ($imul(2, b.Y)) >> 0) + c.Y >> 0) / ((r.splitScale2 >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		nsplit = 0;
		while (true) {
			if (!(dev > 0)) { break; }
			dev = (_q$1 = dev / (4), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			nsplit = nsplit + (1) >> 0;
		}
		if (nsplit > 16) {
			$panic(new $String("freetype/raster: Add2 nsplit too large: " + strconv.Itoa(nsplit)));
		}
		pStack = arrayType$1.zero();
		sStack = arrayType$2.zero();
		i = 0;
		sStack[0] = nsplit;
		fixed.Point26_6.copy(pStack[0], c);
		fixed.Point26_6.copy(pStack[1], b);
		fixed.Point26_6.copy(pStack[2], r.a);
		while (true) {
			if (!(i >= 0)) { break; }
			s = ((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i]);
			p = $subslice(new sliceType$4(pStack), ($imul(2, i)));
			if (s > 0) {
				mx = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X;
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X;
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X = (_q$2 = (((4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X + mx >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X = (_q$3 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + mx >> 0)) / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X = (_q$4 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X >> 0)) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
				my = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y;
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y;
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y = (_q$5 = (((4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y + my >> 0)) / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y = (_q$6 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + my >> 0)) / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero"));
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y = (_q$7 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y >> 0)) / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i] = (s - 1 >> 0));
				(x = i + 1 >> 0, ((x < 0 || x >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[x] = (s - 1 >> 0)));
				i = i + (1) >> 0;
			} else {
				midx = (_q$8 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + ($imul(2, (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X)) >> 0) + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X >> 0)) / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero"));
				midy = (_q$9 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + ($imul(2, (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y)) >> 0) + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y >> 0)) / 4, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero"));
				r.Add1(new fixed.Point26_6.ptr(midx, midy));
				r.Add1($clone((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), fixed.Point26_6));
				i = i - (1) >> 0;
			}
		}
	};
	Rasterizer.prototype.Add2 = function(b, c) { return this.$val.Add2(b, c); };
	Rasterizer.ptr.prototype.Add3 = function(b, c, d) {
		var _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$14, _q$15, _q$16, _q$17, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, b, c, d, dev2, dev3, i, m01x, m01y, m12x, m12y, m23x, m23y, midx, midy, nsplit, p, pStack, r, s, sStack, x;
		r = this;
		dev2 = (_q = maxAbs((r.a.X - ($imul(3, ((b.X + c.X >> 0)))) >> 0) + d.X >> 0, (r.a.Y - ($imul(3, ((b.Y + c.Y >> 0)))) >> 0) + d.Y >> 0) / ((r.splitScale2 >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		dev3 = (_q$1 = maxAbs((r.a.X - ($imul(2, b.X)) >> 0) + d.X >> 0, (r.a.Y - ($imul(2, b.Y)) >> 0) + d.Y >> 0) / ((r.splitScale3 >> 0)), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		nsplit = 0;
		while (true) {
			if (!(dev2 > 0 || dev3 > 0)) { break; }
			dev2 = (_q$2 = dev2 / (8), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
			dev3 = (_q$3 = dev3 / (4), (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
			nsplit = nsplit + (1) >> 0;
		}
		if (nsplit > 16) {
			$panic(new $String("freetype/raster: Add3 nsplit too large: " + strconv.Itoa(nsplit)));
		}
		pStack = arrayType$3.zero();
		sStack = arrayType$2.zero();
		i = 0;
		sStack[0] = nsplit;
		fixed.Point26_6.copy(pStack[0], d);
		fixed.Point26_6.copy(pStack[1], c);
		fixed.Point26_6.copy(pStack[2], b);
		fixed.Point26_6.copy(pStack[3], r.a);
		while (true) {
			if (!(i >= 0)) { break; }
			s = ((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i]);
			p = $subslice(new sliceType$4(pStack), ($imul(3, i)));
			if (s > 0) {
				m01x = (_q$4 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X >> 0)) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
				m12x = (_q$5 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X >> 0)) / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
				m23x = (_q$6 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X >> 0)) / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero"));
				(6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6]).X = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X;
				(5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5]).X = m23x;
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X = m01x;
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X = (_q$7 = ((m01x + m12x >> 0)) / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero"));
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X = (_q$8 = ((m12x + m23x >> 0)) / 2, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero"));
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X = (_q$9 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X + (4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X >> 0)) / 2, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero"));
				m01y = (_q$10 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y >> 0)) / 2, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero"));
				m12y = (_q$11 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y >> 0)) / 2, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero"));
				m23y = (_q$12 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y >> 0)) / 2, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero"));
				(6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6]).Y = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y;
				(5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5]).Y = m23y;
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y = m01y;
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y = (_q$13 = ((m01y + m12y >> 0)) / 2, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero"));
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y = (_q$14 = ((m12y + m23y >> 0)) / 2, (_q$14 === _q$14 && _q$14 !== 1/0 && _q$14 !== -1/0) ? _q$14 >> 0 : $throwRuntimeError("integer divide by zero"));
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y = (_q$15 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y + (4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y >> 0)) / 2, (_q$15 === _q$15 && _q$15 !== 1/0 && _q$15 !== -1/0) ? _q$15 >> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i] = (s - 1 >> 0));
				(x = i + 1 >> 0, ((x < 0 || x >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[x] = (s - 1 >> 0)));
				i = i + (1) >> 0;
			} else {
				midx = (_q$16 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + ($imul(3, (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X >> 0)))) >> 0) + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X >> 0)) / 8, (_q$16 === _q$16 && _q$16 !== 1/0 && _q$16 !== -1/0) ? _q$16 >> 0 : $throwRuntimeError("integer divide by zero"));
				midy = (_q$17 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + ($imul(3, (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y >> 0)))) >> 0) + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y >> 0)) / 8, (_q$17 === _q$17 && _q$17 !== 1/0 && _q$17 !== -1/0) ? _q$17 >> 0 : $throwRuntimeError("integer divide by zero"));
				r.Add1(new fixed.Point26_6.ptr(midx, midy));
				r.Add1($clone((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), fixed.Point26_6));
				i = i - (1) >> 0;
			}
		}
	};
	Rasterizer.prototype.Add3 = function(b, c, d) { return this.$val.Add3(b, c, d); };
	Rasterizer.ptr.prototype.AddPath = function(p) {
		var _1, i, p, r, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		r = this;
		i = 0;
		while (true) {
			if (!(i < p.$length)) { break; }
			_1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (_1 === (0)) {
				r.Start(new fixed.Point26_6.ptr((x = i + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])), (x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1]))));
				i = i + (4) >> 0;
			} else if (_1 === (1)) {
				r.Add1(new fixed.Point26_6.ptr((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2])), (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]))));
				i = i + (4) >> 0;
			} else if (_1 === (2)) {
				r.Add2(new fixed.Point26_6.ptr((x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4])), (x$5 = i + 2 >> 0, ((x$5 < 0 || x$5 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$5]))), new fixed.Point26_6.ptr((x$6 = i + 3 >> 0, ((x$6 < 0 || x$6 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$6])), (x$7 = i + 4 >> 0, ((x$7 < 0 || x$7 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$7]))));
				i = i + (6) >> 0;
			} else if (_1 === (3)) {
				r.Add3(new fixed.Point26_6.ptr((x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$8])), (x$9 = i + 2 >> 0, ((x$9 < 0 || x$9 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$9]))), new fixed.Point26_6.ptr((x$10 = i + 3 >> 0, ((x$10 < 0 || x$10 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$10])), (x$11 = i + 4 >> 0, ((x$11 < 0 || x$11 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$11]))), new fixed.Point26_6.ptr((x$12 = i + 5 >> 0, ((x$12 < 0 || x$12 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$12])), (x$13 = i + 6 >> 0, ((x$13 < 0 || x$13 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$13]))));
				i = i + (8) >> 0;
			} else {
				$panic(new $String("freetype/raster: bad path"));
			}
		}
	};
	Rasterizer.prototype.AddPath = function(p) { return this.$val.AddPath(p); };
	Rasterizer.ptr.prototype.AddStroke = function(q, width, cr, jr) {
		var cr, jr, q, r, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; cr = $f.cr; jr = $f.jr; q = $f.q; r = $f.r; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = Stroke(r, q, width, cr, jr); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rasterizer.ptr.prototype.AddStroke }; } $f.cr = cr; $f.jr = jr; $f.q = q; $f.r = r; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rasterizer.prototype.AddStroke = function(q, width, cr, jr) { return this.$val.AddStroke(q, width, cr, jr); };
	Rasterizer.ptr.prototype.areaToAlpha = function(area) {
		var a, alpha, area, r;
		r = this;
		a = ((area + 1 >> 0)) >> 1 >> 0;
		if (a < 0) {
			a = -a;
		}
		alpha = ((a >>> 0));
		if (r.UseNonZeroWinding) {
			if (alpha > 4095) {
				alpha = 4095;
			}
		} else {
			alpha = (alpha & (8191)) >>> 0;
			if (alpha > 4096) {
				alpha = 8192 - alpha >>> 0;
			} else if (alpha === 4096) {
				alpha = 4095;
			}
		}
		return ((alpha << 4 >>> 0) | (alpha >>> 8 >>> 0)) >>> 0;
	};
	Rasterizer.prototype.areaToAlpha = function(area) { return this.$val.areaToAlpha(area); };
	Rasterizer.ptr.prototype.Rasterize = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, alpha, alpha$1, c, cover, p, r, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xi, xi0, xi0$1, xi1, xi1$1, yi, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; alpha = $f.alpha; alpha$1 = $f.alpha$1; c = $f.c; cover = $f.cover; p = $f.p; r = $f.r; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; xi = $f.xi; xi0 = $f.xi0; xi0$1 = $f.xi0$1; xi1 = $f.xi1; xi1$1 = $f.xi1$1; yi = $f.yi; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.saveCell();
		s = 0;
		yi = 0;
		/* while (true) { */ case 1:
			/* if (!(yi < r.cellIndex.$length)) { break; } */ if(!(yi < r.cellIndex.$length)) { $s = 2; continue; }
			_tmp = 0;
			_tmp$1 = 0;
			xi = _tmp;
			cover = _tmp$1;
			c = (x = r.cellIndex, ((yi < 0 || yi >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + yi]));
			/* while (true) { */ case 3:
				/* if (!(!((c === -1)))) { break; } */ if(!(!((c === -1)))) { $s = 4; continue; }
				if (!((cover === 0)) && (x$1 = r.cell, ((c < 0 || c >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + c])).xi > xi) {
					alpha = r.areaToAlpha($imul(($imul(cover, 64)), 2));
					if (!((alpha === 0))) {
						_tmp$2 = xi;
						_tmp$3 = (x$2 = r.cell, ((c < 0 || c >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + c])).xi;
						xi0 = _tmp$2;
						xi1 = _tmp$3;
						if (xi0 < 0) {
							xi0 = 0;
						}
						if (xi1 >= r.width) {
							xi1 = r.width;
						}
						if (xi0 < xi1) {
							Span.copy((x$3 = r.spanBuf, ((s < 0 || s >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[s])), new Span.ptr(yi + r.Dy >> 0, xi0 + r.Dx >> 0, xi1 + r.Dx >> 0, alpha));
							s = s + (1) >> 0;
						}
					}
				}
				cover = cover + ((x$4 = r.cell, ((c < 0 || c >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + c])).cover) >> 0;
				alpha$1 = r.areaToAlpha(($imul(($imul(cover, 64)), 2)) - (x$5 = r.cell, ((c < 0 || c >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + c])).area >> 0);
				xi = (x$6 = r.cell, ((c < 0 || c >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + c])).xi + 1 >> 0;
				if (!((alpha$1 === 0))) {
					_tmp$4 = (x$7 = r.cell, ((c < 0 || c >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + c])).xi;
					_tmp$5 = xi;
					xi0$1 = _tmp$4;
					xi1$1 = _tmp$5;
					if (xi0$1 < 0) {
						xi0$1 = 0;
					}
					if (xi1$1 >= r.width) {
						xi1$1 = r.width;
					}
					if (xi0$1 < xi1$1) {
						Span.copy((x$8 = r.spanBuf, ((s < 0 || s >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[s])), new Span.ptr(yi + r.Dy >> 0, xi0$1 + r.Dx >> 0, xi1$1 + r.Dx >> 0, alpha$1));
						s = s + (1) >> 0;
					}
				}
				/* */ if (s > 62) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (s > 62) { */ case 5:
					$r = p.Paint($subslice(new sliceType$2(r.spanBuf), 0, s), false); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					s = 0;
				/* } */ case 6:
				c = (x$9 = r.cell, ((c < 0 || c >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + c])).next;
			/* } */ $s = 3; continue; case 4:
			yi = yi + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = p.Paint($subslice(new sliceType$2(r.spanBuf), 0, s), true); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rasterizer.ptr.prototype.Rasterize }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.alpha = alpha; $f.alpha$1 = alpha$1; $f.c = c; $f.cover = cover; $f.p = p; $f.r = r; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.xi = xi; $f.xi0 = xi0; $f.xi0$1 = xi0$1; $f.xi1 = xi1; $f.xi1$1 = xi1$1; $f.yi = yi; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rasterizer.prototype.Rasterize = function(p) { return this.$val.Rasterize(p); };
	Rasterizer.ptr.prototype.Clear = function() {
		var i, r, x;
		r = this;
		fixed.Point26_6.copy(r.a, new fixed.Point26_6.ptr(0, 0));
		r.xi = 0;
		r.yi = 0;
		r.area = 0;
		r.cover = 0;
		r.cell = $subslice(r.cell, 0, 0);
		i = 0;
		while (true) {
			if (!(i < r.cellIndex.$length)) { break; }
			(x = r.cellIndex, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = -1));
			i = i + (1) >> 0;
		}
	};
	Rasterizer.prototype.Clear = function() { return this.$val.Clear(); };
	Rasterizer.ptr.prototype.SetBounds = function(width, height) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, height, r, ss2, ss3, width;
		r = this;
		if (width < 0) {
			width = 0;
		}
		if (height < 0) {
			height = 0;
		}
		_tmp = 32;
		_tmp$1 = 16;
		ss2 = _tmp;
		ss3 = _tmp$1;
		if (width > 24 || height > 24) {
			_tmp$2 = $imul(2, ss2);
			_tmp$3 = $imul(2, ss3);
			ss2 = _tmp$2;
			ss3 = _tmp$3;
			if (width > 120 || height > 120) {
				_tmp$4 = $imul(2, ss2);
				_tmp$5 = $imul(2, ss3);
				ss2 = _tmp$4;
				ss3 = _tmp$5;
			}
		}
		r.width = width;
		r.splitScale2 = ss2;
		r.splitScale3 = ss3;
		r.cell = $subslice(new sliceType$3(r.cellBuf), 0, 0);
		if (height > 64) {
			r.cellIndex = $makeSlice(sliceType$5, height);
		} else {
			r.cellIndex = $subslice(new sliceType$5(r.cellIndexBuf), 0, height);
		}
		r.Clear();
	};
	Rasterizer.prototype.SetBounds = function(width, height) { return this.$val.SetBounds(width, height); };
	CapperFunc.prototype.Cap = function(p, halfWidth, pivot, n1) {
		var f, halfWidth, n1, p, pivot, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; halfWidth = $f.halfWidth; n1 = $f.n1; p = $f.p; pivot = $f.pivot; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this.$val;
		$r = f(p, halfWidth, $clone(pivot, fixed.Point26_6), $clone(n1, fixed.Point26_6)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapperFunc.prototype.Cap }; } $f.f = f; $f.halfWidth = halfWidth; $f.n1 = n1; $f.p = p; $f.pivot = pivot; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(CapperFunc).prototype.Cap = function(p, halfWidth, pivot, n1) { return new CapperFunc(this.$get()).Cap(p, halfWidth, pivot, n1); };
	JoinerFunc.prototype.Join = function(lhs, rhs, halfWidth, pivot, n0, n1) {
		var f, halfWidth, lhs, n0, n1, pivot, rhs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; halfWidth = $f.halfWidth; lhs = $f.lhs; n0 = $f.n0; n1 = $f.n1; pivot = $f.pivot; rhs = $f.rhs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this.$val;
		$r = f(lhs, rhs, halfWidth, $clone(pivot, fixed.Point26_6), $clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JoinerFunc.prototype.Join }; } $f.f = f; $f.halfWidth = halfWidth; $f.lhs = lhs; $f.n0 = n0; $f.n1 = n1; $f.pivot = pivot; $f.rhs = rhs; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(JoinerFunc).prototype.Join = function(lhs, rhs, halfWidth, pivot, n0, n1) { return new JoinerFunc(this.$get()).Join(lhs, rhs, halfWidth, pivot, n0, n1); };
	roundCapper = function(p, halfWidth, pivot, n1) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, d, e, end, halfWidth, n1, p, pivot, side, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; d = $f.d; e = $f.e; end = $f.end; halfWidth = $f.halfWidth; n1 = $f.n1; p = $f.p; pivot = $f.pivot; side = $f.side; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = $clone(pRot90CCW($clone(n1, fixed.Point26_6)), fixed.Point26_6);
		side = $clone($clone(pivot, fixed.Point26_6).Add($clone(e, fixed.Point26_6)), fixed.Point26_6);
		_tmp = $clone($clone(pivot, fixed.Point26_6).Sub($clone(n1, fixed.Point26_6)), fixed.Point26_6);
		_tmp$1 = $clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6);
		start = $clone(_tmp, fixed.Point26_6);
		end = $clone(_tmp$1, fixed.Point26_6);
		_tmp$2 = $clone($clone(n1, fixed.Point26_6).Mul(35), fixed.Point26_6);
		_tmp$3 = $clone($clone(e, fixed.Point26_6).Mul(35), fixed.Point26_6);
		d = $clone(_tmp$2, fixed.Point26_6);
		e = $clone(_tmp$3, fixed.Point26_6);
		$r = p.Add3($clone($clone(start, fixed.Point26_6).Add($clone(e, fixed.Point26_6)), fixed.Point26_6), $clone($clone(side, fixed.Point26_6).Sub($clone(d, fixed.Point26_6)), fixed.Point26_6), $clone(side, fixed.Point26_6)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.Add3($clone($clone(side, fixed.Point26_6).Add($clone(d, fixed.Point26_6)), fixed.Point26_6), $clone($clone(end, fixed.Point26_6).Add($clone(e, fixed.Point26_6)), fixed.Point26_6), $clone(end, fixed.Point26_6)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: roundCapper }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.d = d; $f.e = e; $f.end = end; $f.halfWidth = halfWidth; $f.n1 = n1; $f.p = p; $f.pivot = pivot; $f.side = side; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	roundJoiner = function(lhs, rhs, haflWidth, pivot, n0, n1) {
		var dot, haflWidth, lhs, n0, n1, pivot, rhs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dot = $f.dot; haflWidth = $f.haflWidth; lhs = $f.lhs; n0 = $f.n0; n1 = $f.n1; pivot = $f.pivot; rhs = $f.rhs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = pDot($clone(pRot90CW($clone(n0, fixed.Point26_6)), fixed.Point26_6), $clone(n1, fixed.Point26_6));
		/* */ if ((dot.$high > 0 || (dot.$high === 0 && dot.$low >= 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((dot.$high > 0 || (dot.$high === 0 && dot.$low >= 0))) { */ case 1:
			$r = addArc(lhs, $clone(pivot, fixed.Point26_6), $clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = rhs.Add1($clone($clone(pivot, fixed.Point26_6).Sub($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			$r = lhs.Add1($clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = addArc(rhs, $clone(pivot, fixed.Point26_6), $clone(pNeg($clone(n0, fixed.Point26_6)), fixed.Point26_6), $clone(pNeg($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: roundJoiner }; } $f.dot = dot; $f.haflWidth = haflWidth; $f.lhs = lhs; $f.n0 = n0; $f.n1 = n1; $f.pivot = pivot; $f.rhs = rhs; $f.$s = $s; $f.$r = $r; return $f;
	};
	addArc = function(p, pivot, n0, n1) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, d, m0, m1, m2, multiple, n0, n0t, n0t$1, n1, p, pivot, pm1, pm1$1, r2, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; d = $f.d; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; multiple = $f.multiple; n0 = $f.n0; n0t = $f.n0t; n0t$1 = $f.n0t$1; n1 = $f.n1; p = $f.p; pivot = $f.pivot; pm1 = $f.pm1; pm1$1 = $f.pm1$1; r2 = $f.r2; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r2 = pDot($clone(n0, fixed.Point26_6), $clone(n0, fixed.Point26_6));
		/* */ if ((r2.$high < 0 || (r2.$high === 0 && r2.$low < 1024))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((r2.$high < 0 || (r2.$high === 0 && r2.$low < 1024))) { */ case 1:
			$r = p.Add1($clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		s = new fixed.Point26_6.ptr(0, 0);
		m0 = $clone(pRot45CW($clone(n0, fixed.Point26_6)), fixed.Point26_6);
		m1 = $clone(pRot90CW($clone(n0, fixed.Point26_6)), fixed.Point26_6);
		m2 = $clone(pRot90CW($clone(m0, fixed.Point26_6)), fixed.Point26_6);
		/* */ if ((x = pDot($clone(m1, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x.$high > 0 || (x.$high === 0 && x.$low >= 0)))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((x = pDot($clone(m1, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x.$high > 0 || (x.$high === 0 && x.$low >= 0)))) { */ case 4:
			/* */ if ((x$1 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((x$1 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0)))) { */ case 7:
				/* */ if ((x$2 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 0)))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if ((x$2 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 0)))) { */ case 10:
					fixed.Point26_6.copy(s, n0);
					$s = 12; continue;
				/* } else { */ case 11:
					$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Add($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(m0, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, m0);
				/* } */ case 12:
				$s = 9; continue;
			/* } else { */ case 8:
				_tmp = $clone($clone(pivot, fixed.Point26_6).Add($clone(m1, fixed.Point26_6)), fixed.Point26_6);
				_tmp$1 = $clone($clone(n0, fixed.Point26_6).Mul(27), fixed.Point26_6);
				pm1 = $clone(_tmp, fixed.Point26_6);
				n0t = $clone(_tmp$1, fixed.Point26_6);
				$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Add($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(m0, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.Add2($clone($clone(pm1, fixed.Point26_6).Add($clone(n0t, fixed.Point26_6)), fixed.Point26_6), $clone(pm1, fixed.Point26_6)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((x$3 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$3.$high > 0 || (x$3.$high === 0 && x$3.$low >= 0)))) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if ((x$3 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$3.$high > 0 || (x$3.$high === 0 && x$3.$low >= 0)))) { */ case 16:
					fixed.Point26_6.copy(s, m1);
					$s = 18; continue;
				/* } else { */ case 17:
					$r = p.Add2($clone($clone(pm1, fixed.Point26_6).Sub($clone(n0t, fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(m2, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, m2);
				/* } */ case 18:
			/* } */ case 9:
			$s = 6; continue;
		/* } else { */ case 5:
			/* */ if ((x$4 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0)))) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((x$4 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0)))) { */ case 20:
				/* */ if ((x$5 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$5.$high > 0 || (x$5.$high === 0 && x$5.$low >= 0)))) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if ((x$5 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$5.$high > 0 || (x$5.$high === 0 && x$5.$low >= 0)))) { */ case 23:
					fixed.Point26_6.copy(s, n0);
					$s = 25; continue;
				/* } else { */ case 24:
					$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Sub($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub($clone(m2, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, pNeg($clone(m2, fixed.Point26_6)));
				/* } */ case 25:
				$s = 22; continue;
			/* } else { */ case 21:
				_tmp$2 = $clone($clone(pivot, fixed.Point26_6).Sub($clone(m1, fixed.Point26_6)), fixed.Point26_6);
				_tmp$3 = $clone($clone(n0, fixed.Point26_6).Mul(27), fixed.Point26_6);
				pm1$1 = $clone(_tmp$2, fixed.Point26_6);
				n0t$1 = $clone(_tmp$3, fixed.Point26_6);
				$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Sub($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub($clone(m2, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.Add2($clone($clone(pm1$1, fixed.Point26_6).Add($clone(n0t$1, fixed.Point26_6)), fixed.Point26_6), $clone(pm1$1, fixed.Point26_6)); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((x$6 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$6.$high < 0 || (x$6.$high === 0 && x$6.$low <= 0)))) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if ((x$6 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$6.$high < 0 || (x$6.$high === 0 && x$6.$low <= 0)))) { */ case 29:
					fixed.Point26_6.copy(s, pNeg($clone(m1, fixed.Point26_6)));
					$s = 31; continue;
				/* } else { */ case 30:
					$r = p.Add2($clone($clone(pm1$1, fixed.Point26_6).Sub($clone(n0t$1, fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub($clone(m0, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, pNeg($clone(m0, fixed.Point26_6)));
				/* } */ case 31:
			/* } */ case 22:
		/* } */ case 6:
		d = $div64($mul64(new fixed.Int52_12(0, 256), pDot($clone(s, fixed.Point26_6), $clone(n1, fixed.Point26_6))), r2, false);
		multiple = (((x$7 = (x$8 = $div64($mul64(new fixed.Int52_12(0, 22), (new fixed.Int52_12(d.$high - 0, d.$low - 181))), new fixed.Int52_12(0, 75), false), new fixed.Int52_12(0 - x$8.$high, 150 - x$8.$low)), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0)) >> 2 >> 0;
		$r = p.Add2($clone($clone(pivot, fixed.Point26_6).Add($clone($clone($clone(s, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6).Mul(multiple), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: addArc }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.d = d; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.multiple = multiple; $f.n0 = n0; $f.n0t = n0t; $f.n0t$1 = n0t$1; $f.n1 = n1; $f.p = p; $f.pivot = pivot; $f.pm1 = pm1; $f.pm1$1 = pm1$1; $f.r2 = r2; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.$s = $s; $f.$r = $r; return $f;
	};
	midpoint = function(a, b) {
		var _q, _q$1, a, b;
		return new fixed.Point26_6.ptr((_q = ((a.X + b.X >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ((a.Y + b.Y >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	angleGreaterThan45 = function(v0, v1) {
		var v, v0, v1, x, x$1;
		v = $clone(pRot45CCW($clone(v0, fixed.Point26_6)), fixed.Point26_6);
		return (x = pDot($clone(v, fixed.Point26_6), $clone(v1, fixed.Point26_6)), (x.$high < 0 || (x.$high === 0 && x.$low < 0))) || (x$1 = pDot($clone(pRot90CW($clone(v, fixed.Point26_6)), fixed.Point26_6), $clone(v1, fixed.Point26_6)), (x$1.$high < 0 || (x$1.$high === 0 && x$1.$low < 0)));
	};
	interpolate = function(a, b, t) {
		var a, b, s, t, x, x$1, x$2, x$3, x$4, x$5, x$6, y;
		s = new fixed.Int52_12(0 - t.$high, 4096 - t.$low);
		x$2 = (x = $mul64(s, (new fixed.Int52_12(0, a.X))), x$1 = $mul64(t, (new fixed.Int52_12(0, b.X))), new fixed.Int52_12(x.$high + x$1.$high, x.$low + x$1.$low));
		y = (x$3 = $mul64(s, (new fixed.Int52_12(0, a.Y))), x$4 = $mul64(t, (new fixed.Int52_12(0, b.Y))), new fixed.Int52_12(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
		return new fixed.Point26_6.ptr((((x$5 = $shiftRightInt64(x$2, 12), x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0)), (((x$6 = $shiftRightInt64(y, 12), x$6.$low + ((x$6.$high >> 31) * 4294967296)) >> 0)));
	};
	curviest2 = function(a, b, c) {
		var a, b, c, dx, dy, ex, ey, x, x$1, x$2, x$3, x$4;
		dx = (new $Int64(0, (b.X - a.X >> 0)));
		dy = (new $Int64(0, (b.Y - a.Y >> 0)));
		ex = (new $Int64(0, ((c.X - ($imul(2, b.X)) >> 0) + a.X >> 0)));
		ey = (new $Int64(0, ((c.Y - ($imul(2, b.Y)) >> 0) + a.Y >> 0)));
		if ((ex.$high === 0 && ex.$low === 0) && (ey.$high === 0 && ey.$low === 0)) {
			return new fixed.Int52_12(0, 2048);
		}
		return ((x = $div64($mul64(new $Int64(-1, 4294963200), ((x$1 = $mul64(dx, ex), x$2 = $mul64(dy, ey), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)))), ((x$3 = $mul64(ex, ex), x$4 = $mul64(ey, ey), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low))), false), new fixed.Int52_12(x.$high, x.$low)));
	};
	stroker.ptr.prototype.addNonCurvy2 = function(b, c) {
		var _tmp, _tmp$1, a, ab, abIsSmall, anorm, b, b$1, bc, bcIsSmall, bnorm, c, c$1, cnorm, depth, ds, k, mab, mac, mbc, ps, t, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; ab = $f.ab; abIsSmall = $f.abIsSmall; anorm = $f.anorm; b = $f.b; b$1 = $f.b$1; bc = $f.bc; bcIsSmall = $f.bcIsSmall; bnorm = $f.bnorm; c = $f.c; c$1 = $f.c$1; cnorm = $f.cnorm; depth = $f.depth; ds = $f.ds; k = $f.k; mab = $f.mab; mac = $f.mac; mbc = $f.mbc; ps = $f.ps; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		ds = arrayType$7.zero();
		ps = arrayType$8.zero();
		t = 0;
		ds[0] = 0;
		fixed.Point26_6.copy(ps[2], k.a);
		fixed.Point26_6.copy(ps[1], b);
		fixed.Point26_6.copy(ps[0], c);
		anorm = $clone(k.anorm, fixed.Point26_6);
		cnorm = new fixed.Point26_6.ptr(0, 0);
		/* while (true) { */ case 1:
			depth = ((t < 0 || t >= ds.length) ? ($throwRuntimeError("index out of range"), undefined) : ds[t]);
			a = $clone((x = ($imul(2, t)) + 2 >> 0, ((x < 0 || x >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x])), fixed.Point26_6);
			b$1 = $clone((x$1 = ($imul(2, t)) + 1 >> 0, ((x$1 < 0 || x$1 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$1])), fixed.Point26_6);
			c$1 = $clone((x$2 = ($imul(2, t)) + 0 >> 0, ((x$2 < 0 || x$2 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$2])), fixed.Point26_6);
			ab = $clone($clone(b$1, fixed.Point26_6).Sub($clone(a, fixed.Point26_6)), fixed.Point26_6);
			bc = $clone($clone(c$1, fixed.Point26_6).Sub($clone(b$1, fixed.Point26_6)), fixed.Point26_6);
			abIsSmall = (x$3 = pDot($clone(ab, fixed.Point26_6), $clone(ab, fixed.Point26_6)), (x$3.$high < 0 || (x$3.$high === 0 && x$3.$low < 4096)));
			bcIsSmall = (x$4 = pDot($clone(bc, fixed.Point26_6), $clone(bc, fixed.Point26_6)), (x$4.$high < 0 || (x$4.$high === 0 && x$4.$low < 4096)));
			/* */ if (abIsSmall && bcIsSmall) { $s = 3; continue; }
			/* */ if (depth < 5 && angleGreaterThan45($clone(ab, fixed.Point26_6), $clone(bc, fixed.Point26_6))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (abIsSmall && bcIsSmall) { */ case 3:
				fixed.Point26_6.copy(cnorm, pRot90CCW($clone(pNorm($clone(bc, fixed.Point26_6), k.u), fixed.Point26_6)));
				mac = $clone(midpoint($clone(a, fixed.Point26_6), $clone(c$1, fixed.Point26_6)), fixed.Point26_6);
				$r = addArc(k.p, $clone(mac, fixed.Point26_6), $clone(anorm, fixed.Point26_6), $clone(cnorm, fixed.Point26_6)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = addArc((k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), $clone(mac, fixed.Point26_6), $clone(pNeg($clone(anorm, fixed.Point26_6)), fixed.Point26_6), $clone(pNeg($clone(cnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if (depth < 5 && angleGreaterThan45($clone(ab, fixed.Point26_6), $clone(bc, fixed.Point26_6))) { */ case 4:
				mab = $clone(midpoint($clone(a, fixed.Point26_6), $clone(b$1, fixed.Point26_6)), fixed.Point26_6);
				mbc = $clone(midpoint($clone(b$1, fixed.Point26_6), $clone(c$1, fixed.Point26_6)), fixed.Point26_6);
				t = t + (1) >> 0;
				(x$5 = t + 0 >> 0, ((x$5 < 0 || x$5 >= ds.length) ? ($throwRuntimeError("index out of range"), undefined) : ds[x$5] = (depth + 1 >> 0)));
				(x$6 = t - 1 >> 0, ((x$6 < 0 || x$6 >= ds.length) ? ($throwRuntimeError("index out of range"), undefined) : ds[x$6] = (depth + 1 >> 0)));
				fixed.Point26_6.copy((x$7 = ($imul(2, t)) + 2 >> 0, ((x$7 < 0 || x$7 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$7])), a);
				fixed.Point26_6.copy((x$8 = ($imul(2, t)) + 1 >> 0, ((x$8 < 0 || x$8 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$8])), mab);
				fixed.Point26_6.copy((x$9 = ($imul(2, t)) + 0 >> 0, ((x$9 < 0 || x$9 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$9])), midpoint($clone(mab, fixed.Point26_6), $clone(mbc, fixed.Point26_6)));
				fixed.Point26_6.copy((x$10 = ($imul(2, t)) - 1 >> 0, ((x$10 < 0 || x$10 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$10])), mbc);
				/* continue; */ $s = 1; continue;
				$s = 6; continue;
			/* } else { */ case 5:
				bnorm = $clone(pRot90CCW($clone(pNorm($clone($clone(c$1, fixed.Point26_6).Sub($clone(a, fixed.Point26_6)), fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
				fixed.Point26_6.copy(cnorm, pRot90CCW($clone(pNorm($clone(bc, fixed.Point26_6), k.u), fixed.Point26_6)));
				$r = k.p.Add2($clone($clone(b$1, fixed.Point26_6).Add($clone(bnorm, fixed.Point26_6)), fixed.Point26_6), $clone($clone(c$1, fixed.Point26_6).Add($clone(cnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add2($clone($clone(b$1, fixed.Point26_6).Sub($clone(bnorm, fixed.Point26_6)), fixed.Point26_6), $clone($clone(c$1, fixed.Point26_6).Sub($clone(cnorm, fixed.Point26_6)), fixed.Point26_6));
			/* } */ case 6:
			if (t === 0) {
				_tmp = $clone(c$1, fixed.Point26_6);
				_tmp$1 = $clone(cnorm, fixed.Point26_6);
				fixed.Point26_6.copy(k.a, _tmp);
				fixed.Point26_6.copy(k.anorm, _tmp$1);
				$s = -1; return;
			}
			t = t - (1) >> 0;
			fixed.Point26_6.copy(anorm, cnorm);
		/* } */ $s = 1; continue; case 2:
		$panic(new $String("unreachable"));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.addNonCurvy2 }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.ab = ab; $f.abIsSmall = abIsSmall; $f.anorm = anorm; $f.b = b; $f.b$1 = b$1; $f.bc = bc; $f.bcIsSmall = bcIsSmall; $f.bnorm = bnorm; $f.c = c; $f.c$1 = c$1; $f.cnorm = cnorm; $f.depth = depth; $f.ds = ds; $f.k = k; $f.mab = mab; $f.mac = mac; $f.mbc = mbc; $f.ps = ps; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.addNonCurvy2 = function(b, c) { return this.$val.addNonCurvy2(b, c); };
	stroker.ptr.prototype.Add1 = function(b) {
		var _tmp, _tmp$1, b, bnorm, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; b = $f.b; bnorm = $f.bnorm; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		bnorm = $clone(pRot90CCW($clone(pNorm($clone($clone(b, fixed.Point26_6).Sub($clone(k.a, fixed.Point26_6)), fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
		/* */ if (k.r.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (k.r.$length === 0) { */ case 1:
			$r = k.p.Start($clone($clone(k.a, fixed.Point26_6).Add($clone(bnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Start($clone($clone(k.a, fixed.Point26_6).Sub($clone(bnorm, fixed.Point26_6)), fixed.Point26_6));
			$s = 3; continue;
		/* } else { */ case 2:
			$r = k.jr.Join(k.p, (k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), k.u, $clone(k.a, fixed.Point26_6), $clone(k.anorm, fixed.Point26_6), $clone(bnorm, fixed.Point26_6)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$r = k.p.Add1($clone($clone(b, fixed.Point26_6).Add($clone(bnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(b, fixed.Point26_6).Sub($clone(bnorm, fixed.Point26_6)), fixed.Point26_6));
		_tmp = $clone(b, fixed.Point26_6);
		_tmp$1 = $clone(bnorm, fixed.Point26_6);
		fixed.Point26_6.copy(k.a, _tmp);
		fixed.Point26_6.copy(k.anorm, _tmp$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.Add1 }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.b = b; $f.bnorm = bnorm; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.Add1 = function(b) { return this.$val.Add1(b); };
	stroker.ptr.prototype.Add2 = function(b, c) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ab, abIsSmall, abnorm, acnorm, b, bc, bcIsSmall, bcnorm, c, k, mab, mabc, mbc, pArc, t, x, x$1, x$2, x$3, x$4, x$5, z, z$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ab = $f.ab; abIsSmall = $f.abIsSmall; abnorm = $f.abnorm; acnorm = $f.acnorm; b = $f.b; bc = $f.bc; bcIsSmall = $f.bcIsSmall; bcnorm = $f.bcnorm; c = $f.c; k = $f.k; mab = $f.mab; mabc = $f.mabc; mbc = $f.mbc; pArc = $f.pArc; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; z = $f.z; z$1 = $f.z$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		ab = $clone($clone(b, fixed.Point26_6).Sub($clone(k.a, fixed.Point26_6)), fixed.Point26_6);
		bc = $clone($clone(c, fixed.Point26_6).Sub($clone(b, fixed.Point26_6)), fixed.Point26_6);
		abnorm = $clone(pRot90CCW($clone(pNorm($clone(ab, fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
		/* */ if (k.r.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (k.r.$length === 0) { */ case 1:
			$r = k.p.Start($clone($clone(k.a, fixed.Point26_6).Add($clone(abnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Start($clone($clone(k.a, fixed.Point26_6).Sub($clone(abnorm, fixed.Point26_6)), fixed.Point26_6));
			$s = 3; continue;
		/* } else { */ case 2:
			$r = k.jr.Join(k.p, (k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), k.u, $clone(k.a, fixed.Point26_6), $clone(k.anorm, fixed.Point26_6), $clone(abnorm, fixed.Point26_6)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		abIsSmall = (x = pDot($clone(ab, fixed.Point26_6), $clone(ab, fixed.Point26_6)), (x.$high < 0 || (x.$high === 0 && x.$low < 1024)));
		bcIsSmall = (x$1 = pDot($clone(bc, fixed.Point26_6), $clone(bc, fixed.Point26_6)), (x$1.$high < 0 || (x$1.$high === 0 && x$1.$low < 1024)));
		/* */ if (abIsSmall || bcIsSmall) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (abIsSmall || bcIsSmall) { */ case 6:
			acnorm = $clone(pRot90CCW($clone(pNorm($clone($clone(c, fixed.Point26_6).Sub($clone(k.a, fixed.Point26_6)), fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
			$r = k.p.Add1($clone($clone(c, fixed.Point26_6).Add($clone(acnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(c, fixed.Point26_6).Sub($clone(acnorm, fixed.Point26_6)), fixed.Point26_6));
			_tmp = $clone(c, fixed.Point26_6);
			_tmp$1 = $clone(acnorm, fixed.Point26_6);
			fixed.Point26_6.copy(k.a, _tmp);
			fixed.Point26_6.copy(k.anorm, _tmp$1);
			$s = -1; return;
		/* } */ case 7:
		t = curviest2($clone(k.a, fixed.Point26_6), $clone(b, fixed.Point26_6), $clone(c, fixed.Point26_6));
		/* */ if ((t.$high < 0 || (t.$high === 0 && t.$low <= 0)) || (0 < t.$high || (0 === t.$high && 4096 <= t.$low))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((t.$high < 0 || (t.$high === 0 && t.$low <= 0)) || (0 < t.$high || (0 === t.$high && 4096 <= t.$low))) { */ case 9:
			$r = k.addNonCurvy2($clone(b, fixed.Point26_6), $clone(c, fixed.Point26_6)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 10:
		mab = $clone(interpolate($clone(k.a, fixed.Point26_6), $clone(b, fixed.Point26_6), t), fixed.Point26_6);
		mbc = $clone(interpolate($clone(b, fixed.Point26_6), $clone(c, fixed.Point26_6), t), fixed.Point26_6);
		mabc = $clone(interpolate($clone(mab, fixed.Point26_6), $clone(mbc, fixed.Point26_6), t), fixed.Point26_6);
		bcnorm = $clone(pRot90CCW($clone(pNorm($clone(bc, fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
		/* */ if ((x$2 = pDot($clone(abnorm, fixed.Point26_6), $clone(bcnorm, fixed.Point26_6)), x$3 = $div64($mul64($mul64((x$4 = (new fixed.Int52_12(0, k.u)), new fixed.Int52_12(-x$4.$high, -x$4.$low)), (new fixed.Int52_12(0, k.u))), new fixed.Int52_12(0, 2047)), new fixed.Int52_12(0, 2048), false), (x$2.$high < x$3.$high || (x$2.$high === x$3.$high && x$2.$low < x$3.$low)))) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((x$2 = pDot($clone(abnorm, fixed.Point26_6), $clone(bcnorm, fixed.Point26_6)), x$3 = $div64($mul64($mul64((x$4 = (new fixed.Int52_12(0, k.u)), new fixed.Int52_12(-x$4.$high, -x$4.$low)), (new fixed.Int52_12(0, k.u))), new fixed.Int52_12(0, 2047)), new fixed.Int52_12(0, 2048), false), (x$2.$high < x$3.$high || (x$2.$high === x$3.$high && x$2.$low < x$3.$low)))) { */ case 12:
			pArc = (x$5 = pDot($clone(abnorm, fixed.Point26_6), $clone(bc, fixed.Point26_6)), (x$5.$high < 0 || (x$5.$high === 0 && x$5.$low < 0)));
			$r = k.p.Add1($clone($clone(mabc, fixed.Point26_6).Add($clone(abnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (pArc) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (pArc) { */ case 15:
				z = $clone(pRot90CW($clone(abnorm, fixed.Point26_6)), fixed.Point26_6);
				$r = addArc(k.p, $clone(mabc, fixed.Point26_6), $clone(abnorm, fixed.Point26_6), $clone(z, fixed.Point26_6)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = addArc(k.p, $clone(mabc, fixed.Point26_6), $clone(z, fixed.Point26_6), $clone(bcnorm, fixed.Point26_6)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 16:
			$r = k.p.Add1($clone($clone(mabc, fixed.Point26_6).Add($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = k.p.Add1($clone($clone(c, fixed.Point26_6).Add($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(mabc, fixed.Point26_6).Sub($clone(abnorm, fixed.Point26_6)), fixed.Point26_6));
			/* */ if (!pArc) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (!pArc) { */ case 21:
				z$1 = $clone(pRot90CW($clone(abnorm, fixed.Point26_6)), fixed.Point26_6);
				$r = addArc((k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), $clone(mabc, fixed.Point26_6), $clone(pNeg($clone(abnorm, fixed.Point26_6)), fixed.Point26_6), $clone(z$1, fixed.Point26_6)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = addArc((k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), $clone(mabc, fixed.Point26_6), $clone(z$1, fixed.Point26_6), $clone(pNeg($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 22:
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(mabc, fixed.Point26_6).Sub($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6));
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(c, fixed.Point26_6).Sub($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6));
			_tmp$2 = $clone(c, fixed.Point26_6);
			_tmp$3 = $clone(bcnorm, fixed.Point26_6);
			fixed.Point26_6.copy(k.a, _tmp$2);
			fixed.Point26_6.copy(k.anorm, _tmp$3);
			$s = -1; return;
		/* } */ case 13:
		$r = k.addNonCurvy2($clone(mab, fixed.Point26_6), $clone(mabc, fixed.Point26_6)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = k.addNonCurvy2($clone(mbc, fixed.Point26_6), $clone(c, fixed.Point26_6)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.Add2 }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ab = ab; $f.abIsSmall = abIsSmall; $f.abnorm = abnorm; $f.acnorm = acnorm; $f.b = b; $f.bc = bc; $f.bcIsSmall = bcIsSmall; $f.bcnorm = bcnorm; $f.c = c; $f.k = k; $f.mab = mab; $f.mabc = mabc; $f.mbc = mbc; $f.pArc = pArc; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.z = z; $f.z$1 = z$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.Add2 = function(b, c) { return this.$val.Add2(b, c); };
	stroker.ptr.prototype.Add3 = function(b, c, d) {
		var b, c, d, k;
		k = this;
		$panic(new $String("freetype/raster: stroke unimplemented for cubic segments"));
	};
	stroker.prototype.Add3 = function(b, c, d) { return this.$val.Add3(b, c, d); };
	stroker.ptr.prototype.stroke = function(q) {
		var _1, i, k, pivot, q, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; i = $f.i; k = $f.k; pivot = $f.pivot; q = $f.q; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		k.r = $makeSlice(Path, 0, q.$length);
		fixed.Point26_6.copy(k.a, new fixed.Point26_6.ptr((1 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 1]), (2 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 2])));
		i = 4;
		/* while (true) { */ case 1:
			/* if (!(i < q.$length)) { break; } */ if(!(i < q.$length)) { $s = 2; continue; }
				_1 = ((i < 0 || i >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + i]);
				/* */ if (_1 === (1)) { $s = 4; continue; }
				/* */ if (_1 === (2)) { $s = 5; continue; }
				/* */ if (_1 === (3)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_1 === (1)) { */ case 4:
					$r = k.Add1(new fixed.Point26_6.ptr((x = i + 1 >> 0, ((x < 0 || x >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x])), (x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$1])))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (4) >> 0;
					$s = 8; continue;
				/* } else if (_1 === (2)) { */ case 5:
					$r = k.Add2(new fixed.Point26_6.ptr((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$2])), (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$3]))), new fixed.Point26_6.ptr((x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$4])), (x$5 = i + 4 >> 0, ((x$5 < 0 || x$5 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$5])))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (6) >> 0;
					$s = 8; continue;
				/* } else if (_1 === (3)) { */ case 6:
					k.Add3(new fixed.Point26_6.ptr((x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$6])), (x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$7]))), new fixed.Point26_6.ptr((x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$8])), (x$9 = i + 4 >> 0, ((x$9 < 0 || x$9 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$9]))), new fixed.Point26_6.ptr((x$10 = i + 5 >> 0, ((x$10 < 0 || x$10 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$10])), (x$11 = i + 6 >> 0, ((x$11 < 0 || x$11 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$11]))));
					i = i + (8) >> 0;
					$s = 8; continue;
				/* } else { */ case 7:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 8:
			case 3:
		/* } */ $s = 1; continue; case 2:
		if (k.r.$length === 0) {
			$s = -1; return;
		}
		$r = k.cr.Cap(k.p, k.u, $clone(q.lastPoint(), fixed.Point26_6), $clone(pNeg($clone(k.anorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addPathReversed(k.p, k.r); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = $clone(q.firstPoint(), fixed.Point26_6);
		$r = k.cr.Cap(k.p, k.u, $clone(pivot, fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub(new fixed.Point26_6.ptr((x$12 = k.r, (1 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 1])), (x$13 = k.r, (2 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 2])))), fixed.Point26_6)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.stroke }; } $f._1 = _1; $f.i = i; $f.k = k; $f.pivot = pivot; $f.q = q; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.stroke = function(q) { return this.$val.stroke(q); };
	Stroke = function(p, q, width, cr, jr) {
		var _1, _q, _tmp, _tmp$1, cr, i, j, jr, p, q, s, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; cr = $f.cr; i = $f.i; j = $f.j; jr = $f.jr; p = $f.p; q = $f.q; s = $f.s; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (q.$length === 0) {
			$s = -1; return;
		}
		if ($interfaceIsEqual(cr, $ifaceNil)) {
			cr = $pkg.RoundCapper;
		}
		if ($interfaceIsEqual(jr, $ifaceNil)) {
			jr = $pkg.RoundJoiner;
		}
		if (!(((0 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 0]) === 0))) {
			$panic(new $String("freetype/raster: bad path"));
		}
		s = new stroker.ptr(p, (_q = width / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), cr, jr, Path.nil, new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		i = 0;
		j = 4;
		/* while (true) { */ case 1:
			/* if (!(j < q.$length)) { break; } */ if(!(j < q.$length)) { $s = 2; continue; }
				_1 = ((j < 0 || j >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + j]);
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (0)) { */ case 4:
					$r = s.stroke($subslice(q, i, j)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_tmp = j;
					_tmp$1 = j + 4 >> 0;
					i = _tmp;
					j = _tmp$1;
					$s = 9; continue;
				/* } else if (_1 === (1)) { */ case 5:
					j = j + (4) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (2)) { */ case 6:
					j = j + (6) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (3)) { */ case 7:
					j = j + (8) >> 0;
					$s = 9; continue;
				/* } else { */ case 8:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 9:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$r = s.stroke($subslice(q, i)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stroke }; } $f._1 = _1; $f._q = _q; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.cr = cr; $f.i = i; $f.j = j; $f.jr = jr; $f.p = p; $f.q = q; $f.s = s; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stroke = Stroke;
	Path.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "firstPoint", name: "firstPoint", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [fixed.Point26_6], false)}, {prop: "lastPoint", name: "lastPoint", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [fixed.Point26_6], false)}];
	ptrType$1.methods = [{prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "Start", name: "Start", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "AddPath", name: "AddPath", pkg: "", typ: $funcType([Path], [], false)}, {prop: "AddStroke", name: "AddStroke", pkg: "", typ: $funcType([Path, fixed.Int26_6, Capper, Joiner], [], false)}];
	ptrType$6.methods = [{prop: "findCell", name: "findCell", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [$Int], false)}, {prop: "saveCell", name: "saveCell", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [], false)}, {prop: "setCell", name: "setCell", pkg: "github.com/golang/freetype/raster", typ: $funcType([$Int, $Int], [], false)}, {prop: "scan", name: "scan", pkg: "github.com/golang/freetype/raster", typ: $funcType([$Int, fixed.Int26_6, fixed.Int26_6, fixed.Int26_6, fixed.Int26_6], [], false)}, {prop: "Start", name: "Start", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "AddPath", name: "AddPath", pkg: "", typ: $funcType([Path], [], false)}, {prop: "AddStroke", name: "AddStroke", pkg: "", typ: $funcType([Path, fixed.Int26_6, Capper, Joiner], [], false)}, {prop: "areaToAlpha", name: "areaToAlpha", pkg: "github.com/golang/freetype/raster", typ: $funcType([$Int], [$Uint32], false)}, {prop: "Rasterize", name: "Rasterize", pkg: "", typ: $funcType([Painter], [], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "SetBounds", name: "SetBounds", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	CapperFunc.methods = [{prop: "Cap", name: "Cap", pkg: "", typ: $funcType([Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6], [], false)}];
	JoinerFunc.methods = [{prop: "Join", name: "Join", pkg: "", typ: $funcType([Adder, Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}];
	ptrType$7.methods = [{prop: "addNonCurvy2", name: "addNonCurvy2", pkg: "github.com/golang/freetype/raster", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "stroke", name: "stroke", pkg: "github.com/golang/freetype/raster", typ: $funcType([Path], [], false)}];
	Adder.init([{prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Start", name: "Start", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}]);
	Path.init(fixed.Int26_6);
	Span.init("", [{prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "X0", name: "X0", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "X1", name: "X1", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Alpha", name: "Alpha", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	Painter.init([{prop: "Paint", name: "Paint", pkg: "", typ: $funcType([sliceType$2, $Bool], [], false)}]);
	cell.init("github.com/golang/freetype/raster", [{prop: "xi", name: "xi", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "area", name: "area", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cover", name: "cover", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "next", name: "next", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Rasterizer.init("github.com/golang/freetype/raster", [{prop: "UseNonZeroWinding", name: "UseNonZeroWinding", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "Dx", name: "Dx", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Dy", name: "Dy", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "splitScale2", name: "splitScale2", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "splitScale3", name: "splitScale3", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "a", name: "a", anonymous: false, exported: false, typ: fixed.Point26_6, tag: ""}, {prop: "xi", name: "xi", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "yi", name: "yi", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "area", name: "area", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cover", name: "cover", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cell", name: "cell", anonymous: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "cellIndex", name: "cellIndex", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "cellBuf", name: "cellBuf", anonymous: false, exported: false, typ: arrayType$4, tag: ""}, {prop: "cellIndexBuf", name: "cellIndexBuf", anonymous: false, exported: false, typ: arrayType$5, tag: ""}, {prop: "spanBuf", name: "spanBuf", anonymous: false, exported: false, typ: arrayType$6, tag: ""}]);
	Capper.init([{prop: "Cap", name: "Cap", pkg: "", typ: $funcType([Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6], [], false)}]);
	CapperFunc.init([Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6], [], false);
	Joiner.init([{prop: "Join", name: "Join", pkg: "", typ: $funcType([Adder, Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}]);
	JoinerFunc.init([Adder, Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false);
	stroker.init("github.com/golang/freetype/raster", [{prop: "p", name: "p", anonymous: false, exported: false, typ: Adder, tag: ""}, {prop: "u", name: "u", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "cr", name: "cr", anonymous: false, exported: false, typ: Capper, tag: ""}, {prop: "jr", name: "jr", anonymous: false, exported: false, typ: Joiner, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: Path, tag: ""}, {prop: "a", name: "a", anonymous: false, exported: false, typ: fixed.Point26_6, tag: ""}, {prop: "anorm", name: "anorm", anonymous: false, exported: false, typ: fixed.Point26_6, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fixed.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.RoundCapper = new CapperFunc((roundCapper));
		$pkg.RoundJoiner = new JoinerFunc((roundJoiner));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/font"] = (function() {
	var $pkg = {}, $init, fixed, image, draw, io, utf8, Face, Metrics, Drawer, Hinting, sliceType, ptrType, BoundBytes, BoundString, MeasureBytes, MeasureString;
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	draw = $packages["image/draw"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Face = $pkg.Face = $newType(8, $kindInterface, "font.Face", true, "golang.org/x/image/font", true, null);
	Metrics = $pkg.Metrics = $newType(0, $kindStruct, "font.Metrics", true, "golang.org/x/image/font", true, function(Height_, Ascent_, Descent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Height = 0;
			this.Ascent = 0;
			this.Descent = 0;
			return;
		}
		this.Height = Height_;
		this.Ascent = Ascent_;
		this.Descent = Descent_;
	});
	Drawer = $pkg.Drawer = $newType(0, $kindStruct, "font.Drawer", true, "golang.org/x/image/font", true, function(Dst_, Src_, Face_, Dot_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dst = $ifaceNil;
			this.Src = $ifaceNil;
			this.Face = $ifaceNil;
			this.Dot = new fixed.Point26_6.ptr(0, 0);
			return;
		}
		this.Dst = Dst_;
		this.Src = Src_;
		this.Face = Face_;
		this.Dot = Dot_;
	});
	Hinting = $pkg.Hinting = $newType(4, $kindInt, "font.Hinting", true, "golang.org/x/image/font", true, null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Drawer);
	Drawer.ptr.prototype.DrawBytes = function(s) {
		var _r, _r$1, _tuple, _tuple$1, advance, c, d, dr, mask, maskp, ok, prevC, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; advance = $f.advance; c = $f.c; d = $f.d; dr = $f.dr; mask = $f.mask; maskp = $f.maskp; ok = $f.ok; prevC = $f.prevC; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		prevC = -1;
		/* while (true) { */ case 1:
			/* if (!(s.$length > 0)) { break; } */ if(!(s.$length > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune(s);
			c = _tuple[0];
			size = _tuple[1];
			s = $subslice(s, size);
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = d.Face.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				d.Dot.X = d.Dot.X + (_r) >> 0;
			/* } */ case 4:
			_r$1 = d.Face.Glyph($clone(d.Dot, fixed.Point26_6), c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			dr = $clone(_tuple$1[0], image.Rectangle);
			mask = _tuple$1[1];
			maskp = $clone(_tuple$1[2], image.Point);
			advance = _tuple$1[3];
			ok = _tuple$1[4];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			$r = draw.DrawMask(d.Dst, $clone(dr, image.Rectangle), d.Src, new image.Point.ptr(0, 0), mask, $clone(maskp, image.Point), 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			d.Dot.X = d.Dot.X + (advance) >> 0;
			prevC = c;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.DrawBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.advance = advance; $f.c = c; $f.d = d; $f.dr = dr; $f.mask = mask; $f.maskp = maskp; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.DrawBytes = function(s) { return this.$val.DrawBytes(s); };
	Drawer.ptr.prototype.DrawString = function(s) {
		var _i, _r, _r$1, _ref, _rune, _tuple, advance, c, d, dr, mask, maskp, ok, prevC, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; advance = $f.advance; c = $f.c; d = $f.d; dr = $f.dr; mask = $f.mask; maskp = $f.maskp; ok = $f.ok; prevC = $f.prevC; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		prevC = -1;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = d.Face.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				d.Dot.X = d.Dot.X + (_r) >> 0;
			/* } */ case 4:
			_r$1 = d.Face.Glyph($clone(d.Dot, fixed.Point26_6), c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			dr = $clone(_tuple[0], image.Rectangle);
			mask = _tuple[1];
			maskp = $clone(_tuple[2], image.Point);
			advance = _tuple[3];
			ok = _tuple[4];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			$r = draw.DrawMask(d.Dst, $clone(dr, image.Rectangle), d.Src, new image.Point.ptr(0, 0), mask, $clone(maskp, image.Point), 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			d.Dot.X = d.Dot.X + (advance) >> 0;
			prevC = c;
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.DrawString }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.advance = advance; $f.c = c; $f.d = d; $f.dr = dr; $f.mask = mask; $f.maskp = maskp; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.DrawString = function(s) { return this.$val.DrawString(s); };
	Drawer.ptr.prototype.BoundBytes = function(s) {
		var _r, _tuple, advance, bounds, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; advance = $f.advance; bounds = $f.bounds; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		d = this;
		_r = BoundBytes(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fixed.Rectangle26_6.copy(bounds, _tuple[0]);
		advance = _tuple[1];
		fixed.Point26_6.copy(bounds.Min, $clone(bounds.Min, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		fixed.Point26_6.copy(bounds.Max, $clone(bounds.Max, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.BoundBytes }; } $f._r = _r; $f._tuple = _tuple; $f.advance = advance; $f.bounds = bounds; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.BoundBytes = function(s) { return this.$val.BoundBytes(s); };
	Drawer.ptr.prototype.BoundString = function(s) {
		var _r, _tuple, advance, bounds, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; advance = $f.advance; bounds = $f.bounds; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		d = this;
		_r = BoundString(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fixed.Rectangle26_6.copy(bounds, _tuple[0]);
		advance = _tuple[1];
		fixed.Point26_6.copy(bounds.Min, $clone(bounds.Min, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		fixed.Point26_6.copy(bounds.Max, $clone(bounds.Max, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.BoundString }; } $f._r = _r; $f._tuple = _tuple; $f.advance = advance; $f.bounds = bounds; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.BoundString = function(s) { return this.$val.BoundString(s); };
	Drawer.ptr.prototype.MeasureBytes = function(s) {
		var _r, advance, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; advance = $f.advance; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		d = this;
		_r = MeasureBytes(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		advance = _r;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.MeasureBytes }; } $f._r = _r; $f.advance = advance; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.MeasureBytes = function(s) { return this.$val.MeasureBytes(s); };
	Drawer.ptr.prototype.MeasureString = function(s) {
		var _r, advance, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; advance = $f.advance; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		d = this;
		_r = MeasureString(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		advance = _r;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.MeasureString }; } $f._r = _r; $f.advance = advance; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.MeasureString = function(s) { return this.$val.MeasureString(s); };
	BoundBytes = function(f, s) {
		var _r, _r$1, _tuple, _tuple$1, a, advance, b, bounds, c, f, ok, prevC, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; advance = $f.advance; b = $f.b; bounds = $f.bounds; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		prevC = -1;
		/* while (true) { */ case 1:
			/* if (!(s.$length > 0)) { break; } */ if(!(s.$length > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune(s);
			c = _tuple[0];
			size = _tuple[1];
			s = $subslice(s, size);
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphBounds(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			b = $clone(_tuple$1[0], fixed.Rectangle26_6);
			a = _tuple$1[1];
			ok = _tuple$1[2];
			if (!ok) {
				/* continue; */ $s = 1; continue;
			}
			b.Min.X = b.Min.X + (advance) >> 0;
			b.Max.X = b.Max.X + (advance) >> 0;
			fixed.Rectangle26_6.copy(bounds, $clone(bounds, fixed.Rectangle26_6).Union($clone(b, fixed.Rectangle26_6)));
			advance = advance + (a) >> 0;
			prevC = c;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: BoundBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.advance = advance; $f.b = b; $f.bounds = bounds; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BoundBytes = BoundBytes;
	BoundString = function(f, s) {
		var _i, _r, _r$1, _ref, _rune, _tuple, a, advance, b, bounds, c, f, ok, prevC, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; a = $f.a; advance = $f.advance; b = $f.b; bounds = $f.bounds; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		prevC = -1;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphBounds(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			b = $clone(_tuple[0], fixed.Rectangle26_6);
			a = _tuple[1];
			ok = _tuple[2];
			if (!ok) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			b.Min.X = b.Min.X + (advance) >> 0;
			b.Max.X = b.Max.X + (advance) >> 0;
			fixed.Rectangle26_6.copy(bounds, $clone(bounds, fixed.Rectangle26_6).Union($clone(b, fixed.Rectangle26_6)));
			advance = advance + (a) >> 0;
			prevC = c;
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: BoundString }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.a = a; $f.advance = advance; $f.b = b; $f.bounds = bounds; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BoundString = BoundString;
	MeasureBytes = function(f, s) {
		var _r, _r$1, _tuple, _tuple$1, a, advance, c, f, ok, prevC, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; advance = $f.advance; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		prevC = -1;
		/* while (true) { */ case 1:
			/* if (!(s.$length > 0)) { break; } */ if(!(s.$length > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune(s);
			c = _tuple[0];
			size = _tuple[1];
			s = $subslice(s, size);
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphAdvance(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			a = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				/* continue; */ $s = 1; continue;
			}
			advance = advance + (a) >> 0;
			prevC = c;
		/* } */ $s = 1; continue; case 2:
		advance = advance;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MeasureBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.advance = advance; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MeasureBytes = MeasureBytes;
	MeasureString = function(f, s) {
		var _i, _r, _r$1, _ref, _rune, _tuple, a, advance, c, f, ok, prevC, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; a = $f.a; advance = $f.advance; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		prevC = -1;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphAdvance(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			a = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			advance = advance + (a) >> 0;
			prevC = c;
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		advance = advance;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MeasureString }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.a = a; $f.advance = advance; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MeasureString = MeasureString;
	ptrType.methods = [{prop: "DrawBytes", name: "DrawBytes", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "DrawString", name: "DrawString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "BoundBytes", name: "BoundBytes", pkg: "", typ: $funcType([sliceType], [fixed.Rectangle26_6, fixed.Int26_6], false)}, {prop: "BoundString", name: "BoundString", pkg: "", typ: $funcType([$String], [fixed.Rectangle26_6, fixed.Int26_6], false)}, {prop: "MeasureBytes", name: "MeasureBytes", pkg: "", typ: $funcType([sliceType], [fixed.Int26_6], false)}, {prop: "MeasureString", name: "MeasureString", pkg: "", typ: $funcType([$String], [fixed.Int26_6], false)}];
	Face.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Glyph", name: "Glyph", pkg: "", typ: $funcType([fixed.Point26_6, $Int32], [image.Rectangle, image.Image, image.Point, fixed.Int26_6, $Bool], false)}, {prop: "GlyphAdvance", name: "GlyphAdvance", pkg: "", typ: $funcType([$Int32], [fixed.Int26_6, $Bool], false)}, {prop: "GlyphBounds", name: "GlyphBounds", pkg: "", typ: $funcType([$Int32], [fixed.Rectangle26_6, fixed.Int26_6, $Bool], false)}, {prop: "Kern", name: "Kern", pkg: "", typ: $funcType([$Int32, $Int32], [fixed.Int26_6], false)}, {prop: "Metrics", name: "Metrics", pkg: "", typ: $funcType([], [Metrics], false)}]);
	Metrics.init("", [{prop: "Height", name: "Height", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Ascent", name: "Ascent", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Descent", name: "Descent", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}]);
	Drawer.init("", [{prop: "Dst", name: "Dst", anonymous: false, exported: true, typ: draw.Image, tag: ""}, {prop: "Src", name: "Src", anonymous: false, exported: true, typ: image.Image, tag: ""}, {prop: "Face", name: "Face", anonymous: false, exported: true, typ: Face, tag: ""}, {prop: "Dot", name: "Dot", anonymous: false, exported: true, typ: fixed.Point26_6, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fixed.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/golang/freetype/truetype"] = (function() {
	var $pkg = {}, $init, errors, fmt, raster, font, fixed, image, math, Options, glyphCacheEntry, glyphCacheKey, glyphCacheVal, indexCacheEntry, face, facePainter, Point, GlyphBuf, pointType, callStackEntry, hinter, graphicsState, f2dot14, Index, NameID, HMetric, VMetric, FormatError, UnsupportedError, cm, Font, arrayType, arrayType$1, ptrType, ptrType$1, ptrType$2, sliceType, sliceType$1, sliceType$2, arrayType$2, arrayType$3, arrayType$4, sliceType$3, sliceType$4, arrayType$5, arrayType$6, sliceType$5, arrayType$7, arrayType$8, sliceType$6, arrayType$9, arrayType$10, ptrType$3, sliceType$7, sliceType$8, ptrType$4, sliceType$9, ptrType$5, ptrType$6, mapType, globalDefaultGS, popCount, powerOf2, subPixels, NewFace, clear, resetTwilightPoints, skipInstructionPayload, normalize, fabs, fdiv, fmul, dotProduct, mulDiv, bool2int32, u32, u16, readTable, parseSubtables, printable, Parse, parse;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	raster = $packages["github.com/golang/freetype/raster"];
	font = $packages["golang.org/x/image/font"];
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	math = $packages["math"];
	Options = $pkg.Options = $newType(0, $kindStruct, "truetype.Options", true, "github.com/golang/freetype/truetype", true, function(Size_, DPI_, Hinting_, GlyphCacheEntries_, SubPixelsX_, SubPixelsY_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Size = 0;
			this.DPI = 0;
			this.Hinting = 0;
			this.GlyphCacheEntries = 0;
			this.SubPixelsX = 0;
			this.SubPixelsY = 0;
			return;
		}
		this.Size = Size_;
		this.DPI = DPI_;
		this.Hinting = Hinting_;
		this.GlyphCacheEntries = GlyphCacheEntries_;
		this.SubPixelsX = SubPixelsX_;
		this.SubPixelsY = SubPixelsY_;
	});
	glyphCacheEntry = $pkg.glyphCacheEntry = $newType(0, $kindStruct, "truetype.glyphCacheEntry", true, "github.com/golang/freetype/truetype", false, function(key_, val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.key = new glyphCacheKey.ptr(0, 0, 0);
			this.val = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
			return;
		}
		this.key = key_;
		this.val = val_;
	});
	glyphCacheKey = $pkg.glyphCacheKey = $newType(0, $kindStruct, "truetype.glyphCacheKey", true, "github.com/golang/freetype/truetype", false, function(index_, fx_, fy_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.index = 0;
			this.fx = 0;
			this.fy = 0;
			return;
		}
		this.index = index_;
		this.fx = fx_;
		this.fy = fy_;
	});
	glyphCacheVal = $pkg.glyphCacheVal = $newType(0, $kindStruct, "truetype.glyphCacheVal", true, "github.com/golang/freetype/truetype", false, function(advanceWidth_, offset_, gw_, gh_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.advanceWidth = 0;
			this.offset = new image.Point.ptr(0, 0);
			this.gw = 0;
			this.gh = 0;
			return;
		}
		this.advanceWidth = advanceWidth_;
		this.offset = offset_;
		this.gw = gw_;
		this.gh = gh_;
	});
	indexCacheEntry = $pkg.indexCacheEntry = $newType(0, $kindStruct, "truetype.indexCacheEntry", true, "github.com/golang/freetype/truetype", false, function(rune_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rune = 0;
			this.index = 0;
			return;
		}
		this.rune = rune_;
		this.index = index_;
	});
	face = $pkg.face = $newType(0, $kindStruct, "truetype.face", true, "github.com/golang/freetype/truetype", false, function(f_, hinting_, scale_, subPixelX_, subPixelBiasX_, subPixelMaskX_, subPixelY_, subPixelBiasY_, subPixelMaskY_, masks_, glyphCache_, r_, p_, paintOffset_, maxw_, maxh_, glyphBuf_, indexCache_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = ptrType$1.nil;
			this.hinting = 0;
			this.scale = 0;
			this.subPixelX = 0;
			this.subPixelBiasX = 0;
			this.subPixelMaskX = 0;
			this.subPixelY = 0;
			this.subPixelBiasY = 0;
			this.subPixelMaskY = 0;
			this.masks = ptrType$2.nil;
			this.glyphCache = sliceType.nil;
			this.r = new raster.Rasterizer.ptr(false, 0, 0, 0, 0, 0, new fixed.Point26_6.ptr(0, 0), 0, 0, 0, 0, sliceType$1.nil, sliceType$2.nil, arrayType$2.zero(), arrayType$3.zero(), arrayType$4.zero());
			this.p = $ifaceNil;
			this.paintOffset = 0;
			this.maxw = 0;
			this.maxh = 0;
			this.glyphBuf = new GlyphBuf.ptr(0, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)), sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil, ptrType$1.nil, 0, 0, new hinter.ptr(sliceType$4.nil, sliceType$4.nil, false, ptrType$1.nil, 0, new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), arrayType$6.zero(), sliceType$2.nil, false, sliceType$5.nil), arrayType$7.zero(), 0, false, sliceType$3.nil);
			this.indexCache = arrayType$8.zero();
			return;
		}
		this.f = f_;
		this.hinting = hinting_;
		this.scale = scale_;
		this.subPixelX = subPixelX_;
		this.subPixelBiasX = subPixelBiasX_;
		this.subPixelMaskX = subPixelMaskX_;
		this.subPixelY = subPixelY_;
		this.subPixelBiasY = subPixelBiasY_;
		this.subPixelMaskY = subPixelMaskY_;
		this.masks = masks_;
		this.glyphCache = glyphCache_;
		this.r = r_;
		this.p = p_;
		this.paintOffset = paintOffset_;
		this.maxw = maxw_;
		this.maxh = maxh_;
		this.glyphBuf = glyphBuf_;
		this.indexCache = indexCache_;
	});
	facePainter = $pkg.facePainter = $newType(0, $kindStruct, "truetype.facePainter", true, "github.com/golang/freetype/truetype", false, function(a_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a = ptrType$4.nil;
			return;
		}
		this.a = a_;
	});
	Point = $pkg.Point = $newType(0, $kindStruct, "truetype.Point", true, "github.com/golang/freetype/truetype", true, function(X_, Y_, Flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			this.Flags = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
		this.Flags = Flags_;
	});
	GlyphBuf = $pkg.GlyphBuf = $newType(0, $kindStruct, "truetype.GlyphBuf", true, "github.com/golang/freetype/truetype", true, function(AdvanceWidth_, Bounds_, Points_, Unhinted_, InFontUnits_, Ends_, font_, scale_, hinting_, hinter_, phantomPoints_, pp1x_, metricsSet_, tmp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AdvanceWidth = 0;
			this.Bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			this.Points = sliceType$3.nil;
			this.Unhinted = sliceType$3.nil;
			this.InFontUnits = sliceType$3.nil;
			this.Ends = sliceType$2.nil;
			this.font = ptrType$1.nil;
			this.scale = 0;
			this.hinting = 0;
			this.hinter = new hinter.ptr(sliceType$4.nil, sliceType$4.nil, false, ptrType$1.nil, 0, new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), arrayType$6.zero(), sliceType$2.nil, false, sliceType$5.nil);
			this.phantomPoints = arrayType$7.zero();
			this.pp1x = 0;
			this.metricsSet = false;
			this.tmp = sliceType$3.nil;
			return;
		}
		this.AdvanceWidth = AdvanceWidth_;
		this.Bounds = Bounds_;
		this.Points = Points_;
		this.Unhinted = Unhinted_;
		this.InFontUnits = InFontUnits_;
		this.Ends = Ends_;
		this.font = font_;
		this.scale = scale_;
		this.hinting = hinting_;
		this.hinter = hinter_;
		this.phantomPoints = phantomPoints_;
		this.pp1x = pp1x_;
		this.metricsSet = metricsSet_;
		this.tmp = tmp_;
	});
	pointType = $pkg.pointType = $newType(4, $kindUint32, "truetype.pointType", true, "github.com/golang/freetype/truetype", false, null);
	callStackEntry = $pkg.callStackEntry = $newType(0, $kindStruct, "truetype.callStackEntry", true, "github.com/golang/freetype/truetype", false, function(program_, pc_, loopCount_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.program = sliceType$6.nil;
			this.pc = 0;
			this.loopCount = 0;
			return;
		}
		this.program = program_;
		this.pc = pc_;
		this.loopCount = loopCount_;
	});
	hinter = $pkg.hinter = $newType(0, $kindStruct, "truetype.hinter", true, "github.com/golang/freetype/truetype", false, function(stack_, store_, functions_, font_, scale_, gs_, defaultGS_, points_, ends_, scaledCVTInitialized_, scaledCVT_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.stack = sliceType$4.nil;
			this.store = sliceType$4.nil;
			this.functions = false;
			this.font = ptrType$1.nil;
			this.scale = 0;
			this.gs = new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false);
			this.defaultGS = new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false);
			this.points = arrayType$6.zero();
			this.ends = sliceType$2.nil;
			this.scaledCVTInitialized = false;
			this.scaledCVT = sliceType$5.nil;
			return;
		}
		this.stack = stack_;
		this.store = store_;
		this.functions = functions_;
		this.font = font_;
		this.scale = scale_;
		this.gs = gs_;
		this.defaultGS = defaultGS_;
		this.points = points_;
		this.ends = ends_;
		this.scaledCVTInitialized = scaledCVTInitialized_;
		this.scaledCVT = scaledCVT_;
	});
	graphicsState = $pkg.graphicsState = $newType(0, $kindStruct, "truetype.graphicsState", true, "github.com/golang/freetype/truetype", false, function(pv_, fv_, dv_, rp_, zp_, controlValueCutIn_, singleWidthCutIn_, singleWidth_, deltaBase_, deltaShift_, minDist_, loop_, roundPeriod_, roundPhase_, roundThreshold_, roundSuper45_, autoFlip_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pv = arrayType.zero();
			this.fv = arrayType.zero();
			this.dv = arrayType.zero();
			this.rp = arrayType$1.zero();
			this.zp = arrayType$1.zero();
			this.controlValueCutIn = 0;
			this.singleWidthCutIn = 0;
			this.singleWidth = 0;
			this.deltaBase = 0;
			this.deltaShift = 0;
			this.minDist = 0;
			this.loop = 0;
			this.roundPeriod = 0;
			this.roundPhase = 0;
			this.roundThreshold = 0;
			this.roundSuper45 = false;
			this.autoFlip = false;
			return;
		}
		this.pv = pv_;
		this.fv = fv_;
		this.dv = dv_;
		this.rp = rp_;
		this.zp = zp_;
		this.controlValueCutIn = controlValueCutIn_;
		this.singleWidthCutIn = singleWidthCutIn_;
		this.singleWidth = singleWidth_;
		this.deltaBase = deltaBase_;
		this.deltaShift = deltaShift_;
		this.minDist = minDist_;
		this.loop = loop_;
		this.roundPeriod = roundPeriod_;
		this.roundPhase = roundPhase_;
		this.roundThreshold = roundThreshold_;
		this.roundSuper45 = roundSuper45_;
		this.autoFlip = autoFlip_;
	});
	f2dot14 = $pkg.f2dot14 = $newType(2, $kindInt16, "truetype.f2dot14", true, "github.com/golang/freetype/truetype", false, null);
	Index = $pkg.Index = $newType(2, $kindUint16, "truetype.Index", true, "github.com/golang/freetype/truetype", true, null);
	NameID = $pkg.NameID = $newType(2, $kindUint16, "truetype.NameID", true, "github.com/golang/freetype/truetype", true, null);
	HMetric = $pkg.HMetric = $newType(0, $kindStruct, "truetype.HMetric", true, "github.com/golang/freetype/truetype", true, function(AdvanceWidth_, LeftSideBearing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AdvanceWidth = 0;
			this.LeftSideBearing = 0;
			return;
		}
		this.AdvanceWidth = AdvanceWidth_;
		this.LeftSideBearing = LeftSideBearing_;
	});
	VMetric = $pkg.VMetric = $newType(0, $kindStruct, "truetype.VMetric", true, "github.com/golang/freetype/truetype", true, function(AdvanceHeight_, TopSideBearing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AdvanceHeight = 0;
			this.TopSideBearing = 0;
			return;
		}
		this.AdvanceHeight = AdvanceHeight_;
		this.TopSideBearing = TopSideBearing_;
	});
	FormatError = $pkg.FormatError = $newType(8, $kindString, "truetype.FormatError", true, "github.com/golang/freetype/truetype", true, null);
	UnsupportedError = $pkg.UnsupportedError = $newType(8, $kindString, "truetype.UnsupportedError", true, "github.com/golang/freetype/truetype", true, null);
	cm = $pkg.cm = $newType(0, $kindStruct, "truetype.cm", true, "github.com/golang/freetype/truetype", false, function(start_, end_, delta_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.start = 0;
			this.end = 0;
			this.delta = 0;
			this.offset = 0;
			return;
		}
		this.start = start_;
		this.end = end_;
		this.delta = delta_;
		this.offset = offset_;
	});
	Font = $pkg.Font = $newType(0, $kindStruct, "truetype.Font", true, "github.com/golang/freetype/truetype", true, function(cmap_, cvt_, fpgm_, glyf_, hdmx_, head_, hhea_, hmtx_, kern_, loca_, maxp_, name_, os2_, prep_, vmtx_, cmapIndexes_, cm_, locaOffsetFormat_, nGlyph_, nHMetric_, nKern_, fUnitsPerEm_, ascent_, descent_, bounds_, maxTwilightPoints_, maxStorage_, maxFunctionDefs_, maxStackElements_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cmap = sliceType$6.nil;
			this.cvt = sliceType$6.nil;
			this.fpgm = sliceType$6.nil;
			this.glyf = sliceType$6.nil;
			this.hdmx = sliceType$6.nil;
			this.head = sliceType$6.nil;
			this.hhea = sliceType$6.nil;
			this.hmtx = sliceType$6.nil;
			this.kern = sliceType$6.nil;
			this.loca = sliceType$6.nil;
			this.maxp = sliceType$6.nil;
			this.name = sliceType$6.nil;
			this.os2 = sliceType$6.nil;
			this.prep = sliceType$6.nil;
			this.vmtx = sliceType$6.nil;
			this.cmapIndexes = sliceType$6.nil;
			this.cm = sliceType$8.nil;
			this.locaOffsetFormat = 0;
			this.nGlyph = 0;
			this.nHMetric = 0;
			this.nKern = 0;
			this.fUnitsPerEm = 0;
			this.ascent = 0;
			this.descent = 0;
			this.bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			this.maxTwilightPoints = 0;
			this.maxStorage = 0;
			this.maxFunctionDefs = 0;
			this.maxStackElements = 0;
			return;
		}
		this.cmap = cmap_;
		this.cvt = cvt_;
		this.fpgm = fpgm_;
		this.glyf = glyf_;
		this.hdmx = hdmx_;
		this.head = head_;
		this.hhea = hhea_;
		this.hmtx = hmtx_;
		this.kern = kern_;
		this.loca = loca_;
		this.maxp = maxp_;
		this.name = name_;
		this.os2 = os2_;
		this.prep = prep_;
		this.vmtx = vmtx_;
		this.cmapIndexes = cmapIndexes_;
		this.cm = cm_;
		this.locaOffsetFormat = locaOffsetFormat_;
		this.nGlyph = nGlyph_;
		this.nHMetric = nHMetric_;
		this.nKern = nKern_;
		this.fUnitsPerEm = fUnitsPerEm_;
		this.ascent = ascent_;
		this.descent = descent_;
		this.bounds = bounds_;
		this.maxTwilightPoints = maxTwilightPoints_;
		this.maxStorage = maxStorage_;
		this.maxFunctionDefs = maxFunctionDefs_;
		this.maxStackElements = maxStackElements_;
	});
	arrayType = $arrayType(f2dot14, 2);
	arrayType$1 = $arrayType($Int32, 3);
	ptrType = $ptrType(Options);
	ptrType$1 = $ptrType(Font);
	ptrType$2 = $ptrType(image.Alpha);
	sliceType = $sliceType(glyphCacheEntry);
	sliceType$1 = $sliceType(raster.cell);
	sliceType$2 = $sliceType($Int);
	arrayType$2 = $arrayType(raster.cell, 256);
	arrayType$3 = $arrayType($Int, 64);
	arrayType$4 = $arrayType(raster.Span, 64);
	sliceType$3 = $sliceType(Point);
	sliceType$4 = $sliceType($Int32);
	arrayType$5 = $arrayType(sliceType$3, 3);
	arrayType$6 = $arrayType(arrayType$5, 2);
	sliceType$5 = $sliceType(fixed.Int26_6);
	arrayType$7 = $arrayType(Point, 4);
	arrayType$8 = $arrayType(indexCacheEntry, 256);
	sliceType$6 = $sliceType($Uint8);
	arrayType$9 = $arrayType($Int16, 4);
	arrayType$10 = $arrayType(callStackEntry, 32);
	ptrType$3 = $ptrType(Point);
	sliceType$7 = $sliceType($emptyInterface);
	sliceType$8 = $sliceType(cm);
	ptrType$4 = $ptrType(face);
	sliceType$9 = $sliceType(raster.Span);
	ptrType$5 = $ptrType(GlyphBuf);
	ptrType$6 = $ptrType(hinter);
	mapType = $mapType($Int32, sliceType$6);
	powerOf2 = function(i) {
		var i;
		return !((i === 0)) && (((i & ((i - 1 >> 0)))) === 0);
	};
	Options.ptr.prototype.size = function() {
		var o;
		o = this;
		if (!(o === ptrType.nil) && o.Size > 0) {
			return o.Size;
		}
		return 12;
	};
	Options.prototype.size = function() { return this.$val.size(); };
	Options.ptr.prototype.dpi = function() {
		var o;
		o = this;
		if (!(o === ptrType.nil) && o.DPI > 0) {
			return o.DPI;
		}
		return 72;
	};
	Options.prototype.dpi = function() { return this.$val.dpi(); };
	Options.ptr.prototype.hinting = function() {
		var _1, o;
		o = this;
		if (!(o === ptrType.nil)) {
			_1 = o.Hinting;
			if ((_1 === (1)) || (_1 === (2))) {
				return 2;
			}
		}
		return 0;
	};
	Options.prototype.hinting = function() { return this.$val.hinting(); };
	Options.ptr.prototype.glyphCacheEntries = function() {
		var o;
		o = this;
		if (!(o === ptrType.nil) && powerOf2(o.GlyphCacheEntries)) {
			return o.GlyphCacheEntries;
		}
		return 512;
	};
	Options.prototype.glyphCacheEntries = function() { return this.$val.glyphCacheEntries(); };
	Options.ptr.prototype.subPixelsX = function() {
		var _1, _tuple, _tuple$1, halfQuantum, mask, o, value;
		value = 0;
		halfQuantum = 0;
		mask = 0;
		o = this;
		if (!(o === ptrType.nil)) {
			_1 = o.SubPixelsX;
			if ((_1 === (1)) || (_1 === (2)) || (_1 === (4)) || (_1 === (8)) || (_1 === (16)) || (_1 === (32)) || (_1 === (64))) {
				_tuple = subPixels(o.SubPixelsX);
				value = _tuple[0];
				halfQuantum = _tuple[1];
				mask = _tuple[2];
				return [value, halfQuantum, mask];
			}
		}
		_tuple$1 = subPixels(4);
		value = _tuple$1[0];
		halfQuantum = _tuple$1[1];
		mask = _tuple$1[2];
		return [value, halfQuantum, mask];
	};
	Options.prototype.subPixelsX = function() { return this.$val.subPixelsX(); };
	Options.ptr.prototype.subPixelsY = function() {
		var _1, _tuple, _tuple$1, halfQuantum, mask, o, value;
		value = 0;
		halfQuantum = 0;
		mask = 0;
		o = this;
		if (!(o === ptrType.nil)) {
			_1 = o.SubPixelsX;
			if ((_1 === (1)) || (_1 === (2)) || (_1 === (4)) || (_1 === (8)) || (_1 === (16)) || (_1 === (32)) || (_1 === (64))) {
				_tuple = subPixels(o.SubPixelsX);
				value = _tuple[0];
				halfQuantum = _tuple[1];
				mask = _tuple[2];
				return [value, halfQuantum, mask];
			}
		}
		_tuple$1 = subPixels(1);
		value = _tuple$1[0];
		halfQuantum = _tuple$1[1];
		mask = _tuple$1[2];
		return [value, halfQuantum, mask];
	};
	Options.prototype.subPixelsY = function() { return this.$val.subPixelsY(); };
	subPixels = function(q) {
		var _q, _q$1, _tmp, _tmp$1, _tmp$2, bias, mask, q, value;
		value = 0;
		bias = 0;
		mask = 0;
		_tmp = ((q >>> 0));
		_tmp$1 = (_q = 32 / ((q >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		_tmp$2 = (_q$1 = -64 / ((q >> 0)), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		value = _tmp;
		bias = _tmp$1;
		mask = _tmp$2;
		return [value, bias, mask];
	};
	NewFace = function(f, opts) {
		var _i, _i$1, _ref, _ref$1, _tuple, _tuple$1, a, b, f, i, i$1, opts, x, x$1, x$2, xmax, xmin, ymax, ymin;
		a = new face.ptr(f, opts.hinting(), ((0.5 + (opts.size() * opts.dpi() * 64 / 72) >> 0)), 0, 0, 0, 0, 0, 0, ptrType$2.nil, $makeSlice(sliceType, opts.glyphCacheEntries()), new raster.Rasterizer.ptr(false, 0, 0, 0, 0, 0, new fixed.Point26_6.ptr(0, 0), 0, 0, 0, 0, sliceType$1.nil, sliceType$2.nil, arrayType$2.zero(), arrayType$3.zero(), arrayType$4.zero()), $ifaceNil, 0, 0, 0, new GlyphBuf.ptr(0, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)), sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil, ptrType$1.nil, 0, 0, new hinter.ptr(sliceType$4.nil, sliceType$4.nil, false, ptrType$1.nil, 0, new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), arrayType$6.zero(), sliceType$2.nil, false, sliceType$5.nil), arrayType$7.zero(), 0, false, sliceType$3.nil), arrayType$8.zero());
		_tuple = opts.subPixelsX();
		a.subPixelX = _tuple[0];
		a.subPixelBiasX = _tuple[1];
		a.subPixelMaskX = _tuple[2];
		_tuple$1 = opts.subPixelsY();
		a.subPixelY = _tuple$1[0];
		a.subPixelBiasY = _tuple$1[1];
		a.subPixelMaskY = _tuple$1[2];
		_ref = a.glyphCache;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			(x = a.glyphCache, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).key.fy = 255;
			_i++;
		}
		_ref$1 = a.indexCache;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 256)) { break; }
			i$1 = _i$1;
			(x$1 = a.indexCache, ((i$1 < 0 || i$1 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i$1])).rune = -1;
			_i$1++;
		}
		b = $clone(f.Bounds(a.scale), fixed.Rectangle26_6);
		xmin = ((b.Min.X >> 0)) >> 6 >> 0;
		ymin = -((b.Max.Y >> 0)) >> 6 >> 0;
		xmax = (((b.Max.X + 63 >> 0) >> 0)) >> 6 >> 0;
		ymax = -(((b.Min.Y - 63 >> 0) >> 0)) >> 6 >> 0;
		a.maxw = xmax - xmin >> 0;
		a.maxh = ymax - ymin >> 0;
		a.masks = image.NewAlpha($clone(image.Rect(0, 0, a.maxw, $imul(a.maxh, a.glyphCache.$length)), image.Rectangle));
		a.r.SetBounds(a.maxw, a.maxh);
		a.p = (x$2 = new facePainter.ptr(a), new x$2.constructor.elem(x$2));
		return a;
	};
	$pkg.NewFace = NewFace;
	face.ptr.prototype.index = function(r) {
		var a, c, i, r, x, x$1;
		a = this;
		c = (x = a.indexCache, x$1 = r & 255, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
		if (c.rune === r) {
			return c.index;
		}
		i = a.f.Index(r);
		c.rune = r;
		c.index = i;
		return i;
	};
	face.prototype.index = function(r) { return this.$val.index(r); };
	face.ptr.prototype.Close = function() {
		var a;
		a = this;
		return $ifaceNil;
	};
	face.prototype.Close = function() { return this.$val.Close(); };
	face.ptr.prototype.Metrics = function() {
		var a, fupe, scale;
		a = this;
		scale = (a.scale);
		fupe = (a.f.FUnitsPerEm());
		return new font.Metrics.ptr(a.scale, ((math.Ceil(scale * (a.f.ascent) / fupe) >> 0)), ((math.Ceil(scale * (-a.f.descent) / fupe) >> 0)));
	};
	face.prototype.Metrics = function() { return this.$val.Metrics(); };
	face.ptr.prototype.Kern = function(r0, r1) {
		var a, i0, i1, kern, r0, r1;
		a = this;
		i0 = a.index(r0);
		i1 = a.index(r1);
		kern = a.f.Kern(a.scale, i0, i1);
		if (!((a.hinting === 0))) {
			kern = (((kern + 32 >> 0)) & ~63) >> 0;
		}
		return kern;
	};
	face.prototype.Kern = function(r0, r1) { return this.$val.Kern(r0, r1); };
	face.ptr.prototype.Glyph = function(dot, r) {
		var _q, _q$1, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, advance, cIndex, dot, dotX, dotY, dr, fx, fy, index, ix, iy, k, mask, maskp, ok, ok$1, r, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; a = $f.a; advance = $f.advance; cIndex = $f.cIndex; dot = $f.dot; dotX = $f.dotX; dotY = $f.dotY; dr = $f.dr; fx = $f.fx; fy = $f.fy; index = $f.index; ix = $f.ix; iy = $f.iy; k = $f.k; mask = $f.mask; maskp = $f.maskp; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dr = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
		mask = $ifaceNil;
		maskp = new image.Point.ptr(0, 0);
		advance = 0;
		ok = false;
		a = this;
		dotX = ((dot.X + a.subPixelBiasX >> 0)) & a.subPixelMaskX;
		dotY = ((dot.Y + a.subPixelBiasY >> 0)) & a.subPixelMaskY;
		_tmp = (((dotX >> 6 >> 0) >> 0));
		_tmp$1 = dotX & 63;
		ix = _tmp;
		fx = _tmp$1;
		_tmp$2 = (((dotY >> 6 >> 0) >> 0));
		_tmp$3 = dotY & 63;
		iy = _tmp$2;
		fy = _tmp$3;
		index = a.index(r);
		cIndex = ((index >>> 0));
		cIndex = ($imul(cIndex, a.subPixelX) >>> 0) - (((_q = fx / a.subPixelMaskX, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0)) >>> 0;
		cIndex = ($imul(cIndex, a.subPixelY) >>> 0) - (((_q$1 = fy / a.subPixelMaskY, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0)) >>> 0;
		cIndex = (cIndex & ((((a.glyphCache.$length - 1 >> 0) >>> 0)))) >>> 0;
		a.paintOffset = $imul(a.maxh, ((cIndex >> 0)));
		k = new glyphCacheKey.ptr(index, ((fx << 24 >>> 24)), ((fy << 24 >>> 24)));
		v = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
		/* */ if (!($equal((x = a.glyphCache, ((cIndex < 0 || cIndex >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + cIndex])).key, k, glyphCacheKey))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($equal((x = a.glyphCache, ((cIndex < 0 || cIndex >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + cIndex])).key, k, glyphCacheKey))) { */ case 1:
			ok$1 = false;
			_r = a.rasterize(index, fx, fy); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			glyphCacheVal.copy(v, _tuple[0]);
			ok$1 = _tuple[1];
			if (!ok$1) {
				_tmp$4 = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
				_tmp$5 = $ifaceNil;
				_tmp$6 = new image.Point.ptr(0, 0);
				_tmp$7 = 0;
				_tmp$8 = false;
				image.Rectangle.copy(dr, _tmp$4);
				mask = _tmp$5;
				image.Point.copy(maskp, _tmp$6);
				advance = _tmp$7;
				ok = _tmp$8;
				$s = -1; return [dr, mask, maskp, advance, ok];
			}
			glyphCacheEntry.copy((x$1 = a.glyphCache, ((cIndex < 0 || cIndex >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + cIndex])), new glyphCacheEntry.ptr($clone(k, glyphCacheKey), $clone(v, glyphCacheVal)));
			$s = 3; continue;
		/* } else { */ case 2:
			glyphCacheVal.copy(v, (x$2 = a.glyphCache, ((cIndex < 0 || cIndex >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + cIndex])).val);
		/* } */ case 3:
		image.Point.copy(dr.Min, new image.Point.ptr(ix + v.offset.X >> 0, iy + v.offset.Y >> 0));
		image.Point.copy(dr.Max, new image.Point.ptr(dr.Min.X + v.gw >> 0, dr.Min.Y + v.gh >> 0));
		_tmp$9 = $clone(dr, image.Rectangle);
		_tmp$10 = a.masks;
		_tmp$11 = new image.Point.ptr(0, a.paintOffset);
		_tmp$12 = v.advanceWidth;
		_tmp$13 = true;
		image.Rectangle.copy(dr, _tmp$9);
		mask = _tmp$10;
		image.Point.copy(maskp, _tmp$11);
		advance = _tmp$12;
		ok = _tmp$13;
		$s = -1; return [dr, mask, maskp, advance, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: face.ptr.prototype.Glyph }; } $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.a = a; $f.advance = advance; $f.cIndex = cIndex; $f.dot = dot; $f.dotX = dotX; $f.dotY = dotY; $f.dr = dr; $f.fx = fx; $f.fy = fy; $f.index = index; $f.ix = ix; $f.iy = iy; $f.k = k; $f.mask = mask; $f.maskp = maskp; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	face.prototype.Glyph = function(dot, r) { return this.$val.Glyph(dot, r); };
	face.ptr.prototype.GlyphBounds = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a, advance, bounds, err, ok, r, xmax, xmin, ymax, ymin;
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		ok = false;
		a = this;
		err = a.glyphBuf.Load(a.f, a.scale, a.index(r), a.hinting);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			_tmp$1 = 0;
			_tmp$2 = false;
			fixed.Rectangle26_6.copy(bounds, _tmp);
			advance = _tmp$1;
			ok = _tmp$2;
			return [bounds, advance, ok];
		}
		xmin = a.glyphBuf.Bounds.Min.X;
		ymin = -a.glyphBuf.Bounds.Max.Y;
		xmax = a.glyphBuf.Bounds.Max.X;
		ymax = -a.glyphBuf.Bounds.Min.Y;
		if (xmin > xmax || ymin > ymax) {
			_tmp$3 = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			_tmp$4 = 0;
			_tmp$5 = false;
			fixed.Rectangle26_6.copy(bounds, _tmp$3);
			advance = _tmp$4;
			ok = _tmp$5;
			return [bounds, advance, ok];
		}
		_tmp$6 = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(xmin, ymin), new fixed.Point26_6.ptr(xmax, ymax));
		_tmp$7 = a.glyphBuf.AdvanceWidth;
		_tmp$8 = true;
		fixed.Rectangle26_6.copy(bounds, _tmp$6);
		advance = _tmp$7;
		ok = _tmp$8;
		return [bounds, advance, ok];
	};
	face.prototype.GlyphBounds = function(r) { return this.$val.GlyphBounds(r); };
	face.ptr.prototype.GlyphAdvance = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, advance, err, ok, r;
		advance = 0;
		ok = false;
		a = this;
		err = a.glyphBuf.Load(a.f, a.scale, a.index(r), a.hinting);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = false;
			advance = _tmp;
			ok = _tmp$1;
			return [advance, ok];
		}
		_tmp$2 = a.glyphBuf.AdvanceWidth;
		_tmp$3 = true;
		advance = _tmp$2;
		ok = _tmp$3;
		return [advance, ok];
	};
	face.prototype.GlyphAdvance = function(r) { return this.$val.GlyphAdvance(r); };
	face.ptr.prototype.rasterize = function(index, fx, fy) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, e0, e1, err, fx, fy, index, ok, pixOffset, v, xmax, xmin, ymax, ymin, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; a = $f.a; e0 = $f.e0; e1 = $f.e1; err = $f.err; fx = $f.fx; fy = $f.fy; index = $f.index; ok = $f.ok; pixOffset = $f.pixOffset; v = $f.v; xmax = $f.xmax; xmin = $f.xmin; ymax = $f.ymax; ymin = $f.ymin; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
		ok = false;
		a = this;
		err = a.glyphBuf.Load(a.f, a.scale, index, a.hinting);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
			_tmp$1 = false;
			glyphCacheVal.copy(v, _tmp);
			ok = _tmp$1;
			$s = -1; return [v, ok];
		}
		xmin = (((fx + a.glyphBuf.Bounds.Min.X >> 0) >> 0)) >> 6 >> 0;
		ymin = (((fy - a.glyphBuf.Bounds.Max.Y >> 0) >> 0)) >> 6 >> 0;
		xmax = ((((fx + a.glyphBuf.Bounds.Max.X >> 0) + 63 >> 0) >> 0)) >> 6 >> 0;
		ymax = ((((fy - a.glyphBuf.Bounds.Min.Y >> 0) + 63 >> 0) >> 0)) >> 6 >> 0;
		if (xmin > xmax || ymin > ymax) {
			_tmp$2 = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
			_tmp$3 = false;
			glyphCacheVal.copy(v, _tmp$2);
			ok = _tmp$3;
			$s = -1; return [v, ok];
		}
		fx = fx - ((((xmin << 6 >> 0) >> 0))) >> 0;
		fy = fy - ((((ymin << 6 >> 0) >> 0))) >> 0;
		a.r.Clear();
		pixOffset = $imul(a.paintOffset, a.maxw);
		clear($subslice(a.masks.Pix, pixOffset, (pixOffset + ($imul(a.maxw, a.maxh)) >> 0)));
		e0 = 0;
		_ref = a.glyphBuf.Ends;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			e1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			a.drawContour($subslice(a.glyphBuf.Points, e0, e1), fx, fy);
			e0 = e1;
			_i++;
		}
		$r = a.r.Rasterize(a.p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = new glyphCacheVal.ptr(a.glyphBuf.AdvanceWidth, new image.Point.ptr(xmin, ymin), xmax - xmin >> 0, ymax - ymin >> 0);
		_tmp$5 = true;
		glyphCacheVal.copy(v, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [v, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: face.ptr.prototype.rasterize }; } $f._i = _i; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.a = a; $f.e0 = e0; $f.e1 = e1; $f.err = err; $f.fx = fx; $f.fy = fy; $f.index = index; $f.ok = ok; $f.pixOffset = pixOffset; $f.v = v; $f.xmax = xmax; $f.xmin = xmin; $f.ymax = ymax; $f.ymin = ymin; $f.$s = $s; $f.$r = $r; return $f;
	};
	face.prototype.rasterize = function(index, fx, fy) { return this.$val.rasterize(index, fx, fy); };
	clear = function(pix) {
		var _i, _ref, i, pix;
		_ref = pix;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + i] = 0);
			_i++;
		}
	};
	face.ptr.prototype.drawContour = function(ps, dx, dy) {
		var _i, _q, _q$1, _q$2, _q$3, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, a, dx, dy, last, mid, on, on0, others, p, ps, q, q0, start, x, x$1, x$2;
		a = this;
		if (ps.$length === 0) {
			return;
		}
		start = new fixed.Point26_6.ptr(dx + (0 >= ps.$length ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + 0]).X >> 0, dy - (0 >= ps.$length ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + 0]).Y >> 0);
		others = sliceType$3.nil;
		if (!(((((0 >= ps.$length ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + 0]).Flags & 1) >>> 0) === 0))) {
			others = $subslice(ps, 1);
		} else {
			last = new fixed.Point26_6.ptr(dx + (x = ps.$length - 1 >> 0, ((x < 0 || x >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + x])).X >> 0, dy - (x$1 = ps.$length - 1 >> 0, ((x$1 < 0 || x$1 >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + x$1])).Y >> 0);
			if (!(((((x$2 = ps.$length - 1 >> 0, ((x$2 < 0 || x$2 >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + x$2])).Flags & 1) >>> 0) === 0))) {
				fixed.Point26_6.copy(start, last);
				others = $subslice(ps, 0, (ps.$length - 1 >> 0));
			} else {
				fixed.Point26_6.copy(start, new fixed.Point26_6.ptr((_q = ((start.X + last.X >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ((start.Y + last.Y >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))));
				others = ps;
			}
		}
		a.r.Start($clone(start, fixed.Point26_6));
		_tmp = $clone(start, fixed.Point26_6);
		_tmp$1 = true;
		q0 = $clone(_tmp, fixed.Point26_6);
		on0 = _tmp$1;
		_ref = others;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), Point);
			q = new fixed.Point26_6.ptr(dx + p.X >> 0, dy - p.Y >> 0);
			on = !((((p.Flags & 1) >>> 0) === 0));
			if (on) {
				if (on0) {
					a.r.Add1($clone(q, fixed.Point26_6));
				} else {
					a.r.Add2($clone(q0, fixed.Point26_6), $clone(q, fixed.Point26_6));
				}
			} else {
				if (on0) {
				} else {
					mid = new fixed.Point26_6.ptr((_q$2 = ((q0.X + q.X >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")), (_q$3 = ((q0.Y + q.Y >> 0)) / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")));
					a.r.Add2($clone(q0, fixed.Point26_6), $clone(mid, fixed.Point26_6));
				}
			}
			_tmp$2 = $clone(q, fixed.Point26_6);
			_tmp$3 = on;
			fixed.Point26_6.copy(q0, _tmp$2);
			on0 = _tmp$3;
			_i++;
		}
		if (on0) {
			a.r.Add1($clone(start, fixed.Point26_6));
		} else {
			a.r.Add2($clone(q0, fixed.Point26_6), $clone(start, fixed.Point26_6));
		}
	};
	face.prototype.drawContour = function(ps, dx, dy) { return this.$val.drawContour(ps, dx, dy); };
	facePainter.ptr.prototype.Paint = function(ss, done) {
		var _i, _i$1, _ref, _ref$1, b, base, color, done, i, m, p, p$1, s, ss;
		p = this;
		m = p.a.masks;
		b = $clone(m.Bounds(), image.Rectangle);
		b.Min.Y = p.a.paintOffset;
		b.Max.Y = p.a.paintOffset + p.a.maxh >> 0;
		_ref = ss;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), raster.Span);
			s.Y = s.Y + (p.a.paintOffset) >> 0;
			if (s.Y < b.Min.Y) {
				_i++;
				continue;
			}
			if (s.Y >= b.Max.Y) {
				return;
			}
			if (s.X0 < b.Min.X) {
				s.X0 = b.Min.X;
			}
			if (s.X1 > b.Max.X) {
				s.X1 = b.Max.X;
			}
			if (s.X0 >= s.X1) {
				_i++;
				continue;
			}
			base = ($imul(((s.Y - m.Rect.Min.Y >> 0)), m.Stride)) - m.Rect.Min.X >> 0;
			p$1 = $subslice(m.Pix, (base + s.X0 >> 0), (base + s.X1 >> 0));
			color = (((s.Alpha >>> 8 >>> 0) << 24 >>> 24));
			_ref$1 = p$1;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i = _i$1;
				((i < 0 || i >= p$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : p$1.$array[p$1.$offset + i] = color);
				_i$1++;
			}
			_i++;
		}
	};
	facePainter.prototype.Paint = function(ss, done) { return this.$val.Paint(ss, done); };
	GlyphBuf.ptr.prototype.Load = function(f, scale, i, h) {
		var _i, _i$1, _ref, _ref$1, advanceWidth, err, err$1, f, g, h, hdmx, i, i$1, n, p, p$1, pp1x, scale, x, x$1, x$2, x$3;
		g = this;
		g.Points = $subslice(g.Points, 0, 0);
		g.Unhinted = $subslice(g.Unhinted, 0, 0);
		g.InFontUnits = $subslice(g.InFontUnits, 0, 0);
		g.Ends = $subslice(g.Ends, 0, 0);
		g.font = f;
		g.hinting = h;
		g.scale = scale;
		g.pp1x = 0;
		arrayType$7.copy(g.phantomPoints, arrayType$7.zero());
		g.metricsSet = false;
		if (!((h === 0))) {
			err = g.hinter.init(f, scale);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		err$1 = g.load(0, i, true);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		pp1x = g.pp1x;
		if (!((h === 0))) {
			pp1x = g.phantomPoints[0].X;
		}
		if (!((pp1x === 0))) {
			_ref = g.Points;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i$1 = _i;
				(x$1 = g.Points, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])).X = (x = g.Points, ((i$1 < 0 || i$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$1])).X - (pp1x) >> 0;
				_i++;
			}
		}
		advanceWidth = g.phantomPoints[1].X - g.phantomPoints[0].X >> 0;
		if (!((h === 0))) {
			if (f.hdmx.$length >= 8) {
				n = u32(f.hdmx, 4);
				if (n > (3 + ((i >>> 0)) >>> 0)) {
					hdmx = $subslice(f.hdmx, 8);
					while (true) {
						if (!(((hdmx.$length >>> 0)) >= n)) { break; }
						if ((((0 >= hdmx.$length ? ($throwRuntimeError("index out of range"), undefined) : hdmx.$array[hdmx.$offset + 0]) >> 0)) === (scale >> 6 >> 0)) {
							advanceWidth = (((x$2 = 2 + i << 16 >>> 16, ((x$2 < 0 || x$2 >= hdmx.$length) ? ($throwRuntimeError("index out of range"), undefined) : hdmx.$array[hdmx.$offset + x$2])) >> 0)) << 6 >> 0;
							break;
						}
						hdmx = $subslice(hdmx, n);
					}
				}
			}
			advanceWidth = (((advanceWidth + 32 >> 0)) & ~63) >> 0;
		}
		g.AdvanceWidth = advanceWidth;
		if (g.Points.$length === 0) {
			fixed.Rectangle26_6.copy(g.Bounds, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)));
		} else {
			p = $clone((x$3 = g.Points, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])), Point);
			g.Bounds.Min.X = p.X;
			g.Bounds.Max.X = p.X;
			g.Bounds.Min.Y = p.Y;
			g.Bounds.Max.Y = p.Y;
			_ref$1 = $subslice(g.Points, 1);
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				p$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), Point);
				if (g.Bounds.Min.X > p$1.X) {
					g.Bounds.Min.X = p$1.X;
				} else if (g.Bounds.Max.X < p$1.X) {
					g.Bounds.Max.X = p$1.X;
				}
				if (g.Bounds.Min.Y > p$1.Y) {
					g.Bounds.Min.Y = p$1.Y;
				} else if (g.Bounds.Max.Y < p$1.Y) {
					g.Bounds.Max.Y = p$1.Y;
				}
				_i$1++;
			}
			if (!((h === 0))) {
				g.Bounds.Min.X = (g.Bounds.Min.X & ~(63)) >> 0;
				g.Bounds.Min.Y = (g.Bounds.Min.Y & ~(63)) >> 0;
				g.Bounds.Max.X = g.Bounds.Max.X + (63) >> 0;
				g.Bounds.Max.X = (g.Bounds.Max.X & ~(63)) >> 0;
				g.Bounds.Max.Y = g.Bounds.Max.Y + (63) >> 0;
				g.Bounds.Max.Y = (g.Bounds.Max.Y & ~(63)) >> 0;
			}
		}
		return $ifaceNil;
	};
	GlyphBuf.prototype.Load = function(f, scale, i, h) { return this.$val.Load(f, scale, i, h); };
	GlyphBuf.ptr.prototype.load = function(recursion, i, useMyMetrics) {
		var _q, _q$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, boundsXMin, boundsYMax, err, err$1, err$2, g, g0, g1, glyf, i, i$1, ne, ne0, np0, pp1x, program, recursion, uhm, useMyMetrics, uvm, x, x$1, x$2, x$3;
		err = $ifaceNil;
		g = this;
		if (recursion >= 32) {
			err = new UnsupportedError("excessive compound glyph recursion");
			return err;
		}
		_tmp = 0;
		_tmp$1 = 0;
		g0 = _tmp;
		g1 = _tmp$1;
		if (g.font.locaOffsetFormat === 1) {
			g0 = $imul(2, ((u16(g.font.loca, $imul(2, ((i >> 0)))) >>> 0))) >>> 0;
			g1 = $imul(2, ((u16(g.font.loca, ($imul(2, ((i >> 0)))) + 2 >> 0) >>> 0))) >>> 0;
		} else {
			g0 = u32(g.font.loca, $imul(4, ((i >> 0))));
			g1 = u32(g.font.loca, ($imul(4, ((i >> 0)))) + 4 >> 0);
		}
		_tmp$2 = (sliceType$6.nil);
		_tmp$3 = 0;
		_tmp$4 = 0;
		_tmp$5 = 0;
		glyf = _tmp$2;
		ne = _tmp$3;
		boundsXMin = _tmp$4;
		boundsYMax = _tmp$5;
		if ((g0 + 10 >>> 0) <= g1) {
			glyf = $subslice(g.font.glyf, g0, g1);
			ne = ((((u16(glyf, 0) << 16 >> 16)) >> 0));
			boundsXMin = ((((u16(glyf, 2) << 16 >> 16)) >> 0));
			boundsYMax = ((((u16(glyf, 8) << 16 >> 16)) >> 0));
		}
		_tmp$6 = $clone(g.font.unscaledHMetric(i), HMetric);
		_tmp$7 = 0;
		uhm = $clone(_tmp$6, HMetric);
		pp1x = _tmp$7;
		uvm = $clone(g.font.unscaledVMetric(i, boundsYMax), VMetric);
		arrayType$7.copy(g.phantomPoints, $toNativeArray($kindStruct, [new Point.ptr(boundsXMin - uhm.LeftSideBearing >> 0, 0, 0), new Point.ptr((boundsXMin - uhm.LeftSideBearing >> 0) + uhm.AdvanceWidth >> 0, 0, 0), new Point.ptr((_q = uhm.AdvanceWidth / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), boundsYMax + uvm.TopSideBearing >> 0, 0), new Point.ptr((_q$1 = uhm.AdvanceWidth / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), (boundsYMax + uvm.TopSideBearing >> 0) - uvm.AdvanceHeight >> 0, 0)]));
		if (glyf.$length === 0) {
			g.addPhantomsAndScale(g.Points.$length, g.Points.$length, true, true);
			$copySlice(new sliceType$3(g.phantomPoints), $subslice(g.Points, (g.Points.$length - 4 >> 0)));
			g.Points = $subslice(g.Points, 0, (g.Points.$length - 4 >> 0));
			err = $ifaceNil;
			return err;
		}
		if (ne < 0) {
			if (!((ne === -1))) {
				err = new UnsupportedError("negative number of contours");
				return err;
			}
			pp1x = g.font.scale($imul(g.scale, ((boundsXMin - uhm.LeftSideBearing >> 0))));
			err$1 = g.loadCompound(recursion, $clone(uhm, HMetric), i, glyf, useMyMetrics);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				err = err$1;
				return err;
			}
		} else {
			_tmp$8 = g.Points.$length;
			_tmp$9 = g.Ends.$length;
			np0 = _tmp$8;
			ne0 = _tmp$9;
			program = g.loadSimple(glyf, ne);
			g.addPhantomsAndScale(np0, np0, true, true);
			pp1x = (x = g.Points, x$1 = g.Points.$length - 4 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).X;
			if (!((g.hinting === 0))) {
				if (!((program.$length === 0))) {
					err$2 = g.hinter.run(program, $subslice(g.Points, np0), $subslice(g.Unhinted, np0), $subslice(g.InFontUnits, np0), $subslice(g.Ends, ne0));
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						err = err$2;
						return err;
					}
				}
				g.InFontUnits = $subslice(g.InFontUnits, 0, (g.InFontUnits.$length - 4 >> 0));
				g.Unhinted = $subslice(g.Unhinted, 0, (g.Unhinted.$length - 4 >> 0));
			}
			if (useMyMetrics) {
				$copySlice(new sliceType$3(g.phantomPoints), $subslice(g.Points, (g.Points.$length - 4 >> 0)));
			}
			g.Points = $subslice(g.Points, 0, (g.Points.$length - 4 >> 0));
			if (!((np0 === 0))) {
				i$1 = ne0;
				while (true) {
					if (!(i$1 < g.Ends.$length)) { break; }
					(x$3 = g.Ends, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1] = ((x$2 = g.Ends, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1])) + (np0) >> 0)));
					i$1 = i$1 + (1) >> 0;
				}
			}
		}
		if (useMyMetrics && !g.metricsSet) {
			g.metricsSet = true;
			g.pp1x = pp1x;
		}
		err = $ifaceNil;
		return err;
	};
	GlyphBuf.prototype.load = function(recursion, i, useMyMetrics) { return this.$val.load(recursion, i, useMyMetrics); };
	GlyphBuf.ptr.prototype.loadSimple = function(glyf, ne) {
		var c, count, dx, dy, f, f$1, g, glyf, i, i$1, i$2, i$3, instrLen, ne, np0, np1, offset, program, x, x$1, x$2, x$3, x$4, x$5, x$6, y;
		program = sliceType$6.nil;
		g = this;
		offset = 10;
		i = 0;
		while (true) {
			if (!(i < ne)) { break; }
			g.Ends = $append(g.Ends, 1 + ((u16(glyf, offset) >> 0)) >> 0);
			offset = offset + (2) >> 0;
			i = i + (1) >> 0;
		}
		instrLen = ((u16(glyf, offset) >> 0));
		offset = offset + (2) >> 0;
		program = $subslice(glyf, offset, (offset + instrLen >> 0));
		offset = offset + (instrLen) >> 0;
		if (ne === 0) {
			program = program;
			return program;
		}
		np0 = g.Points.$length;
		np1 = np0 + ((x = g.Ends, x$1 = g.Ends.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]))) >> 0;
		i$1 = np0;
		while (true) {
			if (!(i$1 < np1)) { break; }
			c = ((((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]) >>> 0));
			offset = offset + (1) >> 0;
			g.Points = $append(g.Points, new Point.ptr(0, 0, c));
			i$1 = i$1 + (1) >> 0;
			if (!((((c & 8) >>> 0) === 0))) {
				count = ((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]);
				offset = offset + (1) >> 0;
				while (true) {
					if (!(count > 0)) { break; }
					g.Points = $append(g.Points, new Point.ptr(0, 0, c));
					i$1 = i$1 + (1) >> 0;
					count = count - (1) << 24 >>> 24;
				}
			}
		}
		x$2 = 0;
		i$2 = np0;
		while (true) {
			if (!(i$2 < np1)) { break; }
			f = (x$3 = g.Points, ((i$2 < 0 || i$2 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$2])).Flags;
			if (!((((f & 2) >>> 0) === 0))) {
				dx = ((((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]) << 16 >> 16));
				offset = offset + (1) >> 0;
				if (((f & 16) >>> 0) === 0) {
					x$2 = x$2 - (dx) << 16 >> 16;
				} else {
					x$2 = x$2 + (dx) << 16 >> 16;
				}
			} else if (((f & 16) >>> 0) === 0) {
				x$2 = x$2 + (((u16(glyf, offset) << 16 >> 16))) << 16 >> 16;
				offset = offset + (2) >> 0;
			}
			(x$4 = g.Points, ((i$2 < 0 || i$2 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i$2])).X = ((x$2 >> 0));
			i$2 = i$2 + (1) >> 0;
		}
		y = 0;
		i$3 = np0;
		while (true) {
			if (!(i$3 < np1)) { break; }
			f$1 = (x$5 = g.Points, ((i$3 < 0 || i$3 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i$3])).Flags;
			if (!((((f$1 & 4) >>> 0) === 0))) {
				dy = ((((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]) << 16 >> 16));
				offset = offset + (1) >> 0;
				if (((f$1 & 32) >>> 0) === 0) {
					y = y - (dy) << 16 >> 16;
				} else {
					y = y + (dy) << 16 >> 16;
				}
			} else if (((f$1 & 32) >>> 0) === 0) {
				y = y + (((u16(glyf, offset) << 16 >> 16))) << 16 >> 16;
				offset = offset + (2) >> 0;
			}
			(x$6 = g.Points, ((i$3 < 0 || i$3 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i$3])).Y = ((y >> 0));
			i$3 = i$3 + (1) >> 0;
		}
		program = program;
		return program;
	};
	GlyphBuf.prototype.loadSimple = function(glyf, ne) { return this.$val.loadSimple(glyf, ne); };
	GlyphBuf.ptr.prototype.loadCompound = function(recursion, uhm, i, glyf, useMyMetrics) {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, component, componentUMM, dx, dy, ends, err, err$1, flags, g, glyf, hasTransform, i, i$1, i$2, instrLen, j, j$1, j$2, ne0, newX, newY, np0, np0$1, offset, p, p$1, points, program, recursion, savedPP, transform, uhm, useMyMetrics, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		g = this;
		_tmp = g.Points.$length;
		_tmp$1 = g.Ends.$length;
		np0 = _tmp;
		ne0 = _tmp$1;
		offset = 10;
		while (true) {
			flags = u16(glyf, offset);
			component = ((u16(glyf, offset + 2 >> 0) << 16 >>> 16));
			_tmp$2 = 0;
			_tmp$3 = 0;
			_tmp$4 = arrayType$9.zero();
			_tmp$5 = false;
			dx = _tmp$2;
			dy = _tmp$3;
			transform = $clone(_tmp$4, arrayType$9);
			hasTransform = _tmp$5;
			if (!((((flags & 1) >>> 0) === 0))) {
				dx = ((((u16(glyf, offset + 4 >> 0) << 16 >> 16)) >> 0));
				dy = ((((u16(glyf, offset + 6 >> 0) << 16 >> 16)) >> 0));
				offset = offset + (8) >> 0;
			} else {
				dx = (((((((x = offset + 4 >> 0, ((x < 0 || x >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + x])) << 24 >> 24)) << 16 >> 16)) >> 0));
				dy = (((((((x$1 = offset + 5 >> 0, ((x$1 < 0 || x$1 >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + x$1])) << 24 >> 24)) << 16 >> 16)) >> 0));
				offset = offset + (6) >> 0;
			}
			if (((flags & 2) >>> 0) === 0) {
				return new UnsupportedError("compound glyph transform vector");
			}
			if (!((((flags & 200) >>> 0) === 0))) {
				hasTransform = true;
				if (!((((flags & 8) >>> 0) === 0))) {
					transform[0] = ((u16(glyf, offset + 0 >> 0) << 16 >> 16));
					transform[3] = transform[0];
					offset = offset + (2) >> 0;
				} else if (!((((flags & 64) >>> 0) === 0))) {
					transform[0] = ((u16(glyf, offset + 0 >> 0) << 16 >> 16));
					transform[3] = ((u16(glyf, offset + 2 >> 0) << 16 >> 16));
					offset = offset + (4) >> 0;
				} else if (!((((flags & 128) >>> 0) === 0))) {
					transform[0] = ((u16(glyf, offset + 0 >> 0) << 16 >> 16));
					transform[1] = ((u16(glyf, offset + 2 >> 0) << 16 >> 16));
					transform[2] = ((u16(glyf, offset + 4 >> 0) << 16 >> 16));
					transform[3] = ((u16(glyf, offset + 6 >> 0) << 16 >> 16));
					offset = offset + (8) >> 0;
				}
			}
			savedPP = $clone(g.phantomPoints, arrayType$7);
			np0$1 = g.Points.$length;
			componentUMM = useMyMetrics && (!((((flags & 512) >>> 0) === 0)));
			err = g.load(recursion + 1 >>> 0, component, componentUMM);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			if (((flags & 512) >>> 0) === 0) {
				arrayType$7.copy(g.phantomPoints, savedPP);
			}
			if (hasTransform) {
				j = np0$1;
				while (true) {
					if (!(j < g.Points.$length)) { break; }
					p = (x$2 = g.Points, ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]));
					newX = (0 + (((x$3 = $shiftRightInt64(((x$4 = $mul64((new $Int64(0, p.X)), (new $Int64(0, transform[0]))), new $Int64(x$4.$high + 0, x$4.$low + 8192))), 14), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0)) >> 0) + (((x$5 = $shiftRightInt64(((x$6 = $mul64((new $Int64(0, p.Y)), (new $Int64(0, transform[2]))), new $Int64(x$6.$high + 0, x$6.$low + 8192))), 14), x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0)) >> 0;
					newY = (0 + (((x$7 = $shiftRightInt64(((x$8 = $mul64((new $Int64(0, p.X)), (new $Int64(0, transform[1]))), new $Int64(x$8.$high + 0, x$8.$low + 8192))), 14), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0)) >> 0) + (((x$9 = $shiftRightInt64(((x$10 = $mul64((new $Int64(0, p.Y)), (new $Int64(0, transform[3]))), new $Int64(x$10.$high + 0, x$10.$low + 8192))), 14), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0)) >> 0;
					_tmp$6 = newX;
					_tmp$7 = newY;
					p.X = _tmp$6;
					p.Y = _tmp$7;
					j = j + (1) >> 0;
				}
			}
			dx = g.font.scale($imul(g.scale, dx));
			dy = g.font.scale($imul(g.scale, dy));
			if (!((((flags & 4) >>> 0) === 0))) {
				dx = (((dx + 32 >> 0)) & ~63) >> 0;
				dy = (((dy + 32 >> 0)) & ~63) >> 0;
			}
			j$1 = np0$1;
			while (true) {
				if (!(j$1 < g.Points.$length)) { break; }
				p$1 = (x$11 = g.Points, ((j$1 < 0 || j$1 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + j$1]));
				p$1.X = p$1.X + (dx) >> 0;
				p$1.Y = p$1.Y + (dy) >> 0;
				j$1 = j$1 + (1) >> 0;
			}
			if (((flags & 32) >>> 0) === 0) {
				break;
			}
		}
		instrLen = 0;
		if (!((g.hinting === 0)) && (offset + 2 >> 0) <= glyf.$length) {
			instrLen = ((u16(glyf, offset) >> 0));
			offset = offset + (2) >> 0;
		}
		g.addPhantomsAndScale(np0, g.Points.$length, false, instrLen > 0);
		_tmp$8 = $subslice(g.Points, np0);
		_tmp$9 = $subslice(g.Ends, ne0);
		points = _tmp$8;
		ends = _tmp$9;
		g.Points = $subslice(g.Points, 0, (g.Points.$length - 4 >> 0));
		_ref = points;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			j$2 = _i;
			((j$2 < 0 || j$2 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + j$2]).Flags = (((j$2 < 0 || j$2 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + j$2]).Flags & ~(192)) >>> 0;
			_i++;
		}
		if (instrLen === 0) {
			if (!g.metricsSet) {
				$copySlice(new sliceType$3(g.phantomPoints), $subslice(points, (points.$length - 4 >> 0)));
			}
			return $ifaceNil;
		}
		program = $subslice(glyf, offset, (offset + instrLen >> 0));
		if (!((np0 === 0))) {
			_ref$1 = ends;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				((i$1 < 0 || i$1 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$1] = (((i$1 < 0 || i$1 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$1]) - (np0) >> 0));
				_i$1++;
			}
		}
		g.tmp = $appendSlice($subslice(g.tmp, 0, 0), points);
		err$1 = g.hinter.run(program, points, g.tmp, g.tmp, ends);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		if (!((np0 === 0))) {
			_ref$2 = ends;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				i$2 = _i$2;
				((i$2 < 0 || i$2 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$2] = (((i$2 < 0 || i$2 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$2]) + (np0) >> 0));
				_i$2++;
			}
		}
		if (!g.metricsSet) {
			$copySlice(new sliceType$3(g.phantomPoints), $subslice(points, (points.$length - 4 >> 0)));
		}
		return $ifaceNil;
	};
	GlyphBuf.prototype.loadCompound = function(recursion, uhm, i, glyf, useMyMetrics) { return this.$val.loadCompound(recursion, uhm, i, glyf, useMyMetrics); };
	GlyphBuf.ptr.prototype.addPhantomsAndScale = function(np0, np1, simple, adjust) {
		var adjust, dx, g, i, i$1, np0, np1, p, p$1, pp1x, simple, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		g = this;
		g.Points = $appendSlice(g.Points, new sliceType$3(g.phantomPoints));
		if (simple && !((g.hinting === 0))) {
			g.InFontUnits = $appendSlice(g.InFontUnits, $subslice(g.Points, np1));
		}
		i = np1;
		while (true) {
			if (!(i < g.Points.$length)) { break; }
			p = (x = g.Points, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			p.X = g.font.scale($imul(g.scale, p.X));
			p.Y = g.font.scale($imul(g.scale, p.Y));
			i = i + (1) >> 0;
		}
		if (g.hinting === 0) {
			return;
		}
		if (adjust) {
			pp1x = (x$1 = g.Points, x$2 = g.Points.$length - 4 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])).X;
			dx = (((((pp1x + 32 >> 0)) & ~63) >> 0)) - pp1x >> 0;
			if (!((dx === 0))) {
				i$1 = np0;
				while (true) {
					if (!(i$1 < g.Points.$length)) { break; }
					(x$4 = g.Points, ((i$1 < 0 || i$1 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i$1])).X = (x$3 = g.Points, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1])).X + (dx) >> 0;
					i$1 = i$1 + (1) >> 0;
				}
			}
		}
		if (simple) {
			g.Unhinted = $appendSlice(g.Unhinted, $subslice(g.Points, np1));
		}
		p$1 = (x$5 = g.Points, x$6 = g.Points.$length - 3 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6]));
		p$1.X = (((p$1.X + 32 >> 0)) & ~63) >> 0;
		p$1 = (x$7 = g.Points, x$8 = g.Points.$length - 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
		p$1.Y = (((p$1.Y + 32 >> 0)) & ~63) >> 0;
	};
	GlyphBuf.prototype.addPhantomsAndScale = function(np0, np1, simple, adjust) { return this.$val.addPhantomsAndScale(np0, np1, simple, adjust); };
	resetTwilightPoints = function(f, p) {
		var _i, _ref, f, i, n, p;
		n = ((f.maxTwilightPoints >> 0)) + 4 >> 0;
		if (n <= p.$capacity) {
			p = $subslice(p, 0, n);
			_ref = p;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				Point.copy(((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]), new Point.ptr(0, 0, 0));
				_i++;
			}
		} else {
			p = $makeSlice(sliceType$3, n);
		}
		return p;
	};
	hinter.ptr.prototype.init = function(f, scale) {
		var _entry, _i, _keys, _ref, _tmp, _tmp$1, err, err$1, f, h, k, rescale, scale, x, x$1;
		h = this;
		h.points[0][0] = resetTwilightPoints(f, h.points[0][0]);
		h.points[0][1] = resetTwilightPoints(f, h.points[0][1]);
		h.points[0][2] = resetTwilightPoints(f, h.points[0][2]);
		rescale = !((h.scale === scale));
		if (!(h.font === f)) {
			_tmp = f;
			_tmp$1 = true;
			h.font = _tmp;
			rescale = _tmp$1;
			if (h.functions === false) {
				h.functions = {};
			} else {
				_ref = h.functions;
				_i = 0;
				_keys = $keys(_ref);
				while (true) {
					if (!(_i < _keys.length)) { break; }
					_entry = _ref[_keys[_i]];
					if (_entry === undefined) {
						_i++;
						continue;
					}
					k = _entry.k;
					delete h.functions[$Int32.keyFor(k)];
					_i++;
				}
			}
			x = ((f.maxStackElements >> 0));
			if (x > h.stack.$length) {
				x = x + (255) >> 0;
				x = (x & ~(255)) >> 0;
				h.stack = $makeSlice(sliceType$4, x);
			}
			x$1 = ((f.maxStorage >> 0));
			if (x$1 > h.store.$length) {
				x$1 = x$1 + (15) >> 0;
				x$1 = (x$1 & ~(15)) >> 0;
				h.store = $makeSlice(sliceType$4, x$1);
			}
			if (!((f.fpgm.$length === 0))) {
				err = h.run(f.fpgm, sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
			}
		}
		if (rescale) {
			h.scale = scale;
			h.scaledCVTInitialized = false;
			graphicsState.copy(h.defaultGS, globalDefaultGS);
			if (!((f.prep.$length === 0))) {
				err$1 = h.run(f.prep, sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil);
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return err$1;
				}
				graphicsState.copy(h.defaultGS, h.gs);
				arrayType.copy(h.defaultGS.pv, globalDefaultGS.pv);
				arrayType.copy(h.defaultGS.fv, globalDefaultGS.fv);
				arrayType.copy(h.defaultGS.dv, globalDefaultGS.dv);
				arrayType$1.copy(h.defaultGS.rp, globalDefaultGS.rp);
				arrayType$1.copy(h.defaultGS.zp, globalDefaultGS.zp);
				h.defaultGS.loop = globalDefaultGS.loop;
			}
		}
		return $ifaceNil;
	};
	hinter.prototype.init = function(f, scale) { return this.$val.init(f, scale); };
	hinter.ptr.prototype.run = function(program, pCurrent, pUnhinted, pInFontUnits, ends) {
		var _1, _2, _3, _4, _5, _entry, _i, _index, _index$1, _index$2, _index$3, _index$4, _key, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, a0, a1, absDisc, absDotP, b, b0, b1, c, c$1, callStack, callStackTop, contour, curDist, curDist$1, curDist$2, curP, curRange, curTouched, cvtDist, d, d$1, d$2, d$3, d$4, d$5, dax, day, dbx, dby, depth, discriminant, distance, distance$1, distance$2, distance$3, distance$4, dotProduct$1, dx, dx$1, dx$2, dy, dy$1, dy$2, end, ends, f, firstTouched, h, i, i$1, i$10, i$11, i$12, i$13, i$14, i$15, i$16, i$2, i$3, i$4, i$5, i$6, i$7, i$8, i$9, iupY, j, j$1, j$2, j0, j1, limit, mask, move, n, newDist, ok, ok$1, ok$2, ok$3, ok$4, ok$5, oldDist, oldDist$1, oldDist$2, oldDist$3, oldP, oldRange, opcode, p, p$1, p$10, p$11, p$12, p$13, p$14, p$15, p$16, p$17, p$18, p$2, p$3, p$4, p$5, p$6, p$7, p$8, p$9, p0, p0$1, p1, p1$1, p1$2, p2, pCurrent, pInFontUnits, pUnhinted, pc, pointType$1, points, points$1, ppem, prevEnd, program, pt, pt$1, q, q$1, q$2, q$3, q$4, ref, ref$1, ref$2, ref$3, res, rx, ry, scale, startPC, steps, top, twilight, v, v$1, val, width, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$219, x$22, x$220, x$221, x$222, x$223, x$224, x$225, x$226, x$227, x$228, x$229, x$23, x$230, x$231, x$232, x$233, x$234, x$235, x$236, x$237, x$238, x$239, x$24, x$240, x$241, x$242, x$243, x$244, x$245, x$246, x$247, x$248, x$249, x$25, x$250, x$251, x$252, x$253, x$254, x$255, x$256, x$257, x$258, x$259, x$26, x$260, x$261, x$262, x$263, x$264, x$265, x$266, x$267, x$268, x$269, x$27, x$270, x$271, x$272, x$273, x$274, x$275, x$276, x$277, x$278, x$279, x$28, x$280, x$281, x$282, x$283, x$284, x$285, x$286, x$287, x$288, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, y, zonePointer, zonePointer$1, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		h = this;
		graphicsState.copy(h.gs, h.defaultGS);
		h.points[1][0] = pCurrent;
		h.points[1][1] = pUnhinted;
		h.points[1][2] = pInFontUnits;
		h.ends = ends;
		if (program.$length > 50000) {
			$s = -1; return errors.New("truetype: hinting: too many instructions");
		}
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		steps = _tmp;
		pc = _tmp$1;
		top = _tmp$2;
		opcode = 0;
		callStack = arrayType$10.zero();
		callStackTop = 0;
		/* while (true) { */ case 1:
			/* if (!(0 <= pc && pc < program.$length)) { break; } */ if(!(0 <= pc && pc < program.$length)) { $s = 2; continue; }
			steps = steps + (1) >> 0;
			if (steps === 100000) {
				$s = -1; return errors.New("truetype: hinting: too many steps");
			}
			opcode = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
			if (top < ((((opcode < 0 || opcode >= popCount.length) ? ($throwRuntimeError("index out of range"), undefined) : popCount[opcode]) >> 0))) {
				$s = -1; return errors.New("truetype: hinting: stack underflow");
			}
				_1 = opcode;
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ if (_1 === (4)) { $s = 8; continue; }
				/* */ if (_1 === (5)) { $s = 9; continue; }
				/* */ if ((_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9))) { $s = 10; continue; }
				/* */ if (_1 === (10)) { $s = 11; continue; }
				/* */ if (_1 === (11)) { $s = 12; continue; }
				/* */ if (_1 === (12)) { $s = 13; continue; }
				/* */ if (_1 === (13)) { $s = 14; continue; }
				/* */ if (_1 === (14)) { $s = 15; continue; }
				/* */ if (_1 === (15)) { $s = 16; continue; }
				/* */ if ((_1 === (16)) || (_1 === (17)) || (_1 === (18))) { $s = 17; continue; }
				/* */ if ((_1 === (19)) || (_1 === (20)) || (_1 === (21))) { $s = 18; continue; }
				/* */ if (_1 === (22)) { $s = 19; continue; }
				/* */ if (_1 === (23)) { $s = 20; continue; }
				/* */ if (_1 === (24)) { $s = 21; continue; }
				/* */ if (_1 === (25)) { $s = 22; continue; }
				/* */ if (_1 === (26)) { $s = 23; continue; }
				/* */ if (_1 === (27)) { $s = 24; continue; }
				/* */ if (_1 === (28)) { $s = 25; continue; }
				/* */ if (_1 === (29)) { $s = 26; continue; }
				/* */ if (_1 === (30)) { $s = 27; continue; }
				/* */ if (_1 === (31)) { $s = 28; continue; }
				/* */ if (_1 === (32)) { $s = 29; continue; }
				/* */ if (_1 === (33)) { $s = 30; continue; }
				/* */ if (_1 === (34)) { $s = 31; continue; }
				/* */ if (_1 === (35)) { $s = 32; continue; }
				/* */ if (_1 === (36)) { $s = 33; continue; }
				/* */ if ((_1 === (37)) || (_1 === (38))) { $s = 34; continue; }
				/* */ if (_1 === (39)) { $s = 35; continue; }
				/* */ if (_1 === (41)) { $s = 36; continue; }
				/* */ if ((_1 === (42)) || (_1 === (43))) { $s = 37; continue; }
				/* */ if (_1 === (44)) { $s = 38; continue; }
				/* */ if (_1 === (45)) { $s = 39; continue; }
				/* */ if ((_1 === (46)) || (_1 === (47))) { $s = 40; continue; }
				/* */ if ((_1 === (48)) || (_1 === (49))) { $s = 41; continue; }
				/* */ if ((_1 === (50)) || (_1 === (51))) { $s = 42; continue; }
				/* */ if ((_1 === (52)) || (_1 === (53))) { $s = 43; continue; }
				/* */ if ((_1 === (54)) || (_1 === (55))) { $s = 44; continue; }
				/* */ if (_1 === (56)) { $s = 45; continue; }
				/* */ if (_1 === (57)) { $s = 46; continue; }
				/* */ if ((_1 === (58)) || (_1 === (59))) { $s = 47; continue; }
				/* */ if (_1 === (60)) { $s = 48; continue; }
				/* */ if (_1 === (61)) { $s = 49; continue; }
				/* */ if ((_1 === (62)) || (_1 === (63))) { $s = 50; continue; }
				/* */ if (_1 === (64)) { $s = 51; continue; }
				/* */ if (_1 === (65)) { $s = 52; continue; }
				/* */ if (_1 === (66)) { $s = 53; continue; }
				/* */ if (_1 === (67)) { $s = 54; continue; }
				/* */ if (_1 === (68)) { $s = 55; continue; }
				/* */ if (_1 === (69)) { $s = 56; continue; }
				/* */ if ((_1 === (70)) || (_1 === (71))) { $s = 57; continue; }
				/* */ if (_1 === (72)) { $s = 58; continue; }
				/* */ if ((_1 === (73)) || (_1 === (74))) { $s = 59; continue; }
				/* */ if ((_1 === (75)) || (_1 === (76))) { $s = 60; continue; }
				/* */ if ((_1 === (77)) || (_1 === (78))) { $s = 61; continue; }
				/* */ if (_1 === (79)) { $s = 62; continue; }
				/* */ if (_1 === (80)) { $s = 63; continue; }
				/* */ if (_1 === (81)) { $s = 64; continue; }
				/* */ if (_1 === (82)) { $s = 65; continue; }
				/* */ if (_1 === (83)) { $s = 66; continue; }
				/* */ if (_1 === (84)) { $s = 67; continue; }
				/* */ if (_1 === (85)) { $s = 68; continue; }
				/* */ if ((_1 === (86)) || (_1 === (87))) { $s = 69; continue; }
				/* */ if (_1 === (88)) { $s = 70; continue; }
				/* */ if (_1 === (89)) { $s = 71; continue; }
				/* */ if (_1 === (90)) { $s = 72; continue; }
				/* */ if (_1 === (91)) { $s = 73; continue; }
				/* */ if (_1 === (92)) { $s = 74; continue; }
				/* */ if (_1 === (93)) { $s = 75; continue; }
				/* */ if (_1 === (94)) { $s = 76; continue; }
				/* */ if (_1 === (95)) { $s = 77; continue; }
				/* */ if (_1 === (96)) { $s = 78; continue; }
				/* */ if (_1 === (97)) { $s = 79; continue; }
				/* */ if (_1 === (98)) { $s = 80; continue; }
				/* */ if (_1 === (99)) { $s = 81; continue; }
				/* */ if (_1 === (100)) { $s = 82; continue; }
				/* */ if (_1 === (101)) { $s = 83; continue; }
				/* */ if (_1 === (102)) { $s = 84; continue; }
				/* */ if (_1 === (103)) { $s = 85; continue; }
				/* */ if ((_1 === (104)) || (_1 === (105)) || (_1 === (106)) || (_1 === (107))) { $s = 86; continue; }
				/* */ if ((_1 === (108)) || (_1 === (109)) || (_1 === (110)) || (_1 === (111))) { $s = 87; continue; }
				/* */ if (_1 === (112)) { $s = 88; continue; }
				/* */ if ((_1 === (113)) || (_1 === (114)) || (_1 === (115)) || (_1 === (116)) || (_1 === (117))) { $s = 89; continue; }
				/* */ if ((_1 === (118)) || (_1 === (119))) { $s = 90; continue; }
				/* */ if (_1 === (120)) { $s = 91; continue; }
				/* */ if (_1 === (121)) { $s = 92; continue; }
				/* */ if (_1 === (122)) { $s = 93; continue; }
				/* */ if (_1 === (124)) { $s = 94; continue; }
				/* */ if (_1 === (125)) { $s = 95; continue; }
				/* */ if ((_1 === (126)) || (_1 === (127))) { $s = 96; continue; }
				/* */ if (_1 === (128)) { $s = 97; continue; }
				/* */ if ((_1 === (129)) || (_1 === (130))) { $s = 98; continue; }
				/* */ if (_1 === (133)) { $s = 99; continue; }
				/* */ if ((_1 === (134)) || (_1 === (135))) { $s = 100; continue; }
				/* */ if (_1 === (136)) { $s = 101; continue; }
				/* */ if (_1 === (137)) { $s = 102; continue; }
				/* */ if (_1 === (138)) { $s = 103; continue; }
				/* */ if (_1 === (139)) { $s = 104; continue; }
				/* */ if (_1 === (140)) { $s = 105; continue; }
				/* */ if (_1 === (141)) { $s = 106; continue; }
				/* */ if (_1 === (142)) { $s = 107; continue; }
				/* */ $s = 108; continue;
				/* if (_1 === (0)) { */ case 4:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [0, 16384]));
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [0, 16384]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [0, 16384]));
					$s = 109; continue;
				/* } else if (_1 === (1)) { */ case 5:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [16384, 0]));
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [16384, 0]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [16384, 0]));
					$s = 109; continue;
				/* } else if (_1 === (2)) { */ case 6:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [0, 16384]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [0, 16384]));
					$s = 109; continue;
				/* } else if (_1 === (3)) { */ case 7:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [16384, 0]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [16384, 0]));
					$s = 109; continue;
				/* } else if (_1 === (4)) { */ case 8:
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [0, 16384]));
					$s = 109; continue;
				/* } else if (_1 === (5)) { */ case 9:
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [16384, 0]));
					$s = 109; continue;
				/* } else if ((_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9))) { */ case 10:
					top = top - (2) >> 0;
					p1 = h.point(0, 0, (x = h.stack, x$1 = top + 0 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
					p2 = h.point(0, 0, (x$2 = h.stack, x$3 = top + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])));
					if (p1 === ptrType$3.nil || p2 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					dx = (((p1.X - p2.X >> 0) << 16 >> 16));
					dy = (((p1.Y - p2.Y >> 0) << 16 >> 16));
					if ((dx === 0) && (dy === 0)) {
						dx = 16384;
					} else if (!((((opcode & 1) >>> 0) === 0))) {
						_tmp$3 = -dy;
						_tmp$4 = dx;
						dx = _tmp$3;
						dy = _tmp$4;
					}
					v = $clone(normalize(dx, dy), arrayType);
					if (opcode < 8) {
						arrayType.copy(h.gs.pv, v);
						arrayType.copy(h.gs.dv, v);
					} else {
						arrayType.copy(h.gs.fv, v);
					}
					$s = 109; continue;
				/* } else if (_1 === (10)) { */ case 11:
					top = top - (2) >> 0;
					arrayType.copy(h.gs.pv, normalize((((x$4 = h.stack, ((top < 0 || top >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + top])) << 16 >> 16)), (((x$5 = h.stack, x$6 = top + 1 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >> 16))));
					arrayType.copy(h.gs.dv, h.gs.pv);
					$s = 109; continue;
				/* } else if (_1 === (11)) { */ case 12:
					top = top - (2) >> 0;
					arrayType.copy(h.gs.fv, normalize((((x$7 = h.stack, ((top < 0 || top >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + top])) << 16 >> 16)), (((x$8 = h.stack, x$9 = top + 1 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])) << 16 >> 16))));
					$s = 109; continue;
				/* } else if (_1 === (12)) { */ case 13:
					if ((top + 1 >> 0) >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$10 = h.stack, x$11 = top + 0 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11] = ((h.gs.pv[0] >> 0))));
					(x$12 = h.stack, x$13 = top + 1 >> 0, ((x$13 < 0 || x$13 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + x$13] = ((h.gs.pv[1] >> 0))));
					top = top + (2) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (13)) { */ case 14:
					if ((top + 1 >> 0) >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$14 = h.stack, x$15 = top + 0 >> 0, ((x$15 < 0 || x$15 >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + x$15] = ((h.gs.fv[0] >> 0))));
					(x$16 = h.stack, x$17 = top + 1 >> 0, ((x$17 < 0 || x$17 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + x$17] = ((h.gs.fv[1] >> 0))));
					top = top + (2) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (14)) { */ case 15:
					arrayType.copy(h.gs.fv, h.gs.pv);
					$s = 109; continue;
				/* } else if (_1 === (15)) { */ case 16:
					top = top - (5) >> 0;
					p = h.point(2, 0, (x$18 = h.stack, x$19 = top + 0 >> 0, ((x$19 < 0 || x$19 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + x$19])));
					a0 = h.point(1, 0, (x$20 = h.stack, x$21 = top + 1 >> 0, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21])));
					a1 = h.point(1, 0, (x$22 = h.stack, x$23 = top + 2 >> 0, ((x$23 < 0 || x$23 >= x$22.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$22.$array[x$22.$offset + x$23])));
					b0 = h.point(0, 0, (x$24 = h.stack, x$25 = top + 3 >> 0, ((x$25 < 0 || x$25 >= x$24.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$24.$array[x$24.$offset + x$25])));
					b1 = h.point(0, 0, (x$26 = h.stack, x$27 = top + 4 >> 0, ((x$27 < 0 || x$27 >= x$26.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$26.$array[x$26.$offset + x$27])));
					if (p === ptrType$3.nil || a0 === ptrType$3.nil || a1 === ptrType$3.nil || b0 === ptrType$3.nil || b1 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					dbx = b1.X - b0.X >> 0;
					dby = b1.Y - b0.Y >> 0;
					dax = a1.X - a0.X >> 0;
					day = a1.Y - a0.Y >> 0;
					dx$1 = b0.X - a0.X >> 0;
					dy$1 = b0.Y - a0.Y >> 0;
					discriminant = (x$28 = mulDiv((new $Int64(0, dax)), (new $Int64(0, -dby)), new $Int64(0, 64)), x$29 = mulDiv((new $Int64(0, day)), (new $Int64(0, dbx)), new $Int64(0, 64)), new $Int64(x$28.$high + x$29.$high, x$28.$low + x$29.$low));
					dotProduct$1 = (x$30 = mulDiv((new $Int64(0, dax)), (new $Int64(0, dbx)), new $Int64(0, 64)), x$31 = mulDiv((new $Int64(0, day)), (new $Int64(0, dby)), new $Int64(0, 64)), new $Int64(x$30.$high + x$31.$high, x$30.$low + x$31.$low));
					_tmp$5 = discriminant;
					_tmp$6 = dotProduct$1;
					absDisc = _tmp$5;
					absDotP = _tmp$6;
					if ((absDisc.$high < 0 || (absDisc.$high === 0 && absDisc.$low < 0))) {
						absDisc = new $Int64(-absDisc.$high, -absDisc.$low);
					}
					if ((absDotP.$high < 0 || (absDotP.$high === 0 && absDotP.$low < 0))) {
						absDotP = new $Int64(-absDotP.$high, -absDotP.$low);
					}
					if ((x$32 = $mul64(new $Int64(0, 19), absDisc), (x$32.$high > absDotP.$high || (x$32.$high === absDotP.$high && x$32.$low > absDotP.$low)))) {
						val = (x$33 = mulDiv((new $Int64(0, dx$1)), (new $Int64(0, -dby)), new $Int64(0, 64)), x$34 = mulDiv((new $Int64(0, dy$1)), (new $Int64(0, dbx)), new $Int64(0, 64)), new $Int64(x$33.$high + x$34.$high, x$33.$low + x$34.$low));
						rx = mulDiv(val, (new $Int64(0, dax)), discriminant);
						ry = mulDiv(val, (new $Int64(0, day)), discriminant);
						p.X = a0.X + (((rx.$low + ((rx.$high >> 31) * 4294967296)) >> 0)) >> 0;
						p.Y = a0.Y + (((ry.$low + ((ry.$high >> 31) * 4294967296)) >> 0)) >> 0;
					} else {
						p.X = (_q = ((((a0.X + a1.X >> 0) + b0.X >> 0) + b1.X >> 0)) / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
						p.Y = (_q$1 = ((((a0.Y + a1.Y >> 0) + b0.Y >> 0) + b1.Y >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
					}
					p.Flags = (p.Flags | (192)) >>> 0;
					$s = 109; continue;
				/* } else if ((_1 === (16)) || (_1 === (17)) || (_1 === (18))) { */ case 17:
					top = top - (1) >> 0;
					(x$36 = h.gs.rp, x$37 = opcode - 16 << 24 >>> 24, ((x$37 < 0 || x$37 >= x$36.length) ? ($throwRuntimeError("index out of range"), undefined) : x$36[x$37] = (x$35 = h.stack, ((top < 0 || top >= x$35.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$35.$array[x$35.$offset + top]))));
					$s = 109; continue;
				/* } else if ((_1 === (19)) || (_1 === (20)) || (_1 === (21))) { */ case 18:
					top = top - (1) >> 0;
					(x$39 = h.gs.zp, x$40 = opcode - 19 << 24 >>> 24, ((x$40 < 0 || x$40 >= x$39.length) ? ($throwRuntimeError("index out of range"), undefined) : x$39[x$40] = (x$38 = h.stack, ((top < 0 || top >= x$38.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$38.$array[x$38.$offset + top]))));
					$s = 109; continue;
				/* } else if (_1 === (22)) { */ case 19:
					top = top - (1) >> 0;
					h.gs.zp[0] = (x$41 = h.stack, ((top < 0 || top >= x$41.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$41.$array[x$41.$offset + top]));
					h.gs.zp[1] = (x$42 = h.stack, ((top < 0 || top >= x$42.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$42.$array[x$42.$offset + top]));
					h.gs.zp[2] = (x$43 = h.stack, ((top < 0 || top >= x$43.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$43.$array[x$43.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (23)) { */ case 20:
					top = top - (1) >> 0;
					if ((x$44 = h.stack, ((top < 0 || top >= x$44.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$44.$array[x$44.$offset + top])) < 0) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					h.gs.loop = (x$45 = h.stack, ((top < 0 || top >= x$45.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$45.$array[x$45.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (24)) { */ case 21:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 32;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (25)) { */ case 22:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 32;
					h.gs.roundThreshold = 32;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (26)) { */ case 23:
					top = top - (1) >> 0;
					h.gs.minDist = (((x$46 = h.stack, ((top < 0 || top >= x$46.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$46.$array[x$46.$offset + top])) >> 0));
					$s = 109; continue;
				/* } else if (_1 === (27)) { */ case 24:
					opcode = 1;
					/* goto ifelse */ $s = 110; continue;
					$s = 109; continue;
				/* } else if (_1 === (28)) { */ case 25:
					top = top - (1) >> 0;
					pc = pc + ((((x$47 = h.stack, ((top < 0 || top >= x$47.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$47.$array[x$47.$offset + top])) >> 0))) >> 0;
					/* continue; */ $s = 1; continue;
					$s = 109; continue;
				/* } else if (_1 === (29)) { */ case 26:
					top = top - (1) >> 0;
					h.gs.controlValueCutIn = (((x$48 = h.stack, ((top < 0 || top >= x$48.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$48.$array[x$48.$offset + top])) >> 0));
					$s = 109; continue;
				/* } else if (_1 === (30)) { */ case 27:
					top = top - (1) >> 0;
					h.gs.singleWidthCutIn = (((x$49 = h.stack, ((top < 0 || top >= x$49.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$49.$array[x$49.$offset + top])) >> 0));
					$s = 109; continue;
				/* } else if (_1 === (31)) { */ case 28:
					top = top - (1) >> 0;
					h.gs.singleWidth = h.font.scale($imul(h.scale, (((x$50 = h.stack, ((top < 0 || top >= x$50.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$50.$array[x$50.$offset + top])) >> 0))));
					$s = 109; continue;
				/* } else if (_1 === (32)) { */ case 29:
					if (top >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$53 = h.stack, ((top < 0 || top >= x$53.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$53.$array[x$53.$offset + top] = (x$51 = h.stack, x$52 = top - 1 >> 0, ((x$52 < 0 || x$52 >= x$51.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$51.$array[x$51.$offset + x$52]))));
					top = top + (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (33)) { */ case 30:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (34)) { */ case 31:
					top = 0;
					$s = 109; continue;
				/* } else if (_1 === (35)) { */ case 32:
					_tmp$7 = (x$54 = h.stack, x$55 = top - 2 >> 0, ((x$55 < 0 || x$55 >= x$54.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$54.$array[x$54.$offset + x$55]));
					_tmp$8 = (x$56 = h.stack, x$57 = top - 1 >> 0, ((x$57 < 0 || x$57 >= x$56.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$56.$array[x$56.$offset + x$57]));
					(x$58 = h.stack, x$59 = top - 1 >> 0, ((x$59 < 0 || x$59 >= x$58.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$58.$array[x$58.$offset + x$59] = _tmp$7));
					(x$60 = h.stack, x$61 = top - 2 >> 0, ((x$61 < 0 || x$61 >= x$60.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$60.$array[x$60.$offset + x$61] = _tmp$8));
					$s = 109; continue;
				/* } else if (_1 === (36)) { */ case 33:
					if (top >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$62 = h.stack, ((top < 0 || top >= x$62.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$62.$array[x$62.$offset + top] = ((top >> 0))));
					top = top + (1) >> 0;
					$s = 109; continue;
				/* } else if ((_1 === (37)) || (_1 === (38))) { */ case 34:
					x$65 = (((x$63 = h.stack, x$64 = top - 1 >> 0, ((x$64 < 0 || x$64 >= x$63.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$63.$array[x$63.$offset + x$64])) >> 0));
					if (x$65 <= 0 || x$65 >= top) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					(x$68 = h.stack, x$69 = top - 1 >> 0, ((x$69 < 0 || x$69 >= x$68.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$68.$array[x$68.$offset + x$69] = (x$66 = h.stack, x$67 = (top - 1 >> 0) - x$65 >> 0, ((x$67 < 0 || x$67 >= x$66.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$66.$array[x$66.$offset + x$67]))));
					if (opcode === 38) {
						$copySlice($subslice(h.stack, ((top - 1 >> 0) - x$65 >> 0), (top - 1 >> 0)), $subslice(h.stack, (top - x$65 >> 0), top));
						top = top - (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (39)) { */ case 35:
					top = top - (2) >> 0;
					p$1 = h.point(1, 0, (x$70 = h.stack, ((top < 0 || top >= x$70.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$70.$array[x$70.$offset + top])));
					q = h.point(0, 0, (x$71 = h.stack, x$72 = top + 1 >> 0, ((x$72 < 0 || x$72 >= x$71.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$71.$array[x$71.$offset + x$72])));
					if (p$1 === ptrType$3.nil || q === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					d = (_q$2 = dotProduct(((q.X - p$1.X >> 0)), ((q.Y - p$1.Y >> 0)), $clone(h.gs.pv, arrayType)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					h.move(p$1, d, true);
					h.move(q, -d, true);
					$s = 109; continue;
				/* } else if (_1 === (41)) { */ case 36:
					top = top - (1) >> 0;
					p$2 = h.point(0, 0, (x$73 = h.stack, ((top < 0 || top >= x$73.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$73.$array[x$73.$offset + top])));
					if (p$2 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					p$2.Flags = (p$2.Flags & ~(192)) >>> 0;
					$s = 109; continue;
				/* } else if ((_1 === (42)) || (_1 === (43))) { */ case 37:
					if (callStackTop >= 32) {
						$s = -1; return errors.New("truetype: hinting: call stack overflow");
					}
					top = top - (1) >> 0;
					_tuple = (_entry = h.functions[$Int32.keyFor((x$74 = h.stack, ((top < 0 || top >= x$74.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$74.$array[x$74.$offset + top])))], _entry !== undefined ? [_entry.v, true] : [sliceType$6.nil, false]);
					f = _tuple[0];
					ok = _tuple[1];
					if (!ok) {
						$s = -1; return errors.New("truetype: hinting: undefined function");
					}
					callStackEntry.copy(((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]), new callStackEntry.ptr(program, pc, 1));
					if (opcode === 42) {
						top = top - (1) >> 0;
						if ((x$75 = h.stack, ((top < 0 || top >= x$75.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$75.$array[x$75.$offset + top])) === 0) {
							/* break; */ $s = 3; continue;
						}
						((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount = (x$76 = h.stack, ((top < 0 || top >= x$76.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$76.$array[x$76.$offset + top]));
					}
					callStackTop = callStackTop + (1) >> 0;
					_tmp$9 = f;
					_tmp$10 = 0;
					program = _tmp$9;
					pc = _tmp$10;
					/* continue; */ $s = 1; continue;
					$s = 109; continue;
				/* } else if (_1 === (44)) { */ case 38:
					startPC = pc + 1 >> 0;
					fdefloop:
					while (true) {
						pc = pc + (1) >> 0;
						if (pc >= program.$length) {
							$s = -1; return errors.New("truetype: hinting: unbalanced FDEF");
						}
						_2 = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
						if (_2 === (44)) {
							$s = -1; return errors.New("truetype: hinting: nested FDEF");
						} else if (_2 === (45)) {
							top = top - (1) >> 0;
							_key = (x$77 = h.stack, ((top < 0 || top >= x$77.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$77.$array[x$77.$offset + top])); (h.functions || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key)] = { k: _key, v: $subslice(program, startPC, (pc + 1 >> 0)) };
							break fdefloop;
						} else {
							ok$1 = false;
							_tuple$1 = skipInstructionPayload(program, pc);
							pc = _tuple$1[0];
							ok$1 = _tuple$1[1];
							if (!ok$1) {
								$s = -1; return errors.New("truetype: hinting: unbalanced FDEF");
							}
						}
					}
					$s = 109; continue;
				/* } else if (_1 === (45)) { */ case 39:
					if (callStackTop === 0) {
						$s = -1; return errors.New("truetype: hinting: call stack underflow");
					}
					callStackTop = callStackTop - (1) >> 0;
					((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount = ((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount - (1) >> 0;
					if (!((((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount === 0))) {
						callStackTop = callStackTop + (1) >> 0;
						pc = 0;
						/* continue; */ $s = 1; continue;
					}
					_tmp$11 = ((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).program;
					_tmp$12 = ((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).pc;
					program = _tmp$11;
					pc = _tmp$12;
					$s = 109; continue;
				/* } else if ((_1 === (46)) || (_1 === (47))) { */ case 40:
					top = top - (1) >> 0;
					i = (x$78 = h.stack, ((top < 0 || top >= x$78.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$78.$array[x$78.$offset + top]));
					p$3 = h.point(0, 0, i);
					if (p$3 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					distance = 0;
					if (opcode === 47) {
						distance = dotProduct(p$3.X, p$3.Y, $clone(h.gs.pv, arrayType));
						distance = h.round(distance) - distance >> 0;
					}
					h.move(p$3, distance, true);
					h.gs.rp[0] = i;
					h.gs.rp[1] = i;
					$s = 109; continue;
				/* } else if ((_1 === (48)) || (_1 === (49))) { */ case 41:
					_tmp$13 = opcode === 48;
					_tmp$14 = 64;
					iupY = _tmp$13;
					mask = _tmp$14;
					if (iupY) {
						mask = 128;
					}
					prevEnd = 0;
					_ref = h.ends;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						end = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						i$1 = prevEnd;
						while (true) {
							if (!(i$1 < end)) { break; }
							while (true) {
								if (!(i$1 < end && ((((x$79 = h.points[1][0], ((i$1 < 0 || i$1 >= x$79.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$79.$array[x$79.$offset + i$1])).Flags & mask) >>> 0) === 0))) { break; }
								i$1 = i$1 + (1) >> 0;
							}
							if (i$1 === end) {
								break;
							}
							_tmp$15 = i$1;
							_tmp$16 = i$1;
							firstTouched = _tmp$15;
							curTouched = _tmp$16;
							i$1 = i$1 + (1) >> 0;
							while (true) {
								if (!(i$1 < end)) { break; }
								if (!(((((x$80 = h.points[1][0], ((i$1 < 0 || i$1 >= x$80.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$80.$array[x$80.$offset + i$1])).Flags & mask) >>> 0) === 0))) {
									h.iupInterp(iupY, curTouched + 1 >> 0, i$1 - 1 >> 0, curTouched, i$1);
									curTouched = i$1;
								}
								i$1 = i$1 + (1) >> 0;
							}
							if (curTouched === firstTouched) {
								h.iupShift(iupY, prevEnd, end, curTouched);
							} else {
								h.iupInterp(iupY, curTouched + 1 >> 0, end - 1 >> 0, curTouched, firstTouched);
								if (firstTouched > 0) {
									h.iupInterp(iupY, prevEnd, firstTouched - 1 >> 0, curTouched, firstTouched);
								}
							}
							i$1 = i$1 + (1) >> 0;
						}
						prevEnd = end;
						_i++;
					}
					$s = 109; continue;
				/* } else if ((_1 === (50)) || (_1 === (51))) { */ case 42:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					_tuple$2 = h.displacement(((opcode & 1) >>> 0) === 0);
					d$1 = _tuple$2[2];
					ok$2 = _tuple$2[3];
					if (!ok$2) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						p$4 = h.point(2, 0, (x$81 = h.stack, ((top < 0 || top >= x$81.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$81.$array[x$81.$offset + top])));
						if (p$4 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						h.move(p$4, d$1, true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if ((_1 === (52)) || (_1 === (53))) { */ case 43:
					top = top - (1) >> 0;
					_tuple$3 = h.displacement(((opcode & 1) >>> 0) === 0);
					zonePointer = _tuple$3[0];
					i$2 = _tuple$3[1];
					d$2 = _tuple$3[2];
					ok$3 = _tuple$3[3];
					if (!ok$3) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					if (h.gs.zp[2] === 0) {
						$s = -1; return errors.New("hinting: unimplemented SHC instruction");
					}
					contour = (x$82 = h.stack, ((top < 0 || top >= x$82.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$82.$array[x$82.$offset + top]));
					if (contour < 0 || ends.$length <= ((contour >> 0))) {
						$s = -1; return errors.New("truetype: hinting: contour out of range");
					}
					_tmp$17 = 0;
					_tmp$18 = (((x$83 = h.ends, ((contour < 0 || contour >= x$83.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$83.$array[x$83.$offset + contour])) >> 0));
					j0 = _tmp$17;
					j1 = _tmp$18;
					if (contour > 0) {
						j0 = (((x$84 = h.ends, x$85 = contour - 1 >> 0, ((x$85 < 0 || x$85 >= x$84.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$84.$array[x$84.$offset + x$85])) >> 0));
					}
					move = !(((x$86 = h.gs.zp, ((zonePointer < 0 || zonePointer >= x$86.length) ? ($throwRuntimeError("index out of range"), undefined) : x$86[zonePointer])) === h.gs.zp[2]));
					j = j0;
					while (true) {
						if (!(j < j1)) { break; }
						if (move || !((j === i$2))) {
							h.move(h.point(2, 0, j), d$2, true);
						}
						j = j + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if ((_1 === (54)) || (_1 === (55))) { */ case 44:
					top = top - (1) >> 0;
					_tuple$4 = h.displacement(((opcode & 1) >>> 0) === 0);
					zonePointer$1 = _tuple$4[0];
					i$3 = _tuple$4[1];
					d$3 = _tuple$4[2];
					ok$4 = _tuple$4[3];
					if (!ok$4) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					limit = (((x$87 = h.points, x$88 = h.gs.zp[2], ((x$88 < 0 || x$88 >= x$87.length) ? ($throwRuntimeError("index out of range"), undefined) : x$87[x$88]))[0].$length >> 0));
					if (h.gs.zp[2] === 1) {
						limit = limit - (4) >> 0;
					}
					j$1 = 0;
					while (true) {
						if (!(j$1 < limit)) { break; }
						if (!((i$3 === j$1)) || !(((x$89 = h.gs.zp, ((zonePointer$1 < 0 || zonePointer$1 >= x$89.length) ? ($throwRuntimeError("index out of range"), undefined) : x$89[zonePointer$1])) === h.gs.zp[2]))) {
							h.move(h.point(2, 0, j$1), d$3, false);
						}
						j$1 = j$1 + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (56)) { */ case 45:
					top = top - (1) >> 0;
					d$4 = (((x$90 = h.stack, ((top < 0 || top >= x$90.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$90.$array[x$90.$offset + top])) >> 0));
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						p$5 = h.point(2, 0, (x$91 = h.stack, ((top < 0 || top >= x$91.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$91.$array[x$91.$offset + top])));
						if (p$5 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						h.move(p$5, d$4, true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if (_1 === (57)) { */ case 46:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					pointType$1 = 2;
					twilight = (h.gs.zp[0] === 0) || (h.gs.zp[1] === 0) || (h.gs.zp[2] === 0);
					if (twilight) {
						pointType$1 = 1;
					}
					p$6 = h.point(1, pointType$1, h.gs.rp[2]);
					oldP = h.point(0, pointType$1, h.gs.rp[1]);
					oldRange = dotProduct(p$6.X - oldP.X >> 0, p$6.Y - oldP.Y >> 0, $clone(h.gs.dv, arrayType));
					p$6 = h.point(1, 0, h.gs.rp[2]);
					curP = h.point(0, 0, h.gs.rp[1]);
					curRange = dotProduct(p$6.X - curP.X >> 0, p$6.Y - curP.Y >> 0, $clone(h.gs.pv, arrayType));
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						i$4 = (x$92 = h.stack, ((top < 0 || top >= x$92.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$92.$array[x$92.$offset + top]));
						p$6 = h.point(2, pointType$1, i$4);
						oldDist = dotProduct(p$6.X - oldP.X >> 0, p$6.Y - oldP.Y >> 0, $clone(h.gs.dv, arrayType));
						p$6 = h.point(2, 0, i$4);
						curDist = dotProduct(p$6.X - curP.X >> 0, p$6.Y - curP.Y >> 0, $clone(h.gs.pv, arrayType));
						newDist = 0;
						if (!((oldDist === 0))) {
							if (!((oldRange === 0))) {
								newDist = (((x$93 = mulDiv((new $Int64(0, oldDist)), (new $Int64(0, curRange)), (new $Int64(0, oldRange))), x$93.$low + ((x$93.$high >> 31) * 4294967296)) >> 0));
							} else {
								newDist = -oldDist;
							}
						}
						h.move(p$6, newDist - curDist >> 0, true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if ((_1 === (58)) || (_1 === (59))) { */ case 47:
					top = top - (2) >> 0;
					i$5 = (x$94 = h.stack, ((top < 0 || top >= x$94.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$94.$array[x$94.$offset + top]));
					distance$1 = (((x$95 = h.stack, x$96 = top + 1 >> 0, ((x$96 < 0 || x$96 >= x$95.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$95.$array[x$95.$offset + x$96])) >> 0));
					ref = h.point(0, 0, h.gs.rp[0]);
					p$7 = h.point(1, 0, i$5);
					if (ref === ptrType$3.nil || p$7 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					curDist$1 = dotProduct(p$7.X - ref.X >> 0, p$7.Y - ref.Y >> 0, $clone(h.gs.pv, arrayType));
					if (opcode === 59) {
						h.gs.rp[0] = i$5;
					}
					h.gs.rp[1] = h.gs.rp[0];
					h.gs.rp[2] = i$5;
					h.move(p$7, distance$1 - curDist$1 >> 0, true);
					$s = 109; continue;
				/* } else if (_1 === (60)) { */ case 48:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					ref$1 = h.point(0, 0, h.gs.rp[0]);
					if (ref$1 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						p$8 = h.point(1, 0, (x$97 = h.stack, ((top < 0 || top >= x$97.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$97.$array[x$97.$offset + top])));
						if (p$8 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						h.move(p$8, -dotProduct(p$8.X - ref$1.X >> 0, p$8.Y - ref$1.Y >> 0, $clone(h.gs.pv, arrayType)), true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if (_1 === (61)) { */ case 49:
					h.gs.roundPeriod = 32;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 16;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if ((_1 === (62)) || (_1 === (63))) { */ case 50:
					top = top - (2) >> 0;
					i$6 = (x$98 = h.stack, ((top < 0 || top >= x$98.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$98.$array[x$98.$offset + top]));
					distance$2 = h.getScaledCVT((x$99 = h.stack, x$100 = top + 1 >> 0, ((x$100 < 0 || x$100 >= x$99.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$99.$array[x$99.$offset + x$100])));
					if (h.gs.zp[0] === 0) {
						p$9 = h.point(0, 1, i$6);
						q$1 = h.point(0, 0, i$6);
						p$9.X = (((x$101 = $shiftRightInt64(($mul64((new $Int64(0, distance$2)), (new $Int64(0, h.gs.fv[0])))), 14), x$101.$low + ((x$101.$high >> 31) * 4294967296)) >> 0));
						p$9.Y = (((x$102 = $shiftRightInt64(($mul64((new $Int64(0, distance$2)), (new $Int64(0, h.gs.fv[1])))), 14), x$102.$low + ((x$102.$high >> 31) * 4294967296)) >> 0));
						Point.copy(q$1, p$9);
					}
					p$10 = h.point(0, 0, i$6);
					oldDist$1 = dotProduct(p$10.X, p$10.Y, $clone(h.gs.pv, arrayType));
					if (opcode === 63) {
						if (fabs(distance$2 - oldDist$1 >> 0) > h.gs.controlValueCutIn) {
							distance$2 = oldDist$1;
						}
						distance$2 = h.round(distance$2);
					}
					h.move(p$10, distance$2 - oldDist$1 >> 0, true);
					h.gs.rp[0] = i$6;
					h.gs.rp[1] = i$6;
					$s = 109; continue;
				/* } else if (_1 === (64)) { */ case 51:
					opcode = 0;
					/* goto push */ $s = 111; continue;
					$s = 109; continue;
				/* } else if (_1 === (65)) { */ case 52:
					opcode = 128;
					/* goto push */ $s = 111; continue;
					$s = 109; continue;
				/* } else if (_1 === (66)) { */ case 53:
					top = top - (2) >> 0;
					i$7 = (((x$103 = h.stack, ((top < 0 || top >= x$103.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$103.$array[x$103.$offset + top])) >> 0));
					if (i$7 < 0 || h.store.$length <= i$7) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					(x$106 = h.store, ((i$7 < 0 || i$7 >= x$106.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$106.$array[x$106.$offset + i$7] = (x$104 = h.stack, x$105 = top + 1 >> 0, ((x$105 < 0 || x$105 >= x$104.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$104.$array[x$104.$offset + x$105]))));
					$s = 109; continue;
				/* } else if (_1 === (67)) { */ case 54:
					i$8 = (((x$107 = h.stack, x$108 = top - 1 >> 0, ((x$108 < 0 || x$108 >= x$107.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$107.$array[x$107.$offset + x$108])) >> 0));
					if (i$8 < 0 || h.store.$length <= i$8) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					(x$110 = h.stack, x$111 = top - 1 >> 0, ((x$111 < 0 || x$111 >= x$110.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$110.$array[x$110.$offset + x$111] = (x$109 = h.store, ((i$8 < 0 || i$8 >= x$109.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$109.$array[x$109.$offset + i$8]))));
					$s = 109; continue;
				/* } else if (_1 === (68)) { */ case 55:
					top = top - (2) >> 0;
					h.setScaledCVT((x$112 = h.stack, ((top < 0 || top >= x$112.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$112.$array[x$112.$offset + top])), (((x$113 = h.stack, x$114 = top + 1 >> 0, ((x$114 < 0 || x$114 >= x$113.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$113.$array[x$113.$offset + x$114])) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (69)) { */ case 56:
					(x$117 = h.stack, x$118 = top - 1 >> 0, ((x$118 < 0 || x$118 >= x$117.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$117.$array[x$117.$offset + x$118] = ((h.getScaledCVT((x$115 = h.stack, x$116 = top - 1 >> 0, ((x$116 < 0 || x$116 >= x$115.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$115.$array[x$115.$offset + x$116]))) >> 0))));
					$s = 109; continue;
				/* } else if ((_1 === (70)) || (_1 === (71))) { */ case 57:
					i$9 = (x$119 = h.stack, x$120 = top - 1 >> 0, ((x$120 < 0 || x$120 >= x$119.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$119.$array[x$119.$offset + x$120]));
					if (opcode === 70) {
						p$11 = h.point(2, 0, i$9);
						(x$121 = h.stack, x$122 = top - 1 >> 0, ((x$122 < 0 || x$122 >= x$121.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$121.$array[x$121.$offset + x$122] = ((dotProduct(p$11.X, p$11.Y, $clone(h.gs.pv, arrayType)) >> 0))));
					} else {
						p$12 = h.point(2, 1, i$9);
						(x$123 = h.stack, x$124 = top - 1 >> 0, ((x$124 < 0 || x$124 >= x$123.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$123.$array[x$123.$offset + x$124] = ((dotProduct(p$12.X, p$12.Y, $clone(h.gs.dv, arrayType)) >> 0))));
					}
					$s = 109; continue;
				/* } else if (_1 === (72)) { */ case 58:
					top = top - (2) >> 0;
					i$10 = (x$125 = h.stack, ((top < 0 || top >= x$125.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$125.$array[x$125.$offset + top]));
					p$13 = h.point(2, 0, i$10);
					if (p$13 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					c = dotProduct(p$13.X, p$13.Y, $clone(h.gs.pv, arrayType));
					h.move(p$13, (((x$126 = h.stack, x$127 = top + 1 >> 0, ((x$127 < 0 || x$127 >= x$126.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$126.$array[x$126.$offset + x$127])) >> 0)) - c >> 0, true);
					if (!((h.gs.zp[2] === 0))) {
						/* break; */ $s = 3; continue;
					}
					q$2 = h.point(2, 1, i$10);
					if (q$2 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					q$2.X = p$13.X;
					q$2.Y = p$13.Y;
					$s = 109; continue;
				/* } else if ((_1 === (73)) || (_1 === (74))) { */ case 59:
					top = top - (1) >> 0;
					_tmp$19 = 0;
					_tmp$20 = arrayType.zero();
					_tmp$21 = false;
					pt = _tmp$19;
					v$1 = $clone(_tmp$20, arrayType);
					scale = _tmp$21;
					if (opcode === 73) {
						pt = 0;
						arrayType.copy(v$1, h.gs.pv);
					} else if ((h.gs.zp[0] === 0) || (h.gs.zp[1] === 0)) {
						pt = 1;
						arrayType.copy(v$1, h.gs.dv);
					} else {
						pt = 2;
						arrayType.copy(v$1, h.gs.dv);
						scale = true;
					}
					p$14 = h.point(0, pt, (x$128 = h.stack, x$129 = top - 1 >> 0, ((x$129 < 0 || x$129 >= x$128.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$128.$array[x$128.$offset + x$129])));
					q$3 = h.point(1, pt, (x$130 = h.stack, ((top < 0 || top >= x$130.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$130.$array[x$130.$offset + top])));
					if (p$14 === ptrType$3.nil || q$3 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					d$5 = ((dotProduct(p$14.X - q$3.X >> 0, p$14.Y - q$3.Y >> 0, $clone(v$1, arrayType)) >> 0));
					if (scale) {
						d$5 = (((x$131 = $div64((new $Int64(0, ($imul(d$5, ((h.scale >> 0)))))), (new $Int64(0, h.font.fUnitsPerEm)), false), x$131.$low + ((x$131.$high >> 31) * 4294967296)) >> 0));
					}
					(x$132 = h.stack, x$133 = top - 1 >> 0, ((x$133 < 0 || x$133 >= x$132.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$132.$array[x$132.$offset + x$133] = d$5));
					$s = 109; continue;
				/* } else if ((_1 === (75)) || (_1 === (76))) { */ case 60:
					if (top >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$134 = h.stack, ((top < 0 || top >= x$134.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$134.$array[x$134.$offset + top] = (((h.scale >> 0)) >> 6 >> 0)));
					top = top + (1) >> 0;
					$s = 109; continue;
				/* } else if ((_1 === (77)) || (_1 === (78))) { */ case 61:
					h.gs.autoFlip = opcode === 77;
					$s = 109; continue;
				/* } else if (_1 === (79)) { */ case 62:
					$s = 109; continue;
				/* } else if (_1 === (80)) { */ case 63:
					top = top - (1) >> 0;
					(x$138 = h.stack, x$139 = top - 1 >> 0, ((x$139 < 0 || x$139 >= x$138.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$138.$array[x$138.$offset + x$139] = bool2int32((x$135 = h.stack, x$136 = top - 1 >> 0, ((x$136 < 0 || x$136 >= x$135.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$135.$array[x$135.$offset + x$136])) < (x$137 = h.stack, ((top < 0 || top >= x$137.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$137.$array[x$137.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (81)) { */ case 64:
					top = top - (1) >> 0;
					(x$143 = h.stack, x$144 = top - 1 >> 0, ((x$144 < 0 || x$144 >= x$143.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$143.$array[x$143.$offset + x$144] = bool2int32((x$140 = h.stack, x$141 = top - 1 >> 0, ((x$141 < 0 || x$141 >= x$140.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$140.$array[x$140.$offset + x$141])) <= (x$142 = h.stack, ((top < 0 || top >= x$142.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$142.$array[x$142.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (82)) { */ case 65:
					top = top - (1) >> 0;
					(x$148 = h.stack, x$149 = top - 1 >> 0, ((x$149 < 0 || x$149 >= x$148.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$148.$array[x$148.$offset + x$149] = bool2int32((x$145 = h.stack, x$146 = top - 1 >> 0, ((x$146 < 0 || x$146 >= x$145.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$145.$array[x$145.$offset + x$146])) > (x$147 = h.stack, ((top < 0 || top >= x$147.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$147.$array[x$147.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (83)) { */ case 66:
					top = top - (1) >> 0;
					(x$153 = h.stack, x$154 = top - 1 >> 0, ((x$154 < 0 || x$154 >= x$153.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$153.$array[x$153.$offset + x$154] = bool2int32((x$150 = h.stack, x$151 = top - 1 >> 0, ((x$151 < 0 || x$151 >= x$150.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$150.$array[x$150.$offset + x$151])) >= (x$152 = h.stack, ((top < 0 || top >= x$152.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$152.$array[x$152.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (84)) { */ case 67:
					top = top - (1) >> 0;
					(x$158 = h.stack, x$159 = top - 1 >> 0, ((x$159 < 0 || x$159 >= x$158.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$158.$array[x$158.$offset + x$159] = bool2int32((x$155 = h.stack, x$156 = top - 1 >> 0, ((x$156 < 0 || x$156 >= x$155.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$155.$array[x$155.$offset + x$156])) === (x$157 = h.stack, ((top < 0 || top >= x$157.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$157.$array[x$157.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (85)) { */ case 68:
					top = top - (1) >> 0;
					(x$163 = h.stack, x$164 = top - 1 >> 0, ((x$164 < 0 || x$164 >= x$163.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$163.$array[x$163.$offset + x$164] = bool2int32(!(((x$160 = h.stack, x$161 = top - 1 >> 0, ((x$161 < 0 || x$161 >= x$160.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$160.$array[x$160.$offset + x$161])) === (x$162 = h.stack, ((top < 0 || top >= x$162.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$162.$array[x$162.$offset + top])))))));
					$s = 109; continue;
				/* } else if ((_1 === (86)) || (_1 === (87))) { */ case 69:
					i$11 = h.round((((x$165 = h.stack, x$166 = top - 1 >> 0, ((x$166 < 0 || x$166 >= x$165.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$165.$array[x$165.$offset + x$166])) >> 0))) >> 6 >> 0;
					(x$167 = h.stack, x$168 = top - 1 >> 0, ((x$168 < 0 || x$168 >= x$167.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$167.$array[x$167.$offset + x$168] = (((((i$11 & 1) >> 0)) ^ (((opcode - 86 << 24 >>> 24) >> 0))) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (88)) { */ case 70:
					top = top - (1) >> 0;
					/* */ if ((x$169 = h.stack, ((top < 0 || top >= x$169.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$169.$array[x$169.$offset + top])) === 0) { $s = 112; continue; }
					/* */ $s = 113; continue;
					/* if ((x$169 = h.stack, ((top < 0 || top >= x$169.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$169.$array[x$169.$offset + top])) === 0) { */ case 112:
						opcode = 0;
						/* goto ifelse */ $s = 110; continue;
					/* } */ case 113:
					$s = 109; continue;
				/* } else if (_1 === (89)) { */ case 71:
					$s = 109; continue;
				/* } else if (_1 === (90)) { */ case 72:
					top = top - (1) >> 0;
					(x$173 = h.stack, x$174 = top - 1 >> 0, ((x$174 < 0 || x$174 >= x$173.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$173.$array[x$173.$offset + x$174] = bool2int32(!(((x$170 = h.stack, x$171 = top - 1 >> 0, ((x$171 < 0 || x$171 >= x$170.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$170.$array[x$170.$offset + x$171])) === 0)) && !(((x$172 = h.stack, ((top < 0 || top >= x$172.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$172.$array[x$172.$offset + top])) === 0)))));
					$s = 109; continue;
				/* } else if (_1 === (91)) { */ case 73:
					top = top - (1) >> 0;
					(x$178 = h.stack, x$179 = top - 1 >> 0, ((x$179 < 0 || x$179 >= x$178.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$178.$array[x$178.$offset + x$179] = bool2int32(!((((x$175 = h.stack, x$176 = top - 1 >> 0, ((x$176 < 0 || x$176 >= x$175.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$175.$array[x$175.$offset + x$176])) | (x$177 = h.stack, ((top < 0 || top >= x$177.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$177.$array[x$177.$offset + top]))) === 0)))));
					$s = 109; continue;
				/* } else if (_1 === (92)) { */ case 74:
					(x$182 = h.stack, x$183 = top - 1 >> 0, ((x$183 < 0 || x$183 >= x$182.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$182.$array[x$182.$offset + x$183] = bool2int32((x$180 = h.stack, x$181 = top - 1 >> 0, ((x$181 < 0 || x$181 >= x$180.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$180.$array[x$180.$offset + x$181])) === 0)));
					$s = 109; continue;
				/* } else if (_1 === (93)) { */ case 75:
					/* goto delta */ $s = 114; continue;
					$s = 109; continue;
				/* } else if (_1 === (94)) { */ case 76:
					top = top - (1) >> 0;
					h.gs.deltaBase = (x$184 = h.stack, ((top < 0 || top >= x$184.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$184.$array[x$184.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (95)) { */ case 77:
					top = top - (1) >> 0;
					h.gs.deltaShift = (x$185 = h.stack, ((top < 0 || top >= x$185.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$185.$array[x$185.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (96)) { */ case 78:
					top = top - (1) >> 0;
					_index = top - 1 >> 0;
					(x$188 = h.stack, ((_index < 0 || _index >= x$188.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$188.$array[x$188.$offset + _index] = ((x$186 = h.stack, ((_index < 0 || _index >= x$186.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$186.$array[x$186.$offset + _index])) + ((x$187 = h.stack, ((top < 0 || top >= x$187.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$187.$array[x$187.$offset + top]))) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (97)) { */ case 79:
					top = top - (1) >> 0;
					_index$1 = top - 1 >> 0;
					(x$191 = h.stack, ((_index$1 < 0 || _index$1 >= x$191.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$191.$array[x$191.$offset + _index$1] = ((x$189 = h.stack, ((_index$1 < 0 || _index$1 >= x$189.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$189.$array[x$189.$offset + _index$1])) - ((x$190 = h.stack, ((top < 0 || top >= x$190.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$190.$array[x$190.$offset + top]))) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (98)) { */ case 80:
					top = top - (1) >> 0;
					if ((x$192 = h.stack, ((top < 0 || top >= x$192.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$192.$array[x$192.$offset + top])) === 0) {
						$s = -1; return errors.New("truetype: hinting: division by zero");
					}
					(x$196 = h.stack, x$197 = top - 1 >> 0, ((x$197 < 0 || x$197 >= x$196.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$196.$array[x$196.$offset + x$197] = ((fdiv((((x$193 = h.stack, x$194 = top - 1 >> 0, ((x$194 < 0 || x$194 >= x$193.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$193.$array[x$193.$offset + x$194])) >> 0)), (((x$195 = h.stack, ((top < 0 || top >= x$195.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$195.$array[x$195.$offset + top])) >> 0))) >> 0))));
					$s = 109; continue;
				/* } else if (_1 === (99)) { */ case 81:
					top = top - (1) >> 0;
					(x$201 = h.stack, x$202 = top - 1 >> 0, ((x$202 < 0 || x$202 >= x$201.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$201.$array[x$201.$offset + x$202] = ((fmul((((x$198 = h.stack, x$199 = top - 1 >> 0, ((x$199 < 0 || x$199 >= x$198.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$198.$array[x$198.$offset + x$199])) >> 0)), (((x$200 = h.stack, ((top < 0 || top >= x$200.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$200.$array[x$200.$offset + top])) >> 0))) >> 0))));
					$s = 109; continue;
				/* } else if (_1 === (100)) { */ case 82:
					if ((x$203 = h.stack, x$204 = top - 1 >> 0, ((x$204 < 0 || x$204 >= x$203.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$203.$array[x$203.$offset + x$204])) < 0) {
						(x$207 = h.stack, x$208 = top - 1 >> 0, ((x$208 < 0 || x$208 >= x$207.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$207.$array[x$207.$offset + x$208] = -(x$205 = h.stack, x$206 = top - 1 >> 0, ((x$206 < 0 || x$206 >= x$205.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$205.$array[x$205.$offset + x$206]))));
					}
					$s = 109; continue;
				/* } else if (_1 === (101)) { */ case 83:
					(x$211 = h.stack, x$212 = top - 1 >> 0, ((x$212 < 0 || x$212 >= x$211.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$211.$array[x$211.$offset + x$212] = -(x$209 = h.stack, x$210 = top - 1 >> 0, ((x$210 < 0 || x$210 >= x$209.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$209.$array[x$209.$offset + x$210]))));
					$s = 109; continue;
				/* } else if (_1 === (102)) { */ case 84:
					_index$2 = top - 1 >> 0;
					(x$214 = h.stack, ((_index$2 < 0 || _index$2 >= x$214.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$214.$array[x$214.$offset + _index$2] = (((x$213 = h.stack, ((_index$2 < 0 || _index$2 >= x$213.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$213.$array[x$213.$offset + _index$2])) & ~(63)) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (103)) { */ case 85:
					_index$3 = top - 1 >> 0;
					(x$216 = h.stack, ((_index$3 < 0 || _index$3 >= x$216.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$216.$array[x$216.$offset + _index$3] = ((x$215 = h.stack, ((_index$3 < 0 || _index$3 >= x$215.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$215.$array[x$215.$offset + _index$3])) + (63) >> 0)));
					_index$4 = top - 1 >> 0;
					(x$218 = h.stack, ((_index$4 < 0 || _index$4 >= x$218.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$218.$array[x$218.$offset + _index$4] = (((x$217 = h.stack, ((_index$4 < 0 || _index$4 >= x$217.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$217.$array[x$217.$offset + _index$4])) & ~(63)) >> 0)));
					$s = 109; continue;
				/* } else if ((_1 === (104)) || (_1 === (105)) || (_1 === (106)) || (_1 === (107))) { */ case 86:
					(x$221 = h.stack, x$222 = top - 1 >> 0, ((x$222 < 0 || x$222 >= x$221.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$221.$array[x$221.$offset + x$222] = ((h.round((((x$219 = h.stack, x$220 = top - 1 >> 0, ((x$220 < 0 || x$220 >= x$219.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$219.$array[x$219.$offset + x$220])) >> 0))) >> 0))));
					$s = 109; continue;
				/* } else if ((_1 === (108)) || (_1 === (109)) || (_1 === (110)) || (_1 === (111))) { */ case 87:
					$s = 109; continue;
				/* } else if (_1 === (112)) { */ case 88:
					top = top - (2) >> 0;
					h.setScaledCVT((x$223 = h.stack, ((top < 0 || top >= x$223.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$223.$array[x$223.$offset + top])), h.font.scale($imul(h.scale, (((x$224 = h.stack, x$225 = top + 1 >> 0, ((x$225 < 0 || x$225 >= x$224.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$224.$array[x$224.$offset + x$225])) >> 0)))));
					$s = 109; continue;
				/* } else if ((_1 === (113)) || (_1 === (114)) || (_1 === (115)) || (_1 === (116)) || (_1 === (117))) { */ case 89:
					/* goto delta */ $s = 114; continue;
					$s = 109; continue;
				/* } else if ((_1 === (118)) || (_1 === (119))) { */ case 90:
					top = top - (1) >> 0;
					_3 = (((x$226 = h.stack, ((top < 0 || top >= x$226.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$226.$array[x$226.$offset + top])) >> 6 >> 0)) & 3;
					if (_3 === (0)) {
						h.gs.roundPeriod = 32;
					} else if ((_3 === (1)) || (_3 === (3))) {
						h.gs.roundPeriod = 64;
					} else if (_3 === (2)) {
						h.gs.roundPeriod = 128;
					}
					h.gs.roundSuper45 = opcode === 119;
					if (h.gs.roundSuper45) {
						h.gs.roundPeriod = $imul(h.gs.roundPeriod, (46341));
						h.gs.roundPeriod = (_q$3 = h.gs.roundPeriod / (65536), (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
					}
					h.gs.roundPhase = (_q$4 = ($imul(h.gs.roundPeriod, ((((((x$227 = h.stack, ((top < 0 || top >= x$227.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$227.$array[x$227.$offset + top])) >> 4 >> 0)) & 3) >> 0)))) / 4, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
					x$229 = (x$228 = h.stack, ((top < 0 || top >= x$228.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$228.$array[x$228.$offset + top])) & 15;
					if (!((x$229 === 0))) {
						h.gs.roundThreshold = (_q$5 = ($imul(h.gs.roundPeriod, (((x$229 - 4 >> 0) >> 0)))) / 8, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
					} else {
						h.gs.roundThreshold = h.gs.roundPeriod - 1 >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (120)) { */ case 91:
					top = top - (2) >> 0;
					if (!(((x$230 = h.stack, x$231 = top + 1 >> 0, ((x$231 < 0 || x$231 >= x$230.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$230.$array[x$230.$offset + x$231])) === 0))) {
						pc = pc + ((((x$232 = h.stack, ((top < 0 || top >= x$232.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$232.$array[x$232.$offset + top])) >> 0))) >> 0;
						/* continue; */ $s = 1; continue;
					}
					$s = 109; continue;
				/* } else if (_1 === (121)) { */ case 92:
					top = top - (2) >> 0;
					if ((x$233 = h.stack, x$234 = top + 1 >> 0, ((x$234 < 0 || x$234 >= x$233.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$233.$array[x$233.$offset + x$234])) === 0) {
						pc = pc + ((((x$235 = h.stack, ((top < 0 || top >= x$235.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$235.$array[x$235.$offset + top])) >> 0))) >> 0;
						/* continue; */ $s = 1; continue;
					}
					$s = 109; continue;
				/* } else if (_1 === (122)) { */ case 93:
					h.gs.roundPeriod = 0;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 0;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (124)) { */ case 94:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 63;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (125)) { */ case 95:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 0;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if ((_1 === (126)) || (_1 === (127))) { */ case 96:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (128)) { */ case 97:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					points = h.points[1][0];
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						i$12 = (x$236 = h.stack, ((top < 0 || top >= x$236.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$236.$array[x$236.$offset + top]));
						if (i$12 < 0 || points.$length <= ((i$12 >> 0))) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						((i$12 < 0 || i$12 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + i$12]).Flags = (((i$12 < 0 || i$12 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + i$12]).Flags ^ (1)) >>> 0;
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if ((_1 === (129)) || (_1 === (130))) { */ case 98:
					top = top - (2) >> 0;
					_tmp$22 = (x$237 = h.stack, ((top < 0 || top >= x$237.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$237.$array[x$237.$offset + top]));
					_tmp$23 = (x$238 = h.stack, x$239 = top + 1 >> 0, ((x$239 < 0 || x$239 >= x$238.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$238.$array[x$238.$offset + x$239]));
					_tmp$24 = h.points[1][0];
					i$13 = _tmp$22;
					j$2 = _tmp$23;
					points$1 = _tmp$24;
					if (i$13 < 0 || points$1.$length <= ((i$13 >> 0)) || j$2 < 0 || points$1.$length <= ((j$2 >> 0))) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					while (true) {
						if (!(i$13 <= j$2)) { break; }
						if (opcode === 129) {
							((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags = (((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags | (1)) >>> 0;
						} else {
							((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags = (((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags & ~(1)) >>> 0;
						}
						i$13 = i$13 + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (133)) { */ case 99:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if ((_1 === (134)) || (_1 === (135))) { */ case 100:
					top = top - (2) >> 0;
					i$14 = 0;
					while (true) {
						if (!(i$14 < 2)) { break; }
						pt$1 = 1;
						if (!((i$14 === 0))) {
							pt$1 = 0;
						}
						p$15 = h.point(1, pt$1, (x$240 = h.stack, ((top < 0 || top >= x$240.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$240.$array[x$240.$offset + top])));
						q$4 = h.point(2, pt$1, (x$241 = h.stack, x$242 = top + 1 >> 0, ((x$242 < 0 || x$242 >= x$241.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$241.$array[x$241.$offset + x$242])));
						if (p$15 === ptrType$3.nil || q$4 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						dx$2 = (((p$15.X - q$4.X >> 0) << 16 >> 16));
						dy$2 = (((p$15.Y - q$4.Y >> 0) << 16 >> 16));
						if ((dx$2 === 0) && (dy$2 === 0)) {
							dx$2 = 16384;
						} else if (!((((opcode & 1) >>> 0) === 0))) {
							_tmp$25 = -dy$2;
							_tmp$26 = dx$2;
							dx$2 = _tmp$25;
							dy$2 = _tmp$26;
						}
						if (i$14 === 0) {
							arrayType.copy(h.gs.dv, normalize(dx$2, dy$2));
						} else {
							arrayType.copy(h.gs.pv, normalize(dx$2, dy$2));
						}
						i$14 = i$14 + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (136)) { */ case 101:
					res = 0;
					if (!((((x$243 = h.stack, x$244 = top - 1 >> 0, ((x$244 < 0 || x$244 >= x$243.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$243.$array[x$243.$offset + x$244])) & 1) === 0))) {
						res = res | (35);
					}
					if (!((((x$245 = h.stack, x$246 = top - 1 >> 0, ((x$246 < 0 || x$246 >= x$245.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$245.$array[x$245.$offset + x$246])) & 32) === 0))) {
						res = res | (4096);
					}
					(x$247 = h.stack, x$248 = top - 1 >> 0, ((x$248 < 0 || x$248 >= x$247.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$247.$array[x$247.$offset + x$248] = res));
					$s = 109; continue;
				/* } else if (_1 === (137)) { */ case 102:
					$s = -1; return errors.New("truetype: hinting: unsupported IDEF instruction");
				/* } else if (_1 === (138)) { */ case 103:
					_tmp$27 = (x$249 = h.stack, x$250 = top - 3 >> 0, ((x$250 < 0 || x$250 >= x$249.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$249.$array[x$249.$offset + x$250]));
					_tmp$28 = (x$251 = h.stack, x$252 = top - 2 >> 0, ((x$252 < 0 || x$252 >= x$251.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$251.$array[x$251.$offset + x$252]));
					_tmp$29 = (x$253 = h.stack, x$254 = top - 1 >> 0, ((x$254 < 0 || x$254 >= x$253.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$253.$array[x$253.$offset + x$254]));
					(x$255 = h.stack, x$256 = top - 1 >> 0, ((x$256 < 0 || x$256 >= x$255.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$255.$array[x$255.$offset + x$256] = _tmp$27));
					(x$257 = h.stack, x$258 = top - 3 >> 0, ((x$258 < 0 || x$258 >= x$257.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$257.$array[x$257.$offset + x$258] = _tmp$28));
					(x$259 = h.stack, x$260 = top - 2 >> 0, ((x$260 < 0 || x$260 >= x$259.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$259.$array[x$259.$offset + x$260] = _tmp$29));
					$s = 109; continue;
				/* } else if (_1 === (139)) { */ case 104:
					top = top - (1) >> 0;
					if ((x$261 = h.stack, x$262 = top - 1 >> 0, ((x$262 < 0 || x$262 >= x$261.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$261.$array[x$261.$offset + x$262])) < (x$263 = h.stack, ((top < 0 || top >= x$263.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$263.$array[x$263.$offset + top]))) {
						(x$265 = h.stack, x$266 = top - 1 >> 0, ((x$266 < 0 || x$266 >= x$265.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$265.$array[x$265.$offset + x$266] = (x$264 = h.stack, ((top < 0 || top >= x$264.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$264.$array[x$264.$offset + top]))));
					}
					$s = 109; continue;
				/* } else if (_1 === (140)) { */ case 105:
					top = top - (1) >> 0;
					if ((x$267 = h.stack, x$268 = top - 1 >> 0, ((x$268 < 0 || x$268 >= x$267.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$267.$array[x$267.$offset + x$268])) > (x$269 = h.stack, ((top < 0 || top >= x$269.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$269.$array[x$269.$offset + top]))) {
						(x$271 = h.stack, x$272 = top - 1 >> 0, ((x$272 < 0 || x$272 >= x$271.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$271.$array[x$271.$offset + x$272] = (x$270 = h.stack, ((top < 0 || top >= x$270.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$270.$array[x$270.$offset + top]))));
					}
					$s = 109; continue;
				/* } else if (_1 === (141)) { */ case 106:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (142)) { */ case 107:
					top = top - (2) >> 0;
					$s = 109; continue;
				/* } else { */ case 108:
					if (opcode < 176) {
						$s = -1; return errors.New("truetype: hinting: unrecognized instruction");
					}
					/* */ if (opcode < 192) { $s = 115; continue; }
					/* */ $s = 116; continue;
					/* if (opcode < 192) { */ case 115:
						if (opcode < 184) {
							opcode = opcode - (175) << 24 >>> 24;
						} else {
							opcode = opcode - (55) << 24 >>> 24;
						}
						/* goto push */ $s = 111; continue;
					/* } */ case 116:
					if (opcode < 224) {
						top = top - (1) >> 0;
						i$15 = (x$273 = h.stack, ((top < 0 || top >= x$273.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$273.$array[x$273.$offset + top]));
						ref$2 = h.point(0, 0, h.gs.rp[0]);
						p$16 = h.point(1, 0, i$15);
						if (ref$2 === ptrType$3.nil || p$16 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						oldDist$2 = 0;
						if ((h.gs.zp[0] === 0) || (h.gs.zp[1] === 0)) {
							p0 = h.point(1, 1, i$15);
							p1$1 = h.point(0, 1, h.gs.rp[0]);
							oldDist$2 = dotProduct(p0.X - p1$1.X >> 0, p0.Y - p1$1.Y >> 0, $clone(h.gs.dv, arrayType));
						} else {
							p0$1 = h.point(1, 2, i$15);
							p1$2 = h.point(0, 2, h.gs.rp[0]);
							oldDist$2 = dotProduct(p0$1.X - p1$2.X >> 0, p0$1.Y - p1$2.Y >> 0, $clone(h.gs.dv, arrayType));
							oldDist$2 = h.font.scale($imul(h.scale, oldDist$2));
						}
						x$274 = fabs(oldDist$2 - h.gs.singleWidth >> 0);
						if (x$274 < h.gs.singleWidthCutIn) {
							if (oldDist$2 >= 0) {
								oldDist$2 = h.gs.singleWidth;
							} else {
								oldDist$2 = -h.gs.singleWidth;
							}
						}
						distance$3 = oldDist$2;
						if (!((((opcode & 4) >>> 0) === 0))) {
							distance$3 = h.round(oldDist$2);
						}
						if (!((((opcode & 8) >>> 0) === 0))) {
							if (oldDist$2 >= 0) {
								if (distance$3 < h.gs.minDist) {
									distance$3 = h.gs.minDist;
								}
							} else {
								if (distance$3 > -h.gs.minDist) {
									distance$3 = -h.gs.minDist;
								}
							}
						}
						h.gs.rp[1] = h.gs.rp[0];
						h.gs.rp[2] = i$15;
						if (!((((opcode & 16) >>> 0) === 0))) {
							h.gs.rp[0] = i$15;
						}
						oldDist$2 = dotProduct(p$16.X - ref$2.X >> 0, p$16.Y - ref$2.Y >> 0, $clone(h.gs.pv, arrayType));
						h.move(p$16, distance$3 - oldDist$2 >> 0, true);
					} else {
						top = top - (2) >> 0;
						i$16 = (x$275 = h.stack, ((top < 0 || top >= x$275.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$275.$array[x$275.$offset + top]));
						cvtDist = h.getScaledCVT((x$276 = h.stack, x$277 = top + 1 >> 0, ((x$277 < 0 || x$277 >= x$276.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$276.$array[x$276.$offset + x$277])));
						if (fabs(cvtDist - h.gs.singleWidth >> 0) < h.gs.singleWidthCutIn) {
							if (cvtDist >= 0) {
								cvtDist = h.gs.singleWidth;
							} else {
								cvtDist = -h.gs.singleWidth;
							}
						}
						if (h.gs.zp[1] === 0) {
							$s = -1; return errors.New("truetype: hinting: unimplemented twilight point adjustment");
						}
						ref$3 = h.point(0, 1, h.gs.rp[0]);
						p$17 = h.point(1, 1, i$16);
						if (ref$3 === ptrType$3.nil || p$17 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						oldDist$3 = dotProduct(p$17.X - ref$3.X >> 0, p$17.Y - ref$3.Y >> 0, $clone(h.gs.dv, arrayType));
						ref$3 = h.point(0, 0, h.gs.rp[0]);
						p$17 = h.point(1, 0, i$16);
						if (ref$3 === ptrType$3.nil || p$17 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						curDist$2 = dotProduct(p$17.X - ref$3.X >> 0, p$17.Y - ref$3.Y >> 0, $clone(h.gs.pv, arrayType));
						if (h.gs.autoFlip && ((oldDist$3 ^ cvtDist) >> 0) < 0) {
							cvtDist = -cvtDist;
						}
						distance$4 = cvtDist;
						if (!((((opcode & 4) >>> 0) === 0))) {
							if (((h.gs.zp[0] === h.gs.zp[1])) && (fabs(cvtDist - oldDist$3 >> 0) > h.gs.controlValueCutIn)) {
								distance$4 = oldDist$3;
							}
							distance$4 = h.round(distance$4);
						}
						if (!((((opcode & 8) >>> 0) === 0))) {
							if (oldDist$3 >= 0) {
								if (distance$4 < h.gs.minDist) {
									distance$4 = h.gs.minDist;
								}
							} else {
								if (distance$4 > -h.gs.minDist) {
									distance$4 = -h.gs.minDist;
								}
							}
						}
						h.gs.rp[1] = h.gs.rp[0];
						h.gs.rp[2] = i$16;
						if (!((((opcode & 16) >>> 0) === 0))) {
							h.gs.rp[0] = i$16;
						}
						h.move(p$17, distance$4 - curDist$2 >> 0, true);
					}
				/* } */ case 109:
			case 3:
			pc = pc + (1) >> 0;
			/* continue; */ $s = 1; continue;
			/* ifelse: */ case 110:
			depth = 0;
			ifelseloop:
			while (true) {
				pc = pc + (1) >> 0;
				if (pc >= program.$length) {
					$s = -1; return errors.New("truetype: hinting: unbalanced IF or ELSE");
				}
				_4 = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
				if (_4 === (88)) {
					depth = depth + (1) >> 0;
				} else if (_4 === (27)) {
					if ((depth === 0) && (opcode === 0)) {
						break ifelseloop;
					}
				} else if (_4 === (89)) {
					depth = depth - (1) >> 0;
					if (depth < 0) {
						break ifelseloop;
					}
				} else {
					ok$5 = false;
					_tuple$5 = skipInstructionPayload(program, pc);
					pc = _tuple$5[0];
					ok$5 = _tuple$5[1];
					if (!ok$5) {
						$s = -1; return errors.New("truetype: hinting: unbalanced IF or ELSE");
					}
				}
			}
			pc = pc + (1) >> 0;
			/* continue; */ $s = 1; continue;
			/* push: */ case 111:
			width = 1;
			if (!((((opcode & 128) >>> 0) === 0))) {
				opcode = (opcode & ~(128)) << 24 >>> 24;
				width = 2;
			}
			if (opcode === 0) {
				pc = pc + (1) >> 0;
				if (pc >= program.$length) {
					$s = -1; return errors.New("truetype: hinting: insufficient data");
				}
				opcode = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
			}
			pc = pc + (1) >> 0;
			if ((top + ((opcode >> 0)) >> 0) > h.stack.$length) {
				$s = -1; return errors.New("truetype: hinting: stack overflow");
			}
			if ((pc + ($imul(width, ((opcode >> 0)))) >> 0) > program.$length) {
				$s = -1; return errors.New("truetype: hinting: insufficient data");
			}
			while (true) {
				if (!(opcode > 0)) { break; }
				if (width === 1) {
					(x$278 = h.stack, ((top < 0 || top >= x$278.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$278.$array[x$278.$offset + top] = ((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) >> 0))));
				} else {
					(x$280 = h.stack, ((top < 0 || top >= x$280.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$280.$array[x$280.$offset + top] = ((((((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) << 24 >> 24)) >> 0)) << 8 >> 0) | (((x$279 = pc + 1 >> 0, ((x$279 < 0 || x$279 >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + x$279])) >> 0)))));
				}
				top = top + (1) >> 0;
				pc = pc + (width) >> 0;
				opcode = opcode - (1) << 24 >>> 24;
			}
			/* continue; */ $s = 1; continue;
			/* delta: */ case 114:
			if (opcode >= 115 && !h.scaledCVTInitialized) {
				h.initializeScaledCVT();
			}
			top = top - (1) >> 0;
			n = (x$281 = h.stack, ((top < 0 || top >= x$281.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$281.$array[x$281.$offset + top]));
			if (((top >> 0)) < ($imul(2, n))) {
				$s = -1; return errors.New("truetype: hinting: stack underflow");
			}
			while (true) {
				if (!(n > 0)) { break; }
				top = top - (2) >> 0;
				b = (x$282 = h.stack, ((top < 0 || top >= x$282.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$282.$array[x$282.$offset + top]));
				c$1 = ((b & 240)) >> 4 >> 0;
				_5 = opcode;
				if ((_5 === (113)) || (_5 === (116))) {
					c$1 = c$1 + (16) >> 0;
				} else if ((_5 === (114)) || (_5 === (117))) {
					c$1 = c$1 + (32) >> 0;
				}
				c$1 = c$1 + (h.gs.deltaBase) >> 0;
				ppem = ((((h.scale >> 0)) + 32 >> 0)) >> 6 >> 0;
				if (!((ppem === c$1))) {
					n = n - (1) >> 0;
					continue;
				}
				b = ((b & 15)) - 8 >> 0;
				if (b >= 0) {
					b = b + (1) >> 0;
				}
				b = (_q$6 = ($imul(b, 64)) / (((y = ((h.gs.deltaShift >>> 0)), y < 32 ? (1 << y) : 0) >> 0)), (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero"));
				if (opcode >= 115) {
					a = (x$283 = h.stack, x$284 = top + 1 >> 0, ((x$284 < 0 || x$284 >= x$283.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$283.$array[x$283.$offset + x$284]));
					if (a < 0 || h.scaledCVT.$length <= ((a >> 0))) {
						$s = -1; return errors.New("truetype: hinting: index out of range");
					}
					(x$286 = h.scaledCVT, ((a < 0 || a >= x$286.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$286.$array[x$286.$offset + a] = ((x$285 = h.scaledCVT, ((a < 0 || a >= x$285.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$285.$array[x$285.$offset + a])) + (((b >> 0))) >> 0)));
				} else {
					p$18 = h.point(0, 0, (x$287 = h.stack, x$288 = top + 1 >> 0, ((x$288 < 0 || x$288 >= x$287.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$287.$array[x$287.$offset + x$288])));
					if (p$18 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					h.move(p$18, ((b >> 0)), true);
				}
				n = n - (1) >> 0;
			}
			pc = pc + (1) >> 0;
			/* continue; */ $s = 1; continue;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; }
	};
	hinter.prototype.run = function(program, pCurrent, pUnhinted, pInFontUnits, ends) { return this.$val.run(program, pCurrent, pUnhinted, pInFontUnits, ends); };
	hinter.ptr.prototype.initializeScaledCVT = function() {
		var _i, _q, _q$1, _ref, h, i, n, unscaled, x, x$1, x$2, x$3, x$4;
		h = this;
		h.scaledCVTInitialized = true;
		n = (_q = h.font.cvt.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (n <= h.scaledCVT.$capacity) {
			h.scaledCVT = $subslice(h.scaledCVT, 0, n);
		} else {
			if (n < 32) {
				n = 32;
			}
			h.scaledCVT = $makeSlice(sliceType$5, (_q$1 = h.font.cvt.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), n);
		}
		_ref = h.scaledCVT;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			unscaled = (((((x = h.font.cvt, x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$2 = h.font.cvt, x$3 = ($imul(2, i)) + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) << 16 >>> 16))) >>> 0;
			(x$4 = h.scaledCVT, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i] = h.font.scale($imul(h.scale, ((((unscaled << 16 >> 16)) >> 0))))));
			_i++;
		}
	};
	hinter.prototype.initializeScaledCVT = function() { return this.$val.initializeScaledCVT(); };
	hinter.ptr.prototype.getScaledCVT = function(i) {
		var h, i, x;
		h = this;
		if (!h.scaledCVTInitialized) {
			h.initializeScaledCVT();
		}
		if (i < 0 || h.scaledCVT.$length <= ((i >> 0))) {
			return 0;
		}
		return (x = h.scaledCVT, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	hinter.prototype.getScaledCVT = function(i) { return this.$val.getScaledCVT(i); };
	hinter.ptr.prototype.setScaledCVT = function(i, v) {
		var h, i, v, x;
		h = this;
		if (!h.scaledCVTInitialized) {
			h.initializeScaledCVT();
		}
		if (i < 0 || h.scaledCVT.$length <= ((i >> 0))) {
			return;
		}
		(x = h.scaledCVT, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = v));
	};
	hinter.prototype.setScaledCVT = function(i, v) { return this.$val.setScaledCVT(i, v); };
	hinter.ptr.prototype.point = function(zonePointer, pt, i) {
		var h, i, points, pt, x, x$1, x$2, x$3, zonePointer;
		h = this;
		points = (x = (x$1 = h.points, x$2 = (x$3 = h.gs.zp, ((zonePointer < 0 || zonePointer >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[zonePointer])), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), ((pt < 0 || pt >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[pt]));
		if (i < 0 || points.$length <= ((i >> 0))) {
			return ptrType$3.nil;
		}
		return ((i < 0 || i >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + i]);
	};
	hinter.prototype.point = function(zonePointer, pt, i) { return this.$val.point(zonePointer, pt, i); };
	hinter.ptr.prototype.move = function(p, distance, touch) {
		var distance, fvDotPv, fvx, fvy, h, p, pvx, pvy, touch, x, x$1, x$2, x$3;
		h = this;
		fvx = (new $Int64(0, h.gs.fv[0]));
		pvx = (new $Int64(0, h.gs.pv[0]));
		if ((fvx.$high === 0 && fvx.$low === 16384) && (pvx.$high === 0 && pvx.$low === 16384)) {
			p.X = p.X + ((distance)) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (64)) >>> 0;
			}
			return;
		}
		fvy = (new $Int64(0, h.gs.fv[1]));
		pvy = (new $Int64(0, h.gs.pv[1]));
		if ((fvy.$high === 0 && fvy.$low === 16384) && (pvy.$high === 0 && pvy.$low === 16384)) {
			p.Y = p.Y + ((distance)) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (128)) >>> 0;
			}
			return;
		}
		fvDotPv = $shiftRightInt64(((x = $mul64(fvx, pvx), x$1 = $mul64(fvy, pvy), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low))), 14);
		if (!((fvx.$high === 0 && fvx.$low === 0))) {
			p.X = p.X + ((((x$2 = mulDiv(fvx, (new $Int64(0, distance)), fvDotPv), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0))) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (64)) >>> 0;
			}
		}
		if (!((fvy.$high === 0 && fvy.$low === 0))) {
			p.Y = p.Y + ((((x$3 = mulDiv(fvy, (new $Int64(0, distance)), fvDotPv), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0))) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (128)) >>> 0;
			}
		}
	};
	hinter.prototype.move = function(p, distance, touch) { return this.$val.move(p, distance, touch); };
	hinter.ptr.prototype.iupInterp = function(interpY, p1, p2, ref1, ref2) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, delta1, delta2, h, i, i$1, ifu1, ifu2, ifuXY, interpY, numer, p1, p2, ref1, ref2, scale, scaleOK, unh1, unh2, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xy;
		h = this;
		if (p1 > p2) {
			return;
		}
		if (ref1 >= h.points[1][0].$length || ref2 >= h.points[1][0].$length) {
			return;
		}
		_tmp = 0;
		_tmp$1 = 0;
		ifu1 = _tmp;
		ifu2 = _tmp$1;
		if (interpY) {
			ifu1 = (x = h.points[1][2], ((ref1 < 0 || ref1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + ref1])).Y;
			ifu2 = (x$1 = h.points[1][2], ((ref2 < 0 || ref2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + ref2])).Y;
		} else {
			ifu1 = (x$2 = h.points[1][2], ((ref1 < 0 || ref1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ref1])).X;
			ifu2 = (x$3 = h.points[1][2], ((ref2 < 0 || ref2 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + ref2])).X;
		}
		if (ifu1 > ifu2) {
			_tmp$2 = ifu2;
			_tmp$3 = ifu1;
			ifu1 = _tmp$2;
			ifu2 = _tmp$3;
			_tmp$4 = ref2;
			_tmp$5 = ref1;
			ref1 = _tmp$4;
			ref2 = _tmp$5;
		}
		_tmp$6 = 0;
		_tmp$7 = 0;
		_tmp$8 = 0;
		_tmp$9 = 0;
		unh1 = _tmp$6;
		unh2 = _tmp$7;
		delta1 = _tmp$8;
		delta2 = _tmp$9;
		if (interpY) {
			unh1 = (x$4 = h.points[1][1], ((ref1 < 0 || ref1 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + ref1])).Y;
			unh2 = (x$5 = h.points[1][1], ((ref2 < 0 || ref2 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + ref2])).Y;
			delta1 = (x$6 = h.points[1][0], ((ref1 < 0 || ref1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + ref1])).Y - unh1 >> 0;
			delta2 = (x$7 = h.points[1][0], ((ref2 < 0 || ref2 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + ref2])).Y - unh2 >> 0;
		} else {
			unh1 = (x$8 = h.points[1][1], ((ref1 < 0 || ref1 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + ref1])).X;
			unh2 = (x$9 = h.points[1][1], ((ref2 < 0 || ref2 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + ref2])).X;
			delta1 = (x$10 = h.points[1][0], ((ref1 < 0 || ref1 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + ref1])).X - unh1 >> 0;
			delta2 = (x$11 = h.points[1][0], ((ref2 < 0 || ref2 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + ref2])).X - unh2 >> 0;
		}
		_tmp$10 = 0;
		_tmp$11 = 0;
		xy = _tmp$10;
		ifuXY = _tmp$11;
		if (ifu1 === ifu2) {
			i = p1;
			while (true) {
				if (!(i <= p2)) { break; }
				if (interpY) {
					xy = (x$12 = h.points[1][1], ((i < 0 || i >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i])).Y;
				} else {
					xy = (x$13 = h.points[1][1], ((i < 0 || i >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + i])).X;
				}
				if (xy <= unh1) {
					xy = xy + (delta1) >> 0;
				} else {
					xy = xy + (delta2) >> 0;
				}
				if (interpY) {
					(x$14 = h.points[1][0], ((i < 0 || i >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + i])).Y = xy;
				} else {
					(x$15 = h.points[1][0], ((i < 0 || i >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + i])).X = xy;
				}
				i = i + (1) >> 0;
			}
			return;
		}
		_tmp$12 = new $Int64(0, 0);
		_tmp$13 = false;
		scale = _tmp$12;
		scaleOK = _tmp$13;
		i$1 = p1;
		while (true) {
			if (!(i$1 <= p2)) { break; }
			if (interpY) {
				xy = (x$16 = h.points[1][1], ((i$1 < 0 || i$1 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + i$1])).Y;
				ifuXY = (x$17 = h.points[1][2], ((i$1 < 0 || i$1 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + i$1])).Y;
			} else {
				xy = (x$18 = h.points[1][1], ((i$1 < 0 || i$1 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$1])).X;
				ifuXY = (x$19 = h.points[1][2], ((i$1 < 0 || i$1 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + i$1])).X;
			}
			if (xy <= unh1) {
				xy = xy + (delta1) >> 0;
			} else if (xy >= unh2) {
				xy = xy + (delta2) >> 0;
			} else {
				if (!scaleOK) {
					scaleOK = true;
					scale = mulDiv((new $Int64(0, (((unh2 + delta2 >> 0) - unh1 >> 0) - delta1 >> 0))), new $Int64(0, 65536), (new $Int64(0, (ifu2 - ifu1 >> 0))));
				}
				numer = $mul64((new $Int64(0, (ifuXY - ifu1 >> 0))), scale);
				if ((numer.$high > 0 || (numer.$high === 0 && numer.$low >= 0))) {
					numer = (x$20 = new $Int64(0, 32768), new $Int64(numer.$high + x$20.$high, numer.$low + x$20.$low));
				} else {
					numer = (x$21 = new $Int64(0, 32768), new $Int64(numer.$high - x$21.$high, numer.$low - x$21.$low));
				}
				xy = (unh1 + delta1 >> 0) + (((x$22 = $div64(numer, new $Int64(0, 65536), false), x$22.$low + ((x$22.$high >> 31) * 4294967296)) >> 0)) >> 0;
			}
			if (interpY) {
				(x$23 = h.points[1][0], ((i$1 < 0 || i$1 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + i$1])).Y = xy;
			} else {
				(x$24 = h.points[1][0], ((i$1 < 0 || i$1 >= x$24.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$24.$array[x$24.$offset + i$1])).X = xy;
			}
			i$1 = i$1 + (1) >> 0;
		}
	};
	hinter.prototype.iupInterp = function(interpY, p1, p2, ref1, ref2) { return this.$val.iupInterp(interpY, p1, p2, ref1, ref2); };
	hinter.ptr.prototype.iupShift = function(interpY, p1, p2, p) {
		var delta, h, i, interpY, p, p1, p2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		h = this;
		delta = 0;
		if (interpY) {
			delta = (x = h.points[1][0], ((p < 0 || p >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + p])).Y - (x$1 = h.points[1][1], ((p < 0 || p >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + p])).Y >> 0;
		} else {
			delta = (x$2 = h.points[1][0], ((p < 0 || p >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + p])).X - (x$3 = h.points[1][1], ((p < 0 || p >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + p])).X >> 0;
		}
		if (delta === 0) {
			return;
		}
		i = p1;
		while (true) {
			if (!(i < p2)) { break; }
			if (i === p) {
				i = i + (1) >> 0;
				continue;
			}
			if (interpY) {
				(x$5 = h.points[1][0], ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i])).Y = (x$4 = h.points[1][0], ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])).Y + (delta) >> 0;
			} else {
				(x$7 = h.points[1][0], ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])).X = (x$6 = h.points[1][0], ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i])).X + (delta) >> 0;
			}
			i = i + (1) >> 0;
		}
	};
	hinter.prototype.iupShift = function(interpY, p1, p2, p) { return this.$val.iupShift(interpY, p1, p2, p); };
	hinter.ptr.prototype.displacement = function(useZP1) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, d, h, i, ok, p, q, useZP1, zonePointer;
		zonePointer = 0;
		i = 0;
		d = 0;
		ok = false;
		h = this;
		_tmp = 0;
		_tmp$1 = h.gs.rp[1];
		zonePointer = _tmp;
		i = _tmp$1;
		if (useZP1) {
			_tmp$2 = 1;
			_tmp$3 = h.gs.rp[2];
			zonePointer = _tmp$2;
			i = _tmp$3;
		}
		p = h.point(zonePointer, 0, i);
		q = h.point(zonePointer, 1, i);
		if (p === ptrType$3.nil || q === ptrType$3.nil) {
			_tmp$4 = 0;
			_tmp$5 = 0;
			_tmp$6 = 0;
			_tmp$7 = false;
			zonePointer = _tmp$4;
			i = _tmp$5;
			d = _tmp$6;
			ok = _tmp$7;
			return [zonePointer, i, d, ok];
		}
		d = dotProduct(p.X - q.X >> 0, p.Y - q.Y >> 0, $clone(h.gs.pv, arrayType));
		_tmp$8 = zonePointer;
		_tmp$9 = i;
		_tmp$10 = d;
		_tmp$11 = true;
		zonePointer = _tmp$8;
		i = _tmp$9;
		d = _tmp$10;
		ok = _tmp$11;
		return [zonePointer, i, d, ok];
	};
	hinter.prototype.displacement = function(useZP1) { return this.$val.displacement(useZP1); };
	skipInstructionPayload = function(program, pc) {
		var _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, newPC, ok, pc, program;
		newPC = 0;
		ok = false;
		_1 = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
		if (_1 === (64)) {
			pc = pc + (1) >> 0;
			if (pc >= program.$length) {
				_tmp = 0;
				_tmp$1 = false;
				newPC = _tmp;
				ok = _tmp$1;
				return [newPC, ok];
			}
			pc = pc + (((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) >> 0))) >> 0;
		} else if (_1 === (65)) {
			pc = pc + (1) >> 0;
			if (pc >= program.$length) {
				_tmp$2 = 0;
				_tmp$3 = false;
				newPC = _tmp$2;
				ok = _tmp$3;
				return [newPC, ok];
			}
			pc = pc + (($imul(2, ((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) >> 0))))) >> 0;
		} else if ((_1 === (176)) || (_1 === (177)) || (_1 === (178)) || (_1 === (179)) || (_1 === (180)) || (_1 === (181)) || (_1 === (182)) || (_1 === (183))) {
			pc = pc + ((((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) - 175 << 24 >>> 24) >> 0))) >> 0;
		} else if ((_1 === (184)) || (_1 === (185)) || (_1 === (186)) || (_1 === (187)) || (_1 === (188)) || (_1 === (189)) || (_1 === (190)) || (_1 === (191))) {
			pc = pc + (($imul(2, (((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) - 183 << 24 >>> 24) >> 0))))) >> 0;
		}
		_tmp$4 = pc;
		_tmp$5 = true;
		newPC = _tmp$4;
		ok = _tmp$5;
		return [newPC, ok];
	};
	normalize = function(x, y) {
		var _tmp, _tmp$1, fx, fy, l, x, y;
		_tmp = (x);
		_tmp$1 = (y);
		fx = _tmp;
		fy = _tmp$1;
		l = 16384 / math.Hypot(fx, fy);
		fx = fx * (l);
		if (fx >= 0) {
			fx = fx + (0.5);
		} else {
			fx = fx - (0.5);
		}
		fy = fy * (l);
		if (fy >= 0) {
			fy = fy + (0.5);
		} else {
			fy = fy - (0.5);
		}
		return $toNativeArray($kindInt16, [((fx >> 0)), ((fy >> 0))]);
	};
	fabs = function(x) {
		var x;
		if (x < 0) {
			return -x;
		}
		return x;
	};
	fdiv = function(x, y) {
		var x, x$1, y;
		return (((x$1 = $div64(($shiftLeft64((new $Int64(0, x)), 6)), (new $Int64(0, y)), false), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	fmul = function(x, y) {
		var x, x$1, x$2, y;
		return (((x$1 = $shiftRightInt64(((x$2 = $mul64((new $Int64(0, x)), (new $Int64(0, y))), new $Int64(x$2.$high + 0, x$2.$low + 32))), 6), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	dotProduct = function(x, y, q) {
		var hi, hi1, hi2, l, lo, lo1, lo2, m, q, s, x, y;
		l = ((($imul(((((x >> 0)) & 65535)), ((q[0] >> 0)))) >>> 0));
		m = $imul(((((x >> 0)) >> 16 >> 0)), ((q[0] >> 0)));
		lo1 = l + ((((m >>> 0)) << 16 >>> 0)) >>> 0;
		hi1 = (((m >> 16 >> 0)) + ((((l >> 0)) >> 31 >> 0)) >> 0) + bool2int32(lo1 < l) >> 0;
		l = ((($imul(((((y >> 0)) & 65535)), ((q[1] >> 0)))) >>> 0));
		m = $imul(((((y >> 0)) >> 16 >> 0)), ((q[1] >> 0)));
		lo2 = l + ((((m >>> 0)) << 16 >>> 0)) >>> 0;
		hi2 = (((m >> 16 >> 0)) + ((((l >> 0)) >> 31 >> 0)) >> 0) + bool2int32(lo2 < l) >> 0;
		lo = lo1 + lo2 >>> 0;
		hi = (hi1 + hi2 >> 0) + bool2int32(lo < lo1) >> 0;
		s = hi >> 31 >> 0;
		l = lo + ((s >>> 0)) >>> 0;
		hi = hi + ((s + bool2int32(l < lo) >> 0)) >> 0;
		lo = l;
		l = lo + 8192 >>> 0;
		hi = hi + (bool2int32(l < lo)) >> 0;
		return ((((((((hi >>> 0)) << 18 >>> 0)) | ((l >>> 14 >>> 0))) >>> 0) >> 0));
	};
	mulDiv = function(x, y, z) {
		var _tmp, _tmp$1, x, x$1, x$2, xy, y, z;
		xy = $mul64(x, y);
		if ((z.$high < 0 || (z.$high === 0 && z.$low < 0))) {
			_tmp = new $Int64(-xy.$high, -xy.$low);
			_tmp$1 = new $Int64(-z.$high, -z.$low);
			xy = _tmp;
			z = _tmp$1;
		}
		if ((xy.$high > 0 || (xy.$high === 0 && xy.$low >= 0))) {
			xy = (x$1 = $div64(z, new $Int64(0, 2), false), new $Int64(xy.$high + x$1.$high, xy.$low + x$1.$low));
		} else {
			xy = (x$2 = $div64(z, new $Int64(0, 2), false), new $Int64(xy.$high - x$2.$high, xy.$low - x$2.$low));
		}
		return $div64(xy, z, false);
	};
	hinter.ptr.prototype.round = function(x) {
		var _q, _q$1, h, ret, ret$1, x;
		h = this;
		if (h.gs.roundPeriod === 0) {
			return x;
		}
		if (x >= 0) {
			ret = (x - h.gs.roundPhase >> 0) + h.gs.roundThreshold >> 0;
			if (h.gs.roundSuper45) {
				ret = (_q = ret / (h.gs.roundPeriod), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				ret = $imul(ret, (h.gs.roundPeriod));
			} else {
				ret = ret & (-h.gs.roundPeriod);
			}
			if (!((x === 0)) && ret < 0) {
				ret = 0;
			}
			return ret + h.gs.roundPhase >> 0;
		}
		ret$1 = (-x - h.gs.roundPhase >> 0) + h.gs.roundThreshold >> 0;
		if (h.gs.roundSuper45) {
			ret$1 = (_q$1 = ret$1 / (h.gs.roundPeriod), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			ret$1 = $imul(ret$1, (h.gs.roundPeriod));
		} else {
			ret$1 = ret$1 & (-h.gs.roundPeriod);
		}
		if (ret$1 < 0) {
			ret$1 = 0;
		}
		return -ret$1 - h.gs.roundPhase >> 0;
	};
	hinter.prototype.round = function(x) { return this.$val.round(x); };
	bool2int32 = function(b) {
		var b;
		if (b) {
			return 1;
		}
		return 0;
	};
	FormatError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "freetype: invalid TrueType format: " + (e);
	};
	$ptrType(FormatError).prototype.Error = function() { return new FormatError(this.$get()).Error(); };
	UnsupportedError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "freetype: unsupported TrueType feature: " + (e);
	};
	$ptrType(UnsupportedError).prototype.Error = function() { return new UnsupportedError(this.$get()).Error(); };
	u32 = function(b, i) {
		var b, i, x, x$1, x$2;
		return ((((((((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) >>> 0)) << 24 >>> 0) | ((((x = i + 1 >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])) >>> 0)) << 16 >>> 0)) >>> 0) | ((((x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x$1])) >>> 0)) << 8 >>> 0)) >>> 0) | (((x$2 = i + 3 >> 0, ((x$2 < 0 || x$2 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x$2])) >>> 0))) >>> 0;
	};
	u16 = function(b, i) {
		var b, i, x;
		return ((((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x = i + 1 >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])) << 16 >>> 16))) >>> 0;
	};
	readTable = function(ttf, offsetLength) {
		var _r, _r$1, _r$2, end, length, offset, offsetLength, ttf, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; end = $f.end; length = $f.length; offset = $f.offset; offsetLength = $f.offsetLength; ttf = $f.ttf; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = ((u32(offsetLength, 0) >> 0));
		/* */ if (offset < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset < 0) { */ case 1:
			_r = fmt.Sprintf("offset too large: %d", new sliceType$7([new $Uint32(((offset >>> 0)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$6.nil, new FormatError((_r))];
		/* } */ case 2:
		length = ((u32(offsetLength, 4) >> 0));
		/* */ if (length < 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (length < 0) { */ case 4:
			_r$1 = fmt.Sprintf("length too large: %d", new sliceType$7([new $Uint32(((length >>> 0)))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$6.nil, new FormatError((_r$1))];
		/* } */ case 5:
		end = offset + length >> 0;
		/* */ if (end < 0 || end > ttf.$length) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (end < 0 || end > ttf.$length) { */ case 7:
			_r$2 = fmt.Sprintf("offset + length too large: %d", new sliceType$7([new $Uint32((((offset >>> 0)) + ((length >>> 0)) >>> 0))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$6.nil, new FormatError((_r$2))];
		/* } */ case 8:
		$s = -1; return [$subslice(ttf, offset, end), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: readTable }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.end = end; $f.length = length; $f.offset = offset; $f.offsetLength = offsetLength; $f.ttf = ttf; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseSubtables = function(table, name, offset, size, pred) {
		var _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _v, bestOffset, bestPID, i, nSubtables, name, offset, ok, pidPsid, pred, retErr, size, table, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _v = $f._v; bestOffset = $f.bestOffset; bestPID = $f.bestPID; i = $f.i; nSubtables = $f.nSubtables; name = $f.name; offset = $f.offset; ok = $f.ok; pidPsid = $f.pidPsid; pred = $f.pred; retErr = $f.retErr; size = $f.size; table = $f.table; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bestOffset = 0;
		bestPID = 0;
		retErr = $ifaceNil;
		if (table.$length < 4) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = new FormatError((name + " too short"));
			bestOffset = _tmp;
			bestPID = _tmp$1;
			retErr = _tmp$2;
			$s = -1; return [bestOffset, bestPID, retErr];
		}
		nSubtables = ((u16(table, 2) >> 0));
		if (table.$length < (($imul(size, nSubtables)) + offset >> 0)) {
			_tmp$3 = 0;
			_tmp$4 = 0;
			_tmp$5 = new FormatError((name + " too short"));
			bestOffset = _tmp$3;
			bestPID = _tmp$4;
			retErr = _tmp$5;
			$s = -1; return [bestOffset, bestPID, retErr];
		}
		ok = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < nSubtables)) { break; } */ if(!(i < nSubtables)) { $s = 2; continue; }
			if (!(!(pred === $throwNilPointerError))) { _v = false; $s = 5; continue s; }
			_r = pred($subslice(table, offset)); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = !_r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				_tmp$6 = i + 1 >> 0;
				_tmp$7 = offset + size >> 0;
				i = _tmp$6;
				offset = _tmp$7;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			pidPsid = u32(table, offset);
			if ((pidPsid === 3) || (pidPsid === 4)) {
				_tmp$8 = offset;
				_tmp$9 = pidPsid >>> 16 >>> 0;
				_tmp$10 = true;
				bestOffset = _tmp$8;
				bestPID = _tmp$9;
				ok = _tmp$10;
				/* break; */ $s = 2; continue;
			} else if ((pidPsid === 196608) || (pidPsid === 196609) || (pidPsid === 196618)) {
				_tmp$11 = offset;
				_tmp$12 = pidPsid >>> 16 >>> 0;
				_tmp$13 = true;
				bestOffset = _tmp$11;
				bestPID = _tmp$12;
				ok = _tmp$13;
			}
			_tmp$14 = i + 1 >> 0;
			_tmp$15 = offset + size >> 0;
			i = _tmp$14;
			offset = _tmp$15;
		/* } */ $s = 1; continue; case 2:
		if (!ok) {
			_tmp$16 = 0;
			_tmp$17 = 0;
			_tmp$18 = new UnsupportedError((name + " encoding"));
			bestOffset = _tmp$16;
			bestPID = _tmp$17;
			retErr = _tmp$18;
			$s = -1; return [bestOffset, bestPID, retErr];
		}
		_tmp$19 = bestOffset;
		_tmp$20 = bestPID;
		_tmp$21 = $ifaceNil;
		bestOffset = _tmp$19;
		bestPID = _tmp$20;
		retErr = _tmp$21;
		$s = -1; return [bestOffset, bestPID, retErr];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseSubtables }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._v = _v; $f.bestOffset = bestOffset; $f.bestPID = bestPID; $f.i = i; $f.nSubtables = nSubtables; $f.name = name; $f.offset = offset; $f.ok = ok; $f.pidPsid = pidPsid; $f.pred = pred; $f.retErr = retErr; $f.size = size; $f.table = table; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.ptr.prototype.parseCmap = function() {
		var _1, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, cmapFormat, err, f, i, i$1, i$2, i$3, i$4, language, language$1, length, nGroups, offset, segCount, segCountX2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; cmapFormat = $f.cmapFormat; err = $f.err; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; language = $f.language; language$1 = $f.language$1; length = $f.length; nGroups = $f.nGroups; offset = $f.offset; segCount = $f.segCount; segCountX2 = $f.segCountX2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = parseSubtables(f.cmap, "cmap", 4, 8, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		offset = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		offset = ((u32(f.cmap, offset + 4 >> 0) >> 0));
		if (offset <= 0 || offset > f.cmap.$length) {
			$s = -1; return new FormatError("bad cmap offset");
		}
		cmapFormat = u16(f.cmap, offset);
			_1 = cmapFormat;
			/* */ if (_1 === (4)) { $s = 3; continue; }
			/* */ if (_1 === (12)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (4)) { */ case 3:
				language = u16(f.cmap, offset + 4 >> 0);
				/* */ if (!((language === 0))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!((language === 0))) { */ case 6:
					_r$1 = fmt.Sprintf("language: %d", new sliceType$7([new $Uint16(language)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$s = -1; return new UnsupportedError((_r$1));
				/* } */ case 7:
				segCountX2 = ((u16(f.cmap, offset + 6 >> 0) >> 0));
				/* */ if ((_r$2 = segCountX2 % 2, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 1) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((_r$2 = segCountX2 % 2, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 1) { */ case 9:
					_r$3 = fmt.Sprintf("bad segCountX2: %d", new sliceType$7([new $Int(segCountX2)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$s = -1; return new FormatError((_r$3));
				/* } */ case 10:
				segCount = (_q = segCountX2 / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				offset = offset + (14) >> 0;
				f.cm = $makeSlice(sliceType$8, segCount);
				i = 0;
				while (true) {
					if (!(i < segCount)) { break; }
					(x = f.cm, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).end = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i = i + (1) >> 0;
				}
				offset = offset + (2) >> 0;
				i$1 = 0;
				while (true) {
					if (!(i$1 < segCount)) { break; }
					(x$1 = f.cm, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])).start = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i$1 = i$1 + (1) >> 0;
				}
				i$2 = 0;
				while (true) {
					if (!(i$2 < segCount)) { break; }
					(x$2 = f.cm, ((i$2 < 0 || i$2 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$2])).delta = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i$2 = i$2 + (1) >> 0;
				}
				i$3 = 0;
				while (true) {
					if (!(i$3 < segCount)) { break; }
					(x$3 = f.cm, ((i$3 < 0 || i$3 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$3])).offset = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i$3 = i$3 + (1) >> 0;
				}
				f.cmapIndexes = $subslice(f.cmap, offset);
				$s = -1; return $ifaceNil;
			/* } else if (_1 === (12)) { */ case 4:
				/* */ if (!((u16(f.cmap, offset + 2 >> 0) === 0))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!((u16(f.cmap, offset + 2 >> 0) === 0))) { */ case 12:
					_r$4 = fmt.Sprintf("cmap format: % x", new sliceType$7([$subslice(f.cmap, offset, (offset + 4 >> 0))])); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$s = -1; return new FormatError((_r$4));
				/* } */ case 13:
				length = u32(f.cmap, offset + 4 >> 0);
				language$1 = u32(f.cmap, offset + 8 >> 0);
				/* */ if (!((language$1 === 0))) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!((language$1 === 0))) { */ case 15:
					_r$5 = fmt.Sprintf("language: %d", new sliceType$7([new $Uint32(language$1)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$s = -1; return new UnsupportedError((_r$5));
				/* } */ case 16:
				nGroups = u32(f.cmap, offset + 12 >> 0);
				if (!((length === (($imul(12, nGroups) >>> 0) + 16 >>> 0)))) {
					$s = -1; return new FormatError("inconsistent cmap length");
				}
				offset = offset + (16) >> 0;
				f.cm = $makeSlice(sliceType$8, nGroups);
				i$4 = 0;
				while (true) {
					if (!(i$4 < nGroups)) { break; }
					(x$4 = f.cm, ((i$4 < 0 || i$4 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i$4])).start = u32(f.cmap, offset + 0 >> 0);
					(x$5 = f.cm, ((i$4 < 0 || i$4 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i$4])).end = u32(f.cmap, offset + 4 >> 0);
					(x$7 = f.cm, ((i$4 < 0 || i$4 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i$4])).delta = u32(f.cmap, offset + 8 >> 0) - (x$6 = f.cm, ((i$4 < 0 || i$4 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i$4])).start >>> 0;
					offset = offset + (12) >> 0;
					i$4 = i$4 + (1) >>> 0;
				}
				$s = -1; return $ifaceNil;
			/* } */ case 5:
		case 2:
		_r$6 = fmt.Sprintf("cmap format: %d", new sliceType$7([new $Uint16(cmapFormat)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return new UnsupportedError((_r$6));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseCmap }; } $f._1 = _1; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.cmapFormat = cmapFormat; $f.err = err; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.language = language; $f.language$1 = language$1; $f.length = length; $f.nGroups = nGroups; $f.offset = offset; $f.segCount = segCount; $f.segCountX2 = segCountX2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseCmap = function() { return this.$val.parseCmap(); };
	Font.ptr.prototype.parseHead = function() {
		var _1, _r, _r$1, f, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (!((f.head.$length === 54))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((f.head.$length === 54))) { */ case 1:
			_r = fmt.Sprintf("bad head length: %d", new sliceType$7([new $Int(f.head.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r));
		/* } */ case 2:
		f.fUnitsPerEm = ((u16(f.head, 18) >> 0));
		f.bounds.Min.X = ((((u16(f.head, 36) << 16 >> 16)) >> 0));
		f.bounds.Min.Y = ((((u16(f.head, 38) << 16 >> 16)) >> 0));
		f.bounds.Max.X = ((((u16(f.head, 40) << 16 >> 16)) >> 0));
		f.bounds.Max.Y = ((((u16(f.head, 42) << 16 >> 16)) >> 0));
			i = u16(f.head, 50);
			_1 = i;
			/* */ if (_1 === (0)) { $s = 5; continue; }
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (0)) { */ case 5:
				f.locaOffsetFormat = 1;
				$s = 8; continue;
			/* } else if (_1 === (1)) { */ case 6:
				f.locaOffsetFormat = 2;
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = fmt.Sprintf("bad indexToLocFormat: %d", new sliceType$7([new $Uint16(i)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return new FormatError((_r$1));
			/* } */ case 8:
		case 4:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseHead }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseHead = function() { return this.$val.parseHead(); };
	Font.ptr.prototype.parseHhea = function() {
		var _r, _r$1, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (!((f.hhea.$length === 36))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((f.hhea.$length === 36))) { */ case 1:
			_r = fmt.Sprintf("bad hhea length: %d", new sliceType$7([new $Int(f.hhea.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r));
		/* } */ case 2:
		f.ascent = ((((u16(f.hhea, 4) << 16 >> 16)) >> 0));
		f.descent = ((((u16(f.hhea, 6) << 16 >> 16)) >> 0));
		f.nHMetric = ((u16(f.hhea, 34) >> 0));
		/* */ if (!(((($imul(4, f.nHMetric)) + ($imul(2, ((f.nGlyph - f.nHMetric >> 0)))) >> 0) === f.hmtx.$length))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(((($imul(4, f.nHMetric)) + ($imul(2, ((f.nGlyph - f.nHMetric >> 0)))) >> 0) === f.hmtx.$length))) { */ case 4:
			_r$1 = fmt.Sprintf("bad hmtx length: %d", new sliceType$7([new $Int(f.hmtx.$length)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r$1));
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseHhea }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseHhea = function() { return this.$val.parseHhea(); };
	Font.ptr.prototype.parseKern = function() {
		var _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, coverage, f, length, n, offset, version, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; coverage = $f.coverage; f = $f.f; length = $f.length; n = $f.n; offset = $f.offset; version = $f.version; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f.kern.$length === 0) {
			if (!((f.nKern === 0))) {
				$s = -1; return new FormatError("bad kern table length");
			}
			$s = -1; return $ifaceNil;
		}
		if (f.kern.$length < 18) {
			$s = -1; return new FormatError("kern data too short");
		}
		_tmp = u16(f.kern, 0);
		_tmp$1 = 2;
		version = _tmp;
		offset = _tmp$1;
		/* */ if (!((version === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((version === 0))) { */ case 1:
			_r = fmt.Sprintf("kern version: %d", new sliceType$7([new $Uint16(version)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new UnsupportedError((_r));
		/* } */ case 2:
		_tmp$2 = u16(f.kern, offset);
		_tmp$3 = offset + 2 >> 0;
		n = _tmp$2;
		offset = _tmp$3;
		if (n === 0) {
			$s = -1; return new UnsupportedError("kern nTables: 0");
		}
		offset = offset + (2) >> 0;
		_tmp$4 = ((u16(f.kern, offset) >> 0));
		_tmp$5 = offset + 2 >> 0;
		length = _tmp$4;
		offset = _tmp$5;
		_tmp$6 = u16(f.kern, offset);
		_tmp$7 = offset + 2 >> 0;
		coverage = _tmp$6;
		offset = _tmp$7;
		/* */ if (!((coverage === 1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((coverage === 1))) { */ case 4:
			_r$1 = fmt.Sprintf("kern coverage: 0x%04x", new sliceType$7([new $Uint16(coverage)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return new UnsupportedError((_r$1));
		/* } */ case 5:
		_tmp$8 = ((u16(f.kern, offset) >> 0));
		_tmp$9 = offset + 2 >> 0;
		f.nKern = _tmp$8;
		offset = _tmp$9;
		if (!((($imul(6, f.nKern)) === (length - 14 >> 0)))) {
			$s = -1; return new FormatError("bad kern table length");
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseKern }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.coverage = coverage; $f.f = f; $f.length = length; $f.n = n; $f.offset = offset; $f.version = version; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseKern = function() { return this.$val.parseKern(); };
	Font.ptr.prototype.parseMaxp = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (!((f.maxp.$length === 32))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((f.maxp.$length === 32))) { */ case 1:
			_r = fmt.Sprintf("bad maxp length: %d", new sliceType$7([new $Int(f.maxp.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r));
		/* } */ case 2:
		f.nGlyph = ((u16(f.maxp, 4) >> 0));
		f.maxTwilightPoints = u16(f.maxp, 16);
		f.maxStorage = u16(f.maxp, 18);
		f.maxFunctionDefs = u16(f.maxp, 20);
		f.maxStackElements = u16(f.maxp, 24);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseMaxp }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseMaxp = function() { return this.$val.parseMaxp(); };
	Font.ptr.prototype.scale = function(x) {
		var _q, _q$1, _q$2, f, x;
		f = this;
		if (x >= 0) {
			x = x + ((_q = ((f.fUnitsPerEm >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		} else {
			x = x - ((_q$1 = ((f.fUnitsPerEm >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		}
		return (_q$2 = x / ((f.fUnitsPerEm >> 0)), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Font.prototype.scale = function(x) { return this.$val.scale(x); };
	Font.ptr.prototype.Bounds = function(scale) {
		var b, f, scale;
		f = this;
		b = $clone(f.bounds, fixed.Rectangle26_6);
		b.Min.X = f.scale($imul(scale, b.Min.X));
		b.Min.Y = f.scale($imul(scale, b.Min.Y));
		b.Max.X = f.scale($imul(scale, b.Max.X));
		b.Max.Y = f.scale($imul(scale, b.Max.Y));
		return b;
	};
	Font.prototype.Bounds = function(scale) { return this.$val.Bounds(scale); };
	Font.ptr.prototype.FUnitsPerEm = function() {
		var f;
		f = this;
		return f.fUnitsPerEm;
	};
	Font.prototype.FUnitsPerEm = function() { return this.$val.FUnitsPerEm(); };
	Font.ptr.prototype.Index = function(x) {
		var _q, _tmp, _tmp$1, c, cm$1, f, h, i, j, offset, x, x$1;
		f = this;
		c = ((x >>> 0));
		_tmp = 0;
		_tmp$1 = f.cm.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cm$1 = (x$1 = f.cm, ((h < 0 || h >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + h]));
			if (c < cm$1.start) {
				j = h;
			} else if (cm$1.end < c) {
				i = h + 1 >> 0;
			} else if (cm$1.offset === 0) {
				return (((c + cm$1.delta >>> 0) << 16 >>> 16));
			} else {
				offset = ((cm$1.offset >> 0)) + ($imul(2, (((h - f.cm.$length >> 0) + (((c - cm$1.start >>> 0) >> 0)) >> 0)))) >> 0;
				return ((u16(f.cmapIndexes, offset) << 16 >>> 16));
			}
		}
		return 0;
	};
	Font.prototype.Index = function(x) { return this.$val.Index(x); };
	Font.ptr.prototype.Name = function(id) {
		var _i, _i$1, _q, _r, _ref, _ref$1, _tmp, _tmp$1, _tuple, c, dst, err, f, i, i$1, id, length, offset, platformID, src, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _q = $f._q; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; c = $f.c; dst = $f.dst; err = $f.err; f = $f.f; i = $f.i; i$1 = $f.i$1; id = $f.id; length = $f.length; offset = $f.offset; platformID = $f.platformID; src = $f.src; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		id = [id];
		f = this;
		_r = parseSubtables(f.name, "name", 6, 12, (function(id) { return function(b) {
			var b;
			return ((u16(b, 6) << 16 >>> 16)) === id[0];
		}; })(id)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		platformID = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return "";
		}
		_tmp = u16(f.name, 4) + u16(f.name, x + 10 >> 0) << 16 >>> 16;
		_tmp$1 = u16(f.name, x + 8 >> 0);
		offset = _tmp;
		length = _tmp$1;
		src = $subslice(f.name, offset, (offset + length << 16 >>> 16));
		dst = sliceType$6.nil;
		if (!((platformID === 1))) {
			if (!(((src.$length & 1) === 0))) {
				$s = -1; return "";
			}
			dst = $makeSlice(sliceType$6, (_q = src.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			_ref = dst;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = printable(u16(src, $imul(2, i))));
				_i++;
			}
		} else {
			dst = $makeSlice(sliceType$6, src.$length);
			_ref$1 = src;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				((i$1 < 0 || i$1 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i$1] = printable(((c << 16 >>> 16))));
				_i$1++;
			}
		}
		$s = -1; return ($bytesToString(dst));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.Name }; } $f._i = _i; $f._i$1 = _i$1; $f._q = _q; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.c = c; $f.dst = dst; $f.err = err; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.id = id; $f.length = length; $f.offset = offset; $f.platformID = platformID; $f.src = src; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.Name = function(id) { return this.$val.Name(id); };
	printable = function(r) {
		var r;
		if (32 <= r && r < 127) {
			return ((r << 24 >>> 24));
		}
		return 63;
	};
	Font.ptr.prototype.unscaledHMetric = function(i) {
		var f, h, i, j, p;
		h = new HMetric.ptr(0, 0);
		f = this;
		j = ((i >> 0));
		if (j < 0 || f.nGlyph <= j) {
			HMetric.copy(h, new HMetric.ptr(0, 0));
			return h;
		}
		if (j >= f.nHMetric) {
			p = $imul(4, ((f.nHMetric - 1 >> 0)));
			HMetric.copy(h, new HMetric.ptr(((u16(f.hmtx, p) >> 0)), ((((u16(f.hmtx, (p + ($imul(2, ((j - f.nHMetric >> 0)))) >> 0) + 4 >> 0) << 16 >> 16)) >> 0))));
			return h;
		}
		HMetric.copy(h, new HMetric.ptr(((u16(f.hmtx, $imul(4, j)) >> 0)), ((((u16(f.hmtx, ($imul(4, j)) + 2 >> 0) << 16 >> 16)) >> 0))));
		return h;
	};
	Font.prototype.unscaledHMetric = function(i) { return this.$val.unscaledHMetric(i); };
	Font.ptr.prototype.HMetric = function(scale, i) {
		var f, h, i, scale;
		f = this;
		h = $clone(f.unscaledHMetric(i), HMetric);
		h.AdvanceWidth = f.scale($imul(scale, h.AdvanceWidth));
		h.LeftSideBearing = f.scale($imul(scale, h.LeftSideBearing));
		return h;
	};
	Font.prototype.HMetric = function(scale, i) { return this.$val.HMetric(scale, i); };
	Font.ptr.prototype.unscaledVMetric = function(i, yMax) {
		var f, i, j, sTypoAscender, sTypoDescender, v, yMax;
		v = new VMetric.ptr(0, 0);
		f = this;
		j = ((i >> 0));
		if (j < 0 || f.nGlyph <= j) {
			VMetric.copy(v, new VMetric.ptr(0, 0));
			return v;
		}
		if ((($imul(4, j)) + 4 >> 0) <= f.vmtx.$length) {
			VMetric.copy(v, new VMetric.ptr(((u16(f.vmtx, $imul(4, j)) >> 0)), ((((u16(f.vmtx, ($imul(4, j)) + 2 >> 0) << 16 >> 16)) >> 0))));
			return v;
		}
		if (f.os2.$length >= 72) {
			sTypoAscender = ((((u16(f.os2, 68) << 16 >> 16)) >> 0));
			sTypoDescender = ((((u16(f.os2, 70) << 16 >> 16)) >> 0));
			VMetric.copy(v, new VMetric.ptr(sTypoAscender - sTypoDescender >> 0, sTypoAscender - yMax >> 0));
			return v;
		}
		VMetric.copy(v, new VMetric.ptr(((f.fUnitsPerEm >> 0)), 0));
		return v;
	};
	Font.prototype.unscaledVMetric = function(i, yMax) { return this.$val.unscaledVMetric(i, yMax); };
	Font.ptr.prototype.VMetric = function(scale, i) {
		var f, i, scale, v;
		f = this;
		v = $clone(f.unscaledVMetric(i, 0), VMetric);
		v.AdvanceHeight = f.scale($imul(scale, v.AdvanceHeight));
		v.TopSideBearing = f.scale($imul(scale, v.TopSideBearing));
		return v;
	};
	Font.prototype.VMetric = function(scale, i) { return this.$val.VMetric(scale, i); };
	Font.ptr.prototype.Kern = function(scale, i0, i1) {
		var _q, _tmp, _tmp$1, f, g, hi, i, i0, i1, ig, lo, scale;
		f = this;
		if (f.nKern === 0) {
			return 0;
		}
		g = ((((i0 >>> 0)) << 16 >>> 0) | ((i1 >>> 0))) >>> 0;
		_tmp = 0;
		_tmp$1 = f.nKern;
		lo = _tmp;
		hi = _tmp$1;
		while (true) {
			if (!(lo < hi)) { break; }
			i = (_q = ((lo + hi >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			ig = u32(f.kern, 18 + ($imul(6, i)) >> 0);
			if (ig < g) {
				lo = i + 1 >> 0;
			} else if (ig > g) {
				hi = i;
			} else {
				return f.scale($imul(scale, ((((u16(f.kern, 22 + ($imul(6, i)) >> 0) << 16 >> 16)) >> 0))));
			}
		}
		return 0;
	};
	Font.prototype.Kern = function(scale, i0, i1) { return this.$val.Kern(scale, i0, i1); };
	Parse = function(ttf) {
		var _r, _tuple, err, font$1, ttf, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; font$1 = $f.font$1; ttf = $f.ttf; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		font$1 = ptrType$1.nil;
		err = $ifaceNil;
		_r = parse(ttf, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		font$1 = _tuple[0];
		err = _tuple[1];
		$s = -1; return [font$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.font$1 = font$1; $f.ttf = ttf; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(ttf, offset) {
		var _1, _2, _q, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, err, f, font$1, i, magic, n, numFonts, offset, offset$1, originalOffset, ttcVersion, ttf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; err = $f.err; f = $f.f; font$1 = $f.font$1; i = $f.i; magic = $f.magic; n = $f.n; numFonts = $f.numFonts; offset = $f.offset; offset$1 = $f.offset$1; originalOffset = $f.originalOffset; ttcVersion = $f.ttcVersion; ttf = $f.ttf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		font$1 = ptrType$1.nil;
		err = $ifaceNil;
		if ((ttf.$length - offset >> 0) < 12) {
			err = new FormatError("TTF data is too short");
			$s = -1; return [font$1, err];
		}
		originalOffset = offset;
		_tmp = u32(ttf, offset);
		_tmp$1 = offset + 4 >> 0;
		magic = _tmp;
		offset = _tmp$1;
			_1 = magic;
			/* */ if (_1 === (65536)) { $s = 2; continue; }
			/* */ if (_1 === (1953784678)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (65536)) { */ case 2:
				$s = 5; continue;
			/* } else if (_1 === (1953784678)) { */ case 3:
				if (!((originalOffset === 0))) {
					err = new FormatError("recursive TTC");
					$s = -1; return [font$1, err];
				}
				_tmp$2 = u32(ttf, offset);
				_tmp$3 = offset + 4 >> 0;
				ttcVersion = _tmp$2;
				offset$1 = _tmp$3;
				if (!((ttcVersion === 65536)) && !((ttcVersion === 131072))) {
					err = new FormatError("bad TTC version");
					$s = -1; return [font$1, err];
				}
				_tmp$4 = ((u32(ttf, offset$1) >> 0));
				_tmp$5 = offset$1 + 4 >> 0;
				numFonts = _tmp$4;
				offset$1 = _tmp$5;
				if (numFonts <= 0) {
					err = new FormatError("bad number of TTC fonts");
					$s = -1; return [font$1, err];
				}
				if ((_q = $subslice(ttf, offset$1).$length / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) < numFonts) {
					err = new FormatError("TTC offset table is too short");
					$s = -1; return [font$1, err];
				}
				offset$1 = ((u32(ttf, offset$1) >> 0));
				if (offset$1 <= 0 || offset$1 > ttf.$length) {
					err = new FormatError("bad TTC offset");
					$s = -1; return [font$1, err];
				}
				_r = parse(ttf, offset$1); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				font$1 = _tuple[0];
				err = _tuple[1];
				$s = -1; return [font$1, err];
			/* } else { */ case 4:
				err = new FormatError("bad TTF version");
				$s = -1; return [font$1, err];
			/* } */ case 5:
		case 1:
		_tmp$6 = ((u16(ttf, offset) >> 0));
		_tmp$7 = offset + 2 >> 0;
		n = _tmp$6;
		offset = _tmp$7;
		offset = offset + (6) >> 0;
		if (ttf.$length < (($imul(16, n)) + offset >> 0)) {
			err = new FormatError("TTF data is too short");
			$s = -1; return [font$1, err];
		}
		f = new Font.ptr(sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$8.nil, 0, 0, 0, 0, 0, 0, 0, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)), 0, 0, 0, 0);
		i = 0;
		/* while (true) { */ case 7:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 8; continue; }
			x = ($imul(16, i)) + offset >> 0;
				_2 = ($bytesToString($subslice(ttf, x, (x + 4 >> 0))));
				/* */ if (_2 === ("cmap")) { $s = 10; continue; }
				/* */ if (_2 === ("cvt ")) { $s = 11; continue; }
				/* */ if (_2 === ("fpgm")) { $s = 12; continue; }
				/* */ if (_2 === ("glyf")) { $s = 13; continue; }
				/* */ if (_2 === ("hdmx")) { $s = 14; continue; }
				/* */ if (_2 === ("head")) { $s = 15; continue; }
				/* */ if (_2 === ("hhea")) { $s = 16; continue; }
				/* */ if (_2 === ("hmtx")) { $s = 17; continue; }
				/* */ if (_2 === ("kern")) { $s = 18; continue; }
				/* */ if (_2 === ("loca")) { $s = 19; continue; }
				/* */ if (_2 === ("maxp")) { $s = 20; continue; }
				/* */ if (_2 === ("name")) { $s = 21; continue; }
				/* */ if (_2 === ("OS/2")) { $s = 22; continue; }
				/* */ if (_2 === ("prep")) { $s = 23; continue; }
				/* */ if (_2 === ("vmtx")) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (_2 === ("cmap")) { */ case 10:
					_r$1 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 26; case 26: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$1 = _r$1;
					f.cmap = _tuple$1[0];
					err = _tuple$1[1];
					$s = 25; continue;
				/* } else if (_2 === ("cvt ")) { */ case 11:
					_r$2 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 27; case 27: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$2 = _r$2;
					f.cvt = _tuple$2[0];
					err = _tuple$2[1];
					$s = 25; continue;
				/* } else if (_2 === ("fpgm")) { */ case 12:
					_r$3 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 28; case 28: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3;
					f.fpgm = _tuple$3[0];
					err = _tuple$3[1];
					$s = 25; continue;
				/* } else if (_2 === ("glyf")) { */ case 13:
					_r$4 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$4 = _r$4;
					f.glyf = _tuple$4[0];
					err = _tuple$4[1];
					$s = 25; continue;
				/* } else if (_2 === ("hdmx")) { */ case 14:
					_r$5 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 30; case 30: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$5 = _r$5;
					f.hdmx = _tuple$5[0];
					err = _tuple$5[1];
					$s = 25; continue;
				/* } else if (_2 === ("head")) { */ case 15:
					_r$6 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$6 = _r$6;
					f.head = _tuple$6[0];
					err = _tuple$6[1];
					$s = 25; continue;
				/* } else if (_2 === ("hhea")) { */ case 16:
					_r$7 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 32; case 32: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$7 = _r$7;
					f.hhea = _tuple$7[0];
					err = _tuple$7[1];
					$s = 25; continue;
				/* } else if (_2 === ("hmtx")) { */ case 17:
					_r$8 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 33; case 33: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple$8 = _r$8;
					f.hmtx = _tuple$8[0];
					err = _tuple$8[1];
					$s = 25; continue;
				/* } else if (_2 === ("kern")) { */ case 18:
					_r$9 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 34; case 34: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_tuple$9 = _r$9;
					f.kern = _tuple$9[0];
					err = _tuple$9[1];
					$s = 25; continue;
				/* } else if (_2 === ("loca")) { */ case 19:
					_r$10 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 35; case 35: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_tuple$10 = _r$10;
					f.loca = _tuple$10[0];
					err = _tuple$10[1];
					$s = 25; continue;
				/* } else if (_2 === ("maxp")) { */ case 20:
					_r$11 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 36; case 36: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_tuple$11 = _r$11;
					f.maxp = _tuple$11[0];
					err = _tuple$11[1];
					$s = 25; continue;
				/* } else if (_2 === ("name")) { */ case 21:
					_r$12 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 37; case 37: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_tuple$12 = _r$12;
					f.name = _tuple$12[0];
					err = _tuple$12[1];
					$s = 25; continue;
				/* } else if (_2 === ("OS/2")) { */ case 22:
					_r$13 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 38; case 38: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_tuple$13 = _r$13;
					f.os2 = _tuple$13[0];
					err = _tuple$13[1];
					$s = 25; continue;
				/* } else if (_2 === ("prep")) { */ case 23:
					_r$14 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 39; case 39: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_tuple$14 = _r$14;
					f.prep = _tuple$14[0];
					err = _tuple$14[1];
					$s = 25; continue;
				/* } else if (_2 === ("vmtx")) { */ case 24:
					_r$15 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 40; case 40: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_tuple$15 = _r$15;
					f.vmtx = _tuple$15[0];
					err = _tuple$15[1];
				/* } */ case 25:
			case 9:
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [font$1, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		_r$16 = f.parseHead(); /* */ $s = 41; case 41: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		err = _r$16;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$17 = f.parseMaxp(); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		err = _r$17;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$18 = f.parseCmap(); /* */ $s = 43; case 43: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		err = _r$18;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$19 = f.parseKern(); /* */ $s = 44; case 44: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		err = _r$19;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$20 = f.parseHhea(); /* */ $s = 45; case 45: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		err = _r$20;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		font$1 = f;
		$s = -1; return [font$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f._1 = _1; $f._2 = _2; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.err = err; $f.f = f; $f.font$1 = font$1; $f.i = i; $f.magic = magic; $f.n = n; $f.numFonts = numFonts; $f.offset = offset; $f.offset$1 = offset$1; $f.originalOffset = originalOffset; $f.ttcVersion = ttcVersion; $f.ttf = ttf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType.methods = [{prop: "size", name: "size", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Float64], false)}, {prop: "dpi", name: "dpi", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Float64], false)}, {prop: "hinting", name: "hinting", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [font.Hinting], false)}, {prop: "glyphCacheEntries", name: "glyphCacheEntries", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Int], false)}, {prop: "subPixelsX", name: "subPixelsX", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Uint32, fixed.Int26_6, fixed.Int26_6], false)}, {prop: "subPixelsY", name: "subPixelsY", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Uint32, fixed.Int26_6, fixed.Int26_6], false)}];
	ptrType$4.methods = [{prop: "index", name: "index", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int32], [Index], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Metrics", name: "Metrics", pkg: "", typ: $funcType([], [font.Metrics], false)}, {prop: "Kern", name: "Kern", pkg: "", typ: $funcType([$Int32, $Int32], [fixed.Int26_6], false)}, {prop: "Glyph", name: "Glyph", pkg: "", typ: $funcType([fixed.Point26_6, $Int32], [image.Rectangle, image.Image, image.Point, fixed.Int26_6, $Bool], false)}, {prop: "GlyphBounds", name: "GlyphBounds", pkg: "", typ: $funcType([$Int32], [fixed.Rectangle26_6, fixed.Int26_6, $Bool], false)}, {prop: "GlyphAdvance", name: "GlyphAdvance", pkg: "", typ: $funcType([$Int32], [fixed.Int26_6, $Bool], false)}, {prop: "rasterize", name: "rasterize", pkg: "github.com/golang/freetype/truetype", typ: $funcType([Index, fixed.Int26_6, fixed.Int26_6], [glyphCacheVal, $Bool], false)}, {prop: "drawContour", name: "drawContour", pkg: "github.com/golang/freetype/truetype", typ: $funcType([sliceType$3, fixed.Int26_6, fixed.Int26_6], [], false)}];
	facePainter.methods = [{prop: "Paint", name: "Paint", pkg: "", typ: $funcType([sliceType$9, $Bool], [], false)}];
	ptrType$5.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([ptrType$1, fixed.Int26_6, Index, font.Hinting], [$error], false)}, {prop: "load", name: "load", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Uint32, Index, $Bool], [$error], false)}, {prop: "loadSimple", name: "loadSimple", pkg: "github.com/golang/freetype/truetype", typ: $funcType([sliceType$6, $Int], [sliceType$6], false)}, {prop: "loadCompound", name: "loadCompound", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Uint32, HMetric, Index, sliceType$6, $Bool], [$error], false)}, {prop: "addPhantomsAndScale", name: "addPhantomsAndScale", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int, $Int, $Bool, $Bool], [], false)}];
	ptrType$6.methods = [{prop: "init", name: "init", pkg: "github.com/golang/freetype/truetype", typ: $funcType([ptrType$1, fixed.Int26_6], [$error], false)}, {prop: "run", name: "run", pkg: "github.com/golang/freetype/truetype", typ: $funcType([sliceType$6, sliceType$3, sliceType$3, sliceType$3, sliceType$2], [$error], false)}, {prop: "initializeScaledCVT", name: "initializeScaledCVT", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [], false)}, {prop: "getScaledCVT", name: "getScaledCVT", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int32], [fixed.Int26_6], false)}, {prop: "setScaledCVT", name: "setScaledCVT", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int32, fixed.Int26_6], [], false)}, {prop: "point", name: "point", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Uint32, pointType, $Int32], [ptrType$3], false)}, {prop: "move", name: "move", pkg: "github.com/golang/freetype/truetype", typ: $funcType([ptrType$3, fixed.Int26_6, $Bool], [], false)}, {prop: "iupInterp", name: "iupInterp", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Bool, $Int, $Int, $Int, $Int], [], false)}, {prop: "iupShift", name: "iupShift", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Bool, $Int, $Int, $Int], [], false)}, {prop: "displacement", name: "displacement", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Bool], [$Uint32, $Int32, fixed.Int26_6, $Bool], false)}, {prop: "round", name: "round", pkg: "github.com/golang/freetype/truetype", typ: $funcType([fixed.Int26_6], [fixed.Int26_6], false)}];
	FormatError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnsupportedError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "parseCmap", name: "parseCmap", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseHead", name: "parseHead", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseHhea", name: "parseHhea", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseKern", name: "parseKern", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseMaxp", name: "parseMaxp", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "scale", name: "scale", pkg: "github.com/golang/freetype/truetype", typ: $funcType([fixed.Int26_6], [fixed.Int26_6], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([fixed.Int26_6], [fixed.Rectangle26_6], false)}, {prop: "FUnitsPerEm", name: "FUnitsPerEm", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int32], [Index], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([NameID], [$String], false)}, {prop: "unscaledHMetric", name: "unscaledHMetric", pkg: "github.com/golang/freetype/truetype", typ: $funcType([Index], [HMetric], false)}, {prop: "HMetric", name: "HMetric", pkg: "", typ: $funcType([fixed.Int26_6, Index], [HMetric], false)}, {prop: "unscaledVMetric", name: "unscaledVMetric", pkg: "github.com/golang/freetype/truetype", typ: $funcType([Index, fixed.Int26_6], [VMetric], false)}, {prop: "VMetric", name: "VMetric", pkg: "", typ: $funcType([fixed.Int26_6, Index], [VMetric], false)}, {prop: "Kern", name: "Kern", pkg: "", typ: $funcType([fixed.Int26_6, Index, Index], [fixed.Int26_6], false)}];
	Options.init("", [{prop: "Size", name: "Size", anonymous: false, exported: true, typ: $Float64, tag: ""}, {prop: "DPI", name: "DPI", anonymous: false, exported: true, typ: $Float64, tag: ""}, {prop: "Hinting", name: "Hinting", anonymous: false, exported: true, typ: font.Hinting, tag: ""}, {prop: "GlyphCacheEntries", name: "GlyphCacheEntries", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "SubPixelsX", name: "SubPixelsX", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "SubPixelsY", name: "SubPixelsY", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	glyphCacheEntry.init("github.com/golang/freetype/truetype", [{prop: "key", name: "key", anonymous: false, exported: false, typ: glyphCacheKey, tag: ""}, {prop: "val", name: "val", anonymous: false, exported: false, typ: glyphCacheVal, tag: ""}]);
	glyphCacheKey.init("github.com/golang/freetype/truetype", [{prop: "index", name: "index", anonymous: false, exported: false, typ: Index, tag: ""}, {prop: "fx", name: "fx", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fy", name: "fy", anonymous: false, exported: false, typ: $Uint8, tag: ""}]);
	glyphCacheVal.init("github.com/golang/freetype/truetype", [{prop: "advanceWidth", name: "advanceWidth", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: image.Point, tag: ""}, {prop: "gw", name: "gw", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "gh", name: "gh", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	indexCacheEntry.init("github.com/golang/freetype/truetype", [{prop: "rune", name: "rune", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: Index, tag: ""}]);
	face.init("github.com/golang/freetype/truetype", [{prop: "f", name: "f", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hinting", name: "hinting", anonymous: false, exported: false, typ: font.Hinting, tag: ""}, {prop: "scale", name: "scale", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelX", name: "subPixelX", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "subPixelBiasX", name: "subPixelBiasX", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelMaskX", name: "subPixelMaskX", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelY", name: "subPixelY", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "subPixelBiasY", name: "subPixelBiasY", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelMaskY", name: "subPixelMaskY", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "masks", name: "masks", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "glyphCache", name: "glyphCache", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: raster.Rasterizer, tag: ""}, {prop: "p", name: "p", anonymous: false, exported: false, typ: raster.Painter, tag: ""}, {prop: "paintOffset", name: "paintOffset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxw", name: "maxw", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxh", name: "maxh", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "glyphBuf", name: "glyphBuf", anonymous: false, exported: false, typ: GlyphBuf, tag: ""}, {prop: "indexCache", name: "indexCache", anonymous: false, exported: false, typ: arrayType$8, tag: ""}]);
	facePainter.init("github.com/golang/freetype/truetype", [{prop: "a", name: "a", anonymous: false, exported: false, typ: ptrType$4, tag: ""}]);
	Point.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	GlyphBuf.init("github.com/golang/freetype/truetype", [{prop: "AdvanceWidth", name: "AdvanceWidth", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Bounds", name: "Bounds", anonymous: false, exported: true, typ: fixed.Rectangle26_6, tag: ""}, {prop: "Points", name: "Points", anonymous: false, exported: true, typ: sliceType$3, tag: ""}, {prop: "Unhinted", name: "Unhinted", anonymous: false, exported: true, typ: sliceType$3, tag: ""}, {prop: "InFontUnits", name: "InFontUnits", anonymous: false, exported: true, typ: sliceType$3, tag: ""}, {prop: "Ends", name: "Ends", anonymous: false, exported: true, typ: sliceType$2, tag: ""}, {prop: "font", name: "font", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "scale", name: "scale", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "hinting", name: "hinting", anonymous: false, exported: false, typ: font.Hinting, tag: ""}, {prop: "hinter", name: "hinter", anonymous: false, exported: false, typ: hinter, tag: ""}, {prop: "phantomPoints", name: "phantomPoints", anonymous: false, exported: false, typ: arrayType$7, tag: ""}, {prop: "pp1x", name: "pp1x", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "metricsSet", name: "metricsSet", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "tmp", name: "tmp", anonymous: false, exported: false, typ: sliceType$3, tag: ""}]);
	callStackEntry.init("github.com/golang/freetype/truetype", [{prop: "program", name: "program", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "pc", name: "pc", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "loopCount", name: "loopCount", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	hinter.init("github.com/golang/freetype/truetype", [{prop: "stack", name: "stack", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "store", name: "store", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "functions", name: "functions", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "font", name: "font", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "scale", name: "scale", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "gs", name: "gs", anonymous: false, exported: false, typ: graphicsState, tag: ""}, {prop: "defaultGS", name: "defaultGS", anonymous: false, exported: false, typ: graphicsState, tag: ""}, {prop: "points", name: "points", anonymous: false, exported: false, typ: arrayType$6, tag: ""}, {prop: "ends", name: "ends", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "scaledCVTInitialized", name: "scaledCVTInitialized", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "scaledCVT", name: "scaledCVT", anonymous: false, exported: false, typ: sliceType$5, tag: ""}]);
	graphicsState.init("github.com/golang/freetype/truetype", [{prop: "pv", name: "pv", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "fv", name: "fv", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "dv", name: "dv", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "rp", name: "rp", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "zp", name: "zp", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "controlValueCutIn", name: "controlValueCutIn", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "singleWidthCutIn", name: "singleWidthCutIn", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "singleWidth", name: "singleWidth", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "deltaBase", name: "deltaBase", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "deltaShift", name: "deltaShift", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "minDist", name: "minDist", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "loop", name: "loop", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "roundPeriod", name: "roundPeriod", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "roundPhase", name: "roundPhase", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "roundThreshold", name: "roundThreshold", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "roundSuper45", name: "roundSuper45", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "autoFlip", name: "autoFlip", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	HMetric.init("", [{prop: "AdvanceWidth", name: "AdvanceWidth", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "LeftSideBearing", name: "LeftSideBearing", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}]);
	VMetric.init("", [{prop: "AdvanceHeight", name: "AdvanceHeight", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "TopSideBearing", name: "TopSideBearing", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}]);
	cm.init("github.com/golang/freetype/truetype", [{prop: "start", name: "start", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "end", name: "end", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "delta", name: "delta", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	Font.init("github.com/golang/freetype/truetype", [{prop: "cmap", name: "cmap", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "cvt", name: "cvt", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "fpgm", name: "fpgm", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "glyf", name: "glyf", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "hdmx", name: "hdmx", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "head", name: "head", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "hhea", name: "hhea", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "hmtx", name: "hmtx", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "kern", name: "kern", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "loca", name: "loca", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "maxp", name: "maxp", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "os2", name: "os2", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "prep", name: "prep", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "vmtx", name: "vmtx", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "cmapIndexes", name: "cmapIndexes", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "cm", name: "cm", anonymous: false, exported: false, typ: sliceType$8, tag: ""}, {prop: "locaOffsetFormat", name: "locaOffsetFormat", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nGlyph", name: "nGlyph", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nHMetric", name: "nHMetric", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nKern", name: "nKern", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "fUnitsPerEm", name: "fUnitsPerEm", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "ascent", name: "ascent", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "descent", name: "descent", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "bounds", name: "bounds", anonymous: false, exported: false, typ: fixed.Rectangle26_6, tag: ""}, {prop: "maxTwilightPoints", name: "maxTwilightPoints", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "maxStorage", name: "maxStorage", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "maxFunctionDefs", name: "maxFunctionDefs", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "maxStackElements", name: "maxStackElements", anonymous: false, exported: false, typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = raster.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = font.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fixed.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		globalDefaultGS = new graphicsState.ptr($toNativeArray($kindInt16, [16384, 0]), $toNativeArray($kindInt16, [16384, 0]), $toNativeArray($kindInt16, [16384, 0]), arrayType$1.zero(), $toNativeArray($kindInt32, [1, 1, 1]), 68, 0, 0, 9, 3, 64, 1, 64, 0, 32, false, true);
		popCount = $toNativeArray($kindUint8, [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 1, 0, 2, 2, 0, 0, 1, 2, 2, 1, 1, 3, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/inpututil"] = (function() {
	var $pkg = {}, $init, ebiten, hooks, sort, sync, inputState, sliceType, structType, sliceType$1, ptrType, mapType, mapType$1, mapType$2, mapType$3, mapType$4, mapType$5, theInputState, init;
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	hooks = $packages["github.com/hajimehoshi/ebiten/internal/hooks"];
	sort = $packages["sort"];
	sync = $packages["sync"];
	inputState = $pkg.inputState = $newType(0, $kindStruct, "inpututil.inputState", true, "github.com/hajimehoshi/ebiten/inpututil", false, function(keyDurations_, prevKeyDurations_, mouseButtonDurations_, prevMouseButtonDurations_, gamepadIDs_, prevGamepadIDs_, gamepadButtonDurations_, prevGamepadButtonDurations_, touchDurations_, prevTouchDurations_, m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.keyDurations = false;
			this.prevKeyDurations = false;
			this.mouseButtonDurations = false;
			this.prevMouseButtonDurations = false;
			this.gamepadIDs = false;
			this.prevGamepadIDs = false;
			this.gamepadButtonDurations = false;
			this.prevGamepadButtonDurations = false;
			this.touchDurations = false;
			this.prevTouchDurations = false;
			this.m = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			return;
		}
		this.keyDurations = keyDurations_;
		this.prevKeyDurations = prevKeyDurations_;
		this.mouseButtonDurations = mouseButtonDurations_;
		this.prevMouseButtonDurations = prevMouseButtonDurations_;
		this.gamepadIDs = gamepadIDs_;
		this.prevGamepadIDs = prevGamepadIDs_;
		this.gamepadButtonDurations = gamepadButtonDurations_;
		this.prevGamepadButtonDurations = prevGamepadButtonDurations_;
		this.touchDurations = touchDurations_;
		this.prevTouchDurations = prevTouchDurations_;
		this.m = m_;
	});
	sliceType = $sliceType(ebiten.MouseButton);
	structType = $structType("", []);
	sliceType$1 = $sliceType($Int);
	ptrType = $ptrType(inputState);
	mapType = $mapType(ebiten.Key, $Int);
	mapType$1 = $mapType(ebiten.MouseButton, $Int);
	mapType$2 = $mapType($Int, structType);
	mapType$3 = $mapType(ebiten.GamepadButton, $Int);
	mapType$4 = $mapType($Int, mapType$3);
	mapType$5 = $mapType($Int, $Int);
	init = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = hooks.AppendHookOnBeforeUpdate((function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = theInputState.update(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	inputState.ptr.prototype.update = function() {
		var _entry, _entry$1, _entry$10, _entry$11, _entry$12, _entry$13, _entry$14, _entry$15, _entry$16, _entry$17, _entry$18, _entry$19, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _i$1, _i$10, _i$2, _i$3, _i$4, _i$5, _i$6, _i$7, _i$8, _i$9, _key, _key$1, _key$10, _key$11, _key$12, _key$13, _key$14, _key$15, _key$2, _key$3, _key$4, _key$5, _key$6, _key$7, _key$8, _key$9, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _keys$5, _r, _ref, _ref$1, _ref$10, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, _tuple, _tuple$1, _tuple$2, b, b$1, b$2, d, ds, i, id, id$1, id$2, id$3, id$4, id$5, id$6, id$7, id$8, ids, idsToDelete, k, n, ok, ok$1, ok$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$11 = $f._entry$11; _entry$12 = $f._entry$12; _entry$13 = $f._entry$13; _entry$14 = $f._entry$14; _entry$15 = $f._entry$15; _entry$16 = $f._entry$16; _entry$17 = $f._entry$17; _entry$18 = $f._entry$18; _entry$19 = $f._entry$19; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _i = $f._i; _i$1 = $f._i$1; _i$10 = $f._i$10; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _i$7 = $f._i$7; _i$8 = $f._i$8; _i$9 = $f._i$9; _key = $f._key; _key$1 = $f._key$1; _key$10 = $f._key$10; _key$11 = $f._key$11; _key$12 = $f._key$12; _key$13 = $f._key$13; _key$14 = $f._key$14; _key$15 = $f._key$15; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _key$6 = $f._key$6; _key$7 = $f._key$7; _key$8 = $f._key$8; _key$9 = $f._key$9; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _keys$4 = $f._keys$4; _keys$5 = $f._keys$5; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$10 = $f._ref$10; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; _ref$9 = $f._ref$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; d = $f.d; ds = $f.ds; i = $f.i; id = $f.id; id$1 = $f.id$1; id$2 = $f.id$2; id$3 = $f.id$3; id$4 = $f.id$4; id$5 = $f.id$5; id$6 = $f.id$6; id$7 = $f.id$7; id$8 = $f.id$8; ids = $f.ids; idsToDelete = $f.idsToDelete; k = $f.k; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$r = i.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(i.m, "Unlock"), []]);
		k = 0;
		while (true) {
			if (!(k <= 99)) { break; }
			_key = k; (i.prevKeyDurations || $throwRuntimeError("assignment to entry in nil map"))[ebiten.Key.keyFor(_key)] = { k: _key, v: (_entry = i.keyDurations[ebiten.Key.keyFor(k)], _entry !== undefined ? _entry.v : 0) };
			if (ebiten.IsKeyPressed(k)) {
				_key$1 = k; (i.keyDurations || $throwRuntimeError("assignment to entry in nil map"))[ebiten.Key.keyFor(_key$1)] = { k: _key$1, v: (_entry$1 = i.keyDurations[ebiten.Key.keyFor(k)], _entry$1 !== undefined ? _entry$1.v : 0) + (1) >> 0 };
			} else {
				_key$2 = k; (i.keyDurations || $throwRuntimeError("assignment to entry in nil map"))[ebiten.Key.keyFor(_key$2)] = { k: _key$2, v: 0 };
			}
			k = k + (1) >> 0;
		}
		_ref = new sliceType([0, 1, 2]);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_key$3 = b; (i.prevMouseButtonDurations || $throwRuntimeError("assignment to entry in nil map"))[ebiten.MouseButton.keyFor(_key$3)] = { k: _key$3, v: (_entry$2 = i.mouseButtonDurations[ebiten.MouseButton.keyFor(b)], _entry$2 !== undefined ? _entry$2.v : 0) };
			if (ebiten.IsMouseButtonPressed(b)) {
				_key$4 = b; (i.mouseButtonDurations || $throwRuntimeError("assignment to entry in nil map"))[ebiten.MouseButton.keyFor(_key$4)] = { k: _key$4, v: (_entry$3 = i.mouseButtonDurations[ebiten.MouseButton.keyFor(b)], _entry$3 !== undefined ? _entry$3.v : 0) + (1) >> 0 };
			} else {
				_key$5 = b; (i.mouseButtonDurations || $throwRuntimeError("assignment to entry in nil map"))[ebiten.MouseButton.keyFor(_key$5)] = { k: _key$5, v: 0 };
			}
			_i++;
		}
		i.prevGamepadIDs = $makeMap($Int.keyFor, []);
		_ref$1 = i.gamepadIDs;
		_i$1 = 0;
		_keys = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys.length)) { break; }
			_entry$4 = _ref$1[_keys[_i$1]];
			if (_entry$4 === undefined) {
				_i$1++;
				continue;
			}
			id = _entry$4.k;
			_key$6 = id; (i.prevGamepadIDs || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$6)] = { k: _key$6, v: new structType.ptr() };
			_i$1++;
		}
		i.prevGamepadButtonDurations = $makeMap($Int.keyFor, []);
		_ref$2 = i.gamepadButtonDurations;
		_i$2 = 0;
		_keys$1 = $keys(_ref$2);
		while (true) {
			if (!(_i$2 < _keys$1.length)) { break; }
			_entry$5 = _ref$2[_keys$1[_i$2]];
			if (_entry$5 === undefined) {
				_i$2++;
				continue;
			}
			id$1 = _entry$5.k;
			ds = _entry$5.v;
			_key$7 = id$1; (i.prevGamepadButtonDurations || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$7)] = { k: _key$7, v: $makeMap(ebiten.GamepadButton.keyFor, []) };
			_ref$3 = ds;
			_i$3 = 0;
			_keys$2 = $keys(_ref$3);
			while (true) {
				if (!(_i$3 < _keys$2.length)) { break; }
				_entry$6 = _ref$3[_keys$2[_i$3]];
				if (_entry$6 === undefined) {
					_i$3++;
					continue;
				}
				b$1 = _entry$6.k;
				d = _entry$6.v;
				_key$8 = b$1; ((_entry$7 = i.prevGamepadButtonDurations[$Int.keyFor(id$1)], _entry$7 !== undefined ? _entry$7.v : false) || $throwRuntimeError("assignment to entry in nil map"))[ebiten.GamepadButton.keyFor(_key$8)] = { k: _key$8, v: d };
				_i$3++;
			}
			_i$2++;
		}
		i.gamepadIDs = $makeMap($Int.keyFor, []);
		_ref$4 = ebiten.GamepadIDs();
		_i$4 = 0;
		while (true) {
			if (!(_i$4 < _ref$4.$length)) { break; }
			id$2 = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$4]);
			_key$9 = id$2; (i.gamepadIDs || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$9)] = { k: _key$9, v: new structType.ptr() };
			_tuple = (_entry$8 = i.gamepadButtonDurations[$Int.keyFor(id$2)], _entry$8 !== undefined ? [_entry$8.v, true] : [false, false]);
			ok = _tuple[1];
			if (!ok) {
				_key$10 = id$2; (i.gamepadButtonDurations || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$10)] = { k: _key$10, v: $makeMap(ebiten.GamepadButton.keyFor, []) };
			}
			n = ebiten.GamepadButtonNum(id$2);
			b$2 = 0;
			while (true) {
				if (!(b$2 < ((n >> 0)))) { break; }
				if (ebiten.IsGamepadButtonPressed(id$2, b$2)) {
					_key$11 = b$2; ((_entry$9 = i.gamepadButtonDurations[$Int.keyFor(id$2)], _entry$9 !== undefined ? _entry$9.v : false) || $throwRuntimeError("assignment to entry in nil map"))[ebiten.GamepadButton.keyFor(_key$11)] = { k: _key$11, v: (_entry$10 = (_entry$11 = i.gamepadButtonDurations[$Int.keyFor(id$2)], _entry$11 !== undefined ? _entry$11.v : false)[ebiten.GamepadButton.keyFor(b$2)], _entry$10 !== undefined ? _entry$10.v : 0) + (1) >> 0 };
				} else {
					_key$12 = b$2; ((_entry$12 = i.gamepadButtonDurations[$Int.keyFor(id$2)], _entry$12 !== undefined ? _entry$12.v : false) || $throwRuntimeError("assignment to entry in nil map"))[ebiten.GamepadButton.keyFor(_key$12)] = { k: _key$12, v: 0 };
				}
				b$2 = b$2 + (1) >> 0;
			}
			_i$4++;
		}
		idsToDelete = new sliceType$1([]);
		_ref$5 = i.gamepadButtonDurations;
		_i$5 = 0;
		_keys$3 = $keys(_ref$5);
		while (true) {
			if (!(_i$5 < _keys$3.length)) { break; }
			_entry$13 = _ref$5[_keys$3[_i$5]];
			if (_entry$13 === undefined) {
				_i$5++;
				continue;
			}
			id$3 = _entry$13.k;
			_tuple$1 = (_entry$14 = i.gamepadIDs[$Int.keyFor(id$3)], _entry$14 !== undefined ? [_entry$14.v, true] : [new structType.ptr(), false]);
			ok$1 = _tuple$1[1];
			if (!ok$1) {
				idsToDelete = $append(idsToDelete, id$3);
			}
			_i$5++;
		}
		_ref$6 = idsToDelete;
		_i$6 = 0;
		while (true) {
			if (!(_i$6 < _ref$6.$length)) { break; }
			id$4 = ((_i$6 < 0 || _i$6 >= _ref$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$6.$array[_ref$6.$offset + _i$6]);
			delete i.gamepadButtonDurations[$Int.keyFor(id$4)];
			_i$6++;
		}
		ids = $makeMap($Int.keyFor, []);
		i.prevTouchDurations = $makeMap($Int.keyFor, []);
		_ref$7 = i.touchDurations;
		_i$7 = 0;
		_keys$4 = $keys(_ref$7);
		while (true) {
			if (!(_i$7 < _keys$4.length)) { break; }
			_entry$15 = _ref$7[_keys$4[_i$7]];
			if (_entry$15 === undefined) {
				_i$7++;
				continue;
			}
			id$5 = _entry$15.k;
			_key$13 = id$5; (i.prevTouchDurations || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$13)] = { k: _key$13, v: (_entry$16 = i.touchDurations[$Int.keyFor(id$5)], _entry$16 !== undefined ? _entry$16.v : 0) };
			_i$7++;
		}
		_r = ebiten.TouchIDs(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref$8 = _r;
		_i$8 = 0;
		/* while (true) { */ case 3:
			/* if (!(_i$8 < _ref$8.$length)) { break; } */ if(!(_i$8 < _ref$8.$length)) { $s = 4; continue; }
			id$6 = ((_i$8 < 0 || _i$8 >= _ref$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$8.$array[_ref$8.$offset + _i$8]);
			_key$14 = id$6; (ids || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$14)] = { k: _key$14, v: new structType.ptr() };
			_key$15 = id$6; (i.touchDurations || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$15)] = { k: _key$15, v: (_entry$17 = i.touchDurations[$Int.keyFor(id$6)], _entry$17 !== undefined ? _entry$17.v : 0) + (1) >> 0 };
			_i$8++;
		/* } */ $s = 3; continue; case 4:
		idsToDelete = new sliceType$1([]);
		_ref$9 = i.touchDurations;
		_i$9 = 0;
		_keys$5 = $keys(_ref$9);
		while (true) {
			if (!(_i$9 < _keys$5.length)) { break; }
			_entry$18 = _ref$9[_keys$5[_i$9]];
			if (_entry$18 === undefined) {
				_i$9++;
				continue;
			}
			id$7 = _entry$18.k;
			_tuple$2 = (_entry$19 = ids[$Int.keyFor(id$7)], _entry$19 !== undefined ? [_entry$19.v, true] : [new structType.ptr(), false]);
			ok$2 = _tuple$2[1];
			if (!ok$2) {
				idsToDelete = $append(idsToDelete, id$7);
			}
			_i$9++;
		}
		_ref$10 = idsToDelete;
		_i$10 = 0;
		while (true) {
			if (!(_i$10 < _ref$10.$length)) { break; }
			id$8 = ((_i$10 < 0 || _i$10 >= _ref$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$10.$array[_ref$10.$offset + _i$10]);
			delete i.touchDurations[$Int.keyFor(id$8)];
			_i$10++;
		}
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: inputState.ptr.prototype.update }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$11 = _entry$11; $f._entry$12 = _entry$12; $f._entry$13 = _entry$13; $f._entry$14 = _entry$14; $f._entry$15 = _entry$15; $f._entry$16 = _entry$16; $f._entry$17 = _entry$17; $f._entry$18 = _entry$18; $f._entry$19 = _entry$19; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._i = _i; $f._i$1 = _i$1; $f._i$10 = _i$10; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._i$7 = _i$7; $f._i$8 = _i$8; $f._i$9 = _i$9; $f._key = _key; $f._key$1 = _key$1; $f._key$10 = _key$10; $f._key$11 = _key$11; $f._key$12 = _key$12; $f._key$13 = _key$13; $f._key$14 = _key$14; $f._key$15 = _key$15; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._key$6 = _key$6; $f._key$7 = _key$7; $f._key$8 = _key$8; $f._key$9 = _key$9; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._keys$4 = _keys$4; $f._keys$5 = _keys$5; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$10 = _ref$10; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f._ref$9 = _ref$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.d = d; $f.ds = ds; $f.i = i; $f.id = id; $f.id$1 = id$1; $f.id$2 = id$2; $f.id$3 = id$3; $f.id$4 = id$4; $f.id$5 = id$5; $f.id$6 = id$6; $f.id$7 = id$7; $f.id$8 = id$8; $f.ids = ids; $f.idsToDelete = idsToDelete; $f.k = k; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	inputState.prototype.update = function() { return this.$val.update(); };
	ptrType.methods = [{prop: "update", name: "update", pkg: "github.com/hajimehoshi/ebiten/inpututil", typ: $funcType([], [], false)}];
	inputState.init("github.com/hajimehoshi/ebiten/inpututil", [{prop: "keyDurations", name: "keyDurations", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "prevKeyDurations", name: "prevKeyDurations", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "mouseButtonDurations", name: "mouseButtonDurations", anonymous: false, exported: false, typ: mapType$1, tag: ""}, {prop: "prevMouseButtonDurations", name: "prevMouseButtonDurations", anonymous: false, exported: false, typ: mapType$1, tag: ""}, {prop: "gamepadIDs", name: "gamepadIDs", anonymous: false, exported: false, typ: mapType$2, tag: ""}, {prop: "prevGamepadIDs", name: "prevGamepadIDs", anonymous: false, exported: false, typ: mapType$2, tag: ""}, {prop: "gamepadButtonDurations", name: "gamepadButtonDurations", anonymous: false, exported: false, typ: mapType$4, tag: ""}, {prop: "prevGamepadButtonDurations", name: "prevGamepadButtonDurations", anonymous: false, exported: false, typ: mapType$4, tag: ""}, {prop: "touchDurations", name: "touchDurations", anonymous: false, exported: false, typ: mapType$5, tag: ""}, {prop: "prevTouchDurations", name: "prevTouchDurations", anonymous: false, exported: false, typ: mapType$5, tag: ""}, {prop: "m", name: "m", anonymous: false, exported: false, typ: sync.RWMutex, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ebiten.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hooks.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		theInputState = new inputState.ptr($makeMap(ebiten.Key.keyFor, []), $makeMap(ebiten.Key.keyFor, []), $makeMap(ebiten.MouseButton.keyFor, []), $makeMap(ebiten.MouseButton.keyFor, []), $makeMap($Int.keyFor, []), $makeMap($Int.keyFor, []), $makeMap($Int.keyFor, []), $makeMap($Int.keyFor, []), $makeMap($Int.keyFor, []), $makeMap($Int.keyFor, []), new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0));
		$r = init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/text"] = (function() {
	var $pkg = {}, $init, ebiten, font, fixed, image, color, math, sync, colorMCacheKey, colorMCacheEntry, glyphImage, glyphImageCacheEntry, ptrType, ptrType$1, ptrType$2, sliceType, ptrType$3, sliceType$1, structType, ptrType$4, ptrType$5, ptrType$6, sliceType$2, glyphAdvanceCache, monotonicClock, glyphBoundsCache, glyphImageCache, emptyGlyphs, textM, colorMCache, emptyColorM, glyphAdvance, now, fixed26_6ToFloat64, drawGlyph, getGlyphBounds, getGlyphImages, init, colorToColorM, Draw;
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	font = $packages["golang.org/x/image/font"];
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	color = $packages["image/color"];
	math = $packages["math"];
	sync = $packages["sync"];
	colorMCacheKey = $pkg.colorMCacheKey = $newType(4, $kindUint32, "text.colorMCacheKey", true, "github.com/hajimehoshi/ebiten/text", false, null);
	colorMCacheEntry = $pkg.colorMCacheEntry = $newType(0, $kindStruct, "text.colorMCacheEntry", true, "github.com/hajimehoshi/ebiten/text", false, function(m_, atime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new ebiten.ColorM.ptr(ptrType.nil);
			this.atime = new $Int64(0, 0);
			return;
		}
		this.m = m_;
		this.atime = atime_;
	});
	glyphImage = $pkg.glyphImage = $newType(0, $kindStruct, "text.glyphImage", true, "github.com/hajimehoshi/ebiten/text", false, function(image_, x_, y_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.image = ptrType$5.nil;
			this.x = 0;
			this.y = 0;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.image = image_;
		this.x = x_;
		this.y = y_;
		this.width = width_;
		this.height = height_;
	});
	glyphImageCacheEntry = $pkg.glyphImageCacheEntry = $newType(0, $kindStruct, "text.glyphImageCacheEntry", true, "github.com/hajimehoshi/ebiten/text", false, function(image_, atime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.image = ptrType$1.nil;
			this.atime = new $Int64(0, 0);
			return;
		}
		this.image = image_;
		this.atime = atime_;
	});
	ptrType = $ptrType($packages["github.com/hajimehoshi/ebiten/internal/affine"].ColorM);
	ptrType$1 = $ptrType(glyphImage);
	ptrType$2 = $ptrType(image.Rectangle);
	sliceType = $sliceType(ebiten.ImagePart);
	ptrType$3 = $ptrType(fixed.Rectangle26_6);
	sliceType$1 = $sliceType(ptrType$1);
	structType = $structType("", []);
	ptrType$4 = $ptrType(glyphImageCacheEntry);
	ptrType$5 = $ptrType(ebiten.Image);
	ptrType$6 = $ptrType(colorMCacheEntry);
	sliceType$2 = $sliceType($Int32);
	glyphAdvance = function(face, r) {
		var _entry, _entry$1, _key, _key$1, _r, _tuple, _tuple$1, _tuple$2, a, face, m, ok, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; a = $f.a; face = $f.face; m = $f.m; ok = $f.ok; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = (_entry = glyphAdvanceCache[font.Face.keyFor(face)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = $makeMap($Int32.keyFor, []);
			_key = face; (glyphAdvanceCache || $throwRuntimeError("assignment to entry in nil map"))[font.Face.keyFor(_key)] = { k: _key, v: m };
		}
		_tuple$1 = (_entry$1 = m[$Int32.keyFor(r)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
		a = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = face.GlyphAdvance(r); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$2 = _r;
			a = _tuple$2[0];
			_key$1 = r; (m || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$1)] = { k: _key$1, v: a };
		/* } */ case 2:
		$s = -1; return a;
		/* */ } return; } if ($f === undefined) { $f = { $blk: glyphAdvance }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.a = a; $f.face = face; $f.m = m; $f.ok = ok; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	now = function() {
		var x;
		monotonicClock = (x = new $Int64(0, 1), new $Int64(monotonicClock.$high + x.$high, monotonicClock.$low + x.$low));
		return monotonicClock;
	};
	fixed26_6ToFloat64 = function(x) {
		var x;
		return (x) / 64;
	};
	drawGlyph = function(dst, face, r, img, x, y, clr) {
		var _r, _r$1, b, clr, dst, face, img, op, r, re, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; clr = $f.clr; dst = $f.dst; face = $f.face; img = $f.img; op = $f.op; r = $f.r; re = $f.re; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = [re];
		if (img === ptrType$1.nil) {
			$s = -1; return;
		}
		_r = getGlyphBounds(face, r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		op = new ebiten.DrawImageOptions.ptr(ptrType$2.nil, new ebiten.GeoM.ptr(0, 0, 0, 0, 0, 0), new ebiten.ColorM.ptr(ptrType.nil), 0, 0, $ifaceNil, sliceType.nil);
		op.GeoM.Translate(fixed26_6ToFloat64(x + b.Min.X >> 0), fixed26_6ToFloat64(y + b.Min.Y >> 0));
		ebiten.ColorM.copy(op.ColorM, clr);
		re[0] = $clone(image.Rect(img.x, img.y, img.x + img.width >> 0, img.y + img.height >> 0), image.Rectangle);
		op.SourceRect = re[0];
		_r$1 = dst.DrawImage(img.image, op); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$unused(_r$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawGlyph }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.clr = clr; $f.dst = dst; $f.face = face; $f.img = img; $f.op = op; $f.r = r; $f.re = re; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	getGlyphBounds = function(face, r) {
		var _entry, _entry$1, _entry$2, _entry$3, _key, _key$1, _r, _tuple, _tuple$1, _tuple$2, b, b$1, face, ok, ok$1, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; b$1 = $f.b$1; face = $f.face; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		_tuple = (_entry = glyphBoundsCache[font.Face.keyFor(face)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = face; (glyphBoundsCache || $throwRuntimeError("assignment to entry in nil map"))[font.Face.keyFor(_key)] = { k: _key, v: $makeMap($Int32.keyFor, []) };
		}
		_tuple$1 = (_entry$1 = (_entry$2 = glyphBoundsCache[font.Face.keyFor(face)], _entry$2 !== undefined ? _entry$2.v : false)[$Int32.keyFor(r)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$3.nil, false]);
		b$1 = _tuple$1[0];
		ok$1 = _tuple$1[1];
		if (ok$1) {
			$s = -1; return b$1;
		}
		_r = face.GlyphBounds(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$2 = _r;
		b[0] = $clone(_tuple$2[0], fixed.Rectangle26_6);
		_key$1 = r; ((_entry$3 = glyphBoundsCache[font.Face.keyFor(face)], _entry$3 !== undefined ? _entry$3.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$1)] = { k: _key$1, v: b[0] };
		$s = -1; return b[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: getGlyphBounds }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.b$1 = b$1; $f.face = face; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	getGlyphImages = function(face, runes) {
		var _entry, _entry$1, _entry$10, _entry$11, _entry$12, _entry$13, _entry$14, _entry$15, _entry$16, _entry$17, _entry$18, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _i$1, _i$2, _i$3, _i$4, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _key$6, _keys, _keys$1, _keys$2, _keys$3, _r, _r$1, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, b$1, b$2, b$3, d, e, e$1, face, g, glyphBounds, h, h$1, h$2, h2, i, i$1, img, imgs, neededGlyphIndices, ok, ok$1, ok$2, ok$3, ok$4, oldest, oldestKey, r, r$1, r$2, r$3, rgba, runes, w, w$1, w$2, w$3, w2, x, x$1, xs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$11 = $f._entry$11; _entry$12 = $f._entry$12; _entry$13 = $f._entry$13; _entry$14 = $f._entry$14; _entry$15 = $f._entry$15; _entry$16 = $f._entry$16; _entry$17 = $f._entry$17; _entry$18 = $f._entry$18; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _key$6 = $f._key$6; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; b$3 = $f.b$3; d = $f.d; e = $f.e; e$1 = $f.e$1; face = $f.face; g = $f.g; glyphBounds = $f.glyphBounds; h = $f.h; h$1 = $f.h$1; h$2 = $f.h$2; h2 = $f.h2; i = $f.i; i$1 = $f.i$1; img = $f.img; imgs = $f.imgs; neededGlyphIndices = $f.neededGlyphIndices; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; oldest = $f.oldest; oldestKey = $f.oldestKey; r = $f.r; r$1 = $f.r$1; r$2 = $f.r$2; r$3 = $f.r$3; rgba = $f.rgba; runes = $f.runes; w = $f.w; w$1 = $f.w$1; w$2 = $f.w$2; w$3 = $f.w$3; w2 = $f.w2; x = $f.x; x$1 = $f.x$1; xs = $f.xs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = (_entry = emptyGlyphs[font.Face.keyFor(face)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = face; (emptyGlyphs || $throwRuntimeError("assignment to entry in nil map"))[font.Face.keyFor(_key)] = { k: _key, v: $makeMap($Int32.keyFor, []) };
		}
		_tuple$1 = (_entry$1 = glyphImageCache[font.Face.keyFor(face)], _entry$1 !== undefined ? [_entry$1.v, true] : [false, false]);
		ok$1 = _tuple$1[1];
		if (!ok$1) {
			_key$1 = face; (glyphImageCache || $throwRuntimeError("assignment to entry in nil map"))[font.Face.keyFor(_key$1)] = { k: _key$1, v: $makeMap($Int32.keyFor, []) };
		}
		imgs = $makeSlice(sliceType$1, runes.$length);
		glyphBounds = $makeMap($Int32.keyFor, []);
		neededGlyphIndices = $makeMap($Int.keyFor, []);
		_ref = runes;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tuple$2 = (_entry$2 = (_entry$3 = emptyGlyphs[font.Face.keyFor(face)], _entry$3 !== undefined ? _entry$3.v : false)[$Int32.keyFor(r)], _entry$2 !== undefined ? [_entry$2.v, true] : [new structType.ptr(), false]);
			ok$2 = _tuple$2[1];
			if (ok$2) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			_tuple$3 = (_entry$4 = (_entry$5 = glyphImageCache[font.Face.keyFor(face)], _entry$5 !== undefined ? _entry$5.v : false)[$Int32.keyFor(r)], _entry$4 !== undefined ? [_entry$4.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok$3 = _tuple$3[1];
			if (ok$3) {
				e.atime = now();
				((i < 0 || i >= imgs.$length) ? ($throwRuntimeError("index out of range"), undefined) : imgs.$array[imgs.$offset + i] = e.image);
				_i++;
				/* continue; */ $s = 1; continue;
			}
			_r = getGlyphBounds(face, r); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			b = _r;
			_tmp = new fixed.Int26_6(((b.Max.X - b.Min.X >> 0))).Ceil();
			_tmp$1 = new fixed.Int26_6(((b.Max.Y - b.Min.Y >> 0))).Ceil();
			w = _tmp;
			h = _tmp$1;
			if ((w === 0) || (h === 0)) {
				_key$2 = r; ((_entry$6 = emptyGlyphs[font.Face.keyFor(face)], _entry$6 !== undefined ? _entry$6.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$2)] = { k: _key$2, v: new structType.ptr() };
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if ($keys((_entry$7 = glyphImageCache[font.Face.keyFor(face)], _entry$7 !== undefined ? _entry$7.v : false)).length > 512) {
				oldest = new $Int64(2147483647, 4294967295);
				oldestKey = -1;
				_ref$1 = (_entry$8 = glyphImageCache[font.Face.keyFor(face)], _entry$8 !== undefined ? _entry$8.v : false);
				_i$1 = 0;
				_keys = $keys(_ref$1);
				while (true) {
					if (!(_i$1 < _keys.length)) { break; }
					_entry$9 = _ref$1[_keys[_i$1]];
					if (_entry$9 === undefined) {
						_i$1++;
						continue;
					}
					r$1 = _entry$9.k;
					e$1 = _entry$9.v;
					if ((x = e$1.atime, (x.$high < oldest.$high || (x.$high === oldest.$high && x.$low < oldest.$low)))) {
						oldestKey = r$1;
						oldest = e$1.atime;
					}
					_i$1++;
				}
				delete (_entry$10 = glyphImageCache[font.Face.keyFor(face)], _entry$10 !== undefined ? _entry$10.v : false)[$Int32.keyFor(oldestKey)];
			}
			_key$3 = r; (glyphBounds || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$3)] = { k: _key$3, v: b };
			_key$4 = i; (neededGlyphIndices || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$4)] = { k: _key$4, v: r };
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ if ($keys(neededGlyphIndices).length > 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($keys(neededGlyphIndices).length > 0) { */ case 4:
			w2 = 0;
			h2 = 0;
			_ref$2 = glyphBounds;
			_i$2 = 0;
			_keys$1 = $keys(_ref$2);
			while (true) {
				if (!(_i$2 < _keys$1.length)) { break; }
				_entry$11 = _ref$2[_keys$1[_i$2]];
				if (_entry$11 === undefined) {
					_i$2++;
					continue;
				}
				b$1 = _entry$11.v;
				_tmp$2 = new fixed.Int26_6(((b$1.Max.X - b$1.Min.X >> 0))).Ceil();
				_tmp$3 = new fixed.Int26_6(((b$1.Max.Y - b$1.Min.Y >> 0))).Ceil();
				w$1 = _tmp$2;
				h$1 = _tmp$3;
				w2 = w2 + (w$1) >> 0;
				if (h2 < h$1) {
					h2 = h$1;
				}
				_i$2++;
			}
			rgba = image.NewRGBA($clone(image.Rect(0, 0, w2, h2), image.Rectangle));
			x$1 = 0;
			xs = $makeMap($Int32.keyFor, []);
			_ref$3 = glyphBounds;
			_i$3 = 0;
			_keys$2 = $keys(_ref$3);
			/* while (true) { */ case 6:
				/* if (!(_i$3 < _keys$2.length)) { break; } */ if(!(_i$3 < _keys$2.length)) { $s = 7; continue; }
				_entry$12 = _ref$3[_keys$2[_i$3]];
				if (_entry$12 === undefined) {
					_i$3++;
					/* continue; */ $s = 6; continue;
				}
				r$2 = _entry$12.k;
				b$2 = _entry$12.v;
				w$2 = new fixed.Int26_6(((b$2.Max.X - b$2.Min.X >> 0))).Ceil();
				d = new font.Drawer.ptr(rgba, image.White, face, new fixed.Point26_6.ptr(0, 0));
				fixed.Point26_6.copy(d.Dot, new fixed.Point26_6.ptr(fixed.I(x$1) - b$2.Min.X >> 0, -b$2.Min.Y));
				$r = d.DrawString(($encodeRune(r$2))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_key$5 = r$2; (xs || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$5)] = { k: _key$5, v: x$1 };
				x$1 = x$1 + (w$2) >> 0;
				_i$3++;
			/* } */ $s = 6; continue; case 7:
			_r$1 = ebiten.NewImageFromImage(rgba, 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$4 = _r$1;
			img = _tuple$4[0];
			_ref$4 = neededGlyphIndices;
			_i$4 = 0;
			_keys$3 = $keys(_ref$4);
			while (true) {
				if (!(_i$4 < _keys$3.length)) { break; }
				_entry$13 = _ref$4[_keys$3[_i$4]];
				if (_entry$13 === undefined) {
					_i$4++;
					continue;
				}
				i$1 = _entry$13.k;
				r$3 = _entry$13.v;
				b$3 = (_entry$14 = glyphBounds[$Int32.keyFor(r$3)], _entry$14 !== undefined ? _entry$14.v : ptrType$3.nil);
				_tmp$4 = new fixed.Int26_6(((b$3.Max.X - b$3.Min.X >> 0))).Ceil();
				_tmp$5 = new fixed.Int26_6(((b$3.Max.Y - b$3.Min.Y >> 0))).Ceil();
				w$3 = _tmp$4;
				h$2 = _tmp$5;
				g = new glyphImage.ptr(img, (_entry$15 = xs[$Int32.keyFor(r$3)], _entry$15 !== undefined ? _entry$15.v : 0), 0, w$3, h$2);
				_tuple$5 = (_entry$16 = (_entry$17 = glyphImageCache[font.Face.keyFor(face)], _entry$17 !== undefined ? _entry$17.v : false)[$Int32.keyFor(r$3)], _entry$16 !== undefined ? [_entry$16.v, true] : [ptrType$4.nil, false]);
				ok$4 = _tuple$5[1];
				if (!ok$4) {
					_key$6 = r$3; ((_entry$18 = glyphImageCache[font.Face.keyFor(face)], _entry$18 !== undefined ? _entry$18.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$6)] = { k: _key$6, v: new glyphImageCacheEntry.ptr(g, now()) };
				}
				((i$1 < 0 || i$1 >= imgs.$length) ? ($throwRuntimeError("index out of range"), undefined) : imgs.$array[imgs.$offset + i$1] = g);
				_i$4++;
			}
		/* } */ case 5:
		$s = -1; return imgs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getGlyphImages }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$11 = _entry$11; $f._entry$12 = _entry$12; $f._entry$13 = _entry$13; $f._entry$14 = _entry$14; $f._entry$15 = _entry$15; $f._entry$16 = _entry$16; $f._entry$17 = _entry$17; $f._entry$18 = _entry$18; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._key$6 = _key$6; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.b$3 = b$3; $f.d = d; $f.e = e; $f.e$1 = e$1; $f.face = face; $f.g = g; $f.glyphBounds = glyphBounds; $f.h = h; $f.h$1 = h$1; $f.h$2 = h$2; $f.h2 = h2; $f.i = i; $f.i$1 = i$1; $f.img = img; $f.imgs = imgs; $f.neededGlyphIndices = neededGlyphIndices; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.oldest = oldest; $f.oldestKey = oldestKey; $f.r = r; $f.r$1 = r$1; $f.r$2 = r$2; $f.r$3 = r$3; $f.rgba = rgba; $f.runes = runes; $f.w = w; $f.w$1 = w$1; $f.w$2 = w$2; $f.w$3 = w$3; $f.w2 = w2; $f.x = x; $f.x$1 = x$1; $f.xs = xs; $f.$s = $s; $f.$r = $r; return $f;
	};
	init = function() {
		emptyColorM.Scale(0, 0, 0, 0);
	};
	colorToColorM = function(clr) {
		var _entry, _entry$1, _i, _key, _keys, _r, _ref, _tuple, _tuple$1, af, bf, c, ca, cb, cg, clr, cm, cr, e, gf, key, key$1, ok, oldest, oldestKey, rf, x, y, y$1, y$2, y$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; af = $f.af; bf = $f.bf; c = $f.c; ca = $f.ca; cb = $f.cb; cg = $f.cg; clr = $f.clr; cm = $f.cm; cr = $f.cr; e = $f.e; gf = $f.gf; key = $f.key; key$1 = $f.key$1; ok = $f.ok; oldest = $f.oldest; oldestKey = $f.oldestKey; rf = $f.rf; x = $f.x; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = clr.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cr = _tuple[0];
		cg = _tuple[1];
		cb = _tuple[2];
		ca = _tuple[3];
		cr = (y = (8), y < 32 ? (cr >>> y) : 0) >>> 0;
		cg = (y$1 = (8), y$1 < 32 ? (cg >>> y$1) : 0) >>> 0;
		cb = (y$2 = (8), y$2 < 32 ? (cb >>> y$2) : 0) >>> 0;
		ca = (y$3 = (8), y$3 < 32 ? (ca >>> y$3) : 0) >>> 0;
		if (ca === 0) {
			$s = -1; return emptyColorM;
		}
		key = (((((((((cr) | (((cg) << 8 >>> 0))) >>> 0) | (((cb) << 16 >>> 0))) >>> 0) | (((ca) << 24 >>> 0))) >>> 0) >>> 0));
		_tuple$1 = (_entry = colorMCache[colorMCacheKey.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$6.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			e.atime = now();
			$s = -1; return e.m;
		}
		if ($keys(colorMCache).length > 512) {
			oldest = new $Int64(2147483647, 4294967295);
			oldestKey = 0;
			_ref = colorMCache;
			_i = 0;
			_keys = $keys(_ref);
			while (true) {
				if (!(_i < _keys.length)) { break; }
				_entry$1 = _ref[_keys[_i]];
				if (_entry$1 === undefined) {
					_i++;
					continue;
				}
				key$1 = _entry$1.k;
				c = _entry$1.v;
				if ((x = c.atime, (x.$high < oldest.$high || (x.$high === oldest.$high && x.$low < oldest.$low)))) {
					oldestKey = key$1;
					oldest = c.atime;
				}
				_i++;
			}
			delete colorMCache[colorMCacheKey.keyFor(oldestKey)];
		}
		cm = new ebiten.ColorM.ptr(ptrType.nil);
		rf = (cr) / (ca);
		gf = (cg) / (ca);
		bf = (cb) / (ca);
		af = (ca) / 255;
		cm.Scale(rf, gf, bf, af);
		e = new colorMCacheEntry.ptr($clone(cm, ebiten.ColorM), now());
		_key = key; (colorMCache || $throwRuntimeError("assignment to entry in nil map"))[colorMCacheKey.keyFor(_key)] = { k: _key, v: e };
		$s = -1; return e.m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: colorToColorM }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.af = af; $f.bf = bf; $f.c = c; $f.ca = ca; $f.cb = cb; $f.cg = cg; $f.clr = clr; $f.cm = cm; $f.cr = cr; $f.e = e; $f.gf = gf; $f.key = key; $f.key$1 = key$1; $f.ok = ok; $f.oldest = oldest; $f.oldestKey = oldestKey; $f.rf = rf; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Draw = function(dst, text, face, x, y, clr) {
		var _i, _r, _r$1, _r$2, _r$3, _ref, clr, colorm, dst, face, fx, glyphImgs, i, prevR, r, runes, text, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; clr = $f.clr; colorm = $f.colorm; dst = $f.dst; face = $f.face; fx = $f.fx; glyphImgs = $f.glyphImgs; i = $f.i; prevR = $f.prevR; r = $f.r; runes = $f.runes; text = $f.text; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = textM.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		fx = fixed.I(x);
		prevR = -1;
		runes = (new sliceType$2($stringToRunes(text)));
		_r = getGlyphImages(face, runes); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		glyphImgs = _r;
		_r$1 = colorToColorM(clr); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		colorm = $clone(_r$1, ebiten.ColorM);
		_ref = runes;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (prevR >= 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (prevR >= 0) { */ case 6:
				_r$2 = face.Kern(prevR, r); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				fx = fx + (_r$2) >> 0;
			/* } */ case 7:
			$r = drawGlyph(dst, face, r, ((i < 0 || i >= glyphImgs.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyphImgs.$array[glyphImgs.$offset + i]), fx, fixed.I(y), $clone(colorm, ebiten.ColorM)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = glyphAdvance(face, r); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			fx = fx + (_r$3) >> 0;
			prevR = r;
			_i++;
		/* } */ $s = 4; continue; case 5:
		$r = textM.Unlock(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Draw }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.clr = clr; $f.colorm = colorm; $f.dst = dst; $f.face = face; $f.fx = fx; $f.glyphImgs = glyphImgs; $f.i = i; $f.prevR = prevR; $f.r = r; $f.runes = runes; $f.text = text; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Draw = Draw;
	colorMCacheEntry.init("github.com/hajimehoshi/ebiten/text", [{prop: "m", name: "m", anonymous: false, exported: false, typ: ebiten.ColorM, tag: ""}, {prop: "atime", name: "atime", anonymous: false, exported: false, typ: $Int64, tag: ""}]);
	glyphImage.init("github.com/hajimehoshi/ebiten/text", [{prop: "image", name: "image", anonymous: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "x", name: "x", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "y", name: "y", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	glyphImageCacheEntry.init("github.com/hajimehoshi/ebiten/text", [{prop: "image", name: "image", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "atime", name: "atime", anonymous: false, exported: false, typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ebiten.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = font.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fixed.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		monotonicClock = new $Int64(0, 0);
		textM = new sync.Mutex.ptr(0, 0);
		emptyColorM = new ebiten.ColorM.ptr(ptrType.nil);
		glyphAdvanceCache = $makeMap(font.Face.keyFor, []);
		glyphBoundsCache = $makeMap(font.Face.keyFor, []);
		glyphImageCache = $makeMap(font.Face.keyFor, []);
		emptyGlyphs = $makeMap(font.Face.keyFor, []);
		colorMCache = $makeMap(colorMCacheKey.keyFor, []);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/lei-cao/programming/code/algoman/resources/images"] = (function() {
	var $pkg = {}, $init, sliceType;
	sliceType = $sliceType($Uint8);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$pkg.PAUSE_ON_png = (new sliceType($stringToBytes("\x89PNG\r\n\x1A\n\x00\x00\x00\rIHDR\x00\x00\x00\x80\x00\x00\x00\x80\b\x06\x00\x00\x00\xC3>a\xCB\x00\x00\x00\x04sBIT\b\b\b\b|\bd\x88\x00\x00\x00\tpHYs\x00\x00\x03\xB1\x00\x00\x03\xB1\x01\xF5\x83\xEDI\x00\x00\x00\x19tEXtSoftware\x00www.inkscape.org\x9B\xEE<\x1A\x00\x00\x05\xAAIDATx\x9C\xED\xD9[\x88\x94u\x18\xC7\xF1\xDF\xF3\x9F\x994<^\xEC\xB8F\xBB\xA4\x14\x05\x91\x15!\x9D\xA0@k\x9D\x93\xB3\xB3\xAE\xB4I7^\x18\x19RP\xD0E\xDA\xCDPP]\x04AX$\x11]U\xBA\xD0\xEA\xB8\xBB\xB3\xAE\x9A\x8Bh\xB5\xE2z@\x89\x0E\x18\x85\x07\xD2]\x03\xDB\xA1v\x9D\xC3\xFF\xE9\xC2\x14[\xD7\xA5\xD5\xFF\xFB\xBE\xB3\xF3<\x9F\xCB\xD9\xF1\xF9?\xF3\xBE_fwF@)\xA5\x94RJ)\xA5\x94 4\x99'\xE7r\xB9Y\xE1p\xE5\xB6\b\x85\xA2\xD6\xF0\xAD^-5\x16\xB3\xFD\xCB\x98\xF0\xD9b\x91\xCE\xA5\xD3\xE9\xBF\xFD:\xF7F\xF4\xF6\xF6\xCE\x00.\xCE\xB3\xB6<\x9F\xC8\xCC\xF0\xEB\\ci\xA4\xC4\x95\xA1r9\xF4{&\x93)\xFC\xDF\x7F7a\x00\x03\x03\x9B\"\x7F\f\xD6g\xD8p\x02LM\x00\x1Aoz\xD3\x9B\xF7\x13\x03;C\xCC]M\x89\x96]D\xC4A.\xC3\xCC\xB4cGn\x191/\x07Q\x13\x80{\x82\xDC\xE7\xD2R8ID\xBB\x98l\xCF\xB4issK\x96,)_\xEF\xA9\xE3\x0600\xB0)r\xFE|\xFD\v`\xBC\x06`\x81W{:p\x8CA\xEF\xC4\xE3\xCD[\xFC\x0E\xE1\xD2\x8D\xDF\xB6\xCA\x80\xD63\xB0\xC8\xCF\xB3'\xE9W\x06\xDE\x8BF\xCF}\xB2x\xF1\xDA\xD2\xD8\x1F^\x13@O\xCF\xD6\x05\x04\xFA\x1C\xC0\xE3\xBE\xAC\xE7\x00\x03;\xAD\x8D\xACN\xA5Rg\xFD8\xAF\xB3\xB3\xB3.\x12\xB2\x9F\x81x\xB9\x1F\xE7\xB9\xC1\x07A\xE6\xB9x<s\xE2\xEAG\xFF\x13@ow\xEEI6\xDC\x05`\x96\xAF\xBB9@\xC0\x99\xB2\xB5KS\xA9\xD6\x9F\xBD<\xA7\xBB\xBB\xE3\xEE\xB01{\x18\xB8\xDD\xCBs<2\xCC\xB0\xA9D\xA2u\xFF\xE5\x07\xAE\x04\xB0\xB3{\xEB\x836D}`\xCC\rf7'N3\xF8\x89Db\xC5o^\f\xEF\xED\xDD\xD6\xC8\x16\xFB\x00\xDC\xE1\xC5|\x9F\f\x1BKO-Ke\x06\x00\xC0\x00@>\x9F\x9F\xCD\x86\xBA\xA6\xF8\xCD\x07\x80\x06\"\xDA\x9C\xCDf\x8D\xEB\xC1\xED\xED\xED!k\xD1\x81\xA9}\xF3\x01`\xB65\xDC\xD1\xD7\xD7>\x13\xF87\x80\x10\x15\xDF\x9A\xA2oi\xD7b<\xF2\xD8\xC3\x0F\xACu=v\xCE\xCC\xC8:\x02\x16\xBB\x9E\x1B\x90\xC6\xD1\xD1[\xDE\x04\x00\xDA\xBD;W_.\xF1i\x00\xE1\x80\x97r\xE9\xEC\xB4\xE9s\x1A'\xFA\xF83\x19}}}\xE1\x8B\xA3\x7F\x9E\x010\xCF\xC5\xBC*Q\"c\x1BL\xA9\xC4\xCF\xA2\xB6n>\x00\xCC/\x8D\\X\xEAjXq\xE4B\x13j\xEB\xE6\x03@\x84\xD9<c\bH\x07\xBD\x89\x17,Q\xB3\xABYlLM^#f4\x1B\x00\v\x83^\xC4\v\xE4\xF2u1\xD7\xE65b^hP+\x7F\xFC]\xCB\xD9\xD7\xD6T\xAB\xD7\x88\xA8\xD1\x00\x98\x1E\xF4\x1E^`fg\xAF\xCB\xE5\xAC*3\xDD\xF9\xE7e5\xB5h\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2i\x00\xC2\x19\x00\x1C\xF4\x12\x9E r\xF7\xBA\\\xCE\xAA.l\x00:\x1F\xF4\x16\xDE\xA0A\x87\xC3j\xF3\x1A1\x06\r`O\x05\xBD\x87'\x98O:\x9BE\xA8\xCDkD|\xD2\x80\xE8P\xD0{x\xC2\xF0aW\xA3\x98k\xF3\x1A\x11\xE8\xB0\x01\xE8\xCB\xA0\x17\xF1\x80\xB5\xD6nq5\xCC\x18\xDE\f\xC0\xBA\x9AW5,}a\xFA\xFB\x8F\xEC\x05\xF0c\xD0\xBB\xB8\xC4@w2\xB9\xF2\xB4\xABy\xB1X\xCB)\x00=\xAE\xE6U\x05\xC2\x0F\xDF\x1D<\xB2\xDFd\xB3Yk\xD9\xBE\x88\x1A\xF94@\xC0\b3\xBF\xEA~0\xBD\x02`\xD4\xF9\xDC`0Y\xF3R6\x9B\xB5\x06\x00\x92\xC9\xD6\xBD \xFA8\xE8\xAD\\\xB0\xC0\xEB\xC9\xE4\x8A_\\\xCF\x8D\xC73'\b\xD8\xE0zn\x10\x18\xD8\x18K6\xEF\x01\xAE\xFA\"hx\xF8\xE2\xCB\fl\x0En-\x07\x18o'\x12-\x1Fx5>\x96hy\x9F\x81w\xBD\x9A\xEF\x0F\xEE(\x14\x8AW\xDE!\xAF\x04\xD0\xD6\xD6V)\x14\x8A\xAB\t\xF8\bS\xEF\xD7A\x89\x80\xF5\xF1d\xCB\x1B^\x1F\x14\x8Fg60h\x03\x80\xB2\xD7g9\xC6`\xDEX\x17\x1D\\\xD5\xD6\xD6V\xB9\xFC \x8D\xF7\xCC\x9E\x9E\\3\x81?\x04\xD0\xE0\xDBz7\xEE{\xB2X\x13K\xB5\x1C\xF0\xF3\xD0|~\xFB\xA3\x86\xEC\xA7\x00\xEE\xF5\xF3\xDC\x1Bt\x8A\x8C]\x17\x8B\xB5v\x8D\xFD\xC1\xB8\xFF\x17\x90Hd\xB6\x0F\x17\x8Aw2\xF8y\x02\x8E{\xBF\xDF\xA4Y\x06\xBEa\xA0\xB5\xFF\xC0\xD1\xFB\xFD\xBE\xF9\x00\x90L6\xF7\xF7\x1F8\xBA\x88A+\x01|\x8B\xEA\xFC\x98x\x8C\x98\xD6\f\x17\x8Aw\x8Dw\xF3\x81\xEB\xBC\x03\x8C\x95\xCF\x7F\xD5\x10Bx\x99%\xBE\xCF\x80\xA3\f\x8A\x02\b9]u\"D%\x80\x87\x88q\x0E\x8CC\xC5J\xE8\xEBt:]U_\xCFvvv\xD6\x85\xC3\xF6i\x03~\x88\t\xF5\x00E\xC1\x1C\xF1q\x85\n\x81\x87,h\x88\b\xC7\xAD\xAD\xECr\xF9QX)\xA5\x94RJ)\xA5\x94RS\xDF?<\xAF\x9A\x95\xA6\xD2;q\x00\x00\x00\x00IEND\xAEB`\x82")));
		$pkg.PLAY_ON_png = (new sliceType($stringToBytes("\x89PNG\r\n\x1A\n\x00\x00\x00\rIHDR\x00\x00\x00\x80\x00\x00\x00\x80\b\x06\x00\x00\x00\xC3>a\xCB\x00\x00\x00\x04sBIT\b\b\b\b|\bd\x88\x00\x00\x00\tpHYs\x00\x00\x03\xB1\x00\x00\x03\xB1\x01\xF5\x83\xEDI\x00\x00\x00\x19tEXtSoftware\x00www.inkscape.org\x9B\xEE<\x1A\x00\x00\b\x07IDATx\x9C\xED\xDD]lS\xE7\x19\x07\xF0\xFF\xF3\xDA1\xA0\x89\xC1T\rm\x1D\x13\xEA.\xBAJ]\xD7u*7t\xEA\x9A)\xB5\x9D\xE3$N`\xF5M5\xEDj\xEA\xC5\xEE&\xADj\x81@\xFA\x91\xD0nP\x8D\x95N\xAD6ZzQQ\xA5\v8P\xFB\xC4Y`\x9D4\x18\xC9\xC2h\x19Z\xDAu+cm\xB7\xC1ZV\xE2@V\x7F\xBC\xCF.\xC0,\xA1\x818\xD8\xC7\xEF\xF9x~W\xC8\xB6\xCE\xFBH\xE7\xAF\x97\x83\xFF>\x07\xC2<2\x99=7\x87\x95J0\xF8\x1B\x00\xDD\x02\xE0\xF3\x00\x96\x01\x98\x06\xE3C\x80\xDF\"\xC2\xB8\x06gGG\x8F\x1F\xEE\xE9\xE9\xD1\xF3\x1DS\xB8\x07\xCD\xF5\"3\xD3\xB0=\xD8\xC6\x84\x87\x00\xAC\xA9\xF6`\fz\x07\xE0\xED\xF9|\xE1\xE7\xA9Tj\xBAnS\n\xC7|\"\x00\xB9\xDC\xBE\x9BX\xEB\xE7\x01\xDCS\xC3A\xDF\x07s\xEF\xB9\xA9\xE2\xCET*U\xA8e@\xE1\xACY\x01\xC8\xE5\xD2kXc\x1F\x80\x1B\xEArt\xC6\xDF\x89\xB87\xB2x\xF9\xF3\xCD\xCD\xCD\xA5\xBA\x1CS\xD4\xD5\xE5\x00\\:\xF9\x07\x00,v`\x9D\xB7\x18\xD43:z\xAC_\xAE\x11\xDC\x85\x00 \x9B\xED\xFF\xAC\xA2\xC8\t\x00+\x1C^\xEF8Hm\x8A\xC5\xDA\xF7\x11\x11;\xBC\x96\xA8\x82\x02\x00E\x91\x1F\xC1\xF9\x93\x0F\x00_\x05\xEBtn(=:\x9C\xDD\x1Bm\xC0zb\x1E\x94\xCD\x0E\xACT\x14:\t l`\xFD\xC3\xC4\xAA;fu\x1C4\xB0\xB6\x00\xA0\x88\xC2\xDF\x81\x99\x93\x0F\x00k\x98\xF4\x01\xDBN\xE7l{\xDFjC3\x04\x9A\"\xF07M\x0FA@\x94\xA0\xC7\x86\xEC\xF4\xAF\xB2\xD9\xC1;L\xCF\x13$\n\xC0\xAD\xA6\x87\x98\xA1E\x11\x8F\xDBvzw&\xB3\xE7f\xD3\xC3\x04\x01\xE5\xEC\xF4\x05\x06\x96\x98\x1Ed\x0E\x9A\x80\x812\xF3\xC3\x96\xD5\xF5W\xD3\xC3\xF8\x15\r\xD9i\xB7\xFFs\xAC\xC8\xA0\x17J%\xF5h{{\xFB\xFB\xA6\x87\xF1\x1B/\x04\xA0\xA2\xC0\xA0]Z\x877'\x12\x89\x7F\x99\x1E\xC6/\xBC\x14\x80\x8A\xF3 \xEC(\x95\xC2O\xB6\xB5\xB5\xFD\xC7\xF40^\xE7\xC5\x00T\xE4A\xF8\x99\xD6\x91>\xCB\xB2&M\x0F\xE3U^\x0E@\xC5\x07`l\x9D\x9C*\xFCT*\xE8\x85\xF3C\x00*\xCE\x80\xF1\x94F\xE4'\x96e}lz\x18\xAF\xF0S\x00.\x92\nzA\xFC\x17\x80\xFF;I\xE0'\xCE\xE5\x8B;S\xA9T\xD9\xF40n\xA5L\x0F\xE0\xA0\x9B\x18\xF4\xDC\xA7\x97F\xDE\xB0\xED\xC1\xFB\x98y\xCE\x9F\xBF\x05\x9D\x9Fw\x80+\x8D\x11\xE3\xF1\x98\xD5\xB9\xDF\xF4 n\x12\xA4\x00T\x1C\x06\xD1\xC6x<\xF9k\xD3\x83\xB8A\x10\x03P1\xC2P\xEB[[;~oz\x10\x93\x82\x1C\x80\x8A\x11\xCD\xF4\xA0e%\x8F\x99\x1E\xC4\x04?_\x04V\xABE\x11\x1F\xCD\xD9\xE9~\xDB\x1E\xFC\xB2\xE9a\x1AMv\x80\xD9\x02WA\xCB\x0E0\x9Bb\xE0>E4a\xDB\x83\xCF\xED\xDF\xBF\xFF\v\xA6\x07r\x9A\xEC\x00\xD7\xE6\xFB\nZ\x02P\x1D\xDFV\xD0\x12\x80\x85\xF1]\x05-\x01\xB8>\xBE\xA9\xA0%\x00\xB5\xF1|\x05-\x01\xA8\x07\x0FW\xD0\x12\x80\xFAz\x13\x8C-\x93S\x85\x97\xBCRA\xCB\xF7\x00\xF5u\v\b/z\xA9\x82\x96\x1D\xC0Y\xAE\xAF\xA0%\x00\x8D\xE1\xDA\nZ\x02\xD0X\xAE\xAB\xA0%\x00f\xB8\xA6\x82\x96\x8B@3Z\x14\xF1x\xCEN\xF7\x9B\xBE\vZv\x00\xF3\x8CV\xD0\xB2\x03\x987\xAB\x82\x1E\x1E\x1E\xBC\xB1\x91\x8B\xCB\x0E\xE0>\x05\x06\xEDjj\xC2\xA6\x96\x96\xE4i\xA7\x17\x93\x00\xB8\xD7y\x10v,\x9A\xE6'\x9A\xBB\xBA>rj\x11\t\x80\xFB9ZAK\x00\xBC\xC3\x91\nZ\x02\xE0=\xEF\x81h\xAB\xD6M\xCF\xD6\xA3\x82\x96\x00xU\x9D*h\t\x80\xF7\xD5TA\xCB\xF7\x00\xDEWS\x05-;\x80\xDF\x10FI\xA3\xB7\xDA\nZ\x02\xE0S\f\x1C\"\xA2\xEE\xF9*h\xF9+\xC0\xA7\b\xB8\v\xCC\x07\x87\x86\x06\xB3\xC3\x99\xBD_\xBB\xEA\xE7d\x07\b\x842\x80g\x8B\xA5\xD0\x83\xED\xED\xED\x17f\xBE!;@0\x84\x00|\xBF)\xAC\x0Fg2\x03\xABf\xBE!\x01\b\x14\xBE]\xA9\xF0\xC1lv`e\xE5\x15\t@\xC0\x10\xF8K\x8A\xD4\x9E\xFE\xFE\xFE\b \x01\b(Z\xBDli\xE4\x07\x80\\\x04\x06\x17\xE1#\xAD#\xABd\x07\b*\xC6\xF2\x10\x8A\xDF\x96\x00\x04\x18\x93NH\x00\x02\x8D\xBE.\x01\b\xB6\x15\x12\x80`c\t@\x801\xE8\xB4\x04 \xC0\x14\xF8\xA8\x04 \xC048+\x01\b\xAE\xB3\x85\x82\x1A\x90\x00\x04\x141\xB6$\x93\xC9\xBC\x04 \x98\xC6nXqz; eP\x10\xFDE\x85\xA8\xEB\xCE;\x1F(\x02\x12\x80\xA09F\n\xDF\x8AF\x93\xFF\xA8\xBC \x01\b\x862\x03OO\xE6\vw\xC5b\x9D\xEF\xCE|#lj\"\xD1 D\xB6*\xEB\xF5\xD1D\xD7\xEBs\xBD-\x01\xF0)\x06\x0E\x01\xBC\xB15\xDE\xF9\xDA\xB5>'\x01\xF0\x9BK7\x86\xC4\xAB\xBC1D\x02\xE0\x17\x8C\x13L\xF4h<\xD6\xF1K\"\xAA\xFAW^r\x11\xE8}o\x82\xF1\xDD#c\xAF\xDF\xDE\xDA\x9A|e!'\x1F\x90\x1D\xC0\xCBN\x11\xB8\xAF\xD6\xDB\xC3%\x00\xDES\xD7\x07DH\x00\xBC\xC3\x91G\xC4H\x00\xDC\xEF,\x83\x9Ff^\xF4\x94\x13\x0F\x89\x92\x00\xB8\xD7\x14\b\xCF8\xFD\x988\t\x80\xFB\\ \xE0\x17\xA1&\xEAk\xC4\x83\"%\x00\xEEQ`\xD0\xAEP\b\x8F\xCC,k\x9C&\x010\xAF\x04`w\xB8\\\xEEii[\xF7N\xA3\x17\x97\x00\x98\xA3\t\x18(i\xBD1\x91X\xFBgSCH\x00\xCC\x18Q\x9A\x7Fx\xB5\x86\xAE\x91$\x00\x8D5\xA24=\x1CM$\xC7M\x0FR!\x01h\x80\xCB\xD5lk\xD7k\xA6g\xB9\x92\x04\xC0A\x04\x1C\x01\xA3\xAF\xDAj\xD6\x04\t\x80\x13.U\xB3\xB1\xF8\xC2\xAAY\x13\xA4\x0E\xAE'\xC2D-\xD5\xAC\t\xB2\x03\xD4\xC7)\x02\xF7\x9D\x9B,\xEE\xF4\xCA\xFF\x19\\!\x01\xA8M]\xABY\x13$\x00\xD7\xE7\x030\xB6.Z\xB2l{ss\xF3\x7FM\x0FS\v\t\xC0\xC28Z\xCD\x9A \x01\xA8NC\xAAY\x13$\x00\xD7\xD6\xD0j\xD6\x04\t\xC0\xDC\n\f\xDAET\xEA\x89\xC5\xD7\xFD\xD3\xF40N\x92\x00\xCCV\x04\xF0\xB2\xA9j\xD6\x04\t\xC0E\x9A\x80\x01\n\x856D\xA3\xEDo\x9B\x1E\xA6\x91\x82\x1E\x00\x06S\x06\xAA\xBC1\x16_\xFB\x86\xE9aL\br\x00FH\xF1C\xB1X\xE7Q\xD3\x83\x98\x14\xB8\x000p\x88Yo\xB0\xAC\xB5\xBF1=\x8B\x1B\x04&\x00\x04\x1C\xD1\x17;\xF9\x03\xA6gq\x13\xDF\x07\x80\x80?j\xD0c\xF1\xD6\xE4+\xA6gq#\xFF\x06\x800\xC1L\x9B\xBD\xD0\xC9\x9B\xE4\xC7\xDF\x03\xFC\x8D\xC0\x0FLN\x16n\xF3J'o\x92\x9Fv\x80w\t\xFCx\xAD\xB7K\x07\x8D\x0F\x02@\xFF\x06\xF36?T\xB3&x9\x00\x1F2xG\xA1@\xDB\x92\xC9\xCE\xBC\xE9a\xBC\xCA\x8B\x01\x98\x02\xE1\x99P\xA8\xB0\xE5\xDE{S\xE7L\x0F\xE3u^\n\xC0y\x02vB\xE9\xDEXl\xED\x19\xD3\xC3\xF8\x85\x17\x02\x10\x98j\xD6\x840\x01\xD3\f,1=\xC8\x1C\x8A\x00^&\xA56\xC7c\x1D'M\x0F\xE3Wa\x06\xCE\x00X5\xEF'\x1B\xA7\f\xC2K\xE1R\xF9\x91\xA0t\xF2&\x85\t\xF8\x03\xBB#\x00\f\xA6\f\x136\xB4\xC6\x93\xC7M\x0F\x13\x14a\r\xE4\b\xE82:\x05\xD3\xAB\x8Auw4\xD1i\xFCv\xE9\xA0\t3Gv\x13\x15~\f`\xA9\x81\xF5G4\xABn\xCB\xEA8b`m\x01\x80\x00`h(\xBD\x1E\x8C\xDE\x06\xAE\xFB;\x06wK5k^\x18\x00\xB4\x8ElS\xF4q'@\xAB\x9D\\\x8C\x81q\xC5\xBC)fu\xD9N\xAE#\xAAG\x95?d\xB3\x03+\x15\x85~\v'.\b\x19'\x98\xB0)\x1EO\xA6\xA5\x9Ds\x97\xCBu\xB0e\xAD{/\x14\x0E\xDD\r\xE0Ou;:\xF3\xDB \xDC\x7F\xF1v\xE9\xCE\xBDr\xF2\xDD\x87\xAE|!\x97\xCB}\nzz\x1B\x03\xDF\xC3\xF5\xFF^\xE0\x14\x83\x1F[\xBCx\xF9\x8BR\xCD\xBA\xDB'\x02P\x91\xCD\x0E\xDEA\xC4\xEB\t\xE8D\xB5_\x19\x13&\x98\xB1=\x9F/\xBC\x90J\xA5\n\xF5\x1AR8\xE7\xAA\x01\xA8\xC8d2\x9F\v\x85\x8Am\xD0h\x06\xE1+\x00\xBE\b\xE03\x00.\x008\v\xE6\t\"\x8CB\xD3\xABQ+9&\xDB\xBC\xB7\xFC\x0FwZ\x90\xB6\xBA_\xC5$\x00\x00\x00\x00IEND\xAEB`\x82")));
		$pkg.UI_png = (new sliceType($stringToBytes("\x89PNG\r\n\x1A\n\x00\x00\x00\rIHDR\x00\x00\x00\x80\x00\x00\x00\x80\b\x06\x00\x00\x00\xC3>a\xCB\x00\x00\x02\x1EIDATx\x9C\xED\xDB1N\xE3P\x10\x80\xE1\xF1*\x05U(\"A\x81\x1B:\x8A4\x94\\\x82\xC3\xD09\x07\x80\x06q\x98p\b\x1F\x03J(\"A\xD2\xD0\x99bY\x89EX\xBBzI\x88\xA3\xF9\xBE\n)\x1A\x824?\xC6\xE89\xD5\xED\xEDm,\x16\x8B.\n\xD4u]\x8D\xC7\xE38<<,\x9A\x8F\x88\xEA\xF2\xF2\xB2p\x94M\x18-\x16\x8B\xEE\xE2\xE2\xA2h\xB8m\xDB\xE2\xD9\x0F]DT\xEB|\x03\xD6\xF3k\xD7?\x00\xBB%\x80\xE4\x04\x90\x9C\x00\x92\x13@r\x02HN\x00\xC9\t 9\x01$'\x80\xE4\x04\x90\x9C\x00\x92\x13@r\xA3\xF1x\\\xB5m[t\x9C{ttT=??\xC7\xF1\xF1q\xD1\xFC\xEB\xEB\xAB\x93\xC0\x1D\x1BM&\x93X.\x97E\xC3'''qpp\x10m\xDB~\xFB\xFA\xD9\xD9Y\xF5\xF6\xF6\x16\x8F\x8F\x8F\xDF\x06R\xD7u\xD1\xFB\xB29\xA3\x87\x87\x87\xEE\xFA\xFA\xBAhx6\x9BuWWW\xD1\xF7L\xC0\xDD\xDD]\x17\x11\xBD\xAF\x7F\\y\\\x05v\xC8=@r\x02HN\x00\xC9\t 9\x01$'\x80\xE4\x04\x90\x9C\x00\x92\x13@r\x02HN\x00\xC9\t 9\x01$7:==\xADf\xB3Y\xD1y\xFE\xF9\xF9y\xD5\xB6m\xF4=OP\xD7u\xB5\\.{_\x9FL&N\x02wl\xB4\xCE\xF0\xCB\xCBKD\xF4\x1F\xF7\xC6\xEF\x8F\x7F\xF7zzz\x8A\xA6i\x8A\xDE\xFB\xE6\xE6\xA6h\x8E/\x9A\xA6\xE9J5M\xD3\xCD\xE7\xF3\xE2\xF9\xF9|\xDE\x95\x06\xC0f\xB8\x07HN\x00\xC9\xEDc\x00]\xFC\xE3\xDE\x82\xFF\xB7o\x01X\xFC\x86\xEDS\x00\x9F\x97\xEF\xDF\xC7\r\xD9\x97\x00,\x7FK\x86\x14@\xDF\xDFv\xCB\xDF\xA2!\x05\xF0G\xD7\xF3\xB5\xE5o\xC1\x90\x02\xF8\xBC\xE0\xAFW\x03\xCB\xDF\x92!\x05\x10\xF1\xFD\xA2-\x7F\x8B\x86\x16@\xC4\xDF\v\xB7\xFC-[\xEB0h\x8B,\xFE\x87\f\xF1\n\xC0\x0F\x1AM\xA7\xD3\xE2\xE7\x01\xA6\xD3i\xB5Z\xAD\xE2\xFE\xFE\xBEh~\xB5Z\xF9M\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xE7\x1DpX\xE8\f\x9D\xB6W:\x00\x00\x00\x00IEND\xAEB`\x82")));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/font/gofont/gomono"] = (function() {
	var $pkg = {}, $init, sliceType;
	sliceType = $sliceType($Uint8);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$pkg.TTF = new sliceType([0, 1, 0, 0, 0, 14, 0, 128, 0, 3, 0, 96, 79, 83, 47, 50, 197, 164, 37, 240, 0, 0, 0, 236, 0, 0, 0, 96, 99, 109, 97, 112, 219, 89, 213, 166, 0, 0, 1, 76, 0, 0, 5, 38, 99, 118, 116, 32, 86, 37, 32, 244, 0, 2, 114, 140, 0, 0, 0, 176, 102, 112, 103, 109, 69, 32, 142, 124, 0, 2, 115, 60, 0, 0, 13, 109, 103, 97, 115, 112, 0, 0, 0, 16, 0, 2, 114, 132, 0, 0, 0, 8, 103, 108, 121, 102, 120, 94, 207, 224, 0, 0, 6, 116, 0, 2, 45, 172, 104, 101, 97, 100, 13, 52, 183, 188, 0, 2, 52, 32, 0, 0, 0, 54, 104, 104, 101, 97, 12, 94, 3, 31, 0, 2, 52, 88, 0, 0, 0, 36, 104, 109, 116, 120, 152, 164, 145, 175, 0, 2, 52, 124, 0, 0, 5, 54, 108, 111, 99, 97, 2, 239, 191, 4, 0, 2, 57, 180, 0, 0, 10, 108, 109, 97, 120, 112, 6, 22, 15, 122, 0, 2, 68, 32, 0, 0, 0, 32, 110, 97, 109, 101, 107, 49, 189, 255, 0, 2, 68, 64, 0, 0, 27, 91, 112, 111, 115, 116, 14, 111, 162, 47, 0, 2, 95, 156, 0, 0, 18, 230, 112, 114, 101, 112, 147, 123, 136, 79, 0, 2, 128, 172, 0, 0, 0, 188, 0, 3, 4, 205, 1, 144, 0, 5, 0, 0, 5, 154, 5, 51, 0, 0, 1, 27, 5, 154, 5, 51, 0, 0, 3, 209, 0, 102, 2, 0, 5, 5, 2, 6, 6, 9, 5, 0, 0, 0, 0, 0, 160, 0, 2, 175, 64, 0, 120, 251, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 0, 64, 0, 0, 255, 253, 6, 43, 254, 117, 1, 137, 7, 143, 1, 176, 32, 0, 0, 159, 223, 215, 0, 0, 4, 62, 5, 200, 0, 0, 0, 32, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 28, 0, 1, 0, 0, 0, 0, 3, 28, 0, 3, 0, 1, 0, 0, 0, 28, 0, 4, 3, 0, 0, 0, 0, 188, 0, 128, 0, 6, 0, 60, 0, 0, 0, 13, 0, 126, 1, 127, 1, 146, 1, 255, 2, 27, 2, 199, 2, 201, 2, 221, 3, 138, 3, 140, 3, 161, 3, 206, 4, 95, 4, 145, 30, 133, 30, 243, 32, 21, 32, 30, 32, 34, 32, 38, 32, 48, 32, 51, 32, 58, 32, 60, 32, 62, 32, 68, 32, 127, 32, 164, 32, 167, 32, 172, 33, 5, 33, 19, 33, 22, 33, 34, 33, 38, 33, 46, 33, 94, 33, 149, 33, 168, 34, 2, 34, 6, 34, 15, 34, 18, 34, 21, 34, 26, 34, 31, 34, 41, 34, 43, 34, 72, 34, 97, 34, 101, 35, 2, 35, 16, 35, 33, 37, 0, 37, 2, 37, 12, 37, 16, 37, 20, 37, 24, 37, 28, 37, 36, 37, 44, 37, 52, 37, 60, 37, 108, 37, 128, 37, 132, 37, 136, 37, 140, 37, 147, 37, 161, 37, 172, 37, 178, 37, 186, 37, 188, 37, 196, 37, 203, 37, 207, 37, 217, 37, 230, 38, 60, 38, 64, 38, 66, 38, 96, 38, 99, 38, 102, 38, 107, 248, 0, 251, 2, 255, 253, 255, 255, 0, 0, 0, 0, 0, 13, 0, 32, 0, 160, 1, 146, 1, 250, 2, 24, 2, 198, 2, 201, 2, 216, 3, 132, 3, 140, 3, 142, 3, 163, 4, 0, 4, 144, 30, 128, 30, 242, 32, 19, 32, 23, 32, 32, 32, 38, 32, 48, 32, 50, 32, 57, 32, 60, 32, 62, 32, 68, 32, 127, 32, 163, 32, 167, 32, 172, 33, 5, 33, 19, 33, 22, 33, 34, 33, 38, 33, 46, 33, 91, 33, 144, 33, 168, 34, 2, 34, 6, 34, 15, 34, 17, 34, 21, 34, 25, 34, 30, 34, 41, 34, 43, 34, 72, 34, 96, 34, 100, 35, 2, 35, 16, 35, 32, 37, 0, 37, 2, 37, 12, 37, 16, 37, 20, 37, 24, 37, 28, 37, 36, 37, 44, 37, 52, 37, 60, 37, 80, 37, 128, 37, 132, 37, 136, 37, 140, 37, 144, 37, 160, 37, 170, 37, 178, 37, 186, 37, 188, 37, 196, 37, 202, 37, 207, 37, 216, 37, 230, 38, 58, 38, 64, 38, 66, 38, 96, 38, 99, 38, 101, 38, 106, 248, 0, 251, 1, 255, 253, 255, 255, 0, 1, 255, 245, 255, 227, 255, 194, 255, 176, 255, 73, 255, 49, 254, 135, 254, 134, 254, 120, 253, 210, 253, 209, 253, 208, 253, 207, 253, 158, 253, 110, 227, 128, 227, 20, 225, 245, 225, 244, 225, 243, 225, 240, 225, 231, 225, 230, 225, 225, 225, 224, 225, 223, 225, 218, 225, 160, 225, 125, 225, 123, 225, 119, 225, 31, 225, 18, 225, 16, 225, 5, 225, 2, 224, 251, 224, 207, 224, 158, 224, 140, 224, 51, 224, 48, 224, 40, 224, 39, 224, 37, 224, 34, 224, 31, 224, 22, 224, 21, 223, 249, 223, 226, 223, 224, 223, 68, 223, 55, 223, 40, 221, 74, 221, 73, 221, 64, 221, 61, 221, 58, 221, 55, 221, 52, 221, 45, 221, 38, 221, 31, 221, 24, 221, 5, 220, 242, 220, 239, 220, 236, 220, 233, 220, 230, 220, 218, 220, 210, 220, 205, 220, 198, 220, 197, 220, 190, 220, 185, 220, 182, 220, 174, 220, 162, 220, 79, 220, 76, 220, 75, 220, 46, 220, 44, 220, 43, 220, 40, 10, 148, 7, 148, 2, 154, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 10, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0, 20, 0, 21, 0, 22, 0, 23, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0, 30, 0, 31, 0, 32, 0, 33, 0, 34, 0, 35, 0, 36, 0, 37, 0, 38, 0, 39, 0, 40, 0, 41, 0, 42, 0, 43, 0, 44, 0, 45, 0, 46, 0, 47, 0, 48, 0, 49, 0, 50, 0, 51, 0, 52, 0, 53, 0, 54, 0, 55, 0, 56, 0, 57, 0, 58, 0, 59, 0, 60, 0, 61, 0, 62, 0, 63, 0, 64, 0, 65, 0, 66, 0, 67, 0, 68, 0, 69, 0, 70, 0, 71, 0, 72, 0, 73, 0, 74, 0, 75, 0, 76, 0, 77, 0, 78, 0, 79, 0, 80, 0, 81, 0, 82, 0, 83, 0, 84, 0, 85, 0, 86, 0, 87, 0, 88, 0, 89, 0, 90, 0, 91, 0, 92, 0, 93, 0, 94, 0, 95, 0, 96, 0, 97, 0, 0, 0, 134, 0, 135, 0, 137, 0, 139, 0, 147, 0, 152, 0, 158, 0, 163, 0, 162, 0, 164, 0, 166, 0, 165, 0, 167, 0, 169, 0, 171, 0, 170, 0, 172, 0, 173, 0, 175, 0, 174, 0, 176, 0, 177, 0, 179, 0, 181, 0, 180, 0, 182, 0, 184, 0, 183, 0, 188, 0, 187, 0, 189, 0, 190, 2, 19, 0, 114, 0, 100, 0, 101, 0, 105, 2, 21, 0, 120, 0, 161, 0, 112, 0, 107, 2, 39, 0, 118, 0, 106, 2, 66, 0, 136, 0, 154, 2, 61, 0, 115, 2, 68, 2, 69, 0, 103, 0, 119, 2, 53, 2, 56, 2, 55, 1, 143, 2, 64, 0, 108, 0, 124, 2, 40, 0, 168, 0, 186, 0, 129, 0, 99, 0, 110, 2, 60, 1, 66, 2, 65, 2, 54, 0, 109, 0, 125, 2, 22, 0, 3, 0, 130, 0, 133, 0, 151, 1, 20, 1, 21, 2, 8, 2, 9, 2, 16, 2, 17, 2, 12, 2, 13, 0, 185, 2, 131, 0, 193, 1, 58, 2, 30, 2, 35, 2, 26, 2, 27, 2, 149, 2, 150, 2, 20, 0, 121, 2, 14, 2, 18, 2, 23, 0, 132, 0, 140, 0, 131, 0, 141, 0, 138, 0, 143, 0, 144, 0, 145, 0, 142, 0, 149, 0, 150, 0, 0, 0, 148, 0, 156, 0, 157, 0, 155, 0, 243, 1, 77, 1, 84, 0, 113, 1, 80, 1, 81, 1, 82, 0, 122, 1, 85, 1, 83, 1, 78, 0, 0, 0, 2, 0, 123, 0, 0, 4, 82, 5, 200, 0, 3, 0, 7, 0, 48, 64, 45, 0, 0, 0, 2, 3, 0, 2, 101, 5, 1, 3, 1, 1, 3, 85, 5, 1, 3, 3, 1, 93, 4, 1, 1, 3, 1, 77, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 11, 21, 43, 51, 17, 33, 17, 39, 17, 33, 17, 123, 3, 215, 123, 253, 31, 5, 200, 250, 56, 123, 4, 210, 251, 46, 0, 0, 2, 1, 244, 0, 0, 2, 255, 5, 200, 0, 3, 0, 9, 0, 76, 75, 176, 42, 80, 88, 64, 23, 5, 1, 3, 3, 2, 93, 0, 2, 2, 56, 75, 0, 0, 0, 1, 93, 4, 1, 1, 1, 57, 1, 76, 27, 64, 21, 0, 2, 5, 1, 3, 0, 2, 3, 101, 0, 0, 0, 1, 93, 4, 1, 1, 1, 60, 1, 76, 89, 64, 18, 4, 4, 0, 0, 4, 9, 4, 9, 7, 6, 0, 3, 0, 3, 17, 6, 9, 21, 43, 33, 17, 33, 17, 3, 3, 17, 51, 17, 3, 1, 244, 1, 11, 209, 37, 225, 37, 1, 6, 254, 250, 1, 203, 2, 115, 1, 138, 254, 118, 253, 141, 0, 2, 0, 240, 3, 184, 3, 221, 6, 43, 0, 3, 0, 7, 0, 36, 64, 33, 5, 3, 4, 3, 1, 1, 0, 93, 2, 1, 0, 0, 58, 1, 76, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 9, 21, 43, 1, 3, 51, 3, 33, 3, 51, 3, 1, 33, 49, 247, 50, 1, 99, 49, 246, 49, 3, 184, 2, 115, 253, 141, 2, 115, 253, 141, 0, 2, 0, 41, 0, 0, 4, 165, 5, 200, 0, 27, 0, 31, 0, 169, 75, 176, 16, 80, 88, 64, 40, 14, 9, 2, 1, 12, 10, 2, 0, 11, 1, 0, 101, 6, 1, 4, 4, 56, 75, 15, 8, 2, 2, 2, 3, 93, 7, 5, 2, 3, 3, 59, 75, 16, 13, 2, 11, 11, 57, 11, 76, 27, 75, 176, 42, 80, 88, 64, 38, 7, 5, 2, 3, 15, 8, 2, 2, 1, 3, 2, 102, 14, 9, 2, 1, 12, 10, 2, 0, 11, 1, 0, 101, 6, 1, 4, 4, 56, 75, 16, 13, 2, 11, 11, 57, 11, 76, 27, 64, 38, 6, 1, 4, 3, 4, 131, 7, 5, 2, 3, 15, 8, 2, 2, 1, 3, 2, 102, 14, 9, 2, 1, 12, 10, 2, 0, 11, 1, 0, 101, 16, 13, 2, 11, 11, 60, 11, 76, 89, 89, 64, 30, 0, 0, 31, 30, 29, 28, 0, 27, 0, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 29, 43, 51, 19, 35, 55, 51, 19, 33, 55, 33, 19, 51, 3, 33, 19, 51, 3, 51, 7, 35, 3, 33, 7, 33, 3, 35, 19, 33, 3, 19, 33, 19, 33, 165, 111, 235, 31, 235, 86, 254, 228, 31, 1, 28, 111, 136, 111, 1, 3, 111, 136, 111, 234, 31, 234, 87, 1, 28, 31, 254, 229, 111, 136, 111, 254, 253, 111, 141, 1, 4, 86, 254, 253, 1, 188, 124, 1, 89, 123, 1, 188, 254, 68, 1, 188, 254, 68, 123, 254, 167, 124, 254, 68, 1, 188, 254, 68, 2, 56, 1, 89, 0, 0, 0, 0, 3, 0, 143, 255, 133, 4, 7, 6, 68, 0, 38, 0, 46, 0, 54, 0, 182, 64, 30, 16, 1, 2, 1, 21, 1, 4, 2, 47, 46, 28, 9, 4, 0, 3, 39, 37, 8, 3, 1, 5, 5, 0, 4, 74, 48, 1, 4, 1, 73, 75, 176, 40, 80, 88, 64, 36, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 5, 4, 0, 5, 124, 6, 1, 5, 5, 130, 0, 1, 1, 58, 75, 0, 4, 4, 2, 95, 0, 2, 2, 56, 4, 76, 27, 75, 176, 42, 80, 88, 64, 36, 0, 1, 2, 1, 131, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 5, 4, 0, 5, 124, 6, 1, 5, 5, 130, 0, 4, 4, 2, 95, 0, 2, 2, 56, 4, 76, 27, 64, 41, 0, 1, 2, 1, 131, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 5, 4, 0, 5, 124, 6, 1, 5, 5, 130, 0, 2, 4, 4, 2, 87, 0, 2, 2, 4, 95, 0, 4, 2, 4, 79, 89, 89, 64, 14, 0, 0, 0, 38, 0, 38, 34, 18, 17, 28, 20, 7, 9, 25, 43, 5, 53, 38, 39, 17, 51, 23, 22, 23, 17, 39, 38, 53, 52, 55, 54, 55, 53, 51, 21, 22, 23, 17, 35, 39, 38, 35, 35, 17, 23, 22, 23, 22, 21, 20, 7, 6, 7, 21, 53, 54, 55, 54, 53, 52, 39, 39, 3, 17, 6, 7, 6, 21, 20, 23, 2, 13, 202, 180, 123, 25, 124, 110, 90, 255, 129, 90, 151, 124, 161, 167, 123, 25, 87, 72, 21, 87, 150, 60, 60, 138, 93, 151, 81, 52, 70, 136, 67, 99, 105, 45, 42, 139, 123, 123, 16, 70, 1, 43, 198, 56, 8, 2, 63, 53, 150, 222, 174, 99, 69, 15, 124, 124, 1, 71, 254, 228, 198, 35, 253, 234, 47, 81, 82, 82, 122, 197, 117, 80, 15, 123, 246, 9, 60, 80, 116, 132, 77, 38, 1, 0, 1, 210, 26, 60, 55, 83, 130, 81, 0, 0, 0, 0, 5, 0, 21, 255, 219, 4, 183, 5, 237, 0, 3, 0, 19, 0, 27, 0, 43, 0, 51, 0, 219, 75, 176, 27, 80, 88, 64, 52, 0, 5, 0, 3, 6, 5, 3, 103, 13, 1, 6, 14, 1, 8, 9, 6, 8, 104, 0, 0, 0, 56, 75, 12, 1, 4, 4, 2, 95, 11, 1, 2, 2, 56, 75, 0, 9, 9, 7, 95, 0, 7, 7, 57, 75, 10, 1, 1, 1, 57, 1, 76, 27, 75, 176, 42, 80, 88, 64, 52, 0, 0, 2, 0, 131, 10, 1, 1, 7, 1, 132, 0, 5, 0, 3, 6, 5, 3, 103, 13, 1, 6, 14, 1, 8, 9, 6, 8, 104, 12, 1, 4, 4, 2, 95, 11, 1, 2, 2, 56, 75, 0, 9, 9, 7, 95, 0, 7, 7, 57, 7, 76, 27, 64, 50, 0, 0, 2, 0, 131, 10, 1, 1, 7, 1, 132, 11, 1, 2, 12, 1, 4, 5, 2, 4, 103, 0, 5, 0, 3, 6, 5, 3, 103, 13, 1, 6, 14, 1, 8, 9, 6, 8, 104, 0, 9, 9, 7, 95, 0, 7, 7, 60, 7, 76, 89, 89, 64, 42, 45, 44, 29, 28, 21, 20, 5, 4, 0, 0, 49, 47, 44, 51, 45, 51, 37, 35, 28, 43, 29, 43, 25, 23, 20, 27, 21, 27, 13, 11, 4, 19, 5, 19, 0, 3, 0, 3, 17, 15, 9, 21, 43, 23, 1, 51, 1, 19, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 21, 20, 51, 50, 53, 52, 1, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 21, 20, 51, 50, 53, 52, 61, 3, 205, 132, 252, 48, 101, 125, 66, 79, 73, 72, 129, 110, 69, 87, 73, 72, 125, 128, 128, 128, 2, 6, 125, 66, 79, 73, 73, 126, 112, 69, 87, 73, 72, 125, 128, 128, 129, 37, 6, 18, 249, 238, 5, 237, 101, 102, 166, 169, 101, 101, 83, 105, 182, 168, 101, 101, 123, 247, 246, 247, 246, 253, 151, 101, 101, 166, 170, 101, 101, 82, 105, 184, 167, 101, 101, 123, 245, 249, 247, 247, 0, 0, 3, 0, 57, 255, 219, 4, 168, 5, 238, 0, 42, 0, 52, 0, 64, 0, 211, 75, 176, 38, 80, 88, 64, 17, 45, 25, 11, 3, 3, 8, 39, 27, 2, 5, 2, 1, 1, 6, 5, 3, 74, 27, 64, 18, 45, 25, 11, 3, 3, 8, 39, 27, 2, 5, 2, 2, 74, 1, 1, 7, 1, 73, 89, 75, 176, 38, 80, 88, 64, 43, 0, 3, 4, 1, 2, 5, 3, 2, 101, 0, 8, 8, 1, 95, 0, 1, 1, 62, 75, 7, 1, 5, 5, 6, 93, 9, 1, 6, 6, 57, 75, 7, 1, 5, 5, 0, 95, 0, 0, 0, 63, 0, 76, 27, 75, 176, 42, 80, 88, 64, 41, 0, 3, 4, 1, 2, 5, 3, 2, 101, 0, 8, 8, 1, 95, 0, 1, 1, 62, 75, 0, 5, 5, 6, 93, 9, 1, 6, 6, 57, 75, 0, 7, 7, 0, 95, 0, 0, 0, 63, 0, 76, 27, 64, 39, 0, 1, 0, 8, 3, 1, 8, 103, 0, 3, 4, 1, 2, 5, 3, 2, 101, 0, 5, 5, 6, 93, 9, 1, 6, 6, 60, 75, 0, 7, 7, 0, 95, 0, 0, 0, 66, 0, 76, 89, 89, 64, 19, 0, 0, 60, 58, 52, 50, 0, 42, 0, 42, 21, 17, 17, 28, 44, 34, 10, 9, 26, 43, 33, 39, 6, 35, 34, 39, 38, 53, 52, 55, 54, 55, 38, 53, 52, 55, 54, 51, 50, 23, 22, 21, 20, 7, 6, 7, 18, 23, 54, 55, 39, 35, 53, 33, 21, 35, 6, 7, 6, 7, 23, 51, 21, 37, 38, 3, 6, 21, 20, 23, 22, 51, 50, 3, 54, 55, 54, 53, 52, 35, 34, 21, 20, 23, 22, 3, 160, 94, 181, 175, 188, 116, 117, 107, 62, 119, 72, 84, 84, 147, 152, 74, 64, 111, 67, 128, 173, 134, 89, 1, 2, 99, 1, 68, 72, 9, 32, 31, 90, 110, 124, 254, 77, 177, 175, 169, 75, 75, 129, 124, 121, 81, 41, 59, 115, 132, 59, 2, 110, 147, 125, 125, 200, 178, 137, 80, 81, 167, 132, 152, 89, 89, 82, 71, 125, 145, 116, 70, 73, 254, 180, 172, 119, 99, 67, 123, 123, 90, 87, 88, 112, 117, 123, 208, 225, 1, 96, 131, 213, 154, 88, 89, 3, 60, 54, 55, 80, 105, 162, 196, 139, 109, 4, 0, 0, 0, 1, 1, 210, 3, 184, 2, 250, 6, 43, 0, 3, 0, 25, 64, 22, 2, 1, 1, 1, 0, 93, 0, 0, 0, 58, 1, 76, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 1, 3, 33, 3, 2, 28, 74, 1, 40, 74, 3, 184, 2, 115, 253, 141, 0, 0, 1, 1, 65, 254, 216, 3, 214, 6, 43, 0, 21, 0, 6, 179, 12, 0, 1, 48, 43, 1, 38, 39, 38, 39, 38, 17, 16, 19, 54, 55, 54, 55, 21, 6, 7, 6, 17, 16, 23, 22, 23, 3, 214, 152, 110, 183, 111, 105, 248, 99, 126, 78, 110, 192, 112, 147, 161, 109, 181, 254, 216, 30, 72, 120, 229, 217, 1, 14, 1, 163, 1, 27, 113, 62, 38, 22, 123, 58, 174, 228, 254, 158, 254, 139, 231, 156, 55, 0, 1, 0, 247, 254, 216, 3, 140, 6, 43, 0, 21, 0, 6, 179, 10, 0, 1, 48, 43, 19, 53, 54, 55, 54, 17, 16, 39, 38, 39, 53, 22, 23, 22, 23, 22, 17, 16, 3, 6, 7, 6, 247, 193, 112, 147, 161, 109, 182, 153, 110, 183, 110, 105, 247, 100, 125, 78, 254, 216, 123, 58, 174, 228, 1, 99, 1, 116, 231, 156, 55, 123, 30, 72, 120, 229, 216, 254, 242, 254, 91, 254, 230, 113, 62, 38, 0, 0, 0, 5, 0, 104, 1, 60, 4, 101, 5, 10, 0, 4, 0, 11, 0, 18, 0, 27, 0, 32, 0, 46, 64, 43, 20, 6, 2, 1, 0, 1, 74, 32, 31, 29, 22, 21, 15, 11, 9, 7, 4, 2, 1, 12, 1, 71, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 95, 0, 1, 0, 1, 79, 34, 29, 2, 9, 22, 43, 1, 39, 1, 22, 23, 37, 55, 5, 6, 21, 20, 23, 55, 3, 51, 3, 38, 35, 34, 23, 37, 23, 5, 52, 55, 53, 53, 52, 19, 3, 54, 55, 1, 1, 184, 193, 1, 9, 24, 61, 254, 19, 66, 1, 106, 34, 2, 57, 51, 222, 58, 39, 17, 19, 101, 1, 109, 64, 254, 116, 1, 74, 181, 57, 33, 1, 18, 1, 61, 118, 1, 49, 45, 16, 153, 214, 170, 36, 40, 9, 17, 121, 1, 139, 254, 117, 15, 35, 172, 217, 54, 3, 6, 3, 4, 49, 253, 243, 1, 106, 7, 49, 254, 222, 0, 1, 0, 99, 0, 101, 4, 106, 4, 109, 0, 11, 0, 77, 75, 176, 21, 80, 88, 64, 22, 3, 1, 1, 4, 1, 0, 5, 1, 0, 101, 6, 1, 5, 5, 2, 93, 0, 2, 2, 59, 5, 76, 27, 64, 27, 0, 2, 1, 5, 2, 85, 3, 1, 1, 4, 1, 0, 5, 1, 0, 101, 0, 2, 2, 5, 93, 6, 1, 5, 2, 5, 77, 89, 64, 14, 0, 0, 0, 11, 0, 11, 17, 17, 17, 17, 17, 7, 9, 25, 43, 37, 17, 33, 53, 33, 17, 51, 17, 33, 21, 33, 17, 2, 29, 254, 70, 1, 186, 148, 1, 185, 254, 71, 101, 1, 186, 148, 1, 186, 254, 70, 148, 254, 70, 0, 0, 0, 0, 1, 1, 191, 254, 117, 3, 15, 1, 80, 0, 10, 0, 66, 181, 6, 1, 1, 2, 1, 74, 75, 176, 42, 80, 88, 64, 17, 0, 0, 0, 2, 93, 3, 1, 2, 2, 57, 75, 0, 1, 1, 61, 1, 76, 27, 64, 17, 0, 0, 0, 2, 93, 3, 1, 2, 2, 60, 75, 0, 1, 1, 61, 1, 76, 89, 64, 11, 0, 0, 0, 10, 0, 10, 18, 17, 4, 9, 22, 43, 33, 17, 33, 21, 16, 33, 53, 54, 55, 54, 55, 1, 191, 1, 80, 254, 176, 112, 22, 20, 6, 1, 80, 220, 254, 1, 99, 12, 55, 48, 181, 0, 0, 1, 0, 99, 2, 31, 4, 106, 2, 179, 0, 3, 0, 30, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 19, 53, 33, 21, 99, 4, 7, 2, 31, 148, 148, 0, 0, 1, 1, 190, 0, 0, 3, 14, 1, 80, 0, 3, 0, 48, 75, 176, 42, 80, 88, 64, 12, 0, 0, 0, 1, 93, 2, 1, 1, 1, 57, 1, 76, 27, 64, 12, 0, 0, 0, 1, 93, 2, 1, 1, 1, 60, 1, 76, 89, 64, 10, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 33, 17, 33, 17, 1, 190, 1, 80, 1, 80, 254, 176, 0, 0, 0, 1, 0, 99, 254, 216, 4, 107, 6, 43, 0, 3, 0, 25, 64, 22, 2, 1, 1, 0, 1, 132, 0, 0, 0, 58, 0, 76, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 19, 1, 51, 1, 99, 3, 100, 164, 252, 155, 254, 216, 7, 83, 248, 173, 0, 0, 3, 0, 96, 255, 219, 4, 108, 5, 237, 0, 15, 0, 24, 0, 35, 0, 88, 64, 9, 32, 31, 23, 22, 4, 2, 3, 1, 74, 75, 176, 42, 80, 88, 64, 23, 5, 1, 3, 3, 0, 95, 4, 1, 0, 0, 62, 75, 0, 2, 2, 1, 95, 0, 1, 1, 63, 1, 76, 27, 64, 21, 4, 1, 0, 5, 1, 3, 2, 0, 3, 103, 0, 2, 2, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 19, 26, 25, 1, 0, 25, 35, 26, 35, 19, 17, 9, 7, 0, 15, 1, 15, 6, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 19, 22, 51, 32, 17, 52, 39, 1, 22, 19, 34, 7, 6, 17, 20, 23, 1, 38, 39, 38, 2, 102, 240, 139, 139, 139, 139, 248, 211, 132, 167, 139, 139, 14, 78, 147, 1, 51, 15, 253, 210, 17, 250, 147, 79, 79, 14, 2, 47, 17, 24, 80, 5, 237, 208, 207, 254, 152, 254, 146, 206, 207, 169, 214, 1, 139, 1, 105, 207, 208, 251, 21, 172, 2, 142, 135, 106, 253, 163, 66, 4, 60, 170, 171, 254, 201, 135, 108, 2, 94, 67, 53, 169, 0, 0, 1, 0, 113, 0, 0, 4, 175, 5, 237, 0, 9, 0, 59, 182, 6, 5, 4, 3, 4, 0, 72, 75, 176, 42, 80, 88, 64, 13, 1, 1, 0, 0, 2, 93, 3, 1, 2, 2, 57, 2, 76, 27, 64, 13, 1, 1, 0, 0, 2, 93, 3, 1, 2, 2, 60, 2, 76, 89, 64, 11, 0, 0, 0, 9, 0, 9, 21, 17, 4, 9, 22, 43, 51, 53, 33, 17, 5, 53, 1, 17, 33, 21, 113, 1, 188, 254, 68, 2, 130, 1, 188, 123, 4, 158, 177, 132, 1, 1, 250, 142, 123, 0, 0, 0, 1, 0, 133, 0, 0, 4, 84, 5, 237, 0, 33, 0, 98, 64, 11, 16, 1, 0, 2, 1, 74, 1, 1, 3, 1, 73, 75, 176, 42, 80, 88, 64, 30, 0, 1, 0, 3, 0, 1, 3, 126, 0, 0, 0, 2, 95, 0, 2, 2, 62, 75, 0, 3, 3, 4, 93, 5, 1, 4, 4, 57, 4, 76, 27, 64, 28, 0, 1, 0, 3, 0, 1, 3, 126, 0, 2, 0, 0, 1, 2, 0, 103, 0, 3, 3, 4, 93, 5, 1, 4, 4, 60, 4, 76, 89, 64, 13, 0, 0, 0, 33, 0, 33, 28, 34, 18, 42, 6, 9, 24, 43, 51, 53, 54, 63, 2, 54, 53, 52, 39, 38, 35, 34, 7, 7, 35, 17, 54, 51, 50, 23, 22, 21, 20, 7, 6, 7, 7, 6, 7, 6, 7, 33, 21, 133, 110, 148, 103, 122, 238, 76, 75, 126, 118, 141, 24, 124, 246, 200, 207, 121, 120, 55, 57, 144, 85, 220, 62, 56, 29, 2, 240, 173, 186, 134, 93, 112, 218, 203, 125, 75, 75, 86, 235, 1, 94, 94, 108, 107, 184, 132, 97, 101, 120, 71, 186, 82, 72, 84, 173, 0, 0, 0, 0, 1, 0, 185, 255, 219, 4, 57, 5, 237, 0, 43, 0, 133, 64, 18, 25, 1, 4, 6, 22, 1, 5, 4, 33, 1, 2, 3, 0, 1, 7, 1, 4, 74, 75, 176, 42, 80, 88, 64, 45, 0, 5, 4, 3, 4, 5, 3, 126, 0, 0, 2, 1, 2, 0, 1, 126, 0, 3, 0, 2, 0, 3, 2, 103, 0, 4, 4, 6, 95, 0, 6, 6, 62, 75, 0, 1, 1, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 43, 0, 5, 4, 3, 4, 5, 3, 126, 0, 0, 2, 1, 2, 0, 1, 126, 0, 6, 0, 4, 5, 6, 4, 103, 0, 3, 0, 2, 0, 3, 2, 103, 0, 1, 1, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 11, 44, 34, 18, 36, 33, 36, 34, 17, 8, 9, 28, 43, 55, 17, 51, 23, 22, 51, 50, 55, 54, 53, 16, 33, 35, 53, 51, 32, 17, 52, 39, 38, 35, 34, 7, 7, 35, 17, 54, 51, 32, 17, 20, 7, 6, 7, 22, 23, 22, 21, 20, 7, 6, 35, 34, 39, 185, 123, 25, 86, 119, 153, 90, 90, 254, 96, 135, 114, 1, 139, 73, 72, 127, 118, 84, 12, 124, 193, 165, 1, 197, 105, 64, 119, 105, 55, 179, 138, 138, 229, 155, 151, 10, 1, 118, 246, 52, 87, 87, 149, 1, 63, 123, 1, 40, 114, 66, 67, 39, 209, 1, 62, 53, 254, 159, 163, 100, 59, 44, 31, 34, 111, 223, 194, 121, 121, 30, 0, 0, 0, 2, 0, 84, 0, 0, 4, 108, 5, 200, 0, 14, 0, 17, 0, 92, 64, 11, 17, 1, 2, 1, 1, 74, 2, 1, 2, 1, 73, 75, 176, 42, 80, 88, 64, 27, 7, 1, 2, 3, 1, 0, 4, 2, 0, 102, 0, 1, 1, 56, 75, 6, 1, 4, 4, 5, 93, 0, 5, 5, 57, 5, 76, 27, 64, 27, 0, 1, 2, 1, 131, 7, 1, 2, 3, 1, 0, 4, 2, 0, 102, 6, 1, 4, 4, 5, 93, 0, 5, 5, 60, 5, 76, 89, 64, 11, 17, 17, 17, 17, 17, 17, 18, 16, 8, 9, 28, 43, 1, 33, 53, 1, 51, 17, 51, 21, 35, 17, 51, 21, 33, 53, 33, 1, 33, 17, 2, 226, 253, 114, 2, 117, 197, 222, 222, 198, 253, 126, 1, 16, 254, 12, 1, 244, 1, 163, 149, 3, 144, 252, 112, 149, 254, 216, 123, 123, 1, 189, 2, 212, 0, 1, 0, 249, 255, 219, 4, 52, 5, 200, 0, 31, 0, 108, 64, 10, 15, 1, 0, 2, 0, 1, 6, 1, 2, 74, 75, 176, 42, 80, 88, 64, 37, 0, 0, 2, 1, 2, 0, 1, 126, 0, 5, 0, 2, 0, 5, 2, 103, 0, 4, 4, 3, 93, 0, 3, 3, 56, 75, 0, 1, 1, 6, 95, 0, 6, 6, 63, 6, 76, 27, 64, 35, 0, 0, 2, 1, 2, 0, 1, 126, 0, 3, 0, 4, 5, 3, 4, 101, 0, 5, 0, 2, 0, 5, 2, 103, 0, 1, 1, 6, 95, 0, 6, 6, 66, 6, 76, 89, 64, 10, 38, 49, 17, 18, 38, 34, 17, 7, 9, 27, 43, 51, 17, 51, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 35, 34, 7, 17, 33, 21, 33, 17, 54, 51, 32, 23, 22, 21, 20, 7, 6, 35, 34, 249, 123, 25, 92, 67, 133, 88, 89, 119, 119, 201, 65, 82, 2, 253, 253, 148, 49, 26, 1, 5, 157, 158, 146, 146, 225, 115, 1, 65, 198, 37, 98, 99, 150, 167, 99, 98, 14, 2, 185, 172, 254, 120, 3, 131, 130, 218, 208, 134, 135, 0, 2, 0, 122, 255, 219, 4, 108, 5, 237, 0, 30, 0, 44, 0, 116, 64, 10, 22, 1, 4, 2, 0, 1, 6, 5, 2, 74, 75, 176, 42, 80, 88, 64, 38, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 7, 1, 5, 6, 0, 5, 103, 0, 4, 4, 2, 95, 0, 2, 2, 62, 75, 0, 6, 6, 1, 95, 0, 1, 1, 63, 1, 76, 27, 64, 36, 0, 3, 4, 0, 4, 3, 0, 126, 0, 2, 0, 4, 3, 2, 4, 103, 0, 0, 7, 1, 5, 6, 0, 5, 103, 0, 6, 6, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 16, 32, 31, 40, 38, 31, 44, 32, 44, 34, 18, 38, 38, 35, 8, 9, 25, 43, 1, 54, 55, 54, 51, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 5, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 16, 1, 79, 64, 70, 103, 134, 190, 118, 118, 137, 137, 216, 244, 138, 138, 163, 163, 1, 34, 128, 198, 124, 23, 87, 91, 215, 109, 77, 1, 75, 135, 92, 92, 93, 93, 131, 111, 68, 86, 3, 5, 88, 44, 64, 134, 133, 216, 231, 146, 146, 198, 199, 1, 94, 1, 129, 211, 211, 71, 254, 195, 210, 55, 216, 151, 188, 103, 102, 154, 160, 117, 117, 79, 100, 198, 1, 120, 0, 0, 0, 1, 0, 145, 0, 0, 4, 34, 5, 200, 0, 13, 0, 63, 180, 8, 1, 0, 1, 73, 75, 176, 42, 80, 88, 64, 17, 0, 0, 0, 1, 93, 0, 1, 1, 56, 75, 3, 1, 2, 2, 57, 2, 76, 27, 64, 15, 0, 1, 0, 0, 2, 1, 0, 101, 3, 1, 2, 2, 60, 2, 76, 89, 64, 11, 0, 0, 0, 13, 0, 13, 17, 20, 4, 9, 22, 43, 33, 18, 1, 55, 55, 33, 53, 33, 21, 7, 2, 3, 6, 7, 1, 8, 61, 1, 90, 125, 109, 253, 8, 3, 145, 87, 255, 121, 83, 1, 1, 176, 2, 5, 184, 162, 185, 185, 119, 254, 160, 254, 153, 250, 215, 0, 0, 0, 3, 0, 120, 255, 219, 4, 89, 5, 237, 0, 31, 0, 45, 0, 62, 0, 71, 181, 16, 1, 3, 2, 1, 74, 75, 176, 42, 80, 88, 64, 21, 0, 2, 2, 0, 95, 0, 0, 0, 62, 75, 0, 3, 3, 1, 95, 0, 1, 1, 63, 1, 76, 27, 64, 19, 0, 0, 0, 2, 3, 0, 2, 103, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 10, 55, 53, 39, 37, 26, 24, 38, 4, 9, 21, 43, 1, 39, 38, 53, 52, 55, 54, 51, 50, 23, 22, 21, 20, 7, 6, 7, 7, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 37, 54, 53, 52, 39, 38, 35, 34, 7, 6, 21, 20, 23, 23, 7, 6, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 39, 1, 157, 53, 172, 125, 124, 197, 187, 115, 115, 58, 44, 105, 47, 68, 144, 52, 52, 139, 139, 224, 224, 133, 134, 238, 1, 68, 184, 64, 65, 125, 109, 66, 65, 127, 98, 85, 113, 39, 43, 87, 87, 135, 125, 76, 76, 39, 37, 113, 3, 35, 40, 130, 172, 162, 105, 105, 91, 91, 150, 118, 79, 59, 94, 42, 46, 97, 78, 77, 114, 186, 116, 116, 112, 112, 185, 224, 168, 98, 169, 143, 106, 57, 57, 60, 59, 91, 97, 97, 75, 172, 123, 68, 75, 100, 128, 81, 82, 72, 71, 116, 82, 53, 52, 76, 0, 0, 0, 0, 2, 0, 96, 255, 219, 4, 82, 5, 237, 0, 30, 0, 44, 0, 116, 64, 10, 0, 1, 6, 5, 22, 1, 2, 4, 2, 74, 75, 176, 42, 80, 88, 64, 38, 0, 3, 0, 4, 0, 3, 4, 126, 0, 6, 0, 0, 3, 6, 0, 103, 7, 1, 5, 5, 1, 95, 0, 1, 1, 62, 75, 0, 4, 4, 2, 95, 0, 2, 2, 63, 2, 76, 27, 64, 36, 0, 3, 0, 4, 0, 3, 4, 126, 0, 1, 7, 1, 5, 6, 1, 5, 103, 0, 6, 0, 0, 3, 6, 0, 103, 0, 4, 4, 2, 95, 0, 2, 2, 66, 2, 76, 89, 64, 16, 32, 31, 38, 36, 31, 44, 32, 44, 34, 18, 38, 38, 35, 8, 9, 25, 43, 1, 6, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 51, 50, 23, 22, 17, 16, 7, 6, 33, 34, 39, 17, 51, 23, 22, 51, 50, 55, 54, 1, 34, 7, 6, 21, 16, 33, 50, 55, 54, 53, 52, 39, 38, 3, 125, 64, 70, 103, 135, 190, 117, 118, 137, 137, 216, 244, 138, 138, 163, 163, 254, 222, 128, 198, 123, 24, 86, 92, 214, 110, 77, 254, 182, 110, 68, 86, 1, 7, 134, 93, 92, 94, 94, 2, 195, 87, 44, 64, 134, 133, 215, 232, 145, 146, 198, 198, 254, 161, 254, 127, 211, 211, 71, 1, 61, 210, 55, 216, 151, 3, 173, 79, 100, 198, 254, 136, 103, 102, 154, 160, 117, 117, 0, 2, 1, 244, 0, 0, 3, 68, 4, 86, 0, 3, 0, 7, 0, 76, 75, 176, 42, 80, 88, 64, 23, 4, 1, 1, 1, 0, 93, 0, 0, 0, 59, 75, 0, 2, 2, 3, 93, 5, 1, 3, 3, 57, 3, 76, 27, 64, 21, 0, 0, 4, 1, 1, 2, 0, 1, 101, 0, 2, 2, 3, 93, 5, 1, 3, 3, 60, 3, 76, 89, 64, 18, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 9, 21, 43, 1, 17, 33, 17, 1, 17, 33, 17, 1, 244, 1, 80, 254, 176, 1, 80, 3, 6, 1, 80, 254, 176, 252, 250, 1, 80, 254, 176, 0, 2, 1, 244, 254, 117, 3, 68, 4, 86, 0, 3, 0, 14, 0, 95, 181, 10, 1, 3, 4, 1, 74, 75, 176, 42, 80, 88, 64, 28, 5, 1, 1, 1, 0, 93, 0, 0, 0, 59, 75, 0, 2, 2, 4, 93, 6, 1, 4, 4, 57, 75, 0, 3, 3, 61, 3, 76, 27, 64, 26, 0, 0, 5, 1, 1, 2, 0, 1, 101, 0, 2, 2, 4, 93, 6, 1, 4, 4, 60, 75, 0, 3, 3, 61, 3, 76, 89, 64, 20, 4, 4, 0, 0, 4, 14, 4, 14, 9, 8, 6, 5, 0, 3, 0, 3, 17, 7, 9, 21, 43, 1, 17, 33, 17, 1, 17, 33, 21, 16, 33, 53, 54, 55, 54, 55, 1, 244, 1, 80, 254, 176, 1, 80, 254, 176, 112, 22, 20, 6, 3, 6, 1, 80, 254, 176, 252, 250, 1, 80, 220, 254, 1, 99, 12, 55, 48, 181, 0, 0, 0, 1, 0, 99, 0, 0, 4, 107, 4, 210, 0, 5, 0, 6, 179, 2, 0, 1, 48, 43, 33, 1, 1, 21, 1, 1, 4, 107, 251, 248, 4, 8, 253, 25, 2, 231, 2, 105, 2, 105, 173, 254, 68, 254, 68, 0, 0, 0, 0, 2, 0, 99, 1, 90, 4, 106, 3, 120, 0, 3, 0, 7, 0, 47, 64, 44, 0, 2, 5, 1, 3, 0, 2, 3, 101, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 4, 1, 1, 0, 1, 77, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 9, 21, 43, 19, 53, 33, 21, 1, 53, 33, 21, 99, 4, 7, 251, 249, 4, 7, 1, 90, 148, 148, 1, 138, 148, 148, 0, 0, 0, 1, 0, 99, 0, 0, 4, 107, 4, 210, 0, 5, 0, 6, 179, 4, 0, 1, 48, 43, 51, 53, 1, 1, 53, 1, 99, 2, 231, 253, 25, 4, 8, 173, 1, 188, 1, 188, 173, 253, 151, 0, 0, 0, 0, 2, 0, 222, 0, 0, 4, 75, 5, 237, 0, 3, 0, 34, 0, 117, 181, 19, 1, 2, 4, 1, 74, 75, 176, 42, 80, 88, 64, 38, 0, 3, 2, 5, 2, 3, 5, 126, 7, 1, 5, 0, 2, 5, 0, 124, 0, 2, 2, 4, 95, 0, 4, 4, 62, 75, 0, 0, 0, 1, 93, 6, 1, 1, 1, 57, 1, 76, 27, 64, 36, 0, 3, 2, 5, 2, 3, 5, 126, 7, 1, 5, 0, 2, 5, 0, 124, 0, 4, 0, 2, 3, 4, 2, 103, 0, 0, 0, 1, 93, 6, 1, 1, 1, 60, 1, 76, 89, 64, 22, 4, 4, 0, 0, 4, 34, 4, 34, 22, 20, 18, 17, 15, 13, 0, 3, 0, 3, 17, 8, 9, 21, 43, 33, 53, 51, 21, 3, 53, 52, 55, 55, 54, 53, 52, 39, 38, 35, 34, 7, 3, 35, 17, 54, 51, 32, 17, 20, 7, 6, 7, 14, 2, 7, 6, 21, 21, 1, 179, 247, 247, 244, 67, 143, 71, 70, 124, 124, 130, 24, 124, 218, 193, 1, 210, 147, 59, 9, 9, 21, 90, 37, 45, 222, 222, 1, 183, 49, 232, 156, 47, 100, 139, 106, 63, 63, 62, 254, 253, 1, 121, 67, 254, 175, 166, 110, 44, 7, 6, 14, 79, 51, 56, 156, 52, 0, 0, 0, 0, 2, 0, 87, 255, 219, 4, 162, 5, 237, 0, 46, 0, 61, 0, 148, 64, 19, 32, 1, 9, 6, 48, 47, 2, 4, 9, 46, 1, 8, 3, 0, 1, 0, 8, 4, 74, 75, 176, 42, 80, 88, 64, 47, 0, 4, 9, 2, 9, 4, 2, 126, 0, 6, 0, 9, 4, 6, 9, 103, 10, 1, 2, 5, 1, 3, 8, 2, 3, 103, 0, 7, 7, 1, 95, 0, 1, 1, 62, 75, 0, 8, 8, 0, 95, 0, 0, 0, 63, 0, 76, 27, 64, 50, 0, 4, 9, 10, 9, 4, 10, 126, 0, 1, 0, 7, 6, 1, 7, 103, 0, 6, 0, 9, 4, 6, 9, 103, 0, 10, 2, 3, 10, 87, 0, 2, 5, 1, 3, 8, 2, 3, 103, 0, 8, 8, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 16, 59, 57, 51, 49, 38, 36, 38, 35, 17, 17, 18, 38, 33, 11, 9, 29, 43, 37, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 32, 17, 17, 51, 21, 35, 17, 35, 6, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 51, 50, 23, 38, 39, 38, 35, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 17, 53, 38, 35, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 3, 177, 151, 103, 254, 236, 164, 164, 162, 162, 1, 8, 1, 137, 118, 241, 25, 38, 66, 86, 109, 104, 66, 67, 114, 114, 164, 64, 96, 29, 74, 66, 104, 204, 124, 125, 133, 132, 219, 117, 134, 83, 68, 121, 70, 71, 31, 30, 46, 70, 74, 72, 12, 49, 203, 203, 1, 94, 1, 99, 222, 221, 254, 37, 253, 140, 123, 1, 111, 159, 93, 122, 104, 104, 162, 219, 152, 153, 26, 135, 56, 51, 182, 183, 254, 216, 254, 215, 175, 175, 64, 3, 9, 111, 48, 112, 112, 188, 109, 70, 69, 125, 121, 0, 0, 0, 0, 2, 0, 25, 0, 0, 4, 179, 5, 200, 0, 15, 0, 19, 0, 97, 181, 18, 1, 8, 3, 1, 74, 75, 176, 42, 80, 88, 64, 29, 0, 8, 9, 1, 7, 0, 8, 7, 102, 0, 3, 3, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 64, 29, 0, 3, 8, 3, 131, 0, 8, 9, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 60, 1, 76, 89, 64, 18, 0, 0, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 10, 9, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 0, 0, 0, 0, 3, 0, 74, 0, 0, 4, 88, 5, 200, 0, 18, 0, 27, 0, 34, 0, 103, 181, 10, 1, 5, 6, 1, 74, 75, 176, 42, 80, 88, 64, 32, 0, 6, 0, 5, 3, 6, 5, 103, 7, 1, 0, 0, 1, 93, 0, 1, 1, 56, 75, 4, 8, 2, 3, 3, 2, 93, 0, 2, 2, 57, 2, 76, 27, 64, 30, 0, 1, 7, 1, 0, 6, 1, 0, 101, 0, 6, 0, 5, 3, 6, 5, 103, 4, 8, 2, 3, 3, 2, 93, 0, 2, 2, 60, 2, 76, 89, 64, 20, 0, 0, 34, 32, 30, 28, 27, 25, 21, 19, 0, 18, 0, 18, 42, 33, 17, 9, 9, 23, 43, 55, 17, 35, 53, 33, 32, 17, 20, 7, 6, 7, 22, 23, 22, 21, 16, 33, 33, 53, 37, 51, 32, 17, 52, 39, 38, 35, 35, 53, 51, 32, 17, 52, 35, 35, 247, 173, 2, 106, 1, 118, 102, 60, 114, 98, 50, 174, 254, 68, 253, 174, 1, 114, 163, 1, 39, 97, 96, 168, 97, 98, 1, 57, 211, 200, 123, 4, 210, 123, 254, 187, 168, 105, 63, 48, 26, 30, 105, 233, 254, 135, 123, 8, 1, 5, 141, 86, 85, 123, 1, 56, 218, 0, 0, 0, 0, 1, 0, 123, 255, 219, 4, 103, 5, 237, 0, 27, 0, 93, 64, 14, 12, 1, 3, 1, 27, 1, 4, 2, 0, 1, 0, 4, 3, 74, 75, 176, 42, 80, 88, 64, 29, 0, 2, 3, 4, 3, 2, 4, 126, 0, 3, 3, 1, 95, 0, 1, 1, 62, 75, 0, 4, 4, 0, 95, 0, 0, 0, 63, 0, 76, 27, 64, 27, 0, 2, 3, 4, 3, 2, 4, 126, 0, 1, 0, 3, 2, 1, 3, 103, 0, 4, 4, 0, 95, 0, 0, 0, 66, 0, 76, 89, 183, 38, 34, 18, 38, 33, 5, 9, 25, 43, 37, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 4, 103, 207, 181, 254, 223, 163, 164, 156, 156, 1, 34, 164, 217, 123, 29, 113, 111, 187, 104, 103, 115, 116, 198, 176, 186, 74, 111, 206, 206, 1, 117, 1, 113, 200, 200, 64, 254, 184, 216, 53, 176, 175, 254, 203, 254, 213, 173, 168, 138, 0, 0, 0, 0, 2, 0, 49, 0, 0, 4, 143, 5, 200, 0, 12, 0, 21, 0, 76, 75, 176, 42, 80, 88, 64, 24, 5, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 3, 93, 6, 1, 3, 3, 57, 3, 76, 27, 64, 22, 0, 2, 5, 1, 1, 0, 2, 1, 103, 4, 1, 0, 0, 3, 93, 6, 1, 3, 3, 60, 3, 76, 89, 64, 16, 0, 0, 21, 19, 15, 13, 0, 12, 0, 11, 33, 17, 17, 7, 9, 23, 43, 51, 53, 51, 17, 35, 53, 33, 32, 17, 16, 7, 6, 33, 39, 51, 32, 17, 16, 39, 38, 35, 35, 49, 148, 148, 1, 254, 2, 96, 160, 160, 254, 242, 182, 118, 1, 185, 111, 112, 232, 104, 123, 4, 210, 123, 253, 63, 254, 156, 210, 209, 131, 2, 111, 1, 53, 147, 147, 0, 0, 0, 1, 0, 74, 0, 0, 4, 82, 5, 200, 0, 23, 0, 209, 75, 176, 10, 80, 88, 64, 54, 0, 3, 1, 6, 1, 3, 112, 0, 10, 7, 0, 0, 10, 112, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 12, 1, 11, 11, 57, 11, 76, 27, 75, 176, 42, 80, 88, 64, 56, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 12, 1, 11, 11, 57, 11, 76, 27, 64, 54, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 2, 4, 1, 1, 3, 2, 1, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 9, 1, 0, 0, 11, 94, 12, 1, 11, 11, 60, 11, 76, 89, 89, 64, 22, 0, 0, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13, 9, 29, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 74, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 123, 4, 210, 123, 254, 157, 232, 253, 225, 124, 254, 141, 124, 253, 208, 247, 254, 134, 0, 0, 0, 1, 0, 111, 0, 0, 4, 112, 5, 200, 0, 21, 0, 177, 75, 176, 10, 80, 88, 64, 46, 0, 5, 3, 8, 3, 5, 112, 0, 7, 0, 10, 9, 7, 10, 101, 0, 8, 0, 9, 0, 8, 9, 101, 6, 1, 3, 3, 4, 93, 0, 4, 4, 56, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 75, 176, 42, 80, 88, 64, 47, 0, 5, 3, 8, 3, 5, 8, 126, 0, 7, 0, 10, 9, 7, 10, 101, 0, 8, 0, 9, 0, 8, 9, 101, 6, 1, 3, 3, 4, 93, 0, 4, 4, 56, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 64, 45, 0, 5, 3, 8, 3, 5, 8, 126, 0, 4, 6, 1, 3, 5, 4, 3, 101, 0, 7, 0, 10, 9, 7, 10, 101, 0, 8, 0, 9, 0, 8, 9, 101, 2, 1, 0, 0, 1, 93, 0, 1, 1, 60, 1, 76, 89, 89, 64, 16, 21, 20, 19, 18, 17, 17, 17, 17, 17, 17, 17, 17, 16, 11, 9, 29, 43, 37, 33, 21, 33, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 2, 18, 1, 16, 253, 77, 222, 222, 4, 1, 123, 254, 29, 1, 42, 123, 123, 254, 214, 123, 123, 123, 4, 210, 123, 254, 142, 247, 253, 188, 124, 254, 141, 124, 0, 0, 1, 0, 74, 255, 219, 4, 57, 5, 238, 0, 29, 0, 112, 64, 14, 12, 1, 3, 1, 25, 1, 4, 5, 0, 1, 0, 4, 3, 74, 75, 176, 42, 80, 88, 64, 37, 0, 2, 3, 6, 3, 2, 6, 126, 0, 6, 0, 5, 4, 6, 5, 101, 0, 3, 3, 1, 95, 0, 1, 1, 62, 75, 0, 4, 4, 0, 95, 0, 0, 0, 63, 0, 76, 27, 64, 35, 0, 2, 3, 6, 3, 2, 6, 126, 0, 1, 0, 3, 2, 1, 3, 103, 0, 6, 0, 5, 4, 6, 5, 101, 0, 4, 4, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 10, 17, 18, 36, 34, 18, 38, 33, 7, 9, 27, 43, 37, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 32, 17, 16, 23, 22, 51, 50, 55, 17, 35, 53, 33, 4, 57, 182, 201, 254, 216, 164, 164, 157, 158, 1, 43, 173, 196, 123, 29, 114, 99, 254, 107, 115, 115, 204, 78, 84, 172, 1, 114, 74, 111, 206, 205, 1, 117, 1, 117, 199, 199, 62, 254, 181, 216, 54, 253, 110, 254, 205, 166, 170, 32, 1, 155, 123, 0, 0, 0, 0, 1, 0, 62, 0, 0, 4, 144, 5, 200, 0, 27, 0, 114, 75, 176, 42, 80, 88, 64, 38, 0, 6, 14, 1, 13, 0, 6, 13, 101, 9, 7, 5, 3, 3, 3, 4, 93, 8, 1, 4, 4, 56, 75, 12, 10, 2, 3, 0, 0, 1, 93, 11, 1, 1, 1, 57, 1, 76, 27, 64, 36, 8, 1, 4, 9, 7, 5, 3, 3, 6, 4, 3, 101, 0, 6, 14, 1, 13, 0, 6, 13, 101, 12, 10, 2, 3, 0, 0, 1, 93, 11, 1, 1, 1, 60, 1, 76, 89, 64, 26, 0, 0, 0, 27, 0, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 9, 29, 43, 1, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 114, 99, 254, 105, 111, 111, 1, 151, 99, 1, 233, 99, 1, 152, 111, 111, 254, 104, 99, 2, 191, 253, 188, 123, 123, 4, 210, 123, 123, 253, 238, 2, 18, 123, 123, 251, 46, 123, 123, 2, 68, 0, 0, 0, 1, 0, 160, 0, 0, 4, 44, 5, 200, 0, 11, 0, 74, 75, 176, 42, 80, 88, 64, 24, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 6, 1, 5, 5, 57, 5, 76, 27, 64, 22, 0, 2, 3, 1, 1, 0, 2, 1, 101, 4, 1, 0, 0, 5, 93, 6, 1, 5, 5, 60, 5, 76, 89, 64, 14, 0, 0, 0, 11, 0, 11, 17, 17, 17, 17, 17, 7, 9, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 123, 4, 210, 123, 123, 251, 46, 123, 0, 0, 1, 0, 111, 255, 219, 4, 119, 5, 200, 0, 21, 0, 88, 181, 0, 1, 5, 1, 1, 74, 75, 176, 42, 80, 88, 64, 30, 0, 0, 2, 1, 2, 0, 1, 126, 4, 1, 2, 2, 3, 93, 0, 3, 3, 56, 75, 0, 1, 1, 5, 95, 0, 5, 5, 63, 5, 76, 27, 64, 28, 0, 0, 2, 1, 2, 0, 1, 126, 0, 3, 4, 1, 2, 0, 3, 2, 101, 0, 1, 1, 5, 95, 0, 5, 5, 66, 5, 76, 89, 64, 9, 36, 17, 17, 20, 34, 17, 6, 9, 26, 43, 55, 17, 51, 19, 22, 51, 50, 55, 54, 53, 17, 33, 53, 33, 21, 33, 17, 20, 7, 6, 35, 34, 111, 123, 39, 113, 81, 116, 51, 52, 254, 117, 3, 84, 254, 252, 92, 92, 212, 158, 31, 1, 157, 254, 211, 49, 55, 54, 119, 4, 11, 123, 123, 252, 29, 214, 92, 93, 0, 1, 0, 74, 0, 0, 4, 173, 5, 200, 0, 28, 0, 103, 183, 24, 17, 9, 3, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 30, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 56, 75, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 57, 8, 76, 27, 64, 28, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 101, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 60, 8, 76, 89, 64, 22, 0, 0, 0, 28, 0, 28, 27, 26, 23, 22, 17, 18, 17, 17, 19, 17, 17, 17, 17, 13, 9, 29, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 33, 53, 51, 1, 35, 17, 51, 21, 74, 130, 130, 1, 176, 105, 7, 1, 174, 111, 1, 100, 92, 254, 115, 2, 17, 74, 254, 87, 111, 254, 37, 7, 123, 123, 4, 210, 123, 123, 253, 167, 2, 89, 123, 123, 253, 222, 253, 80, 123, 123, 2, 105, 253, 151, 123, 0, 0, 0, 0, 1, 0, 86, 0, 0, 4, 127, 5, 200, 0, 13, 0, 84, 75, 176, 42, 80, 88, 64, 31, 0, 6, 2, 1, 2, 6, 1, 126, 4, 1, 2, 2, 3, 93, 0, 3, 3, 56, 75, 5, 1, 1, 1, 0, 94, 0, 0, 0, 57, 0, 76, 27, 64, 29, 0, 6, 2, 1, 2, 6, 1, 126, 0, 3, 4, 1, 2, 6, 3, 2, 101, 5, 1, 1, 1, 0, 94, 0, 0, 0, 60, 0, 76, 89, 64, 10, 17, 17, 17, 17, 17, 17, 16, 7, 9, 27, 43, 33, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 51, 4, 127, 251, 215, 247, 247, 2, 167, 235, 1, 242, 123, 123, 4, 210, 123, 123, 251, 54, 1, 89, 0, 0, 0, 0, 1, 0, 25, 0, 0, 4, 180, 5, 200, 0, 27, 0, 113, 183, 23, 19, 7, 3, 8, 1, 1, 74, 75, 176, 42, 80, 88, 64, 36, 0, 8, 1, 0, 1, 8, 0, 126, 4, 1, 1, 1, 2, 93, 3, 1, 2, 2, 56, 75, 9, 7, 5, 3, 0, 0, 6, 93, 11, 10, 2, 6, 6, 57, 6, 76, 27, 64, 34, 0, 8, 1, 0, 1, 8, 0, 126, 3, 1, 2, 4, 1, 1, 8, 2, 1, 101, 9, 7, 5, 3, 0, 0, 6, 93, 11, 10, 2, 6, 6, 60, 6, 76, 89, 64, 20, 0, 0, 0, 27, 0, 27, 26, 25, 19, 17, 17, 17, 17, 19, 17, 17, 17, 12, 9, 29, 43, 51, 53, 51, 17, 35, 53, 33, 1, 51, 1, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 35, 1, 35, 1, 35, 17, 51, 21, 25, 86, 86, 1, 29, 1, 50, 2, 1, 61, 1, 13, 86, 86, 254, 192, 72, 2, 254, 221, 135, 254, 221, 2, 86, 123, 4, 210, 123, 252, 6, 3, 250, 123, 251, 46, 123, 123, 3, 237, 252, 90, 3, 204, 251, 237, 123, 0, 0, 0, 1, 0, 74, 0, 0, 4, 131, 5, 200, 0, 21, 0, 91, 182, 17, 7, 2, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 27, 5, 3, 2, 1, 1, 2, 93, 4, 1, 2, 2, 56, 75, 7, 1, 0, 0, 6, 93, 9, 8, 2, 6, 6, 57, 6, 76, 27, 64, 25, 4, 1, 2, 5, 3, 2, 1, 0, 2, 1, 101, 7, 1, 0, 0, 6, 93, 9, 8, 2, 6, 6, 60, 6, 76, 89, 64, 17, 0, 0, 0, 21, 0, 21, 19, 17, 17, 17, 19, 17, 17, 17, 10, 9, 28, 43, 51, 53, 51, 17, 35, 53, 51, 1, 51, 17, 35, 53, 33, 21, 35, 17, 35, 1, 35, 17, 51, 21, 74, 111, 111, 234, 2, 98, 2, 110, 1, 89, 111, 124, 253, 159, 3, 111, 123, 4, 210, 123, 251, 205, 3, 184, 123, 123, 250, 179, 4, 52, 252, 71, 123, 0, 2, 0, 62, 255, 219, 4, 144, 5, 237, 0, 15, 0, 31, 0, 77, 75, 176, 42, 80, 88, 64, 23, 5, 1, 2, 2, 0, 95, 4, 1, 0, 0, 62, 75, 0, 3, 3, 1, 95, 0, 1, 1, 63, 1, 76, 27, 64, 21, 4, 1, 0, 5, 1, 2, 3, 0, 2, 103, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 19, 17, 16, 1, 0, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 6, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 2, 103, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 5, 237, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 133, 167, 170, 254, 203, 254, 206, 169, 171, 147, 164, 1, 77, 1, 57, 168, 167, 0, 0, 0, 0, 2, 0, 86, 0, 0, 4, 100, 5, 200, 0, 16, 0, 23, 0, 94, 75, 176, 42, 80, 88, 64, 32, 0, 6, 8, 1, 5, 0, 6, 5, 103, 7, 1, 3, 3, 4, 93, 0, 4, 4, 56, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 64, 30, 0, 4, 7, 1, 3, 6, 4, 3, 101, 0, 6, 8, 1, 5, 0, 6, 5, 103, 2, 1, 0, 0, 1, 93, 0, 1, 1, 60, 1, 76, 89, 64, 18, 0, 0, 23, 21, 19, 17, 0, 16, 0, 15, 33, 17, 17, 17, 17, 9, 9, 25, 43, 1, 17, 33, 21, 33, 53, 51, 17, 35, 53, 33, 32, 17, 20, 7, 6, 35, 39, 51, 32, 17, 16, 35, 35, 1, 225, 1, 28, 253, 89, 197, 197, 2, 149, 1, 121, 140, 140, 245, 118, 111, 1, 66, 232, 201, 2, 87, 254, 36, 123, 123, 4, 210, 123, 254, 151, 241, 140, 139, 123, 1, 111, 1, 12, 0, 0, 0, 2, 0, 62, 254, 191, 4, 199, 5, 237, 0, 23, 0, 39, 0, 72, 181, 22, 20, 18, 3, 2, 71, 75, 176, 42, 80, 88, 64, 17, 0, 2, 1, 2, 132, 3, 1, 1, 1, 0, 95, 0, 0, 0, 62, 1, 76, 27, 64, 22, 0, 2, 1, 2, 132, 0, 0, 1, 1, 0, 87, 0, 0, 0, 1, 95, 3, 1, 1, 0, 1, 79, 89, 64, 12, 25, 24, 33, 31, 24, 39, 25, 39, 41, 4, 9, 21, 43, 5, 38, 39, 38, 39, 38, 17, 16, 55, 54, 51, 50, 23, 22, 17, 16, 7, 6, 7, 22, 5, 6, 7, 38, 3, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 2, 103, 156, 83, 100, 78, 136, 154, 154, 245, 244, 154, 155, 134, 91, 154, 162, 1, 16, 69, 99, 209, 231, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 37, 25, 41, 49, 127, 223, 1, 56, 1, 87, 217, 217, 217, 217, 254, 170, 254, 192, 212, 143, 68, 101, 60, 85, 73, 79, 6, 92, 169, 167, 254, 202, 254, 206, 170, 172, 148, 165, 1, 77, 1, 57, 167, 168, 0, 0, 0, 2, 0, 86, 0, 0, 4, 180, 5, 200, 0, 23, 0, 30, 0, 107, 181, 14, 1, 5, 8, 1, 74, 75, 176, 42, 80, 88, 64, 34, 0, 8, 0, 5, 0, 8, 5, 101, 9, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 6, 3, 2, 0, 0, 4, 93, 10, 7, 2, 4, 4, 57, 4, 76, 27, 64, 32, 0, 2, 9, 1, 1, 8, 2, 1, 101, 0, 8, 0, 5, 0, 8, 5, 101, 6, 3, 2, 0, 0, 4, 93, 10, 7, 2, 4, 4, 60, 4, 76, 89, 64, 20, 0, 0, 30, 28, 26, 24, 0, 23, 0, 23, 17, 17, 17, 24, 33, 17, 17, 11, 9, 27, 43, 51, 53, 51, 17, 35, 53, 33, 50, 23, 22, 21, 20, 7, 6, 7, 1, 51, 21, 35, 1, 35, 17, 51, 21, 3, 51, 32, 17, 16, 35, 35, 86, 130, 130, 2, 75, 176, 101, 102, 92, 54, 103, 1, 57, 88, 253, 254, 173, 199, 130, 130, 99, 1, 74, 250, 179, 123, 4, 210, 123, 97, 97, 168, 153, 118, 68, 70, 253, 182, 123, 2, 136, 253, 243, 123, 3, 3, 1, 69, 1, 5, 0, 1, 0, 151, 255, 219, 4, 67, 5, 237, 0, 41, 0, 105, 64, 10, 20, 1, 4, 2, 0, 1, 5, 1, 2, 74, 75, 176, 42, 80, 88, 64, 36, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 4, 4, 2, 95, 0, 2, 2, 62, 75, 0, 1, 1, 5, 95, 0, 5, 5, 63, 5, 76, 27, 64, 34, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 2, 0, 4, 3, 2, 4, 103, 0, 1, 1, 5, 95, 0, 5, 5, 66, 5, 76, 89, 64, 9, 45, 34, 18, 43, 34, 17, 6, 9, 26, 43, 55, 17, 51, 23, 22, 51, 50, 55, 54, 53, 52, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 21, 20, 23, 22, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 151, 124, 24, 187, 124, 127, 79, 79, 200, 190, 189, 67, 66, 1, 192, 183, 192, 123, 25, 125, 117, 241, 56, 49, 126, 169, 195, 60, 61, 134, 135, 224, 205, 61, 1, 102, 234, 91, 79, 78, 114, 157, 104, 99, 98, 83, 80, 137, 1, 138, 73, 254, 193, 195, 74, 246, 101, 48, 42, 68, 91, 105, 73, 74, 133, 204, 123, 123, 0, 0, 0, 0, 1, 0, 62, 0, 0, 4, 144, 5, 200, 0, 15, 0, 135, 75, 176, 10, 80, 88, 64, 32, 4, 1, 2, 1, 0, 1, 2, 112, 5, 1, 1, 1, 3, 93, 0, 3, 3, 56, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 57, 7, 76, 27, 75, 176, 42, 80, 88, 64, 33, 4, 1, 2, 1, 0, 1, 2, 0, 126, 5, 1, 1, 1, 3, 93, 0, 3, 3, 56, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 57, 7, 76, 27, 64, 31, 4, 1, 2, 1, 0, 1, 2, 0, 126, 0, 3, 5, 1, 1, 2, 3, 1, 101, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 60, 7, 76, 89, 89, 64, 16, 0, 0, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 9, 9, 27, 43, 33, 53, 33, 17, 33, 21, 35, 17, 33, 17, 35, 53, 33, 17, 33, 21, 1, 1, 1, 3, 254, 181, 123, 4, 82, 124, 254, 182, 1, 3, 123, 4, 210, 232, 1, 99, 254, 157, 232, 251, 46, 123, 0, 0, 1, 0, 62, 255, 219, 4, 144, 5, 200, 0, 25, 0, 73, 75, 176, 42, 80, 88, 64, 25, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 23, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 11, 36, 17, 17, 18, 36, 17, 17, 16, 8, 9, 28, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 32, 17, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 110, 202, 254, 76, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 141, 2, 75, 0, 0, 0, 1, 0, 26, 0, 0, 4, 180, 5, 200, 0, 15, 0, 76, 181, 7, 1, 6, 0, 1, 74, 75, 176, 42, 80, 88, 64, 21, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 56, 75, 7, 1, 6, 6, 57, 6, 76, 27, 64, 19, 4, 1, 1, 5, 3, 2, 3, 0, 6, 1, 0, 101, 7, 1, 6, 6, 60, 6, 76, 89, 64, 15, 0, 0, 0, 15, 0, 15, 17, 17, 19, 17, 17, 17, 8, 9, 26, 43, 33, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 2, 8, 254, 92, 74, 1, 181, 157, 1, 90, 2, 1, 91, 143, 1, 90, 74, 254, 91, 5, 77, 123, 123, 251, 160, 4, 96, 123, 123, 250, 179, 0, 0, 0, 0, 1, 0, 23, 0, 0, 4, 183, 5, 200, 0, 23, 0, 98, 183, 21, 11, 7, 3, 7, 3, 1, 74, 75, 176, 42, 80, 88, 64, 30, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 9, 8, 2, 7, 7, 57, 7, 76, 27, 64, 28, 0, 3, 0, 7, 0, 3, 7, 126, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 9, 8, 2, 7, 7, 60, 7, 76, 89, 64, 17, 0, 0, 0, 23, 0, 23, 17, 17, 17, 19, 19, 17, 17, 17, 10, 9, 28, 43, 51, 3, 35, 53, 33, 21, 35, 19, 51, 19, 55, 19, 51, 19, 35, 53, 33, 21, 35, 3, 35, 3, 35, 3, 242, 170, 49, 1, 48, 100, 136, 10, 184, 149, 184, 9, 134, 100, 1, 18, 50, 170, 178, 186, 8, 184, 5, 77, 123, 123, 251, 198, 3, 204, 1, 252, 57, 4, 52, 123, 123, 250, 179, 3, 206, 252, 50, 0, 0, 1, 0, 49, 0, 0, 4, 155, 5, 200, 0, 27, 0, 105, 64, 9, 24, 17, 10, 3, 4, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 30, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 56, 75, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 57, 8, 76, 27, 64, 28, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 101, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 60, 8, 76, 89, 64, 22, 0, 0, 0, 27, 0, 27, 26, 25, 23, 22, 17, 18, 17, 17, 18, 17, 17, 18, 17, 13, 9, 29, 43, 51, 53, 51, 1, 1, 35, 53, 33, 21, 35, 1, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 33, 53, 51, 1, 1, 51, 21, 49, 111, 1, 94, 254, 150, 99, 1, 164, 100, 1, 32, 1, 33, 128, 1, 105, 105, 254, 159, 1, 104, 98, 254, 69, 124, 254, 226, 254, 226, 154, 123, 2, 95, 2, 115, 123, 123, 254, 12, 1, 244, 123, 123, 253, 157, 253, 145, 123, 123, 1, 240, 254, 16, 123, 0, 0, 0, 1, 0, 27, 0, 0, 4, 177, 5, 200, 0, 21, 0, 92, 183, 18, 10, 3, 3, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 27, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 56, 75, 7, 1, 0, 0, 8, 93, 9, 1, 8, 8, 57, 8, 76, 27, 64, 25, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 101, 7, 1, 0, 0, 8, 93, 9, 1, 8, 8, 60, 8, 76, 89, 64, 17, 0, 0, 0, 21, 0, 21, 18, 17, 17, 19, 17, 17, 18, 17, 10, 9, 28, 43, 33, 53, 51, 17, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 17, 51, 21, 1, 38, 222, 254, 109, 86, 1, 207, 149, 1, 59, 2, 1, 59, 148, 1, 120, 86, 254, 110, 222, 123, 2, 25, 2, 185, 123, 123, 253, 224, 2, 32, 123, 123, 253, 72, 253, 230, 123, 0, 0, 1, 0, 148, 0, 0, 4, 57, 5, 200, 0, 13, 0, 158, 64, 11, 1, 1, 3, 4, 1, 74, 8, 1, 0, 1, 73, 75, 176, 10, 80, 88, 64, 36, 0, 1, 0, 4, 0, 1, 112, 0, 4, 3, 0, 4, 3, 124, 0, 0, 0, 2, 93, 0, 2, 2, 56, 75, 0, 3, 3, 5, 94, 6, 1, 5, 5, 57, 5, 76, 27, 75, 176, 42, 80, 88, 64, 37, 0, 1, 0, 4, 0, 1, 4, 126, 0, 4, 3, 0, 4, 3, 124, 0, 0, 0, 2, 93, 0, 2, 2, 56, 75, 0, 3, 3, 5, 94, 6, 1, 5, 5, 57, 5, 76, 27, 64, 35, 0, 1, 0, 4, 0, 1, 4, 126, 0, 4, 3, 0, 4, 3, 124, 0, 2, 0, 0, 1, 2, 0, 101, 0, 3, 3, 5, 94, 6, 1, 5, 5, 60, 5, 76, 89, 89, 64, 14, 0, 0, 0, 13, 0, 13, 17, 18, 17, 17, 18, 7, 9, 25, 43, 51, 53, 1, 33, 21, 35, 17, 33, 21, 1, 33, 17, 51, 17, 148, 2, 188, 253, 210, 123, 3, 133, 253, 60, 2, 85, 124, 136, 4, 197, 232, 1, 99, 123, 251, 54, 1, 40, 254, 85, 0, 1, 1, 139, 254, 216, 3, 170, 6, 43, 0, 7, 0, 34, 64, 31, 0, 2, 4, 1, 3, 2, 3, 97, 0, 1, 1, 0, 93, 0, 0, 0, 58, 1, 76, 0, 0, 0, 7, 0, 7, 17, 17, 17, 5, 9, 23, 43, 1, 17, 33, 21, 33, 17, 33, 21, 1, 139, 2, 31, 254, 142, 1, 114, 254, 216, 7, 83, 123, 249, 163, 123, 0, 1, 0, 99, 254, 216, 4, 107, 6, 43, 0, 3, 0, 19, 64, 16, 0, 0, 1, 0, 132, 0, 1, 1, 58, 1, 76, 17, 16, 2, 9, 22, 43, 1, 35, 1, 51, 4, 107, 164, 252, 156, 163, 254, 216, 7, 83, 0, 0, 1, 1, 35, 254, 216, 3, 66, 6, 43, 0, 7, 0, 28, 64, 25, 0, 1, 0, 0, 1, 0, 97, 0, 2, 2, 3, 93, 0, 3, 3, 58, 2, 76, 17, 17, 17, 16, 4, 9, 24, 43, 1, 33, 53, 33, 17, 33, 53, 33, 3, 66, 253, 225, 1, 114, 254, 142, 2, 31, 254, 216, 123, 6, 93, 123, 0, 0, 0, 1, 0, 99, 1, 238, 4, 106, 5, 200, 0, 5, 0, 32, 177, 6, 100, 68, 64, 21, 4, 1, 2, 0, 72, 2, 1, 2, 0, 0, 116, 0, 0, 0, 5, 0, 5, 18, 3, 9, 21, 43, 177, 6, 0, 68, 19, 1, 1, 35, 1, 1, 99, 2, 4, 2, 3, 168, 254, 165, 254, 163, 1, 238, 3, 218, 252, 38, 2, 155, 253, 101, 0, 1, 0, 0, 255, 108, 4, 205, 0, 0, 0, 3, 0, 32, 177, 6, 100, 68, 64, 21, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 0, 1, 0, 1, 77, 17, 16, 2, 9, 22, 43, 177, 6, 0, 68, 49, 33, 21, 33, 4, 205, 251, 51, 148, 0, 0, 1, 1, 136, 5, 3, 3, 68, 6, 68, 0, 3, 0, 25, 177, 6, 100, 68, 64, 14, 0, 1, 0, 1, 131, 0, 0, 0, 116, 17, 16, 2, 9, 22, 43, 177, 6, 0, 68, 1, 35, 1, 51, 3, 68, 123, 254, 191, 228, 5, 3, 1, 65, 0, 0, 0, 0, 2, 0, 148, 255, 231, 4, 143, 4, 87, 0, 29, 0, 39, 0, 190, 64, 10, 19, 1, 2, 4, 30, 1, 5, 7, 2, 74, 75, 176, 29, 80, 88, 64, 49, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 7, 5, 1, 7, 103, 0, 2, 2, 4, 95, 0, 4, 4, 65, 75, 8, 1, 5, 5, 6, 93, 0, 6, 6, 57, 75, 8, 1, 5, 5, 0, 95, 0, 0, 0, 66, 0, 76, 27, 75, 176, 42, 80, 88, 64, 47, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 7, 5, 1, 7, 103, 0, 2, 2, 4, 95, 0, 4, 4, 65, 75, 0, 5, 5, 6, 93, 0, 6, 6, 57, 75, 0, 8, 8, 0, 95, 0, 0, 0, 66, 0, 76, 27, 64, 47, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 7, 5, 1, 7, 103, 0, 2, 2, 4, 95, 0, 4, 4, 65, 75, 0, 5, 5, 6, 93, 0, 6, 6, 60, 75, 0, 8, 8, 0, 95, 0, 0, 0, 66, 0, 76, 89, 89, 64, 12, 36, 34, 17, 20, 34, 18, 34, 38, 33, 9, 9, 29, 43, 37, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 17, 35, 34, 7, 6, 21, 20, 51, 50, 3, 66, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 20, 53, 230, 97, 96, 186, 147, 119, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 1, 13, 1, 6, 52, 52, 144, 177, 0, 0, 0, 2, 0, 62, 255, 231, 4, 94, 6, 43, 0, 19, 0, 30, 0, 105, 183, 30, 20, 6, 3, 5, 6, 1, 74, 75, 176, 42, 80, 88, 64, 36, 0, 1, 1, 2, 93, 0, 2, 2, 58, 75, 0, 6, 6, 3, 95, 0, 3, 3, 65, 75, 0, 0, 0, 57, 75, 0, 5, 5, 4, 95, 0, 4, 4, 66, 4, 76, 27, 64, 36, 0, 1, 1, 2, 93, 0, 2, 2, 58, 75, 0, 6, 6, 3, 95, 0, 3, 3, 65, 75, 0, 0, 0, 60, 75, 0, 5, 5, 4, 95, 0, 4, 4, 66, 4, 76, 89, 64, 10, 36, 34, 38, 36, 17, 17, 16, 7, 9, 27, 43, 33, 35, 17, 35, 53, 33, 17, 54, 55, 54, 51, 50, 23, 22, 21, 16, 7, 6, 35, 34, 39, 22, 51, 50, 55, 54, 17, 16, 35, 34, 7, 1, 127, 198, 123, 1, 65, 75, 71, 102, 118, 165, 102, 102, 135, 134, 235, 88, 143, 136, 76, 167, 73, 73, 214, 164, 147, 5, 176, 123, 253, 53, 111, 55, 80, 143, 144, 235, 254, 226, 163, 164, 154, 23, 107, 107, 1, 2, 1, 116, 234, 0, 0, 0, 1, 0, 110, 255, 231, 4, 86, 4, 86, 0, 27, 0, 54, 64, 51, 12, 1, 3, 1, 27, 1, 4, 2, 0, 1, 0, 4, 3, 74, 0, 2, 3, 4, 3, 2, 4, 126, 0, 3, 3, 1, 95, 0, 1, 1, 65, 75, 0, 4, 4, 0, 95, 0, 0, 0, 66, 0, 76, 38, 34, 18, 38, 33, 5, 9, 25, 43, 37, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 4, 86, 162, 232, 254, 229, 162, 161, 158, 157, 1, 31, 213, 172, 124, 35, 121, 116, 176, 104, 96, 108, 116, 206, 168, 187, 46, 71, 158, 158, 1, 8, 1, 4, 147, 148, 54, 254, 202, 197, 44, 118, 118, 199, 220, 113, 113, 81, 0, 2, 0, 111, 255, 231, 4, 143, 6, 43, 0, 22, 0, 33, 0, 125, 64, 12, 22, 1, 6, 5, 33, 23, 8, 3, 2, 6, 2, 74, 75, 176, 42, 80, 88, 64, 43, 0, 0, 0, 1, 93, 0, 1, 1, 58, 75, 0, 6, 6, 5, 95, 0, 5, 5, 65, 75, 7, 1, 2, 2, 3, 93, 0, 3, 3, 57, 75, 7, 1, 2, 2, 4, 95, 0, 4, 4, 66, 4, 76, 27, 64, 43, 0, 0, 0, 1, 93, 0, 1, 1, 58, 75, 0, 6, 6, 5, 95, 0, 5, 5, 65, 75, 7, 1, 2, 2, 3, 93, 0, 3, 3, 60, 75, 7, 1, 2, 2, 4, 95, 0, 4, 4, 66, 4, 76, 89, 64, 11, 36, 35, 38, 36, 17, 17, 17, 16, 8, 9, 28, 43, 1, 35, 53, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 34, 39, 38, 53, 16, 55, 54, 51, 50, 23, 21, 38, 35, 34, 7, 6, 17, 16, 51, 50, 55, 3, 78, 246, 1, 188, 123, 254, 191, 75, 70, 102, 119, 165, 102, 102, 135, 134, 238, 87, 141, 136, 77, 165, 74, 73, 214, 164, 147, 5, 176, 123, 250, 80, 123, 222, 111, 56, 80, 144, 143, 236, 1, 29, 163, 164, 24, 129, 22, 107, 106, 254, 250, 254, 131, 234, 0, 0, 0, 2, 0, 123, 255, 231, 4, 81, 4, 86, 0, 20, 0, 28, 0, 51, 64, 48, 7, 1, 1, 0, 8, 1, 2, 1, 2, 74, 0, 4, 0, 0, 1, 4, 0, 101, 0, 5, 5, 3, 95, 0, 3, 3, 65, 75, 0, 1, 1, 2, 95, 0, 2, 2, 66, 2, 76, 34, 18, 38, 35, 35, 16, 6, 9, 26, 43, 1, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 4, 81, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 1, 250, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 0, 0, 0, 1, 0, 148, 0, 0, 4, 143, 6, 68, 0, 29, 0, 173, 181, 13, 1, 5, 3, 1, 74, 75, 176, 23, 80, 88, 64, 43, 0, 4, 5, 2, 5, 4, 2, 126, 0, 5, 5, 3, 95, 0, 3, 3, 64, 75, 7, 1, 1, 1, 2, 93, 6, 1, 2, 2, 59, 75, 8, 1, 0, 0, 9, 93, 10, 1, 9, 9, 57, 9, 76, 27, 75, 176, 42, 80, 88, 64, 41, 0, 4, 5, 2, 5, 4, 2, 126, 6, 1, 2, 7, 1, 1, 0, 2, 1, 101, 0, 5, 5, 3, 95, 0, 3, 3, 64, 75, 8, 1, 0, 0, 9, 93, 10, 1, 9, 9, 57, 9, 76, 27, 64, 41, 0, 4, 5, 2, 5, 4, 2, 126, 6, 1, 2, 7, 1, 1, 0, 2, 1, 101, 0, 5, 5, 3, 95, 0, 3, 3, 64, 75, 8, 1, 0, 0, 9, 93, 10, 1, 9, 9, 60, 9, 76, 89, 89, 64, 18, 0, 0, 0, 29, 0, 29, 17, 17, 20, 34, 18, 36, 17, 17, 17, 11, 9, 29, 43, 51, 53, 33, 17, 33, 53, 33, 53, 52, 55, 54, 51, 50, 23, 21, 35, 39, 38, 35, 34, 7, 6, 21, 21, 33, 21, 33, 17, 33, 21, 159, 1, 4, 254, 241, 1, 15, 91, 91, 202, 171, 193, 123, 31, 101, 83, 119, 46, 47, 1, 188, 254, 68, 1, 64, 123, 3, 14, 136, 138, 225, 100, 100, 80, 247, 156, 47, 60, 60, 159, 160, 136, 252, 242, 123, 0, 0, 0, 2, 0, 111, 254, 92, 4, 139, 4, 86, 0, 45, 0, 58, 0, 198, 64, 12, 58, 46, 27, 3, 8, 6, 11, 1, 0, 2, 2, 74, 75, 176, 12, 80, 88, 64, 51, 0, 1, 3, 2, 3, 1, 2, 126, 0, 8, 0, 3, 1, 8, 3, 103, 7, 9, 2, 6, 6, 4, 95, 0, 4, 4, 65, 75, 7, 9, 2, 6, 6, 5, 93, 0, 5, 5, 59, 75, 0, 2, 2, 0, 95, 0, 0, 0, 67, 0, 76, 27, 75, 176, 14, 80, 88, 64, 40, 0, 1, 3, 2, 3, 1, 2, 126, 0, 8, 0, 3, 1, 8, 3, 103, 7, 9, 2, 6, 6, 4, 95, 5, 1, 4, 4, 65, 75, 0, 2, 2, 0, 95, 0, 0, 0, 67, 0, 76, 27, 64, 51, 0, 1, 3, 2, 3, 1, 2, 126, 0, 8, 0, 3, 1, 8, 3, 103, 7, 9, 2, 6, 6, 4, 95, 0, 4, 4, 65, 75, 7, 9, 2, 6, 6, 5, 93, 0, 5, 5, 59, 75, 0, 2, 2, 0, 95, 0, 0, 0, 67, 0, 76, 89, 89, 64, 19, 0, 0, 57, 55, 50, 48, 0, 45, 0, 45, 18, 39, 42, 37, 19, 39, 10, 9, 26, 43, 1, 17, 20, 14, 4, 35, 34, 38, 39, 53, 51, 23, 30, 3, 51, 50, 62, 4, 53, 53, 6, 7, 6, 35, 34, 39, 38, 53, 52, 54, 55, 54, 51, 50, 22, 23, 33, 21, 5, 38, 38, 35, 34, 7, 6, 6, 21, 16, 51, 50, 55, 4, 20, 5, 28, 58, 105, 160, 116, 86, 203, 102, 123, 26, 21, 57, 64, 68, 34, 67, 93, 60, 33, 16, 3, 76, 69, 103, 118, 165, 102, 102, 67, 68, 134, 239, 67, 106, 54, 1, 61, 254, 195, 69, 106, 38, 165, 74, 37, 36, 214, 164, 147, 3, 195, 252, 216, 70, 139, 128, 110, 81, 47, 27, 40, 247, 136, 10, 20, 15, 9, 31, 55, 76, 91, 102, 54, 199, 113, 54, 80, 144, 142, 197, 123, 193, 82, 164, 14, 10, 123, 24, 11, 12, 107, 54, 142, 100, 254, 179, 234, 0, 0, 0, 0, 1, 0, 69, 0, 0, 4, 143, 6, 43, 0, 25, 0, 109, 182, 22, 7, 2, 0, 6, 1, 74, 75, 176, 42, 80, 88, 64, 35, 0, 1, 1, 2, 93, 0, 2, 2, 58, 75, 0, 6, 6, 3, 95, 0, 3, 3, 65, 75, 7, 4, 2, 0, 0, 5, 93, 9, 8, 2, 5, 5, 57, 5, 76, 27, 64, 35, 0, 1, 1, 2, 93, 0, 2, 2, 58, 75, 0, 6, 6, 3, 95, 0, 3, 3, 65, 75, 7, 4, 2, 0, 0, 5, 93, 9, 8, 2, 5, 5, 60, 5, 76, 89, 64, 17, 0, 0, 0, 25, 0, 25, 18, 34, 17, 18, 36, 17, 17, 17, 10, 9, 28, 43, 51, 53, 51, 17, 35, 53, 33, 17, 54, 55, 54, 51, 32, 17, 17, 51, 21, 33, 17, 16, 35, 34, 3, 17, 51, 21, 82, 110, 123, 1, 65, 69, 68, 96, 119, 1, 45, 124, 254, 191, 163, 150, 143, 111, 123, 5, 53, 123, 253, 65, 105, 53, 76, 254, 124, 253, 169, 123, 2, 193, 1, 1, 254, 254, 253, 187, 123, 0, 0, 0, 2, 0, 148, 0, 0, 4, 81, 6, 43, 0, 9, 0, 13, 0, 103, 75, 176, 42, 80, 88, 64, 34, 8, 1, 6, 6, 5, 93, 0, 5, 5, 58, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 57, 4, 76, 27, 64, 34, 8, 1, 6, 6, 5, 93, 0, 5, 5, 58, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 60, 4, 76, 89, 64, 21, 10, 10, 0, 0, 10, 13, 10, 13, 12, 11, 0, 9, 0, 9, 17, 17, 17, 17, 9, 9, 24, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 1, 53, 51, 21, 148, 1, 134, 254, 122, 2, 75, 1, 114, 253, 171, 242, 123, 3, 71, 124, 252, 61, 123, 5, 52, 247, 247, 0, 2, 0, 159, 254, 92, 3, 147, 6, 43, 0, 19, 0, 23, 0, 64, 64, 61, 0, 1, 4, 1, 1, 74, 0, 0, 2, 1, 2, 0, 1, 126, 7, 1, 6, 6, 5, 93, 0, 5, 5, 58, 75, 0, 2, 2, 3, 93, 0, 3, 3, 59, 75, 0, 1, 1, 4, 95, 0, 4, 4, 67, 4, 76, 20, 20, 20, 23, 20, 23, 18, 36, 17, 20, 34, 17, 8, 9, 26, 43, 19, 17, 51, 23, 22, 51, 50, 55, 54, 53, 17, 33, 53, 33, 17, 20, 7, 6, 35, 34, 1, 53, 51, 21, 159, 123, 31, 68, 79, 132, 56, 57, 254, 68, 2, 130, 113, 113, 201, 139, 1, 80, 242, 254, 168, 1, 63, 218, 53, 96, 96, 231, 3, 67, 124, 252, 4, 230, 128, 128, 6, 216, 247, 247, 0, 1, 0, 74, 0, 0, 4, 152, 6, 43, 0, 25, 0, 137, 64, 11, 22, 1, 6, 7, 1, 74, 1, 1, 1, 1, 73, 75, 176, 42, 80, 88, 64, 44, 0, 6, 0, 0, 1, 6, 0, 101, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 9, 1, 7, 7, 8, 93, 0, 8, 8, 59, 75, 10, 3, 2, 1, 1, 2, 93, 12, 11, 2, 2, 2, 57, 2, 76, 27, 64, 44, 0, 6, 0, 0, 1, 6, 0, 101, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 9, 1, 7, 7, 8, 93, 0, 8, 8, 59, 75, 10, 3, 2, 1, 1, 2, 93, 12, 11, 2, 2, 2, 60, 2, 76, 89, 64, 22, 0, 0, 0, 25, 0, 25, 24, 23, 21, 20, 17, 17, 17, 17, 17, 17, 17, 17, 18, 13, 9, 29, 43, 33, 53, 1, 35, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 17, 51, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 3, 53, 254, 110, 24, 99, 254, 92, 123, 123, 1, 65, 24, 1, 102, 116, 1, 176, 141, 254, 149, 1, 232, 99, 123, 1, 145, 254, 111, 123, 123, 5, 53, 123, 252, 37, 1, 114, 124, 124, 254, 150, 254, 35, 123, 0, 0, 0, 1, 0, 90, 255, 231, 4, 91, 6, 43, 0, 19, 0, 41, 64, 38, 19, 1, 3, 1, 0, 1, 0, 3, 2, 74, 0, 1, 1, 2, 93, 0, 2, 2, 58, 75, 0, 3, 3, 0, 95, 0, 0, 0, 66, 0, 76, 37, 17, 21, 33, 4, 9, 24, 43, 37, 6, 35, 34, 46, 2, 53, 17, 33, 53, 33, 17, 20, 30, 2, 51, 50, 55, 4, 91, 166, 170, 92, 123, 73, 31, 254, 142, 2, 55, 14, 41, 76, 63, 124, 140, 61, 86, 43, 93, 146, 102, 4, 73, 123, 251, 126, 93, 118, 66, 24, 77, 0, 0, 1, 0, 26, 0, 0, 4, 176, 4, 86, 0, 44, 0, 216, 183, 41, 13, 5, 3, 4, 0, 1, 74, 75, 176, 12, 80, 88, 64, 41, 9, 6, 2, 0, 0, 2, 95, 3, 1, 2, 2, 65, 75, 9, 6, 2, 0, 0, 1, 93, 0, 1, 1, 59, 75, 10, 7, 2, 4, 4, 5, 93, 12, 11, 8, 3, 5, 5, 57, 5, 76, 27, 75, 176, 14, 80, 88, 64, 30, 9, 6, 2, 0, 0, 1, 95, 3, 2, 2, 1, 1, 59, 75, 10, 7, 2, 4, 4, 5, 93, 12, 11, 8, 3, 5, 5, 57, 5, 76, 27, 75, 176, 42, 80, 88, 64, 41, 9, 6, 2, 0, 0, 2, 95, 3, 1, 2, 2, 65, 75, 9, 6, 2, 0, 0, 1, 93, 0, 1, 1, 59, 75, 10, 7, 2, 4, 4, 5, 93, 12, 11, 8, 3, 5, 5, 57, 5, 76, 27, 64, 41, 9, 6, 2, 0, 0, 2, 95, 3, 1, 2, 2, 65, 75, 9, 6, 2, 0, 0, 1, 93, 0, 1, 1, 59, 75, 10, 7, 2, 4, 4, 5, 93, 12, 11, 8, 3, 5, 5, 60, 5, 76, 89, 89, 89, 64, 22, 0, 0, 0, 44, 0, 44, 43, 42, 40, 38, 17, 22, 34, 17, 18, 38, 36, 17, 17, 13, 9, 29, 43, 51, 17, 35, 53, 51, 21, 54, 55, 54, 51, 50, 23, 22, 23, 54, 55, 54, 51, 50, 17, 17, 51, 21, 35, 17, 52, 35, 34, 7, 6, 7, 6, 21, 17, 51, 21, 35, 17, 52, 35, 34, 3, 17, 51, 21, 100, 74, 253, 67, 43, 52, 76, 100, 46, 24, 11, 42, 47, 66, 90, 187, 70, 249, 65, 48, 59, 31, 17, 26, 70, 249, 66, 87, 94, 70, 3, 194, 124, 217, 140, 46, 55, 93, 50, 98, 114, 52, 75, 254, 239, 253, 54, 123, 2, 240, 210, 88, 49, 42, 65, 27, 253, 200, 123, 3, 30, 164, 254, 241, 253, 200, 123, 0, 0, 0, 1, 0, 72, 0, 0, 4, 139, 4, 86, 0, 25, 0, 195, 182, 22, 7, 2, 0, 1, 1, 74, 75, 176, 12, 80, 88, 64, 37, 6, 1, 1, 1, 3, 95, 0, 3, 3, 65, 75, 6, 1, 1, 1, 2, 93, 0, 2, 2, 59, 75, 7, 4, 2, 0, 0, 5, 93, 9, 8, 2, 5, 5, 57, 5, 76, 27, 75, 176, 14, 80, 88, 64, 27, 6, 1, 1, 1, 2, 95, 3, 1, 2, 2, 59, 75, 7, 4, 2, 0, 0, 5, 93, 9, 8, 2, 5, 5, 57, 5, 76, 27, 75, 176, 42, 80, 88, 64, 37, 6, 1, 1, 1, 3, 95, 0, 3, 3, 65, 75, 6, 1, 1, 1, 2, 93, 0, 2, 2, 59, 75, 7, 4, 2, 0, 0, 5, 93, 9, 8, 2, 5, 5, 57, 5, 76, 27, 64, 37, 6, 1, 1, 1, 3, 95, 0, 3, 3, 65, 75, 6, 1, 1, 1, 2, 93, 0, 2, 2, 59, 75, 7, 4, 2, 0, 0, 5, 93, 9, 8, 2, 5, 5, 60, 5, 76, 89, 89, 89, 64, 17, 0, 0, 0, 25, 0, 25, 18, 34, 17, 18, 36, 17, 17, 17, 10, 9, 28, 43, 51, 53, 51, 17, 35, 53, 33, 21, 54, 55, 54, 51, 32, 17, 17, 51, 21, 33, 17, 16, 35, 34, 3, 17, 51, 21, 82, 110, 120, 1, 62, 69, 68, 96, 119, 1, 45, 120, 254, 195, 163, 150, 143, 100, 123, 3, 71, 124, 210, 105, 53, 76, 254, 124, 253, 169, 123, 2, 193, 1, 1, 254, 254, 253, 187, 123, 0, 0, 2, 0, 111, 255, 231, 4, 94, 4, 86, 0, 15, 0, 23, 0, 45, 64, 42, 5, 1, 2, 2, 0, 95, 4, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 17, 16, 1, 0, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 6, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 65, 1, 191, 1, 186, 0, 2, 0, 62, 254, 117, 4, 94, 4, 86, 0, 24, 0, 35, 0, 171, 64, 12, 35, 25, 10, 3, 7, 3, 24, 1, 6, 7, 2, 74, 75, 176, 12, 80, 88, 64, 44, 8, 1, 3, 3, 5, 95, 0, 5, 5, 65, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 6, 95, 0, 6, 6, 66, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 61, 1, 76, 27, 75, 176, 14, 80, 88, 64, 34, 8, 1, 3, 3, 4, 95, 5, 1, 4, 4, 59, 75, 0, 7, 7, 6, 95, 0, 6, 6, 66, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 61, 1, 76, 27, 64, 44, 8, 1, 3, 3, 5, 95, 0, 5, 5, 65, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 6, 95, 0, 6, 6, 66, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 61, 1, 76, 89, 89, 64, 12, 36, 35, 38, 36, 17, 17, 17, 17, 16, 9, 9, 29, 43, 1, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 54, 55, 54, 51, 50, 23, 22, 21, 16, 7, 6, 35, 34, 39, 53, 22, 51, 50, 55, 54, 53, 16, 35, 34, 7, 1, 127, 247, 253, 200, 123, 123, 1, 65, 75, 71, 102, 118, 165, 102, 102, 135, 134, 235, 88, 143, 136, 76, 167, 73, 73, 214, 164, 147, 254, 240, 123, 123, 4, 210, 124, 222, 111, 55, 80, 143, 144, 235, 254, 226, 163, 164, 25, 146, 23, 107, 107, 252, 1, 117, 246, 0, 0, 2, 0, 111, 254, 117, 4, 143, 4, 86, 0, 20, 0, 31, 0, 150, 183, 31, 21, 0, 3, 7, 6, 1, 74, 75, 176, 12, 80, 88, 64, 37, 0, 2, 2, 59, 75, 0, 6, 6, 1, 95, 0, 1, 1, 65, 75, 0, 7, 7, 0, 95, 0, 0, 0, 66, 75, 5, 1, 3, 3, 4, 93, 0, 4, 4, 61, 4, 76, 27, 75, 176, 14, 80, 88, 64, 33, 0, 6, 6, 1, 95, 2, 1, 1, 1, 65, 75, 0, 7, 7, 0, 95, 0, 0, 0, 66, 75, 5, 1, 3, 3, 4, 93, 0, 4, 4, 61, 4, 76, 27, 64, 37, 0, 2, 2, 59, 75, 0, 6, 6, 1, 95, 0, 1, 1, 65, 75, 0, 7, 7, 0, 95, 0, 0, 0, 66, 75, 5, 1, 3, 3, 4, 93, 0, 4, 4, 61, 4, 76, 89, 89, 64, 11, 36, 34, 17, 17, 17, 17, 22, 35, 8, 9, 28, 43, 37, 6, 7, 6, 35, 34, 39, 38, 53, 16, 55, 54, 51, 23, 51, 17, 51, 21, 33, 53, 51, 17, 38, 35, 34, 7, 6, 21, 16, 51, 50, 55, 3, 78, 75, 70, 102, 119, 165, 102, 102, 135, 134, 239, 227, 198, 123, 253, 201, 246, 136, 77, 165, 74, 73, 214, 164, 147, 222, 111, 56, 80, 144, 143, 236, 1, 29, 163, 164, 24, 250, 178, 123, 124, 4, 186, 23, 107, 107, 239, 254, 139, 234, 0, 0, 0, 0, 1, 0, 74, 0, 0, 4, 82, 4, 86, 0, 23, 1, 0, 75, 176, 12, 80, 88, 64, 14, 17, 1, 3, 4, 11, 1, 6, 7, 0, 1, 0, 6, 3, 74, 27, 75, 176, 14, 80, 88, 64, 14, 17, 1, 3, 4, 11, 1, 6, 3, 0, 1, 0, 6, 3, 74, 27, 64, 14, 17, 1, 3, 4, 11, 1, 6, 7, 0, 1, 0, 6, 3, 74, 89, 89, 75, 176, 12, 80, 88, 64, 39, 0, 6, 7, 0, 7, 6, 112, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 75, 176, 14, 80, 88, 64, 32, 0, 6, 3, 0, 3, 6, 0, 126, 7, 1, 3, 3, 4, 95, 5, 1, 4, 4, 59, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 75, 176, 42, 80, 88, 64, 40, 0, 6, 7, 0, 7, 6, 0, 126, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 64, 40, 0, 6, 7, 0, 7, 6, 0, 126, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 60, 1, 76, 89, 89, 89, 64, 11, 34, 18, 36, 17, 17, 17, 17, 17, 8, 9, 28, 43, 1, 17, 33, 21, 33, 53, 51, 17, 33, 53, 33, 21, 54, 55, 54, 51, 50, 23, 17, 35, 39, 38, 35, 34, 2, 18, 1, 104, 252, 217, 250, 254, 253, 1, 200, 74, 67, 96, 111, 118, 110, 124, 20, 56, 62, 184, 2, 190, 253, 189, 123, 123, 3, 71, 124, 211, 106, 53, 76, 68, 254, 216, 156, 36, 0, 0, 0, 1, 0, 173, 255, 231, 4, 64, 4, 87, 0, 41, 0, 58, 64, 55, 20, 1, 4, 2, 0, 1, 5, 1, 2, 74, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 1, 1, 5, 95, 0, 5, 5, 66, 5, 76, 45, 34, 18, 43, 34, 17, 6, 9, 26, 43, 55, 17, 51, 23, 22, 51, 50, 53, 52, 39, 38, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 173, 123, 25, 196, 137, 238, 40, 40, 103, 204, 171, 78, 77, 1, 176, 221, 181, 123, 25, 109, 146, 110, 61, 72, 206, 202, 168, 73, 72, 123, 123, 220, 226, 61, 1, 41, 183, 76, 168, 66, 36, 37, 27, 54, 45, 73, 71, 118, 1, 61, 72, 254, 226, 181, 53, 35, 41, 85, 112, 54, 53, 44, 68, 67, 115, 157, 90, 91, 0, 0, 0, 1, 0, 119, 255, 231, 4, 8, 5, 62, 0, 23, 0, 90, 64, 10, 23, 1, 6, 1, 0, 1, 0, 6, 2, 74, 75, 176, 40, 80, 88, 64, 28, 0, 3, 2, 3, 131, 5, 1, 1, 1, 2, 93, 4, 1, 2, 2, 59, 75, 0, 6, 6, 0, 95, 0, 0, 0, 66, 0, 76, 27, 64, 26, 0, 3, 2, 3, 131, 4, 1, 2, 5, 1, 1, 6, 2, 1, 101, 0, 6, 6, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 10, 36, 17, 17, 17, 17, 20, 33, 7, 9, 27, 43, 37, 6, 35, 34, 39, 38, 53, 17, 33, 53, 33, 17, 51, 17, 33, 21, 33, 17, 20, 23, 22, 51, 50, 55, 4, 8, 165, 171, 161, 69, 69, 254, 234, 1, 22, 197, 1, 170, 254, 86, 32, 32, 95, 106, 173, 61, 86, 75, 74, 175, 2, 114, 136, 1, 25, 254, 231, 136, 253, 231, 160, 52, 53, 77, 0, 1, 0, 68, 255, 231, 4, 142, 4, 62, 0, 23, 0, 103, 182, 21, 6, 2, 1, 4, 1, 74, 75, 176, 42, 80, 88, 64, 35, 7, 1, 4, 4, 0, 93, 5, 1, 0, 0, 59, 75, 6, 1, 1, 1, 2, 93, 0, 2, 2, 57, 75, 6, 1, 1, 1, 3, 95, 0, 3, 3, 66, 3, 76, 27, 64, 35, 7, 1, 4, 4, 0, 93, 5, 1, 0, 0, 59, 75, 6, 1, 1, 1, 2, 93, 0, 2, 2, 60, 75, 6, 1, 1, 1, 3, 95, 0, 3, 3, 66, 3, 76, 89, 64, 11, 18, 34, 17, 18, 36, 17, 17, 16, 8, 9, 28, 43, 1, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 2, 222, 1, 53, 123, 254, 191, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 4, 62, 252, 61, 123, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 0, 1, 0, 55, 0, 0, 4, 149, 4, 62, 0, 15, 0, 78, 181, 7, 1, 6, 0, 1, 74, 75, 176, 42, 80, 88, 64, 21, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 7, 1, 6, 6, 57, 6, 76, 27, 64, 21, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 7, 1, 6, 6, 60, 6, 76, 89, 64, 15, 0, 0, 0, 15, 0, 15, 17, 17, 19, 17, 17, 17, 8, 9, 26, 43, 33, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 2, 2, 254, 127, 74, 1, 191, 160, 1, 55, 2, 1, 55, 160, 1, 111, 74, 254, 127, 3, 194, 124, 124, 252, 246, 3, 10, 124, 124, 252, 62, 0, 0, 1, 0, 23, 0, 0, 4, 183, 4, 62, 0, 23, 0, 100, 183, 21, 11, 7, 3, 7, 3, 1, 74, 75, 176, 42, 80, 88, 64, 30, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 9, 8, 2, 7, 7, 57, 7, 76, 27, 64, 30, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 9, 8, 2, 7, 7, 60, 7, 76, 89, 64, 17, 0, 0, 0, 23, 0, 23, 17, 17, 17, 19, 19, 17, 17, 17, 10, 9, 28, 43, 51, 3, 35, 53, 33, 21, 35, 19, 51, 19, 51, 19, 51, 19, 35, 53, 33, 21, 35, 3, 35, 3, 35, 3, 242, 170, 49, 1, 55, 86, 129, 2, 177, 167, 178, 2, 130, 98, 1, 16, 49, 170, 193, 179, 2, 182, 3, 194, 124, 124, 253, 44, 2, 173, 253, 80, 2, 215, 124, 124, 252, 62, 2, 191, 253, 65, 0, 1, 0, 59, 0, 0, 4, 165, 4, 62, 0, 27, 0, 107, 64, 9, 24, 17, 10, 3, 4, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 30, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 59, 75, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 57, 8, 76, 27, 64, 30, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 59, 75, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 60, 8, 76, 89, 64, 22, 0, 0, 0, 27, 0, 27, 26, 25, 23, 22, 17, 18, 17, 17, 18, 17, 17, 18, 17, 13, 9, 29, 43, 51, 53, 51, 1, 1, 35, 53, 33, 21, 35, 1, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 33, 53, 51, 3, 3, 51, 21, 72, 110, 1, 75, 254, 181, 123, 1, 182, 87, 1, 5, 1, 4, 103, 1, 105, 117, 254, 181, 1, 74, 118, 254, 67, 99, 253, 252, 100, 123, 1, 164, 1, 163, 124, 124, 254, 181, 1, 75, 124, 124, 254, 92, 254, 93, 123, 123, 1, 65, 254, 191, 123, 0, 0, 0, 1, 0, 55, 254, 117, 4, 149, 4, 62, 0, 22, 0, 103, 181, 7, 1, 9, 0, 1, 74, 75, 176, 42, 80, 88, 64, 32, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 10, 1, 9, 9, 57, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 27, 64, 32, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 10, 1, 9, 9, 60, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 89, 64, 18, 0, 0, 0, 22, 0, 22, 17, 17, 18, 17, 17, 19, 17, 17, 17, 11, 9, 29, 43, 33, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 3, 51, 21, 33, 53, 51, 19, 2, 2, 254, 127, 74, 1, 191, 160, 1, 55, 2, 1, 55, 160, 1, 111, 74, 254, 127, 108, 148, 254, 33, 198, 108, 3, 194, 124, 124, 252, 246, 3, 10, 124, 124, 252, 62, 254, 241, 124, 124, 1, 15, 0, 0, 1, 0, 123, 0, 0, 4, 69, 4, 62, 0, 13, 0, 159, 64, 11, 1, 1, 5, 3, 1, 74, 8, 1, 0, 1, 73, 75, 176, 14, 80, 88, 64, 35, 0, 1, 0, 4, 0, 1, 112, 0, 4, 3, 3, 4, 110, 0, 0, 0, 2, 93, 0, 2, 2, 59, 75, 0, 3, 3, 5, 94, 6, 1, 5, 5, 57, 5, 76, 27, 75, 176, 42, 80, 88, 64, 37, 0, 1, 0, 4, 0, 1, 4, 126, 0, 4, 3, 0, 4, 3, 124, 0, 0, 0, 2, 93, 0, 2, 2, 59, 75, 0, 3, 3, 5, 94, 6, 1, 5, 5, 57, 5, 76, 27, 64, 37, 0, 1, 0, 4, 0, 1, 4, 126, 0, 4, 3, 0, 4, 3, 124, 0, 0, 0, 2, 93, 0, 2, 2, 59, 75, 0, 3, 3, 5, 94, 6, 1, 5, 5, 60, 5, 76, 89, 89, 64, 14, 0, 0, 0, 13, 0, 13, 17, 18, 17, 17, 18, 7, 9, 25, 43, 51, 53, 1, 33, 21, 35, 17, 33, 21, 1, 33, 53, 51, 17, 123, 2, 188, 253, 228, 123, 3, 128, 253, 77, 2, 92, 124, 123, 3, 71, 197, 1, 65, 124, 252, 193, 195, 254, 186, 0, 1, 0, 183, 254, 216, 3, 234, 6, 43, 0, 52, 0, 45, 64, 42, 40, 1, 1, 2, 1, 74, 0, 2, 0, 1, 5, 2, 1, 103, 0, 5, 0, 0, 5, 0, 99, 0, 4, 4, 3, 95, 0, 3, 3, 58, 4, 76, 52, 50, 33, 41, 33, 41, 32, 6, 9, 25, 43, 1, 35, 34, 39, 38, 53, 52, 55, 55, 54, 53, 52, 35, 35, 53, 51, 50, 53, 52, 39, 39, 38, 53, 52, 55, 54, 51, 51, 21, 35, 32, 21, 20, 23, 23, 22, 21, 20, 7, 6, 7, 22, 23, 22, 21, 20, 7, 7, 6, 21, 20, 33, 51, 3, 234, 131, 172, 109, 110, 13, 21, 8, 227, 112, 112, 227, 8, 21, 13, 111, 110, 170, 131, 59, 254, 234, 8, 22, 8, 78, 46, 86, 94, 47, 68, 7, 22, 8, 1, 22, 59, 254, 216, 95, 95, 153, 53, 76, 121, 47, 43, 193, 123, 197, 39, 47, 121, 76, 58, 149, 95, 94, 123, 207, 40, 46, 125, 46, 38, 129, 88, 51, 44, 48, 58, 85, 125, 41, 40, 125, 46, 45, 202, 0, 1, 2, 28, 254, 216, 2, 176, 6, 43, 0, 3, 0, 25, 64, 22, 2, 1, 1, 0, 1, 132, 0, 0, 0, 58, 0, 76, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 1, 17, 51, 17, 2, 28, 148, 254, 216, 7, 83, 248, 173, 0, 1, 0, 227, 254, 216, 4, 22, 6, 43, 0, 52, 0, 45, 64, 42, 40, 1, 2, 1, 1, 74, 0, 1, 0, 2, 4, 1, 2, 103, 0, 4, 0, 3, 4, 3, 99, 0, 5, 5, 0, 95, 0, 0, 0, 58, 5, 76, 52, 50, 33, 41, 33, 41, 32, 6, 9, 25, 43, 19, 51, 50, 23, 22, 21, 20, 7, 7, 6, 21, 20, 51, 51, 21, 35, 34, 21, 20, 23, 23, 22, 21, 20, 7, 6, 35, 35, 53, 51, 32, 53, 52, 39, 39, 38, 53, 52, 55, 54, 55, 38, 39, 38, 53, 52, 55, 55, 54, 53, 52, 33, 35, 227, 131, 172, 109, 110, 13, 21, 8, 227, 112, 112, 227, 8, 21, 13, 111, 110, 170, 131, 59, 1, 22, 8, 22, 7, 77, 45, 87, 93, 47, 69, 7, 22, 8, 254, 234, 59, 6, 43, 95, 96, 151, 55, 75, 121, 46, 44, 193, 123, 197, 41, 45, 120, 74, 61, 148, 95, 95, 123, 206, 42, 45, 125, 40, 45, 128, 88, 51, 45, 48, 58, 85, 124, 41, 40, 125, 45, 46, 202, 0, 0, 1, 0, 99, 1, 181, 4, 106, 3, 29, 0, 25, 0, 109, 177, 6, 100, 68, 75, 176, 14, 80, 88, 64, 38, 0, 3, 1, 5, 2, 3, 112, 0, 0, 2, 4, 5, 0, 112, 0, 1, 0, 5, 2, 1, 5, 103, 0, 2, 0, 4, 2, 87, 0, 2, 2, 4, 96, 0, 4, 2, 4, 80, 27, 64, 40, 0, 3, 1, 5, 1, 3, 5, 126, 0, 0, 2, 4, 2, 0, 4, 126, 0, 1, 0, 5, 2, 1, 5, 103, 0, 2, 0, 4, 2, 87, 0, 2, 2, 4, 96, 0, 4, 2, 4, 80, 89, 64, 9, 36, 35, 17, 36, 35, 16, 6, 9, 26, 43, 177, 6, 0, 68, 19, 35, 54, 55, 54, 51, 50, 31, 2, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 47, 2, 38, 35, 34, 247, 148, 4, 19, 61, 193, 103, 105, 117, 70, 30, 54, 123, 4, 148, 3, 20, 60, 193, 104, 104, 117, 70, 31, 56, 121, 1, 213, 106, 55, 167, 69, 77, 46, 20, 180, 106, 55, 167, 69, 77, 46, 20, 0, 0, 0, 2, 1, 235, 254, 117, 2, 226, 4, 62, 0, 3, 0, 9, 0, 44, 64, 41, 0, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 5, 1, 3, 3, 2, 93, 0, 2, 2, 61, 2, 76, 4, 4, 0, 0, 4, 9, 4, 9, 7, 6, 0, 3, 0, 3, 17, 6, 9, 21, 43, 1, 21, 35, 53, 19, 19, 17, 35, 17, 19, 2, 226, 247, 185, 37, 197, 37, 4, 62, 222, 222, 254, 92, 253, 102, 254, 117, 1, 139, 2, 154, 0, 0, 2, 0, 173, 0, 0, 4, 37, 5, 200, 0, 26, 0, 37, 0, 117, 64, 22, 14, 12, 9, 3, 2, 0, 28, 1, 1, 2, 27, 22, 2, 3, 1, 23, 1, 2, 4, 3, 4, 74, 75, 176, 42, 80, 88, 64, 35, 0, 2, 0, 1, 0, 2, 1, 126, 0, 1, 3, 0, 1, 3, 124, 0, 3, 0, 4, 5, 3, 4, 103, 0, 0, 0, 56, 75, 6, 1, 5, 5, 57, 5, 76, 27, 64, 30, 0, 0, 2, 0, 131, 0, 2, 1, 2, 131, 0, 1, 3, 1, 131, 0, 3, 0, 4, 5, 3, 4, 103, 6, 1, 5, 5, 60, 5, 76, 89, 64, 14, 0, 0, 0, 26, 0, 26, 19, 17, 18, 20, 26, 7, 9, 25, 43, 33, 53, 38, 39, 38, 17, 16, 55, 54, 55, 53, 51, 21, 22, 23, 17, 35, 39, 38, 35, 17, 50, 55, 21, 6, 7, 21, 3, 17, 6, 7, 6, 17, 20, 23, 22, 23, 22, 2, 117, 201, 111, 144, 157, 109, 190, 124, 156, 140, 123, 25, 71, 77, 116, 192, 146, 162, 124, 66, 34, 146, 91, 38, 48, 23, 179, 25, 116, 149, 1, 12, 1, 27, 152, 106, 27, 175, 172, 13, 37, 254, 192, 209, 37, 252, 145, 71, 142, 51, 10, 173, 1, 61, 3, 94, 22, 26, 110, 254, 225, 222, 106, 45, 22, 10, 0, 0, 0, 1, 0, 149, 0, 0, 4, 19, 5, 237, 0, 30, 0, 121, 64, 10, 14, 1, 4, 2, 1, 1, 7, 0, 2, 74, 75, 176, 42, 80, 88, 64, 40, 0, 3, 4, 1, 4, 3, 1, 126, 5, 1, 1, 6, 1, 0, 7, 1, 0, 101, 0, 4, 4, 2, 95, 0, 2, 2, 62, 75, 0, 7, 7, 8, 93, 9, 1, 8, 8, 57, 8, 76, 27, 64, 38, 0, 3, 4, 1, 4, 3, 1, 126, 0, 2, 0, 4, 3, 2, 4, 103, 5, 1, 1, 6, 1, 0, 7, 1, 0, 101, 0, 7, 7, 8, 93, 9, 1, 8, 8, 60, 8, 76, 89, 64, 17, 0, 0, 0, 30, 0, 30, 19, 17, 18, 34, 18, 36, 17, 20, 10, 9, 28, 43, 51, 53, 54, 19, 53, 35, 53, 51, 17, 52, 55, 54, 51, 50, 23, 17, 35, 39, 38, 35, 34, 21, 17, 33, 21, 33, 21, 6, 7, 33, 21, 149, 202, 2, 173, 173, 105, 105, 183, 128, 154, 123, 25, 80, 60, 190, 1, 9, 254, 247, 1, 181, 2, 163, 179, 70, 1, 6, 217, 123, 1, 3, 188, 109, 110, 49, 254, 204, 209, 25, 203, 254, 172, 123, 169, 254, 132, 173, 0, 0, 0, 0, 2, 0, 85, 0, 141, 4, 119, 4, 176, 0, 27, 0, 43, 0, 67, 64, 64, 16, 14, 10, 8, 4, 2, 0, 21, 17, 7, 3, 4, 3, 2, 24, 22, 2, 3, 1, 3, 3, 74, 15, 9, 2, 0, 72, 23, 1, 2, 1, 71, 0, 3, 0, 1, 3, 1, 99, 4, 1, 2, 2, 0, 95, 0, 0, 0, 65, 2, 76, 29, 28, 37, 35, 28, 43, 29, 43, 44, 43, 5, 9, 22, 43, 1, 7, 39, 55, 38, 53, 52, 55, 39, 55, 23, 54, 51, 50, 23, 55, 23, 7, 22, 21, 20, 7, 23, 7, 39, 6, 35, 34, 19, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 1, 91, 175, 87, 174, 89, 89, 174, 87, 175, 130, 137, 137, 130, 175, 87, 175, 90, 90, 175, 87, 175, 130, 137, 137, 137, 124, 86, 86, 69, 88, 140, 124, 85, 86, 86, 85, 1, 60, 175, 87, 175, 125, 142, 144, 124, 174, 88, 175, 90, 90, 175, 88, 174, 125, 143, 142, 125, 174, 88, 175, 90, 2, 229, 86, 85, 122, 115, 82, 103, 86, 86, 125, 124, 86, 86, 0, 0, 1, 0, 49, 0, 0, 4, 155, 5, 200, 0, 37, 0, 151, 64, 11, 18, 1, 3, 4, 30, 7, 2, 2, 3, 2, 74, 75, 176, 42, 80, 88, 64, 47, 11, 1, 4, 12, 1, 3, 2, 4, 3, 101, 13, 1, 2, 14, 1, 1, 0, 2, 1, 101, 10, 8, 7, 3, 5, 5, 6, 93, 9, 1, 6, 6, 56, 75, 15, 1, 0, 0, 16, 93, 17, 1, 16, 16, 57, 16, 76, 27, 64, 45, 9, 1, 6, 10, 8, 7, 3, 5, 4, 6, 5, 101, 11, 1, 4, 12, 1, 3, 2, 4, 3, 101, 13, 1, 2, 14, 1, 1, 0, 2, 1, 101, 15, 1, 0, 0, 16, 93, 17, 1, 16, 16, 60, 16, 76, 89, 64, 32, 0, 0, 0, 37, 0, 37, 36, 35, 34, 33, 32, 31, 29, 28, 27, 26, 25, 24, 23, 22, 19, 17, 17, 17, 17, 18, 17, 17, 17, 18, 9, 29, 43, 33, 53, 51, 17, 33, 53, 33, 53, 39, 33, 53, 51, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 51, 21, 33, 7, 21, 33, 21, 33, 17, 51, 21, 1, 38, 222, 254, 167, 1, 89, 46, 254, 213, 229, 254, 227, 66, 1, 185, 149, 1, 59, 2, 1, 59, 148, 1, 98, 64, 254, 227, 229, 254, 212, 46, 1, 90, 254, 166, 222, 123, 1, 28, 124, 129, 80, 124, 1, 237, 123, 123, 253, 224, 2, 32, 123, 123, 254, 19, 124, 79, 130, 124, 254, 228, 123, 0, 0, 0, 2, 2, 28, 254, 216, 2, 176, 6, 43, 0, 3, 0, 7, 0, 41, 64, 38, 0, 0, 4, 1, 1, 0, 1, 97, 5, 1, 3, 3, 2, 93, 0, 2, 2, 58, 3, 76, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 9, 21, 43, 1, 17, 51, 17, 3, 17, 51, 17, 2, 28, 148, 148, 148, 254, 216, 2, 228, 253, 28, 4, 111, 2, 228, 253, 28, 0, 0, 0, 2, 0, 154, 254, 179, 4, 49, 5, 238, 0, 51, 0, 63, 0, 117, 64, 16, 26, 1, 4, 2, 58, 44, 18, 3, 0, 3, 0, 1, 5, 1, 3, 74, 75, 176, 42, 80, 88, 64, 33, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 1, 0, 5, 1, 5, 99, 0, 4, 4, 2, 95, 0, 2, 2, 62, 4, 76, 27, 64, 39, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 2, 0, 4, 3, 2, 4, 103, 0, 1, 5, 5, 1, 87, 0, 1, 1, 5, 95, 0, 5, 1, 5, 79, 89, 64, 13, 51, 49, 32, 30, 28, 27, 25, 23, 34, 17, 6, 9, 22, 43, 19, 17, 51, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 39, 39, 36, 53, 52, 55, 38, 53, 52, 55, 54, 51, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 22, 23, 23, 4, 21, 20, 7, 22, 21, 20, 7, 6, 35, 34, 1, 54, 53, 52, 39, 37, 39, 6, 21, 20, 23, 5, 154, 123, 25, 160, 155, 132, 76, 75, 69, 53, 110, 246, 254, 250, 144, 138, 132, 131, 244, 157, 188, 124, 24, 130, 110, 132, 74, 85, 87, 51, 88, 206, 1, 21, 129, 154, 128, 128, 227, 230, 1, 195, 89, 186, 255, 0, 48, 83, 164, 1, 13, 254, 253, 1, 65, 210, 62, 56, 55, 93, 83, 48, 38, 43, 96, 102, 218, 154, 136, 101, 145, 172, 94, 94, 44, 254, 192, 203, 37, 42, 49, 101, 84, 64, 36, 34, 79, 106, 228, 145, 145, 111, 157, 158, 94, 94, 2, 165, 98, 91, 131, 68, 94, 19, 88, 85, 131, 67, 109, 0, 0, 0, 2, 1, 25, 5, 3, 3, 179, 5, 200, 0, 3, 0, 7, 0, 50, 177, 6, 100, 68, 64, 39, 2, 1, 0, 1, 1, 0, 85, 2, 1, 0, 0, 1, 93, 5, 3, 4, 3, 1, 0, 1, 77, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 9, 21, 43, 177, 6, 0, 68, 1, 53, 51, 21, 33, 53, 51, 21, 1, 25, 197, 1, 16, 197, 5, 3, 197, 197, 197, 197, 0, 0, 0, 3, 0, 62, 255, 219, 4, 144, 5, 237, 0, 15, 0, 31, 0, 61, 0, 108, 177, 6, 100, 68, 64, 97, 46, 1, 7, 5, 49, 1, 6, 7, 61, 1, 8, 6, 32, 1, 4, 8, 4, 74, 0, 6, 7, 8, 7, 6, 8, 126, 9, 1, 0, 10, 1, 2, 5, 0, 2, 103, 0, 5, 0, 7, 6, 5, 7, 103, 0, 8, 0, 4, 3, 8, 4, 103, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 95, 0, 1, 3, 1, 79, 17, 16, 1, 0, 60, 58, 52, 50, 48, 47, 44, 42, 36, 34, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 11, 9, 20, 43, 177, 6, 0, 68, 1, 50, 23, 22, 17, 16, 7, 6, 33, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 19, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 51, 50, 23, 23, 21, 35, 53, 38, 35, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 2, 103, 249, 152, 152, 152, 152, 254, 254, 218, 143, 183, 152, 152, 249, 192, 119, 119, 118, 118, 190, 174, 114, 145, 119, 120, 67, 20, 115, 86, 160, 102, 103, 100, 99, 165, 93, 109, 16, 85, 73, 56, 110, 67, 68, 73, 73, 124, 97, 96, 5, 237, 213, 213, 254, 163, 254, 156, 211, 212, 173, 221, 1, 127, 1, 96, 212, 213, 111, 184, 184, 254, 215, 254, 216, 185, 186, 147, 186, 1, 79, 1, 41, 183, 184, 251, 218, 8, 46, 123, 123, 197, 199, 123, 123, 27, 4, 185, 93, 25, 94, 94, 151, 155, 92, 93, 50, 0, 0, 2, 0, 136, 2, 203, 4, 92, 5, 237, 0, 29, 0, 37, 0, 227, 64, 14, 19, 1, 2, 4, 16, 1, 3, 2, 30, 1, 5, 7, 3, 74, 75, 176, 28, 80, 88, 64, 36, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 7, 5, 1, 7, 103, 8, 1, 5, 6, 1, 0, 5, 0, 99, 0, 2, 2, 4, 95, 0, 4, 4, 78, 2, 76, 27, 75, 176, 29, 80, 88, 64, 41, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 7, 5, 1, 7, 103, 0, 6, 0, 5, 6, 85, 8, 1, 5, 0, 0, 5, 0, 99, 0, 2, 2, 4, 95, 0, 4, 4, 78, 2, 76, 27, 75, 176, 42, 80, 88, 64, 42, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 7, 5, 1, 7, 103, 0, 5, 0, 6, 0, 5, 6, 101, 0, 8, 0, 0, 8, 0, 99, 0, 2, 2, 4, 95, 0, 4, 4, 78, 2, 76, 27, 64, 48, 0, 3, 2, 1, 2, 3, 1, 126, 0, 4, 0, 2, 3, 4, 2, 103, 0, 1, 0, 7, 5, 1, 7, 103, 0, 8, 6, 0, 8, 87, 0, 5, 0, 6, 0, 5, 6, 101, 0, 8, 8, 0, 95, 0, 0, 8, 0, 79, 89, 89, 89, 64, 12, 34, 34, 17, 20, 34, 18, 36, 36, 33, 9, 10, 29, 43, 1, 6, 35, 34, 39, 38, 53, 16, 33, 51, 53, 52, 39, 38, 35, 34, 7, 21, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 39, 53, 35, 32, 21, 20, 51, 50, 2, 253, 159, 151, 143, 88, 88, 2, 39, 78, 47, 46, 107, 87, 125, 149, 251, 142, 177, 82, 82, 178, 254, 186, 25, 40, 254, 109, 169, 136, 3, 49, 102, 59, 59, 99, 1, 7, 55, 78, 33, 33, 42, 83, 189, 59, 54, 54, 122, 254, 81, 123, 200, 145, 141, 98, 0, 0, 0, 0, 2, 0, 82, 0, 99, 4, 82, 3, 219, 0, 5, 0, 11, 0, 8, 181, 9, 7, 3, 1, 2, 48, 43, 37, 7, 1, 1, 23, 1, 3, 7, 1, 1, 23, 1, 4, 82, 86, 254, 67, 1, 189, 86, 254, 228, 209, 87, 254, 68, 1, 188, 87, 254, 228, 185, 86, 1, 188, 1, 188, 86, 254, 154, 254, 154, 86, 1, 188, 1, 188, 86, 254, 154, 0, 0, 0, 1, 0, 99, 0, 197, 4, 106, 2, 179, 0, 7, 0, 36, 64, 33, 3, 1, 2, 0, 2, 132, 0, 1, 0, 0, 1, 85, 0, 1, 1, 0, 93, 0, 0, 1, 0, 77, 0, 0, 0, 7, 0, 7, 17, 17, 4, 9, 22, 43, 37, 17, 33, 53, 33, 21, 49, 17, 3, 214, 252, 141, 4, 7, 197, 1, 90, 148, 148, 254, 166, 0, 0, 1, 0, 148, 2, 31, 4, 57, 2, 179, 0, 3, 0, 30, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 19, 53, 33, 21, 148, 3, 165, 2, 31, 148, 148, 0, 0, 4, 0, 62, 255, 219, 4, 144, 5, 237, 0, 15, 0, 31, 0, 51, 0, 60, 0, 115, 177, 6, 100, 68, 64, 104, 42, 1, 9, 12, 1, 74, 14, 1, 0, 15, 1, 2, 6, 0, 2, 103, 0, 6, 13, 1, 5, 12, 6, 5, 103, 0, 12, 0, 9, 4, 12, 9, 101, 10, 7, 2, 4, 16, 11, 2, 8, 3, 4, 8, 101, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 95, 0, 1, 3, 1, 79, 32, 32, 17, 16, 1, 0, 60, 58, 54, 52, 32, 51, 32, 51, 50, 49, 48, 47, 46, 45, 44, 43, 39, 37, 36, 35, 34, 33, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 17, 9, 20, 43, 177, 6, 0, 68, 1, 50, 23, 22, 17, 16, 7, 6, 33, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 1, 53, 51, 17, 35, 53, 33, 50, 21, 20, 7, 19, 51, 21, 35, 3, 35, 17, 51, 21, 3, 51, 50, 53, 52, 39, 38, 35, 35, 2, 103, 249, 152, 152, 152, 152, 254, 254, 218, 143, 183, 152, 152, 249, 192, 119, 119, 118, 118, 190, 174, 114, 145, 119, 120, 254, 71, 62, 62, 1, 16, 217, 149, 185, 25, 119, 194, 64, 74, 74, 7, 185, 34, 34, 87, 37, 5, 237, 213, 213, 254, 163, 254, 156, 211, 212, 173, 221, 1, 127, 1, 96, 212, 213, 111, 184, 184, 254, 215, 254, 216, 185, 186, 147, 186, 1, 79, 1, 41, 183, 184, 251, 191, 71, 2, 193, 70, 206, 153, 81, 254, 177, 71, 1, 114, 254, 213, 71, 1, 185, 188, 82, 32, 33, 0, 0, 0, 0, 1, 0, 0, 5, 176, 4, 205, 6, 68, 0, 3, 0, 32, 177, 6, 100, 68, 64, 21, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 0, 1, 0, 1, 77, 17, 16, 2, 9, 22, 43, 177, 6, 0, 68, 17, 33, 21, 33, 4, 205, 251, 51, 6, 68, 148, 0, 0, 0, 0, 2, 1, 62, 3, 157, 3, 142, 5, 237, 0, 15, 0, 31, 0, 56, 177, 6, 100, 68, 64, 45, 4, 1, 0, 5, 1, 2, 3, 0, 2, 103, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 95, 0, 1, 3, 1, 79, 17, 16, 1, 0, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 6, 9, 20, 43, 177, 6, 0, 68, 1, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 2, 102, 121, 88, 87, 87, 88, 125, 106, 81, 105, 87, 88, 121, 71, 51, 51, 51, 50, 70, 65, 48, 62, 51, 51, 5, 237, 87, 86, 122, 124, 86, 87, 70, 92, 134, 123, 86, 87, 123, 51, 50, 71, 71, 51, 51, 41, 52, 80, 71, 50, 51, 0, 2, 0, 99, 0, 0, 4, 106, 4, 210, 0, 11, 0, 15, 0, 92, 75, 176, 42, 80, 88, 64, 30, 3, 1, 1, 4, 1, 0, 5, 1, 0, 101, 0, 2, 8, 1, 5, 7, 2, 5, 101, 0, 7, 7, 6, 93, 0, 6, 6, 57, 6, 76, 27, 64, 30, 3, 1, 1, 4, 1, 0, 5, 1, 0, 101, 0, 2, 8, 1, 5, 7, 2, 5, 101, 0, 7, 7, 6, 93, 0, 6, 6, 60, 6, 76, 89, 64, 18, 0, 0, 15, 14, 13, 12, 0, 11, 0, 11, 17, 17, 17, 17, 17, 9, 9, 25, 43, 1, 17, 33, 53, 33, 17, 51, 17, 33, 21, 33, 17, 1, 33, 53, 33, 2, 29, 254, 70, 1, 186, 148, 1, 185, 254, 71, 1, 185, 251, 249, 4, 7, 1, 40, 1, 139, 148, 1, 139, 254, 117, 148, 254, 117, 254, 216, 148, 0, 1, 1, 1, 2, 216, 3, 204, 5, 238, 0, 27, 0, 100, 64, 11, 15, 1, 0, 2, 1, 74, 1, 1, 3, 1, 73, 75, 176, 42, 80, 88, 64, 27, 0, 1, 0, 3, 0, 1, 3, 126, 0, 3, 5, 1, 4, 3, 4, 97, 0, 0, 0, 2, 95, 0, 2, 2, 78, 0, 76, 27, 64, 33, 0, 1, 0, 3, 0, 1, 3, 126, 0, 2, 0, 0, 1, 2, 0, 103, 0, 3, 4, 4, 3, 85, 0, 3, 3, 4, 93, 5, 1, 4, 3, 4, 77, 89, 64, 13, 0, 0, 0, 27, 0, 27, 22, 35, 18, 41, 6, 10, 24, 43, 1, 53, 54, 55, 54, 55, 55, 54, 53, 52, 35, 34, 7, 7, 35, 53, 55, 54, 51, 32, 21, 20, 7, 7, 6, 7, 33, 21, 1, 1, 41, 66, 60, 127, 96, 134, 192, 114, 83, 12, 123, 37, 168, 130, 1, 112, 208, 82, 180, 30, 2, 0, 2, 216, 148, 95, 44, 40, 50, 38, 53, 82, 116, 37, 92, 203, 9, 41, 223, 157, 76, 30, 66, 90, 148, 0, 0, 0, 0, 1, 1, 7, 2, 203, 3, 198, 5, 238, 0, 36, 0, 131, 64, 14, 25, 1, 4, 6, 31, 1, 2, 3, 0, 1, 7, 1, 3, 74, 75, 176, 42, 80, 88, 64, 42, 0, 5, 4, 3, 4, 5, 3, 126, 0, 0, 2, 1, 2, 0, 1, 126, 0, 3, 0, 2, 0, 3, 2, 103, 0, 1, 0, 7, 1, 7, 99, 0, 4, 4, 6, 95, 0, 6, 6, 78, 4, 76, 27, 64, 48, 0, 5, 4, 3, 4, 5, 3, 126, 0, 0, 2, 1, 2, 0, 1, 126, 0, 6, 0, 4, 5, 6, 4, 103, 0, 3, 0, 2, 0, 3, 2, 103, 0, 1, 7, 7, 1, 87, 0, 1, 1, 7, 95, 0, 7, 1, 7, 79, 89, 64, 11, 38, 34, 18, 36, 33, 36, 34, 17, 8, 10, 28, 43, 1, 53, 51, 23, 22, 51, 50, 53, 52, 39, 38, 35, 35, 53, 51, 50, 55, 54, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 32, 21, 20, 7, 22, 21, 20, 33, 34, 1, 7, 123, 12, 70, 93, 226, 96, 73, 153, 91, 95, 190, 64, 64, 192, 118, 79, 12, 123, 170, 173, 1, 104, 212, 212, 254, 123, 146, 2, 240, 173, 68, 18, 104, 84, 23, 17, 124, 22, 21, 62, 98, 30, 81, 185, 50, 192, 130, 70, 46, 147, 218, 0, 0, 1, 1, 136, 5, 3, 3, 68, 6, 68, 0, 3, 0, 31, 177, 6, 100, 68, 64, 20, 0, 0, 1, 0, 131, 2, 1, 1, 1, 116, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 177, 6, 0, 68, 1, 19, 51, 1, 1, 136, 216, 228, 254, 191, 5, 3, 1, 65, 254, 191, 0, 0, 0, 0, 1, 0, 68, 254, 117, 4, 142, 4, 62, 0, 26, 0, 119, 64, 11, 17, 8, 2, 2, 0, 23, 1, 7, 6, 2, 74, 75, 176, 42, 80, 88, 64, 40, 3, 1, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 5, 1, 2, 2, 6, 93, 0, 6, 6, 57, 75, 5, 1, 2, 2, 7, 95, 0, 7, 7, 66, 75, 0, 8, 8, 61, 8, 76, 27, 64, 40, 3, 1, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 5, 1, 2, 2, 6, 93, 0, 6, 6, 60, 75, 5, 1, 2, 2, 7, 95, 0, 7, 7, 66, 75, 0, 8, 8, 61, 8, 76, 89, 64, 12, 18, 36, 17, 17, 17, 18, 34, 17, 16, 9, 9, 29, 43, 19, 35, 53, 33, 17, 20, 51, 50, 55, 17, 35, 53, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 34, 39, 17, 35, 17, 191, 123, 1, 65, 163, 149, 144, 111, 1, 53, 123, 254, 191, 78, 67, 80, 121, 50, 60, 198, 3, 194, 124, 253, 67, 255, 252, 2, 68, 124, 252, 61, 123, 209, 120, 52, 62, 15, 254, 127, 2, 246, 0, 0, 0, 1, 0, 100, 254, 216, 3, 202, 5, 213, 0, 18, 0, 113, 181, 1, 1, 2, 3, 1, 74, 75, 176, 38, 80, 88, 64, 19, 5, 4, 2, 2, 3, 2, 132, 0, 3, 3, 0, 95, 1, 1, 0, 0, 56, 3, 76, 27, 75, 176, 42, 80, 88, 64, 23, 5, 4, 2, 2, 3, 2, 132, 0, 0, 0, 56, 75, 0, 3, 3, 1, 93, 0, 1, 1, 56, 3, 76, 27, 64, 28, 0, 0, 1, 0, 131, 5, 4, 2, 2, 3, 2, 132, 0, 1, 3, 3, 1, 85, 0, 1, 1, 3, 93, 0, 3, 1, 3, 77, 89, 89, 64, 13, 0, 0, 0, 18, 0, 18, 17, 17, 35, 38, 6, 9, 24, 43, 1, 17, 38, 39, 38, 17, 16, 33, 50, 23, 23, 22, 51, 33, 17, 35, 17, 35, 17, 2, 38, 144, 75, 231, 1, 101, 38, 59, 70, 20, 35, 1, 35, 124, 172, 254, 216, 4, 12, 17, 33, 99, 1, 9, 1, 83, 5, 6, 2, 249, 16, 6, 117, 249, 139, 0, 0, 0, 1, 1, 190, 3, 6, 3, 14, 4, 86, 0, 3, 0, 53, 75, 176, 42, 80, 88, 64, 12, 2, 1, 1, 1, 0, 93, 0, 0, 0, 59, 1, 76, 27, 64, 17, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 89, 64, 10, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 1, 17, 33, 17, 1, 190, 1, 80, 3, 6, 1, 80, 254, 176, 0, 0, 0, 0, 1, 1, 185, 254, 80, 3, 20, 0, 0, 0, 19, 0, 100, 177, 6, 100, 68, 64, 10, 13, 1, 3, 4, 12, 1, 2, 3, 2, 74, 75, 176, 23, 80, 88, 64, 30, 0, 0, 1, 1, 0, 110, 0, 1, 0, 4, 3, 1, 4, 104, 0, 3, 2, 2, 3, 87, 0, 3, 3, 2, 95, 0, 2, 3, 2, 79, 27, 64, 29, 0, 0, 1, 0, 131, 0, 1, 0, 4, 3, 1, 4, 104, 0, 3, 2, 2, 3, 87, 0, 3, 3, 2, 95, 0, 2, 3, 2, 79, 89, 183, 18, 35, 38, 17, 16, 5, 9, 25, 43, 177, 6, 0, 68, 33, 51, 7, 22, 23, 22, 21, 20, 7, 6, 35, 34, 39, 53, 22, 51, 50, 53, 52, 39, 2, 45, 97, 60, 72, 52, 70, 59, 58, 87, 67, 76, 50, 54, 104, 187, 109, 2, 37, 49, 72, 68, 47, 48, 21, 81, 15, 74, 93, 3, 0, 1, 1, 10, 2, 216, 3, 195, 5, 237, 0, 9, 0, 40, 64, 37, 6, 5, 4, 3, 4, 0, 72, 1, 1, 0, 2, 2, 0, 85, 1, 1, 0, 0, 2, 93, 3, 1, 2, 0, 2, 77, 0, 0, 0, 9, 0, 9, 21, 17, 4, 10, 22, 43, 1, 53, 33, 17, 5, 53, 37, 17, 33, 21, 1, 10, 1, 6, 254, 250, 1, 179, 1, 6, 2, 216, 123, 1, 238, 50, 124, 98, 253, 102, 123, 0, 0, 0, 0, 2, 0, 148, 2, 204, 4, 57, 5, 237, 0, 15, 0, 31, 0, 79, 75, 176, 42, 80, 88, 64, 20, 0, 3, 0, 1, 3, 1, 99, 5, 1, 2, 2, 0, 95, 4, 1, 0, 0, 78, 2, 76, 27, 64, 26, 4, 1, 0, 5, 1, 2, 3, 0, 2, 103, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 95, 0, 1, 3, 1, 79, 89, 64, 19, 17, 16, 1, 0, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 6, 10, 20, 43, 1, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 2, 102, 215, 126, 126, 126, 127, 221, 189, 120, 150, 126, 126, 214, 123, 79, 79, 79, 78, 122, 112, 76, 96, 80, 80, 5, 237, 108, 108, 185, 186, 107, 107, 89, 111, 201, 184, 108, 108, 123, 78, 79, 120, 121, 78, 79, 63, 80, 135, 121, 78, 78, 0, 0, 2, 0, 123, 0, 99, 4, 123, 3, 219, 0, 5, 0, 11, 0, 8, 181, 11, 9, 5, 3, 2, 48, 43, 55, 1, 1, 55, 1, 1, 37, 1, 1, 55, 1, 1, 123, 1, 28, 254, 228, 86, 1, 188, 254, 68, 1, 151, 1, 28, 254, 228, 87, 1, 188, 254, 68, 185, 1, 102, 1, 102, 86, 254, 68, 254, 68, 86, 1, 102, 1, 102, 86, 254, 68, 254, 68, 0, 0, 0, 0, 4, 0, 12, 255, 219, 4, 181, 5, 238, 0, 3, 0, 14, 0, 20, 0, 23, 0, 104, 177, 6, 100, 68, 64, 93, 20, 16, 15, 3, 3, 0, 23, 7, 2, 4, 7, 2, 74, 17, 1, 0, 72, 0, 0, 3, 0, 131, 0, 3, 7, 3, 131, 0, 7, 4, 7, 131, 10, 1, 6, 2, 1, 2, 6, 1, 126, 9, 1, 1, 1, 130, 8, 1, 4, 2, 2, 4, 85, 8, 1, 4, 4, 2, 94, 5, 1, 2, 4, 2, 78, 4, 4, 0, 0, 22, 21, 19, 18, 4, 14, 4, 14, 13, 12, 11, 10, 9, 8, 6, 5, 0, 3, 0, 3, 17, 11, 9, 21, 43, 177, 6, 0, 68, 23, 1, 51, 1, 37, 53, 33, 53, 1, 51, 17, 51, 21, 35, 21, 1, 53, 37, 17, 35, 17, 1, 33, 17, 68, 3, 44, 136, 252, 212, 2, 219, 254, 117, 1, 103, 191, 115, 115, 251, 202, 1, 90, 173, 1, 213, 1, 25, 37, 6, 18, 249, 238, 37, 197, 141, 1, 171, 254, 55, 111, 197, 5, 24, 127, 87, 252, 246, 2, 96, 251, 240, 1, 79, 0, 0, 0, 3, 0, 16, 255, 219, 4, 181, 5, 238, 0, 3, 0, 28, 0, 34, 0, 100, 177, 6, 100, 68, 64, 89, 34, 30, 29, 3, 3, 0, 15, 1, 2, 6, 14, 5, 2, 4, 2, 3, 74, 31, 1, 0, 72, 0, 0, 3, 0, 131, 0, 6, 3, 2, 3, 6, 2, 126, 7, 1, 1, 5, 1, 132, 0, 3, 0, 2, 4, 3, 2, 104, 0, 4, 5, 5, 4, 85, 0, 4, 4, 5, 93, 8, 1, 5, 4, 5, 77, 4, 4, 0, 0, 33, 32, 4, 28, 4, 28, 27, 26, 18, 16, 13, 11, 0, 3, 0, 3, 17, 9, 9, 21, 43, 177, 6, 0, 68, 23, 1, 51, 1, 37, 53, 54, 55, 55, 54, 53, 52, 35, 34, 7, 53, 54, 51, 50, 22, 21, 20, 15, 2, 6, 7, 33, 21, 1, 53, 37, 17, 35, 17, 50, 3, 44, 136, 252, 212, 1, 218, 76, 150, 43, 77, 132, 99, 115, 129, 103, 132, 163, 163, 55, 40, 73, 32, 1, 125, 251, 91, 1, 90, 173, 37, 6, 18, 249, 238, 37, 139, 137, 117, 34, 61, 62, 104, 56, 135, 45, 120, 98, 125, 108, 37, 26, 51, 77, 136, 5, 24, 127, 87, 252, 246, 2, 96, 0, 4, 0, 42, 255, 219, 4, 205, 5, 237, 0, 28, 0, 32, 0, 43, 0, 46, 0, 136, 177, 6, 100, 68, 64, 125, 15, 1, 3, 4, 14, 1, 2, 3, 22, 1, 1, 2, 0, 1, 0, 1, 28, 1, 5, 9, 46, 36, 2, 10, 5, 6, 74, 0, 9, 0, 5, 0, 9, 5, 126, 15, 1, 12, 8, 7, 8, 12, 7, 126, 14, 1, 7, 7, 130, 6, 1, 4, 0, 3, 2, 4, 3, 103, 0, 2, 0, 1, 0, 2, 1, 103, 0, 0, 0, 5, 10, 0, 5, 103, 13, 1, 10, 8, 8, 10, 85, 13, 1, 10, 10, 8, 94, 11, 1, 8, 10, 8, 78, 33, 33, 29, 29, 45, 44, 33, 43, 33, 43, 42, 41, 40, 39, 38, 37, 35, 34, 29, 32, 29, 32, 19, 39, 35, 34, 33, 18, 33, 16, 9, 27, 43, 177, 6, 0, 68, 19, 22, 51, 50, 53, 52, 33, 53, 51, 50, 53, 52, 35, 34, 7, 53, 54, 51, 50, 22, 21, 20, 7, 22, 21, 20, 33, 34, 39, 19, 1, 51, 1, 37, 53, 33, 53, 1, 51, 17, 51, 21, 35, 21, 1, 33, 17, 42, 122, 78, 154, 254, 238, 30, 246, 138, 94, 124, 122, 116, 136, 156, 231, 234, 254, 170, 94, 97, 28, 3, 249, 142, 252, 7, 2, 219, 254, 130, 1, 102, 192, 100, 100, 254, 63, 1, 25, 3, 106, 36, 104, 133, 118, 121, 91, 44, 126, 30, 98, 86, 141, 59, 41, 154, 218, 29, 252, 238, 6, 18, 249, 238, 37, 197, 141, 1, 171, 254, 55, 111, 197, 1, 52, 1, 79, 0, 0, 0, 0, 2, 0, 126, 254, 81, 3, 235, 4, 62, 0, 3, 0, 37, 0, 69, 64, 66, 19, 1, 4, 2, 1, 74, 7, 1, 5, 0, 3, 0, 5, 3, 126, 0, 3, 2, 0, 3, 2, 124, 0, 0, 0, 1, 93, 6, 1, 1, 1, 59, 75, 0, 2, 2, 4, 96, 0, 4, 4, 67, 4, 76, 4, 4, 0, 0, 4, 37, 4, 37, 22, 20, 18, 17, 15, 13, 0, 3, 0, 3, 17, 8, 9, 21, 43, 1, 21, 35, 53, 19, 21, 20, 7, 7, 6, 21, 20, 23, 22, 51, 50, 55, 19, 51, 17, 6, 35, 32, 17, 52, 55, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 53, 53, 3, 22, 247, 247, 244, 67, 143, 71, 70, 124, 124, 130, 24, 124, 218, 193, 254, 46, 147, 56, 3, 9, 9, 8, 13, 20, 70, 37, 45, 4, 62, 222, 222, 254, 73, 49, 232, 156, 47, 100, 139, 106, 63, 63, 62, 1, 3, 254, 135, 67, 1, 81, 166, 110, 42, 2, 7, 6, 6, 8, 14, 65, 51, 56, 156, 52, 0, 0, 0, 0, 3, 0, 25, 0, 0, 4, 179, 7, 143, 0, 15, 0, 19, 0, 23, 0, 121, 181, 18, 1, 8, 3, 1, 74, 75, 176, 42, 80, 88, 64, 39, 0, 10, 9, 10, 131, 0, 9, 3, 9, 131, 0, 8, 11, 1, 7, 0, 8, 7, 102, 0, 3, 3, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 64, 39, 0, 10, 9, 10, 131, 0, 9, 3, 9, 131, 0, 3, 8, 3, 131, 0, 8, 11, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 60, 1, 76, 89, 64, 22, 0, 0, 23, 22, 21, 20, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 12, 9, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 19, 35, 1, 51, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 163, 123, 254, 191, 228, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 1, 115, 1, 65, 0, 3, 0, 25, 0, 0, 4, 179, 7, 143, 0, 15, 0, 19, 0, 23, 0, 127, 181, 18, 1, 8, 3, 1, 74, 75, 176, 42, 80, 88, 64, 40, 0, 9, 10, 9, 131, 12, 1, 10, 3, 10, 131, 0, 8, 11, 1, 7, 0, 8, 7, 102, 0, 3, 3, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 64, 40, 0, 9, 10, 9, 131, 12, 1, 10, 3, 10, 131, 0, 3, 8, 3, 131, 0, 8, 11, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 60, 1, 76, 89, 64, 26, 20, 20, 0, 0, 20, 23, 20, 23, 22, 21, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 13, 9, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 3, 19, 51, 1, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 84, 216, 228, 254, 191, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 1, 115, 1, 65, 254, 191, 0, 3, 0, 25, 0, 0, 4, 179, 7, 143, 0, 15, 0, 19, 0, 27, 0, 136, 64, 10, 25, 1, 10, 9, 18, 1, 8, 3, 2, 74, 75, 176, 42, 80, 88, 64, 41, 0, 9, 10, 9, 131, 13, 11, 2, 10, 3, 10, 131, 0, 8, 12, 1, 7, 0, 8, 7, 102, 0, 3, 3, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 64, 41, 0, 9, 10, 9, 131, 13, 11, 2, 10, 3, 10, 131, 0, 3, 8, 3, 131, 0, 8, 12, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 60, 1, 76, 89, 64, 28, 20, 20, 0, 0, 20, 27, 20, 27, 24, 23, 22, 21, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 14, 9, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 1, 1, 51, 1, 35, 39, 35, 7, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 254, 186, 1, 0, 219, 1, 0, 123, 241, 3, 241, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 1, 115, 1, 65, 254, 191, 202, 202, 0, 0, 0, 0, 3, 0, 25, 0, 0, 4, 179, 7, 77, 0, 15, 0, 19, 0, 43, 0, 154, 181, 18, 1, 8, 3, 1, 74, 75, 176, 42, 80, 88, 64, 48, 11, 1, 9, 0, 13, 12, 9, 13, 103, 0, 10, 16, 14, 2, 12, 3, 10, 12, 104, 0, 8, 15, 1, 7, 0, 8, 7, 102, 0, 3, 3, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 64, 51, 0, 3, 12, 8, 12, 3, 8, 126, 11, 1, 9, 0, 13, 12, 9, 13, 103, 0, 10, 16, 14, 2, 12, 3, 10, 12, 104, 0, 8, 15, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 60, 1, 76, 89, 64, 34, 20, 20, 0, 0, 20, 43, 20, 43, 42, 40, 37, 35, 32, 31, 30, 28, 25, 23, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 17, 9, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 1, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 254, 218, 6, 25, 45, 109, 72, 63, 60, 62, 34, 68, 11, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 1, 135, 95, 50, 90, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 0, 0, 0, 0, 4, 0, 25, 0, 0, 4, 179, 7, 39, 0, 15, 0, 19, 0, 23, 0, 27, 0, 140, 181, 18, 1, 8, 3, 1, 74, 75, 176, 42, 80, 88, 64, 41, 11, 1, 9, 15, 12, 14, 3, 10, 3, 9, 10, 101, 0, 8, 13, 1, 7, 0, 8, 7, 102, 0, 3, 3, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 64, 44, 0, 3, 10, 8, 10, 3, 8, 126, 11, 1, 9, 15, 12, 14, 3, 10, 3, 9, 10, 101, 0, 8, 13, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 60, 1, 76, 89, 64, 34, 24, 24, 20, 20, 0, 0, 24, 27, 24, 27, 26, 25, 20, 23, 20, 23, 22, 21, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 16, 9, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 1, 53, 51, 21, 33, 53, 51, 21, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 254, 218, 197, 1, 16, 197, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 1, 135, 197, 197, 197, 197, 0, 3, 0, 25, 0, 0, 4, 179, 7, 143, 0, 32, 0, 36, 0, 52, 0, 140, 181, 35, 1, 10, 3, 1, 74, 75, 176, 42, 80, 88, 64, 44, 0, 4, 14, 1, 11, 12, 4, 11, 103, 0, 10, 13, 1, 9, 0, 10, 9, 102, 0, 12, 12, 58, 75, 5, 1, 3, 3, 56, 75, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 1, 57, 1, 76, 27, 64, 47, 5, 1, 3, 12, 10, 12, 3, 10, 126, 0, 4, 14, 1, 11, 12, 4, 11, 103, 0, 10, 13, 1, 9, 0, 10, 9, 102, 0, 12, 12, 58, 75, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 1, 60, 1, 76, 89, 64, 28, 38, 37, 0, 0, 46, 44, 37, 52, 38, 52, 34, 33, 0, 32, 0, 32, 17, 17, 17, 23, 39, 17, 17, 17, 17, 15, 9, 29, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 38, 39, 38, 53, 52, 55, 54, 51, 50, 23, 22, 21, 20, 7, 6, 7, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 19, 6, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 1, 71, 99, 143, 254, 166, 74, 1, 165, 62, 63, 49, 80, 67, 66, 94, 94, 66, 67, 67, 55, 75, 62, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 42, 58, 41, 42, 41, 41, 59, 52, 39, 50, 42, 41, 1, 188, 254, 191, 123, 123, 5, 77, 9, 43, 69, 106, 95, 66, 67, 66, 66, 95, 99, 65, 55, 9, 250, 179, 123, 123, 1, 65, 124, 2, 163, 2, 94, 1, 40, 41, 59, 61, 41, 42, 33, 43, 68, 59, 41, 40, 0, 0, 0, 0, 2, 0, 12, 0, 0, 4, 193, 5, 200, 0, 29, 0, 33, 1, 72, 181, 32, 1, 9, 10, 1, 74, 75, 176, 12, 80, 88, 64, 64, 0, 9, 10, 12, 10, 9, 112, 0, 1, 4, 0, 0, 1, 112, 0, 11, 16, 1, 14, 13, 11, 14, 101, 0, 12, 0, 13, 15, 12, 13, 101, 0, 15, 0, 4, 1, 15, 4, 101, 0, 10, 10, 8, 93, 0, 8, 8, 56, 75, 7, 5, 3, 3, 0, 0, 2, 94, 6, 1, 2, 2, 57, 2, 76, 27, 75, 176, 14, 80, 88, 64, 65, 0, 9, 10, 12, 10, 9, 112, 0, 1, 4, 0, 4, 1, 0, 126, 0, 11, 16, 1, 14, 13, 11, 14, 101, 0, 12, 0, 13, 15, 12, 13, 101, 0, 15, 0, 4, 1, 15, 4, 101, 0, 10, 10, 8, 93, 0, 8, 8, 56, 75, 7, 5, 3, 3, 0, 0, 2, 94, 6, 1, 2, 2, 57, 2, 76, 27, 75, 176, 42, 80, 88, 64, 66, 0, 9, 10, 12, 10, 9, 12, 126, 0, 1, 4, 0, 4, 1, 0, 126, 0, 11, 16, 1, 14, 13, 11, 14, 101, 0, 12, 0, 13, 15, 12, 13, 101, 0, 15, 0, 4, 1, 15, 4, 101, 0, 10, 10, 8, 93, 0, 8, 8, 56, 75, 7, 5, 3, 3, 0, 0, 2, 94, 6, 1, 2, 2, 57, 2, 76, 27, 64, 64, 0, 9, 10, 12, 10, 9, 12, 126, 0, 1, 4, 0, 4, 1, 0, 126, 0, 8, 0, 10, 9, 8, 10, 101, 0, 11, 16, 1, 14, 13, 11, 14, 101, 0, 12, 0, 13, 15, 12, 13, 101, 0, 15, 0, 4, 1, 15, 4, 101, 7, 5, 3, 3, 0, 0, 2, 94, 6, 1, 2, 2, 60, 2, 76, 89, 89, 89, 64, 30, 0, 0, 31, 30, 0, 29, 0, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 29, 43, 1, 17, 33, 53, 51, 17, 33, 53, 51, 17, 33, 3, 51, 21, 33, 53, 51, 1, 33, 17, 35, 53, 35, 17, 51, 53, 51, 17, 35, 53, 5, 33, 17, 35, 3, 56, 1, 13, 124, 253, 79, 111, 254, 183, 127, 121, 254, 220, 44, 2, 71, 2, 47, 123, 251, 177, 123, 123, 253, 130, 1, 20, 1, 2, 191, 253, 188, 210, 254, 179, 123, 1, 40, 254, 216, 123, 123, 5, 77, 254, 198, 191, 253, 238, 123, 254, 142, 123, 160, 2, 125, 0, 0, 1, 0, 123, 254, 80, 4, 103, 5, 237, 0, 46, 0, 143, 64, 23, 31, 1, 7, 5, 46, 1, 8, 6, 21, 0, 2, 0, 8, 14, 1, 3, 4, 13, 1, 2, 3, 5, 74, 75, 176, 42, 80, 88, 64, 47, 0, 6, 7, 8, 7, 6, 8, 126, 0, 1, 0, 4, 3, 1, 4, 103, 0, 7, 7, 5, 95, 0, 5, 5, 62, 75, 0, 8, 8, 0, 95, 0, 0, 0, 63, 75, 0, 3, 3, 2, 95, 0, 2, 2, 67, 2, 76, 27, 64, 45, 0, 6, 7, 8, 7, 6, 8, 126, 0, 5, 0, 7, 6, 5, 7, 103, 0, 1, 0, 4, 3, 1, 4, 103, 0, 8, 8, 0, 95, 0, 0, 0, 66, 75, 0, 3, 3, 2, 95, 0, 2, 2, 67, 2, 76, 89, 64, 12, 38, 34, 18, 40, 18, 35, 38, 17, 17, 9, 9, 29, 43, 37, 6, 7, 7, 22, 23, 22, 21, 20, 7, 6, 35, 34, 39, 53, 22, 51, 50, 53, 52, 39, 55, 38, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 4, 103, 198, 174, 39, 72, 52, 70, 59, 59, 85, 67, 77, 50, 54, 104, 187, 77, 234, 140, 164, 156, 156, 1, 34, 164, 217, 123, 29, 113, 111, 188, 103, 103, 114, 113, 200, 178, 186, 74, 106, 5, 72, 2, 37, 49, 72, 68, 47, 48, 21, 81, 15, 74, 93, 3, 142, 25, 177, 206, 1, 117, 1, 113, 200, 200, 64, 254, 169, 231, 53, 176, 176, 254, 204, 254, 214, 169, 168, 135, 0, 2, 0, 74, 0, 0, 4, 82, 7, 143, 0, 3, 0, 27, 0, 243, 75, 176, 10, 80, 88, 64, 64, 0, 1, 0, 1, 131, 0, 0, 4, 0, 131, 0, 5, 3, 8, 3, 5, 112, 0, 12, 9, 2, 2, 12, 112, 0, 7, 0, 10, 9, 7, 10, 101, 0, 8, 0, 9, 12, 8, 9, 101, 6, 1, 3, 3, 4, 93, 0, 4, 4, 56, 75, 11, 1, 2, 2, 13, 94, 14, 1, 13, 13, 57, 13, 76, 27, 75, 176, 42, 80, 88, 64, 66, 0, 1, 0, 1, 131, 0, 0, 4, 0, 131, 0, 5, 3, 8, 3, 5, 8, 126, 0, 12, 9, 2, 9, 12, 2, 126, 0, 7, 0, 10, 9, 7, 10, 101, 0, 8, 0, 9, 12, 8, 9, 101, 6, 1, 3, 3, 4, 93, 0, 4, 4, 56, 75, 11, 1, 2, 2, 13, 94, 14, 1, 13, 13, 57, 13, 76, 27, 64, 64, 0, 1, 0, 1, 131, 0, 0, 4, 0, 131, 0, 5, 3, 8, 3, 5, 8, 126, 0, 12, 9, 2, 9, 12, 2, 126, 0, 4, 6, 1, 3, 5, 4, 3, 102, 0, 7, 0, 10, 9, 7, 10, 101, 0, 8, 0, 9, 12, 8, 9, 101, 11, 1, 2, 2, 13, 94, 14, 1, 13, 13, 60, 13, 76, 89, 89, 64, 26, 4, 4, 4, 27, 4, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 18, 17, 16, 15, 9, 29, 43, 1, 35, 1, 51, 1, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 2, 228, 123, 254, 191, 228, 254, 62, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 6, 78, 1, 65, 248, 113, 123, 4, 210, 123, 254, 157, 232, 253, 225, 124, 254, 141, 124, 253, 208, 247, 254, 134, 0, 0, 2, 0, 74, 0, 0, 4, 82, 7, 143, 0, 3, 0, 27, 1, 2, 75, 176, 10, 80, 88, 64, 65, 0, 0, 1, 0, 131, 14, 1, 1, 4, 1, 131, 0, 5, 3, 8, 3, 5, 112, 0, 12, 9, 2, 2, 12, 112, 0, 7, 0, 10, 9, 7, 10, 101, 0, 8, 0, 9, 12, 8, 9, 101, 6, 1, 3, 3, 4, 93, 0, 4, 4, 56, 75, 11, 1, 2, 2, 13, 94, 15, 1, 13, 13, 57, 13, 76, 27, 75, 176, 42, 80, 88, 64, 67, 0, 0, 1, 0, 131, 14, 1, 1, 4, 1, 131, 0, 5, 3, 8, 3, 5, 8, 126, 0, 12, 9, 2, 9, 12, 2, 126, 0, 7, 0, 10, 9, 7, 10, 101, 0, 8, 0, 9, 12, 8, 9, 101, 6, 1, 3, 3, 4, 93, 0, 4, 4, 56, 75, 11, 1, 2, 2, 13, 94, 15, 1, 13, 13, 57, 13, 76, 27, 64, 65, 0, 0, 1, 0, 131, 14, 1, 1, 4, 1, 131, 0, 5, 3, 8, 3, 5, 8, 126, 0, 12, 9, 2, 9, 12, 2, 126, 0, 4, 6, 1, 3, 5, 4, 3, 102, 0, 7, 0, 10, 9, 7, 10, 101, 0, 8, 0, 9, 12, 8, 9, 101, 11, 1, 2, 2, 13, 94, 15, 1, 13, 13, 60, 13, 76, 89, 89, 64, 38, 4, 4, 0, 0, 4, 27, 4, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 3, 0, 3, 17, 16, 9, 21, 43, 1, 19, 51, 1, 1, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 1, 225, 216, 228, 254, 191, 253, 238, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 6, 78, 1, 65, 254, 191, 249, 178, 123, 4, 210, 123, 254, 157, 232, 253, 225, 124, 254, 141, 124, 253, 208, 247, 254, 134, 0, 2, 0, 74, 0, 0, 4, 82, 7, 143, 0, 7, 0, 31, 1, 13, 181, 5, 1, 1, 0, 1, 74, 75, 176, 10, 80, 88, 64, 66, 0, 0, 1, 0, 131, 15, 2, 2, 1, 5, 1, 131, 0, 6, 4, 9, 4, 6, 112, 0, 13, 10, 3, 3, 13, 112, 0, 8, 0, 11, 10, 8, 11, 101, 0, 9, 0, 10, 13, 9, 10, 101, 7, 1, 4, 4, 5, 93, 0, 5, 5, 56, 75, 12, 1, 3, 3, 14, 94, 16, 1, 14, 14, 57, 14, 76, 27, 75, 176, 42, 80, 88, 64, 68, 0, 0, 1, 0, 131, 15, 2, 2, 1, 5, 1, 131, 0, 6, 4, 9, 4, 6, 9, 126, 0, 13, 10, 3, 10, 13, 3, 126, 0, 8, 0, 11, 10, 8, 11, 101, 0, 9, 0, 10, 13, 9, 10, 101, 7, 1, 4, 4, 5, 93, 0, 5, 5, 56, 75, 12, 1, 3, 3, 14, 94, 16, 1, 14, 14, 57, 14, 76, 27, 64, 66, 0, 0, 1, 0, 131, 15, 2, 2, 1, 5, 1, 131, 0, 6, 4, 9, 4, 6, 9, 126, 0, 13, 10, 3, 10, 13, 3, 126, 0, 5, 7, 1, 4, 6, 5, 4, 102, 0, 8, 0, 11, 10, 8, 11, 101, 0, 9, 0, 10, 13, 9, 10, 101, 12, 1, 3, 3, 14, 94, 16, 1, 14, 14, 60, 14, 76, 89, 89, 64, 39, 8, 8, 0, 0, 8, 31, 8, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 0, 7, 0, 7, 17, 17, 17, 9, 22, 43, 1, 1, 51, 1, 35, 39, 35, 7, 1, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 1, 3, 1, 0, 219, 1, 0, 123, 241, 3, 241, 254, 204, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 6, 78, 1, 65, 254, 191, 202, 202, 249, 178, 123, 4, 210, 123, 254, 157, 232, 253, 225, 124, 254, 141, 124, 253, 208, 247, 254, 134, 0, 0, 0, 3, 0, 74, 0, 0, 4, 82, 7, 39, 0, 3, 0, 7, 0, 31, 1, 13, 75, 176, 10, 80, 88, 64, 66, 0, 7, 5, 10, 5, 7, 112, 0, 14, 11, 4, 4, 14, 112, 2, 1, 0, 17, 3, 16, 3, 1, 6, 0, 1, 101, 0, 9, 0, 12, 11, 9, 12, 101, 0, 10, 0, 11, 14, 10, 11, 101, 8, 1, 5, 5, 6, 93, 0, 6, 6, 56, 75, 13, 1, 4, 4, 15, 94, 18, 1, 15, 15, 57, 15, 76, 27, 75, 176, 42, 80, 88, 64, 68, 0, 7, 5, 10, 5, 7, 10, 126, 0, 14, 11, 4, 11, 14, 4, 126, 2, 1, 0, 17, 3, 16, 3, 1, 6, 0, 1, 101, 0, 9, 0, 12, 11, 9, 12, 101, 0, 10, 0, 11, 14, 10, 11, 101, 8, 1, 5, 5, 6, 93, 0, 6, 6, 56, 75, 13, 1, 4, 4, 15, 94, 18, 1, 15, 15, 57, 15, 76, 27, 64, 66, 0, 7, 5, 10, 5, 7, 10, 126, 0, 14, 11, 4, 11, 14, 4, 126, 2, 1, 0, 17, 3, 16, 3, 1, 6, 0, 1, 101, 0, 6, 8, 1, 5, 7, 6, 5, 101, 0, 9, 0, 12, 11, 9, 12, 101, 0, 10, 0, 11, 14, 10, 11, 101, 13, 1, 4, 4, 15, 94, 18, 1, 15, 15, 60, 15, 76, 89, 89, 64, 46, 8, 8, 4, 4, 0, 0, 8, 31, 8, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 19, 9, 21, 43, 1, 53, 51, 21, 33, 53, 51, 21, 1, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 1, 3, 197, 1, 16, 197, 252, 173, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 6, 98, 197, 197, 197, 197, 249, 158, 123, 4, 210, 123, 254, 157, 232, 253, 225, 124, 254, 141, 124, 253, 208, 247, 254, 134, 0, 0, 0, 0, 2, 0, 160, 0, 0, 4, 44, 7, 143, 0, 11, 0, 15, 0, 98, 75, 176, 42, 80, 88, 64, 34, 0, 7, 6, 7, 131, 0, 6, 2, 6, 131, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 8, 1, 5, 5, 57, 5, 76, 27, 64, 32, 0, 7, 6, 7, 131, 0, 6, 2, 6, 131, 0, 2, 3, 1, 1, 0, 2, 1, 102, 4, 1, 0, 0, 5, 93, 8, 1, 5, 5, 60, 5, 76, 89, 64, 18, 0, 0, 15, 14, 13, 12, 0, 11, 0, 11, 17, 17, 17, 17, 17, 9, 9, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 1, 35, 1, 51, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 254, 156, 123, 254, 191, 228, 123, 4, 210, 123, 123, 251, 46, 123, 6, 78, 1, 65, 0, 0, 2, 0, 160, 0, 0, 4, 44, 7, 143, 0, 11, 0, 15, 0, 104, 75, 176, 42, 80, 88, 64, 35, 0, 6, 7, 6, 131, 9, 1, 7, 2, 7, 131, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 8, 1, 5, 5, 57, 5, 76, 27, 64, 33, 0, 6, 7, 6, 131, 9, 1, 7, 2, 7, 131, 0, 2, 3, 1, 1, 0, 2, 1, 101, 4, 1, 0, 0, 5, 93, 8, 1, 5, 5, 60, 5, 76, 89, 64, 22, 12, 12, 0, 0, 12, 15, 12, 15, 14, 13, 0, 11, 0, 11, 17, 17, 17, 17, 17, 10, 9, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 1, 19, 51, 1, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 253, 215, 216, 228, 254, 191, 123, 4, 210, 123, 123, 251, 46, 123, 6, 78, 1, 65, 254, 191, 0, 0, 2, 0, 160, 0, 0, 4, 44, 7, 143, 0, 11, 0, 19, 0, 115, 181, 17, 1, 7, 6, 1, 74, 75, 176, 42, 80, 88, 64, 36, 0, 6, 7, 6, 131, 10, 8, 2, 7, 2, 7, 131, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 9, 1, 5, 5, 57, 5, 76, 27, 64, 34, 0, 6, 7, 6, 131, 10, 8, 2, 7, 2, 7, 131, 0, 2, 3, 1, 1, 0, 2, 1, 102, 4, 1, 0, 0, 5, 93, 9, 1, 5, 5, 60, 5, 76, 89, 64, 24, 12, 12, 0, 0, 12, 19, 12, 19, 16, 15, 14, 13, 0, 11, 0, 11, 17, 17, 17, 17, 17, 11, 9, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 1, 1, 51, 1, 35, 39, 35, 7, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 252, 204, 1, 0, 219, 1, 0, 123, 241, 3, 241, 123, 4, 210, 123, 123, 251, 46, 123, 6, 78, 1, 65, 254, 191, 202, 202, 0, 0, 0, 0, 3, 0, 160, 0, 0, 4, 44, 7, 39, 0, 11, 0, 15, 0, 19, 0, 114, 75, 176, 42, 80, 88, 64, 36, 8, 1, 6, 12, 9, 11, 3, 7, 2, 6, 7, 101, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 10, 1, 5, 5, 57, 5, 76, 27, 64, 34, 8, 1, 6, 12, 9, 11, 3, 7, 2, 6, 7, 101, 0, 2, 3, 1, 1, 0, 2, 1, 101, 4, 1, 0, 0, 5, 93, 10, 1, 5, 5, 60, 5, 76, 89, 64, 30, 16, 16, 12, 12, 0, 0, 16, 19, 16, 19, 18, 17, 12, 15, 12, 15, 14, 13, 0, 11, 0, 11, 17, 17, 17, 17, 17, 13, 9, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 1, 53, 51, 21, 33, 53, 51, 21, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 252, 237, 197, 1, 16, 197, 123, 4, 210, 123, 123, 251, 46, 123, 6, 98, 197, 197, 197, 197, 0, 0, 2, 0, 49, 0, 0, 4, 143, 5, 200, 0, 16, 0, 29, 0, 108, 75, 176, 42, 80, 88, 64, 35, 6, 1, 2, 7, 1, 1, 0, 2, 1, 101, 11, 9, 2, 3, 3, 4, 93, 0, 4, 4, 56, 75, 8, 1, 0, 0, 5, 93, 10, 1, 5, 5, 57, 5, 76, 27, 64, 33, 0, 4, 11, 9, 2, 3, 2, 4, 3, 103, 6, 1, 2, 7, 1, 1, 0, 2, 1, 101, 8, 1, 0, 0, 5, 93, 10, 1, 5, 5, 60, 5, 76, 89, 64, 26, 17, 17, 0, 0, 17, 29, 17, 28, 24, 22, 21, 20, 19, 18, 0, 16, 0, 15, 33, 17, 17, 17, 17, 12, 9, 25, 43, 51, 53, 51, 17, 35, 53, 51, 17, 35, 53, 33, 32, 17, 16, 7, 6, 33, 3, 17, 33, 21, 33, 17, 51, 32, 17, 16, 39, 38, 35, 49, 148, 148, 148, 148, 1, 253, 2, 97, 160, 160, 254, 242, 183, 1, 16, 254, 240, 119, 1, 185, 112, 112, 231, 123, 2, 81, 123, 2, 6, 123, 253, 64, 254, 155, 210, 209, 5, 77, 253, 250, 123, 253, 175, 2, 119, 1, 52, 148, 147, 0, 2, 0, 74, 0, 0, 4, 131, 7, 77, 0, 21, 0, 45, 0, 145, 182, 17, 7, 2, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 46, 11, 1, 9, 0, 13, 12, 9, 13, 103, 0, 10, 16, 14, 2, 12, 2, 10, 12, 104, 5, 3, 2, 1, 1, 2, 93, 4, 1, 2, 2, 56, 75, 7, 1, 0, 0, 6, 93, 15, 8, 2, 6, 6, 57, 6, 76, 27, 64, 44, 11, 1, 9, 0, 13, 12, 9, 13, 103, 0, 10, 16, 14, 2, 12, 2, 10, 12, 104, 4, 1, 2, 5, 3, 2, 1, 0, 2, 1, 101, 7, 1, 0, 0, 6, 93, 15, 8, 2, 6, 6, 60, 6, 76, 89, 64, 33, 22, 22, 0, 0, 22, 45, 22, 45, 44, 42, 39, 37, 34, 33, 32, 30, 27, 25, 0, 21, 0, 21, 19, 17, 17, 17, 19, 17, 17, 17, 17, 9, 28, 43, 51, 53, 51, 17, 35, 53, 51, 1, 51, 17, 35, 53, 33, 21, 35, 17, 35, 1, 35, 17, 51, 21, 3, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 74, 111, 111, 234, 2, 98, 2, 110, 1, 89, 111, 124, 253, 159, 3, 111, 148, 6, 25, 45, 109, 72, 63, 60, 62, 34, 69, 10, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 123, 4, 210, 123, 251, 205, 3, 184, 123, 123, 250, 179, 4, 52, 252, 71, 123, 6, 98, 95, 50, 90, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 0, 3, 0, 62, 255, 219, 4, 144, 7, 143, 0, 3, 0, 19, 0, 35, 0, 99, 75, 176, 42, 80, 88, 64, 33, 0, 1, 0, 1, 131, 0, 0, 2, 0, 131, 7, 1, 4, 4, 2, 95, 6, 1, 2, 2, 62, 75, 0, 5, 5, 3, 95, 0, 3, 3, 63, 3, 76, 27, 64, 31, 0, 1, 0, 1, 131, 0, 0, 2, 0, 131, 6, 1, 2, 7, 1, 4, 5, 2, 4, 104, 0, 5, 5, 3, 95, 0, 3, 3, 66, 3, 76, 89, 64, 21, 21, 20, 5, 4, 29, 27, 20, 35, 21, 35, 13, 11, 4, 19, 5, 19, 17, 16, 8, 9, 22, 43, 1, 35, 1, 51, 19, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 2, 226, 123, 254, 191, 228, 93, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 6, 78, 1, 65, 254, 94, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 131, 167, 170, 254, 203, 254, 206, 169, 171, 147, 164, 1, 77, 1, 57, 168, 167, 0, 0, 0, 3, 0, 62, 255, 219, 4, 144, 7, 143, 0, 3, 0, 19, 0, 35, 0, 106, 75, 176, 42, 80, 88, 64, 34, 0, 0, 1, 0, 131, 6, 1, 1, 2, 1, 131, 8, 1, 4, 4, 2, 95, 7, 1, 2, 2, 62, 75, 0, 5, 5, 3, 95, 0, 3, 3, 63, 3, 76, 27, 64, 32, 0, 0, 1, 0, 131, 6, 1, 1, 2, 1, 131, 7, 1, 2, 8, 1, 4, 5, 2, 4, 104, 0, 5, 5, 3, 95, 0, 3, 3, 66, 3, 76, 89, 64, 26, 21, 20, 5, 4, 0, 0, 29, 27, 20, 35, 21, 35, 13, 11, 4, 19, 5, 19, 0, 3, 0, 3, 17, 9, 9, 21, 43, 1, 19, 51, 1, 23, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 1, 235, 216, 228, 254, 191, 1, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 6, 78, 1, 65, 254, 191, 97, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 131, 167, 170, 254, 203, 254, 206, 169, 171, 147, 164, 1, 77, 1, 57, 168, 167, 0, 0, 0, 3, 0, 62, 255, 219, 4, 144, 7, 143, 0, 7, 0, 23, 0, 39, 0, 116, 181, 5, 1, 1, 0, 1, 74, 75, 176, 42, 80, 88, 64, 35, 0, 0, 1, 0, 131, 7, 2, 2, 1, 3, 1, 131, 9, 1, 5, 5, 3, 95, 8, 1, 3, 3, 62, 75, 0, 6, 6, 4, 95, 0, 4, 4, 63, 4, 76, 27, 64, 33, 0, 0, 1, 0, 131, 7, 2, 2, 1, 3, 1, 131, 8, 1, 3, 9, 1, 5, 6, 3, 5, 104, 0, 6, 6, 4, 95, 0, 4, 4, 66, 4, 76, 89, 64, 27, 25, 24, 9, 8, 0, 0, 33, 31, 24, 39, 25, 39, 17, 15, 8, 23, 9, 23, 0, 7, 0, 7, 17, 17, 10, 9, 22, 43, 19, 1, 51, 1, 35, 39, 35, 7, 23, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 249, 1, 0, 219, 1, 0, 123, 241, 3, 241, 243, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 6, 78, 1, 65, 254, 191, 202, 202, 97, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 131, 167, 170, 254, 203, 254, 206, 169, 171, 147, 164, 1, 77, 1, 57, 168, 167, 0, 0, 0, 3, 0, 62, 255, 219, 4, 144, 7, 77, 0, 23, 0, 39, 0, 55, 0, 126, 75, 176, 42, 80, 88, 64, 42, 2, 1, 0, 0, 4, 3, 0, 4, 103, 0, 1, 10, 5, 2, 3, 6, 1, 3, 104, 12, 1, 8, 8, 6, 95, 11, 1, 6, 6, 62, 75, 0, 9, 9, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 40, 2, 1, 0, 0, 4, 3, 0, 4, 103, 0, 1, 10, 5, 2, 3, 6, 1, 3, 104, 11, 1, 6, 12, 1, 8, 9, 6, 8, 103, 0, 9, 9, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 30, 41, 40, 25, 24, 0, 0, 49, 47, 40, 55, 41, 55, 33, 31, 24, 39, 25, 39, 0, 23, 0, 23, 35, 35, 17, 35, 35, 13, 9, 25, 43, 1, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 23, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 1, 26, 6, 25, 45, 109, 72, 63, 60, 62, 34, 68, 11, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 223, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 6, 98, 95, 50, 90, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 117, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 131, 167, 170, 254, 203, 254, 206, 169, 171, 147, 164, 1, 77, 1, 57, 168, 167, 0, 0, 4, 0, 62, 255, 219, 4, 144, 7, 39, 0, 3, 0, 7, 0, 23, 0, 39, 0, 116, 75, 176, 42, 80, 88, 64, 35, 2, 1, 0, 9, 3, 8, 3, 1, 4, 0, 1, 101, 11, 1, 6, 6, 4, 95, 10, 1, 4, 4, 62, 75, 0, 7, 7, 5, 95, 0, 5, 5, 63, 5, 76, 27, 64, 33, 2, 1, 0, 9, 3, 8, 3, 1, 4, 0, 1, 101, 10, 1, 4, 11, 1, 6, 7, 4, 6, 103, 0, 7, 7, 5, 95, 0, 5, 5, 66, 5, 76, 89, 64, 34, 25, 24, 9, 8, 4, 4, 0, 0, 33, 31, 24, 39, 25, 39, 17, 15, 8, 23, 9, 23, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 12, 9, 21, 43, 1, 53, 51, 21, 33, 53, 51, 21, 5, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 1, 26, 197, 1, 16, 197, 254, 179, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 6, 98, 197, 197, 197, 197, 117, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 131, 167, 170, 254, 203, 254, 206, 169, 171, 147, 164, 1, 77, 1, 57, 168, 167, 0, 0, 1, 0, 99, 0, 101, 4, 107, 4, 109, 0, 11, 0, 6, 179, 9, 3, 1, 48, 43, 55, 1, 1, 55, 1, 1, 23, 1, 1, 7, 1, 1, 99, 1, 155, 254, 101, 105, 1, 155, 1, 155, 105, 254, 100, 1, 156, 105, 254, 101, 254, 101, 206, 1, 155, 1, 155, 105, 254, 100, 1, 156, 105, 254, 101, 254, 101, 105, 1, 155, 254, 101, 0, 3, 0, 62, 255, 219, 4, 144, 5, 237, 0, 7, 0, 15, 0, 37, 0, 87, 64, 11, 36, 28, 25, 17, 15, 1, 6, 1, 0, 1, 74, 75, 176, 42, 80, 88, 64, 24, 0, 0, 0, 2, 95, 3, 1, 2, 2, 62, 75, 0, 1, 1, 4, 95, 6, 5, 2, 4, 4, 63, 4, 76, 27, 64, 22, 3, 1, 2, 0, 0, 1, 2, 0, 103, 0, 1, 1, 4, 95, 6, 5, 2, 4, 4, 66, 4, 76, 89, 64, 14, 16, 16, 16, 37, 16, 37, 38, 18, 43, 37, 34, 7, 9, 25, 43, 1, 1, 38, 35, 34, 2, 17, 20, 19, 22, 51, 50, 18, 17, 52, 39, 1, 55, 38, 17, 16, 55, 54, 51, 50, 23, 55, 51, 7, 22, 17, 16, 7, 6, 35, 34, 39, 7, 1, 65, 2, 32, 91, 158, 163, 188, 99, 93, 156, 168, 184, 57, 252, 178, 144, 144, 154, 154, 243, 186, 159, 93, 117, 145, 145, 154, 154, 244, 185, 159, 93, 1, 115, 3, 86, 159, 254, 177, 254, 205, 197, 254, 221, 160, 1, 81, 1, 51, 199, 173, 251, 133, 227, 242, 1, 51, 1, 88, 217, 217, 146, 146, 227, 242, 254, 204, 254, 170, 217, 218, 147, 147, 0, 0, 0, 0, 2, 0, 62, 255, 219, 4, 144, 7, 143, 0, 25, 0, 29, 0, 96, 75, 176, 42, 80, 88, 64, 35, 0, 9, 8, 9, 131, 0, 8, 1, 8, 131, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 33, 0, 9, 8, 9, 131, 0, 8, 1, 8, 131, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 102, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 14, 29, 28, 18, 36, 17, 17, 18, 36, 17, 17, 16, 10, 9, 29, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 32, 17, 1, 35, 1, 51, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 110, 202, 254, 76, 2, 78, 123, 254, 191, 228, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 141, 2, 75, 4, 40, 1, 65, 0, 0, 0, 0, 2, 0, 62, 255, 219, 4, 144, 7, 143, 0, 25, 0, 29, 0, 102, 75, 176, 42, 80, 88, 64, 36, 0, 8, 9, 8, 131, 10, 1, 9, 1, 9, 131, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 34, 0, 8, 9, 8, 131, 10, 1, 9, 1, 9, 131, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 102, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 18, 26, 26, 26, 29, 26, 29, 19, 36, 17, 17, 18, 36, 17, 17, 16, 11, 9, 29, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 32, 17, 1, 19, 51, 1, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 110, 202, 254, 76, 1, 87, 216, 228, 254, 191, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 141, 2, 75, 4, 40, 1, 65, 254, 191, 0, 0, 0, 0, 2, 0, 62, 255, 219, 4, 144, 7, 143, 0, 25, 0, 33, 0, 113, 181, 31, 1, 9, 8, 1, 74, 75, 176, 42, 80, 88, 64, 37, 0, 8, 9, 8, 131, 11, 10, 2, 9, 1, 9, 131, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 35, 0, 8, 9, 8, 131, 11, 10, 2, 9, 1, 9, 131, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 20, 26, 26, 26, 33, 26, 33, 30, 29, 19, 36, 17, 17, 18, 36, 17, 17, 16, 12, 9, 29, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 32, 17, 19, 1, 51, 1, 35, 39, 35, 7, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 110, 202, 254, 76, 101, 1, 0, 219, 1, 0, 123, 241, 3, 241, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 141, 2, 75, 4, 40, 1, 65, 254, 191, 202, 202, 0, 0, 0, 3, 0, 62, 255, 219, 4, 144, 7, 39, 0, 25, 0, 29, 0, 33, 0, 112, 75, 176, 42, 80, 88, 64, 37, 10, 1, 8, 13, 11, 12, 3, 9, 1, 8, 9, 101, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 35, 10, 1, 8, 13, 11, 12, 3, 9, 1, 8, 9, 101, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 26, 30, 30, 26, 26, 30, 33, 30, 33, 32, 31, 26, 29, 26, 29, 19, 36, 17, 17, 18, 36, 17, 17, 16, 14, 9, 29, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 32, 17, 19, 53, 51, 21, 33, 53, 51, 21, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 110, 202, 254, 76, 134, 197, 1, 16, 197, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 141, 2, 75, 4, 60, 197, 197, 197, 197, 0, 2, 0, 27, 0, 0, 4, 177, 7, 143, 0, 21, 0, 25, 0, 122, 183, 18, 10, 3, 3, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 38, 0, 9, 10, 9, 131, 12, 1, 10, 2, 10, 131, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 56, 75, 7, 1, 0, 0, 8, 93, 11, 1, 8, 8, 57, 8, 76, 27, 64, 36, 0, 9, 10, 9, 131, 12, 1, 10, 2, 10, 131, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 102, 7, 1, 0, 0, 8, 93, 11, 1, 8, 8, 60, 8, 76, 89, 64, 25, 22, 22, 0, 0, 22, 25, 22, 25, 24, 23, 0, 21, 0, 21, 18, 17, 17, 19, 17, 17, 18, 17, 13, 9, 28, 43, 33, 53, 51, 17, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 17, 51, 21, 1, 19, 51, 1, 1, 38, 222, 254, 109, 86, 1, 207, 149, 1, 59, 2, 1, 59, 148, 1, 120, 86, 254, 110, 222, 254, 111, 216, 228, 254, 191, 123, 2, 25, 2, 185, 123, 123, 253, 224, 2, 32, 123, 123, 253, 72, 253, 230, 123, 6, 78, 1, 65, 254, 191, 0, 0, 2, 0, 86, 0, 0, 4, 100, 5, 200, 0, 20, 0, 29, 0, 104, 75, 176, 42, 80, 88, 64, 39, 0, 0, 0, 9, 8, 0, 9, 103, 0, 8, 0, 1, 2, 8, 1, 103, 7, 1, 5, 5, 6, 93, 0, 6, 6, 56, 75, 4, 1, 2, 2, 3, 93, 0, 3, 3, 57, 3, 76, 27, 64, 37, 0, 6, 7, 1, 5, 0, 6, 5, 101, 0, 0, 0, 9, 8, 0, 9, 103, 0, 8, 0, 1, 2, 8, 1, 103, 4, 1, 2, 2, 3, 93, 0, 3, 3, 60, 3, 76, 89, 64, 14, 29, 27, 33, 17, 17, 17, 17, 17, 18, 20, 32, 10, 9, 29, 43, 1, 51, 32, 17, 20, 7, 6, 33, 35, 21, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 50, 55, 54, 53, 16, 33, 35, 1, 225, 189, 1, 198, 169, 168, 254, 217, 11, 197, 253, 176, 197, 197, 2, 80, 197, 12, 201, 110, 110, 254, 190, 111, 4, 167, 254, 150, 241, 139, 140, 186, 123, 123, 4, 210, 123, 123, 252, 99, 96, 95, 173, 1, 15, 0, 1, 0, 62, 255, 231, 4, 169, 6, 68, 0, 60, 0, 255, 75, 176, 12, 80, 88, 181, 31, 1, 7, 4, 1, 74, 27, 75, 176, 14, 80, 88, 181, 31, 1, 7, 0, 1, 74, 27, 181, 31, 1, 7, 4, 1, 74, 89, 89, 75, 176, 12, 80, 88, 64, 41, 0, 3, 5, 0, 5, 3, 0, 126, 0, 5, 5, 1, 95, 0, 1, 1, 64, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 57, 75, 0, 4, 4, 2, 95, 0, 2, 2, 66, 2, 76, 27, 75, 176, 14, 80, 88, 64, 44, 0, 3, 5, 0, 5, 3, 0, 126, 0, 5, 5, 1, 95, 0, 1, 1, 64, 75, 6, 4, 2, 0, 0, 7, 93, 8, 1, 7, 7, 57, 75, 6, 4, 2, 0, 0, 2, 95, 0, 2, 2, 66, 2, 76, 27, 75, 176, 42, 80, 88, 64, 41, 0, 3, 5, 0, 5, 3, 0, 126, 0, 5, 5, 1, 95, 0, 1, 1, 64, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 57, 75, 0, 4, 4, 2, 95, 0, 2, 2, 66, 2, 76, 27, 64, 41, 0, 3, 5, 0, 5, 3, 0, 126, 0, 5, 5, 1, 95, 0, 1, 1, 64, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 60, 75, 0, 4, 4, 2, 95, 0, 2, 2, 66, 2, 76, 89, 89, 89, 64, 21, 0, 0, 0, 60, 0, 60, 59, 58, 54, 52, 37, 35, 33, 32, 30, 28, 38, 17, 9, 9, 22, 43, 51, 53, 51, 17, 52, 55, 54, 55, 54, 51, 50, 23, 22, 21, 20, 7, 7, 6, 21, 20, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 39, 17, 51, 23, 22, 51, 50, 53, 52, 47, 2, 38, 39, 38, 53, 52, 55, 55, 54, 53, 52, 35, 34, 7, 6, 21, 17, 51, 21, 62, 135, 22, 22, 68, 106, 194, 180, 108, 108, 125, 130, 68, 124, 135, 163, 43, 46, 94, 94, 158, 114, 129, 111, 25, 72, 63, 151, 110, 99, 124, 121, 34, 35, 103, 98, 104, 190, 122, 51, 50, 123, 123, 3, 212, 190, 80, 80, 59, 92, 65, 65, 111, 118, 103, 107, 56, 66, 69, 93, 101, 122, 60, 65, 103, 145, 90, 90, 37, 1, 22, 148, 43, 151, 107, 82, 74, 93, 91, 45, 47, 65, 107, 104, 99, 105, 90, 122, 51, 50, 124, 251, 147, 123, 0, 0, 3, 0, 148, 255, 231, 4, 143, 6, 68, 0, 3, 0, 33, 0, 43, 1, 40, 64, 10, 23, 1, 4, 6, 34, 1, 7, 9, 2, 74, 75, 176, 29, 80, 88, 64, 62, 0, 0, 1, 6, 1, 0, 6, 126, 0, 5, 4, 3, 4, 5, 3, 126, 0, 3, 0, 9, 7, 3, 9, 103, 0, 1, 1, 58, 75, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 7, 7, 8, 93, 0, 8, 8, 57, 75, 10, 1, 7, 7, 2, 95, 0, 2, 2, 66, 2, 76, 27, 75, 176, 40, 80, 88, 64, 60, 0, 0, 1, 6, 1, 0, 6, 126, 0, 5, 4, 3, 4, 5, 3, 126, 0, 3, 0, 9, 7, 3, 9, 103, 0, 1, 1, 58, 75, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 0, 7, 7, 8, 93, 0, 8, 8, 57, 75, 0, 10, 10, 2, 95, 0, 2, 2, 66, 2, 76, 27, 75, 176, 42, 80, 88, 64, 57, 0, 1, 0, 1, 131, 0, 0, 6, 0, 131, 0, 5, 4, 3, 4, 5, 3, 126, 0, 3, 0, 9, 7, 3, 9, 103, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 0, 7, 7, 8, 93, 0, 8, 8, 57, 75, 0, 10, 10, 2, 95, 0, 2, 2, 66, 2, 76, 27, 64, 57, 0, 1, 0, 1, 131, 0, 0, 6, 0, 131, 0, 5, 4, 3, 4, 5, 3, 126, 0, 3, 0, 9, 7, 3, 9, 103, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 0, 7, 7, 8, 93, 0, 8, 8, 60, 75, 0, 10, 10, 2, 95, 0, 2, 2, 66, 2, 76, 89, 89, 89, 64, 16, 43, 41, 37, 35, 17, 20, 34, 18, 34, 38, 34, 17, 16, 11, 9, 29, 43, 1, 35, 1, 51, 19, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 17, 35, 34, 7, 6, 21, 20, 51, 50, 3, 30, 123, 254, 191, 228, 252, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 20, 53, 230, 97, 96, 186, 147, 5, 3, 1, 65, 250, 51, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 1, 13, 1, 6, 52, 52, 144, 177, 0, 3, 0, 148, 255, 231, 4, 143, 6, 68, 0, 3, 0, 33, 0, 43, 1, 56, 64, 10, 23, 1, 4, 6, 34, 1, 7, 9, 2, 74, 75, 176, 29, 80, 88, 64, 63, 11, 1, 1, 0, 6, 0, 1, 6, 126, 0, 5, 4, 3, 4, 5, 3, 126, 0, 3, 0, 9, 7, 3, 9, 103, 0, 0, 0, 58, 75, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 7, 7, 8, 93, 0, 8, 8, 57, 75, 10, 1, 7, 7, 2, 95, 0, 2, 2, 66, 2, 76, 27, 75, 176, 40, 80, 88, 64, 61, 11, 1, 1, 0, 6, 0, 1, 6, 126, 0, 5, 4, 3, 4, 5, 3, 126, 0, 3, 0, 9, 7, 3, 9, 103, 0, 0, 0, 58, 75, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 0, 7, 7, 8, 93, 0, 8, 8, 57, 75, 0, 10, 10, 2, 95, 0, 2, 2, 66, 2, 76, 27, 75, 176, 42, 80, 88, 64, 58, 0, 0, 1, 0, 131, 11, 1, 1, 6, 1, 131, 0, 5, 4, 3, 4, 5, 3, 126, 0, 3, 0, 9, 7, 3, 9, 103, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 0, 7, 7, 8, 93, 0, 8, 8, 57, 75, 0, 10, 10, 2, 95, 0, 2, 2, 66, 2, 76, 27, 64, 58, 0, 0, 1, 0, 131, 11, 1, 1, 6, 1, 131, 0, 5, 4, 3, 4, 5, 3, 126, 0, 3, 0, 9, 7, 3, 9, 103, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 0, 7, 7, 8, 93, 0, 8, 8, 60, 75, 0, 10, 10, 2, 95, 0, 2, 2, 66, 2, 76, 89, 89, 89, 64, 28, 0, 0, 43, 41, 37, 35, 33, 32, 31, 30, 26, 24, 22, 21, 19, 17, 15, 13, 7, 5, 0, 3, 0, 3, 17, 12, 9, 21, 43, 1, 19, 51, 1, 19, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 17, 35, 34, 7, 6, 21, 20, 51, 50, 2, 40, 216, 228, 254, 191, 159, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 20, 53, 230, 97, 96, 186, 147, 5, 3, 1, 65, 254, 191, 251, 116, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 1, 13, 1, 6, 52, 52, 144, 177, 0, 0, 0, 3, 0, 148, 255, 231, 4, 143, 6, 68, 0, 7, 0, 37, 0, 47, 1, 65, 64, 14, 5, 1, 1, 0, 27, 1, 5, 7, 38, 1, 8, 10, 3, 74, 75, 176, 29, 80, 88, 64, 64, 12, 2, 2, 1, 0, 7, 0, 1, 7, 126, 0, 6, 5, 4, 5, 6, 4, 126, 0, 4, 0, 10, 8, 4, 10, 103, 0, 0, 0, 58, 75, 0, 5, 5, 7, 95, 0, 7, 7, 65, 75, 11, 1, 8, 8, 9, 93, 0, 9, 9, 57, 75, 11, 1, 8, 8, 3, 95, 0, 3, 3, 66, 3, 76, 27, 75, 176, 40, 80, 88, 64, 62, 12, 2, 2, 1, 0, 7, 0, 1, 7, 126, 0, 6, 5, 4, 5, 6, 4, 126, 0, 4, 0, 10, 8, 4, 10, 103, 0, 0, 0, 58, 75, 0, 5, 5, 7, 95, 0, 7, 7, 65, 75, 0, 8, 8, 9, 93, 0, 9, 9, 57, 75, 0, 11, 11, 3, 95, 0, 3, 3, 66, 3, 76, 27, 75, 176, 42, 80, 88, 64, 59, 0, 0, 1, 0, 131, 12, 2, 2, 1, 7, 1, 131, 0, 6, 5, 4, 5, 6, 4, 126, 0, 4, 0, 10, 8, 4, 10, 103, 0, 5, 5, 7, 95, 0, 7, 7, 65, 75, 0, 8, 8, 9, 93, 0, 9, 9, 57, 75, 0, 11, 11, 3, 95, 0, 3, 3, 66, 3, 76, 27, 64, 59, 0, 0, 1, 0, 131, 12, 2, 2, 1, 7, 1, 131, 0, 6, 5, 4, 5, 6, 4, 126, 0, 4, 0, 10, 8, 4, 10, 103, 0, 5, 5, 7, 95, 0, 7, 7, 65, 75, 0, 8, 8, 9, 93, 0, 9, 9, 60, 75, 0, 11, 11, 3, 95, 0, 3, 3, 66, 3, 76, 89, 89, 89, 64, 29, 0, 0, 47, 45, 41, 39, 37, 36, 35, 34, 30, 28, 26, 25, 23, 21, 19, 17, 11, 9, 0, 7, 0, 7, 17, 17, 13, 9, 22, 43, 1, 1, 51, 1, 35, 39, 35, 7, 1, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 17, 35, 34, 7, 6, 21, 20, 51, 50, 1, 19, 1, 0, 219, 1, 0, 123, 241, 3, 241, 1, 180, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 20, 53, 230, 97, 96, 186, 147, 5, 3, 1, 65, 254, 191, 202, 202, 251, 116, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 1, 13, 1, 6, 52, 52, 144, 177, 0, 0, 3, 0, 148, 255, 231, 4, 143, 5, 248, 0, 23, 0, 53, 0, 63, 1, 15, 64, 10, 43, 1, 8, 10, 54, 1, 11, 13, 2, 74, 75, 176, 29, 80, 88, 64, 70, 0, 9, 8, 7, 8, 9, 7, 126, 0, 1, 15, 5, 2, 3, 10, 1, 3, 104, 0, 7, 0, 13, 11, 7, 13, 103, 0, 4, 4, 0, 95, 2, 1, 0, 0, 62, 75, 0, 8, 8, 10, 95, 0, 10, 10, 65, 75, 14, 1, 11, 11, 12, 93, 0, 12, 12, 57, 75, 14, 1, 11, 11, 6, 95, 0, 6, 6, 66, 6, 76, 27, 75, 176, 42, 80, 88, 64, 68, 0, 9, 8, 7, 8, 9, 7, 126, 0, 1, 15, 5, 2, 3, 10, 1, 3, 104, 0, 7, 0, 13, 11, 7, 13, 103, 0, 4, 4, 0, 95, 2, 1, 0, 0, 62, 75, 0, 8, 8, 10, 95, 0, 10, 10, 65, 75, 0, 11, 11, 12, 93, 0, 12, 12, 57, 75, 0, 14, 14, 6, 95, 0, 6, 6, 66, 6, 76, 27, 64, 66, 0, 9, 8, 7, 8, 9, 7, 126, 2, 1, 0, 0, 4, 3, 0, 4, 103, 0, 1, 15, 5, 2, 3, 10, 1, 3, 104, 0, 7, 0, 13, 11, 7, 13, 103, 0, 8, 8, 10, 95, 0, 10, 10, 65, 75, 0, 11, 11, 12, 93, 0, 12, 12, 60, 75, 0, 14, 14, 6, 95, 0, 6, 6, 66, 6, 76, 89, 89, 64, 32, 0, 0, 63, 61, 57, 55, 53, 52, 51, 50, 46, 44, 42, 41, 39, 37, 35, 33, 27, 25, 0, 23, 0, 23, 35, 35, 17, 35, 35, 16, 9, 25, 43, 1, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 1, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 17, 35, 34, 7, 6, 21, 20, 51, 50, 1, 47, 6, 25, 45, 109, 72, 63, 60, 62, 34, 68, 11, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 1, 165, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 20, 53, 230, 97, 96, 186, 147, 5, 13, 94, 51, 90, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 251, 106, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 1, 13, 1, 6, 52, 52, 144, 177, 0, 0, 4, 0, 148, 255, 231, 4, 143, 5, 210, 0, 3, 0, 7, 0, 37, 0, 47, 0, 254, 64, 10, 27, 1, 6, 8, 38, 1, 9, 11, 2, 74, 75, 176, 29, 80, 88, 64, 63, 0, 7, 6, 5, 6, 7, 5, 126, 0, 5, 0, 11, 9, 5, 11, 103, 14, 3, 13, 3, 1, 1, 0, 93, 2, 1, 0, 0, 56, 75, 0, 6, 6, 8, 95, 0, 8, 8, 65, 75, 12, 1, 9, 9, 10, 93, 0, 10, 10, 57, 75, 12, 1, 9, 9, 4, 95, 0, 4, 4, 66, 4, 76, 27, 75, 176, 42, 80, 88, 64, 61, 0, 7, 6, 5, 6, 7, 5, 126, 0, 5, 0, 11, 9, 5, 11, 103, 14, 3, 13, 3, 1, 1, 0, 93, 2, 1, 0, 0, 56, 75, 0, 6, 6, 8, 95, 0, 8, 8, 65, 75, 0, 9, 9, 10, 93, 0, 10, 10, 57, 75, 0, 12, 12, 4, 95, 0, 4, 4, 66, 4, 76, 27, 64, 59, 0, 7, 6, 5, 6, 7, 5, 126, 2, 1, 0, 14, 3, 13, 3, 1, 8, 0, 1, 101, 0, 5, 0, 11, 9, 5, 11, 103, 0, 6, 6, 8, 95, 0, 8, 8, 65, 75, 0, 9, 9, 10, 93, 0, 10, 10, 60, 75, 0, 12, 12, 4, 95, 0, 4, 4, 66, 4, 76, 89, 89, 64, 36, 4, 4, 0, 0, 47, 45, 41, 39, 37, 36, 35, 34, 30, 28, 26, 25, 23, 21, 19, 17, 11, 9, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 15, 9, 21, 43, 1, 53, 51, 21, 33, 53, 51, 21, 3, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 17, 35, 34, 7, 6, 21, 20, 51, 50, 1, 60, 197, 1, 16, 197, 148, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 20, 53, 230, 97, 96, 186, 147, 5, 13, 197, 197, 197, 197, 251, 106, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 1, 13, 1, 6, 52, 52, 144, 177, 0, 0, 0, 4, 0, 148, 255, 231, 4, 143, 6, 201, 0, 15, 0, 31, 0, 61, 0, 71, 1, 13, 64, 10, 51, 1, 6, 8, 62, 1, 9, 11, 2, 74, 75, 176, 29, 80, 88, 64, 67, 0, 7, 6, 5, 6, 7, 5, 126, 13, 1, 0, 14, 1, 2, 3, 0, 2, 103, 0, 3, 0, 1, 8, 3, 1, 103, 0, 5, 0, 11, 9, 5, 11, 103, 0, 6, 6, 8, 95, 0, 8, 8, 65, 75, 12, 1, 9, 9, 10, 93, 0, 10, 10, 57, 75, 12, 1, 9, 9, 4, 95, 0, 4, 4, 66, 4, 76, 27, 75, 176, 42, 80, 88, 64, 65, 0, 7, 6, 5, 6, 7, 5, 126, 13, 1, 0, 14, 1, 2, 3, 0, 2, 103, 0, 3, 0, 1, 8, 3, 1, 103, 0, 5, 0, 11, 9, 5, 11, 103, 0, 6, 6, 8, 95, 0, 8, 8, 65, 75, 0, 9, 9, 10, 93, 0, 10, 10, 57, 75, 0, 12, 12, 4, 95, 0, 4, 4, 66, 4, 76, 27, 64, 65, 0, 7, 6, 5, 6, 7, 5, 126, 13, 1, 0, 14, 1, 2, 3, 0, 2, 103, 0, 3, 0, 1, 8, 3, 1, 103, 0, 5, 0, 11, 9, 5, 11, 103, 0, 6, 6, 8, 95, 0, 8, 8, 65, 75, 0, 9, 9, 10, 93, 0, 10, 10, 60, 75, 0, 12, 12, 4, 95, 0, 4, 4, 66, 4, 76, 89, 89, 64, 37, 17, 16, 1, 0, 71, 69, 65, 63, 61, 60, 59, 58, 54, 52, 50, 49, 47, 45, 43, 41, 35, 33, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 15, 9, 20, 43, 1, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 19, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 17, 35, 34, 7, 6, 21, 20, 51, 50, 2, 164, 94, 66, 67, 67, 66, 96, 83, 62, 80, 67, 67, 93, 58, 41, 42, 41, 41, 58, 53, 39, 50, 42, 42, 101, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 20, 53, 230, 97, 96, 186, 147, 6, 201, 66, 66, 94, 97, 65, 66, 54, 69, 104, 94, 66, 67, 87, 41, 40, 59, 58, 41, 42, 33, 43, 66, 58, 40, 41, 250, 5, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 1, 13, 1, 6, 52, 52, 144, 177, 0, 0, 0, 0, 3, 0, 42, 255, 231, 4, 168, 4, 86, 0, 46, 0, 54, 0, 61, 0, 85, 64, 82, 23, 1, 2, 4, 29, 1, 3, 2, 47, 42, 2, 7, 6, 43, 1, 0, 7, 4, 74, 0, 3, 2, 1, 2, 3, 1, 126, 11, 1, 1, 9, 1, 6, 7, 1, 6, 103, 12, 1, 2, 2, 4, 95, 5, 1, 4, 4, 65, 75, 10, 1, 7, 7, 0, 95, 8, 1, 0, 0, 66, 0, 76, 61, 59, 56, 55, 54, 52, 50, 48, 35, 34, 20, 36, 34, 18, 36, 38, 35, 13, 9, 29, 43, 37, 6, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 51, 51, 53, 52, 39, 38, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 23, 54, 51, 50, 23, 22, 21, 21, 33, 23, 16, 51, 50, 55, 21, 6, 35, 34, 39, 17, 35, 34, 21, 20, 51, 50, 19, 33, 38, 39, 38, 35, 34, 2, 82, 37, 44, 65, 96, 131, 89, 90, 117, 116, 206, 43, 21, 22, 68, 63, 61, 25, 123, 153, 145, 97, 61, 36, 20, 78, 148, 146, 81, 80, 254, 30, 3, 241, 84, 160, 176, 131, 166, 195, 31, 247, 141, 85, 232, 1, 24, 3, 32, 31, 59, 134, 154, 81, 40, 58, 95, 94, 143, 168, 96, 95, 141, 110, 35, 35, 40, 136, 232, 67, 48, 29, 54, 131, 136, 136, 246, 49, 51, 254, 126, 84, 147, 68, 253, 1, 59, 236, 201, 2, 48, 178, 72, 71, 0, 1, 0, 110, 254, 80, 4, 86, 4, 86, 0, 46, 0, 85, 64, 82, 31, 1, 7, 5, 46, 1, 8, 6, 21, 0, 2, 0, 8, 14, 1, 3, 4, 13, 1, 2, 3, 5, 74, 0, 6, 7, 8, 7, 6, 8, 126, 0, 1, 0, 4, 3, 1, 4, 103, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 0, 8, 8, 0, 95, 0, 0, 0, 66, 75, 0, 3, 3, 2, 95, 0, 2, 2, 67, 2, 76, 38, 34, 18, 40, 18, 35, 38, 17, 17, 9, 9, 29, 43, 37, 6, 35, 7, 22, 23, 22, 21, 20, 7, 6, 35, 34, 39, 53, 22, 51, 50, 53, 52, 39, 55, 38, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 4, 86, 162, 232, 46, 72, 52, 70, 59, 58, 87, 67, 76, 50, 54, 104, 187, 84, 217, 134, 161, 158, 157, 1, 31, 213, 172, 124, 35, 121, 116, 176, 104, 96, 108, 116, 206, 168, 187, 46, 71, 84, 2, 37, 49, 72, 68, 47, 48, 21, 81, 15, 74, 93, 3, 155, 22, 131, 158, 1, 8, 1, 4, 147, 148, 54, 254, 202, 197, 44, 118, 118, 199, 220, 113, 113, 81, 0, 0, 3, 0, 123, 255, 231, 4, 81, 6, 68, 0, 3, 0, 24, 0, 32, 0, 118, 64, 10, 11, 1, 3, 2, 12, 1, 4, 3, 2, 74, 75, 176, 40, 80, 88, 64, 42, 0, 0, 1, 5, 1, 0, 5, 126, 0, 6, 0, 2, 3, 6, 2, 101, 0, 1, 1, 58, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 0, 3, 3, 4, 95, 0, 4, 4, 66, 4, 76, 27, 64, 39, 0, 1, 0, 1, 131, 0, 0, 5, 0, 131, 0, 6, 0, 2, 3, 6, 2, 101, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 0, 3, 3, 4, 95, 0, 4, 4, 66, 4, 76, 89, 64, 11, 34, 18, 38, 35, 35, 17, 17, 16, 8, 9, 28, 43, 1, 35, 1, 51, 1, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 3, 4, 123, 254, 191, 228, 2, 37, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 5, 3, 1, 65, 251, 182, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 3, 0, 123, 255, 231, 4, 81, 6, 68, 0, 3, 0, 24, 0, 32, 0, 131, 64, 10, 11, 1, 3, 2, 12, 1, 4, 3, 2, 74, 75, 176, 40, 80, 88, 64, 43, 8, 1, 1, 0, 5, 0, 1, 5, 126, 0, 6, 0, 2, 3, 6, 2, 101, 0, 0, 0, 58, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 0, 3, 3, 4, 95, 0, 4, 4, 66, 4, 76, 27, 64, 40, 0, 0, 1, 0, 131, 8, 1, 1, 5, 1, 131, 0, 6, 0, 2, 3, 6, 2, 101, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 0, 3, 3, 4, 95, 0, 4, 4, 66, 4, 76, 89, 64, 22, 0, 0, 30, 28, 26, 25, 23, 21, 15, 13, 10, 8, 5, 4, 0, 3, 0, 3, 17, 9, 9, 21, 43, 1, 19, 51, 1, 1, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 2, 13, 216, 228, 254, 191, 1, 201, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 5, 3, 1, 65, 254, 191, 252, 247, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 0, 3, 0, 123, 255, 231, 4, 81, 6, 68, 0, 7, 0, 28, 0, 36, 0, 138, 64, 14, 5, 1, 1, 0, 15, 1, 4, 3, 16, 1, 5, 4, 3, 74, 75, 176, 40, 80, 88, 64, 44, 9, 2, 2, 1, 0, 6, 0, 1, 6, 126, 0, 7, 0, 3, 4, 7, 3, 101, 0, 0, 0, 58, 75, 0, 8, 8, 6, 95, 0, 6, 6, 65, 75, 0, 4, 4, 5, 95, 0, 5, 5, 66, 5, 76, 27, 64, 41, 0, 0, 1, 0, 131, 9, 2, 2, 1, 6, 1, 131, 0, 7, 0, 3, 4, 7, 3, 101, 0, 8, 8, 6, 95, 0, 6, 6, 65, 75, 0, 4, 4, 5, 95, 0, 5, 5, 66, 5, 76, 89, 64, 23, 0, 0, 34, 32, 30, 29, 27, 25, 19, 17, 14, 12, 9, 8, 0, 7, 0, 7, 17, 17, 10, 9, 22, 43, 1, 1, 51, 1, 35, 39, 35, 7, 1, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 1, 27, 1, 0, 219, 1, 0, 123, 241, 3, 241, 2, 187, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 5, 3, 1, 65, 254, 191, 202, 202, 252, 247, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 0, 0, 0, 4, 0, 123, 255, 231, 4, 81, 5, 210, 0, 3, 0, 7, 0, 28, 0, 36, 0, 140, 64, 10, 15, 1, 5, 4, 16, 1, 6, 5, 2, 74, 75, 176, 42, 80, 88, 64, 43, 0, 8, 0, 4, 5, 8, 4, 101, 11, 3, 10, 3, 1, 1, 0, 93, 2, 1, 0, 0, 56, 75, 0, 9, 9, 7, 95, 0, 7, 7, 65, 75, 0, 5, 5, 6, 95, 0, 6, 6, 66, 6, 76, 27, 64, 41, 2, 1, 0, 11, 3, 10, 3, 1, 7, 0, 1, 101, 0, 8, 0, 4, 5, 8, 4, 101, 0, 9, 9, 7, 95, 0, 7, 7, 65, 75, 0, 5, 5, 6, 95, 0, 6, 6, 66, 6, 76, 89, 64, 30, 4, 4, 0, 0, 34, 32, 30, 29, 27, 25, 19, 17, 14, 12, 9, 8, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 12, 9, 21, 43, 1, 53, 51, 21, 33, 53, 51, 21, 19, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 1, 59, 197, 1, 16, 197, 124, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 5, 13, 197, 197, 197, 197, 252, 237, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 0, 0, 0, 2, 0, 148, 0, 0, 4, 81, 6, 68, 0, 9, 0, 13, 0, 142, 75, 176, 40, 80, 88, 64, 36, 0, 5, 6, 2, 6, 5, 2, 126, 0, 6, 6, 58, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 57, 4, 76, 27, 75, 176, 42, 80, 88, 64, 33, 0, 6, 5, 6, 131, 0, 5, 2, 5, 131, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 57, 4, 76, 27, 64, 33, 0, 6, 5, 6, 131, 0, 5, 2, 5, 131, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 60, 4, 76, 89, 89, 64, 17, 0, 0, 13, 12, 11, 10, 0, 9, 0, 9, 17, 17, 17, 17, 8, 9, 24, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 1, 35, 1, 51, 148, 1, 134, 254, 122, 2, 75, 1, 114, 254, 142, 123, 254, 191, 228, 123, 3, 71, 124, 252, 61, 123, 5, 3, 1, 65, 0, 0, 0, 2, 0, 148, 0, 0, 4, 81, 6, 68, 0, 9, 0, 13, 0, 149, 75, 176, 40, 80, 88, 64, 37, 8, 1, 6, 5, 2, 5, 6, 2, 126, 0, 5, 5, 58, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 57, 4, 76, 27, 75, 176, 42, 80, 88, 64, 34, 0, 5, 6, 5, 131, 8, 1, 6, 2, 6, 131, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 57, 4, 76, 27, 64, 34, 0, 5, 6, 5, 131, 8, 1, 6, 2, 6, 131, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 60, 4, 76, 89, 89, 64, 21, 10, 10, 0, 0, 10, 13, 10, 13, 12, 11, 0, 9, 0, 9, 17, 17, 17, 17, 9, 9, 24, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 1, 19, 51, 1, 148, 1, 134, 254, 122, 2, 75, 1, 114, 253, 201, 216, 228, 254, 191, 123, 3, 71, 124, 252, 61, 123, 5, 3, 1, 65, 254, 191, 0, 0, 2, 0, 148, 0, 0, 4, 81, 6, 68, 0, 9, 0, 17, 0, 161, 181, 15, 1, 6, 5, 1, 74, 75, 176, 40, 80, 88, 64, 38, 9, 7, 2, 6, 5, 2, 5, 6, 2, 126, 0, 5, 5, 58, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 8, 1, 4, 4, 57, 4, 76, 27, 75, 176, 42, 80, 88, 64, 35, 0, 5, 6, 5, 131, 9, 7, 2, 6, 2, 6, 131, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 8, 1, 4, 4, 57, 4, 76, 27, 64, 35, 0, 5, 6, 5, 131, 9, 7, 2, 6, 2, 6, 131, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 8, 1, 4, 4, 60, 4, 76, 89, 89, 64, 23, 10, 10, 0, 0, 10, 17, 10, 17, 14, 13, 12, 11, 0, 9, 0, 9, 17, 17, 17, 17, 10, 9, 24, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 1, 1, 51, 1, 35, 39, 35, 7, 148, 1, 134, 254, 122, 2, 75, 1, 114, 252, 190, 1, 0, 219, 1, 0, 123, 241, 3, 241, 123, 3, 71, 124, 252, 61, 123, 5, 3, 1, 65, 254, 191, 202, 202, 0, 0, 0, 3, 0, 148, 0, 0, 4, 81, 5, 210, 0, 9, 0, 13, 0, 17, 0, 115, 75, 176, 42, 80, 88, 64, 37, 11, 8, 10, 3, 6, 6, 5, 93, 7, 1, 5, 5, 56, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 9, 1, 4, 4, 57, 4, 76, 27, 64, 35, 7, 1, 5, 11, 8, 10, 3, 6, 2, 5, 6, 101, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 9, 1, 4, 4, 60, 4, 76, 89, 64, 29, 14, 14, 10, 10, 0, 0, 14, 17, 14, 17, 16, 15, 10, 13, 10, 13, 12, 11, 0, 9, 0, 9, 17, 17, 17, 17, 12, 9, 24, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 1, 53, 51, 21, 33, 53, 51, 21, 148, 1, 134, 254, 122, 2, 75, 1, 114, 252, 212, 197, 1, 16, 197, 123, 3, 71, 124, 252, 61, 123, 5, 13, 197, 197, 197, 197, 0, 0, 2, 0, 111, 255, 231, 4, 95, 6, 81, 0, 31, 0, 47, 0, 62, 64, 59, 13, 11, 2, 0, 1, 14, 5, 4, 3, 2, 5, 3, 0, 2, 74, 12, 1, 1, 72, 0, 0, 0, 1, 95, 0, 1, 1, 58, 75, 0, 4, 4, 3, 95, 0, 3, 3, 59, 75, 0, 5, 5, 2, 95, 0, 2, 2, 66, 2, 76, 38, 17, 38, 43, 33, 22, 6, 9, 26, 43, 1, 38, 39, 7, 39, 55, 38, 35, 53, 51, 50, 23, 55, 23, 7, 22, 23, 22, 21, 16, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 51, 50, 7, 38, 7, 6, 21, 22, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 3, 17, 127, 116, 247, 62, 216, 141, 194, 27, 254, 194, 224, 61, 189, 192, 105, 137, 139, 139, 223, 219, 144, 144, 139, 138, 204, 95, 72, 127, 83, 84, 1, 83, 83, 127, 125, 84, 85, 69, 83, 4, 7, 185, 86, 168, 92, 145, 85, 123, 113, 151, 91, 128, 139, 191, 249, 251, 254, 250, 165, 166, 158, 158, 241, 239, 157, 158, 124, 1, 124, 124, 184, 185, 124, 123, 122, 123, 182, 170, 118, 162, 0, 2, 0, 72, 0, 0, 4, 139, 5, 238, 0, 23, 0, 51, 1, 46, 182, 48, 31, 2, 6, 7, 1, 74, 75, 176, 12, 80, 88, 64, 59, 0, 1, 16, 5, 2, 3, 9, 1, 3, 104, 0, 4, 4, 0, 95, 2, 1, 0, 0, 62, 75, 13, 1, 7, 7, 9, 95, 0, 9, 9, 65, 75, 13, 1, 7, 7, 8, 93, 0, 8, 8, 59, 75, 14, 12, 10, 3, 6, 6, 11, 93, 17, 15, 2, 11, 11, 57, 11, 76, 27, 75, 176, 14, 80, 88, 64, 49, 0, 1, 16, 5, 2, 3, 8, 1, 3, 104, 0, 4, 4, 0, 95, 2, 1, 0, 0, 62, 75, 13, 1, 7, 7, 8, 95, 9, 1, 8, 8, 59, 75, 14, 12, 10, 3, 6, 6, 11, 93, 17, 15, 2, 11, 11, 57, 11, 76, 27, 75, 176, 42, 80, 88, 64, 59, 0, 1, 16, 5, 2, 3, 9, 1, 3, 104, 0, 4, 4, 0, 95, 2, 1, 0, 0, 62, 75, 13, 1, 7, 7, 9, 95, 0, 9, 9, 65, 75, 13, 1, 7, 7, 8, 93, 0, 8, 8, 59, 75, 14, 12, 10, 3, 6, 6, 11, 93, 17, 15, 2, 11, 11, 57, 11, 76, 27, 64, 57, 2, 1, 0, 0, 4, 3, 0, 4, 103, 0, 1, 16, 5, 2, 3, 9, 1, 3, 104, 13, 1, 7, 7, 9, 95, 0, 9, 9, 65, 75, 13, 1, 7, 7, 8, 93, 0, 8, 8, 59, 75, 14, 12, 10, 3, 6, 6, 11, 93, 17, 15, 2, 11, 11, 60, 11, 76, 89, 89, 89, 64, 38, 24, 24, 0, 0, 24, 51, 24, 51, 50, 49, 47, 45, 43, 42, 41, 40, 39, 38, 36, 34, 30, 29, 28, 27, 26, 25, 0, 23, 0, 23, 35, 35, 17, 35, 35, 18, 9, 25, 43, 1, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 1, 53, 51, 17, 35, 53, 33, 21, 54, 55, 54, 51, 32, 17, 17, 51, 21, 33, 53, 51, 17, 16, 35, 34, 3, 17, 51, 21, 1, 23, 6, 25, 45, 109, 72, 63, 60, 62, 34, 68, 11, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 254, 195, 120, 120, 1, 62, 69, 68, 96, 119, 1, 45, 120, 254, 95, 100, 163, 150, 143, 100, 5, 3, 94, 51, 90, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 250, 253, 123, 3, 71, 124, 210, 105, 53, 76, 254, 124, 253, 169, 123, 123, 2, 70, 1, 1, 254, 254, 253, 187, 123, 0, 3, 0, 111, 255, 231, 4, 94, 6, 68, 0, 15, 0, 23, 0, 27, 0, 106, 75, 176, 40, 80, 88, 64, 36, 0, 4, 5, 0, 5, 4, 0, 126, 0, 5, 5, 58, 75, 7, 1, 2, 2, 0, 95, 6, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 27, 64, 33, 0, 5, 4, 5, 131, 0, 4, 0, 4, 131, 7, 1, 2, 2, 0, 95, 6, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 23, 17, 16, 1, 0, 27, 26, 25, 24, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 8, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 3, 35, 1, 51, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 167, 123, 254, 191, 228, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 1, 40, 1, 65, 0, 3, 0, 111, 255, 231, 4, 94, 6, 68, 0, 15, 0, 23, 0, 27, 0, 112, 75, 176, 40, 80, 88, 64, 37, 8, 1, 5, 4, 0, 4, 5, 0, 126, 0, 4, 4, 58, 75, 7, 1, 2, 2, 0, 95, 6, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 27, 64, 34, 0, 4, 5, 4, 131, 8, 1, 5, 0, 5, 131, 7, 1, 2, 2, 0, 95, 6, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 27, 24, 24, 17, 16, 1, 0, 24, 27, 24, 27, 26, 25, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 9, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 1, 19, 51, 1, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 254, 98, 216, 228, 254, 191, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 1, 40, 1, 65, 254, 191, 0, 0, 0, 0, 3, 0, 111, 255, 231, 4, 94, 6, 68, 0, 15, 0, 23, 0, 31, 0, 123, 181, 29, 1, 5, 4, 1, 74, 75, 176, 40, 80, 88, 64, 38, 9, 6, 2, 5, 4, 0, 4, 5, 0, 126, 0, 4, 4, 58, 75, 8, 1, 2, 2, 0, 95, 7, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 27, 64, 35, 0, 4, 5, 4, 131, 9, 6, 2, 5, 0, 5, 131, 8, 1, 2, 2, 0, 95, 7, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 29, 24, 24, 17, 16, 1, 0, 24, 31, 24, 31, 28, 27, 26, 25, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 10, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 1, 1, 51, 1, 35, 39, 35, 7, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 253, 112, 1, 0, 219, 1, 0, 123, 241, 3, 241, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 1, 40, 1, 65, 254, 191, 202, 202, 0, 0, 3, 0, 111, 255, 231, 4, 94, 5, 248, 0, 15, 0, 23, 0, 47, 0, 135, 75, 176, 42, 80, 88, 64, 44, 0, 5, 12, 9, 2, 7, 0, 5, 7, 104, 0, 8, 8, 4, 95, 6, 1, 4, 4, 62, 75, 11, 1, 2, 2, 0, 95, 10, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 27, 64, 42, 6, 1, 4, 0, 8, 7, 4, 8, 103, 0, 5, 12, 9, 2, 7, 0, 5, 7, 104, 11, 1, 2, 2, 0, 95, 10, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 35, 24, 24, 17, 16, 1, 0, 24, 47, 24, 47, 46, 44, 41, 39, 36, 35, 34, 32, 29, 27, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 13, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 1, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 253, 145, 6, 25, 45, 109, 72, 63, 60, 62, 34, 68, 11, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 1, 50, 94, 51, 90, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 0, 0, 0, 0, 4, 0, 111, 255, 231, 4, 94, 5, 210, 0, 15, 0, 23, 0, 27, 0, 31, 0, 121, 75, 176, 42, 80, 88, 64, 37, 11, 7, 10, 3, 5, 5, 4, 93, 6, 1, 4, 4, 56, 75, 9, 1, 2, 2, 0, 95, 8, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 27, 64, 35, 6, 1, 4, 11, 7, 10, 3, 5, 0, 4, 5, 101, 9, 1, 2, 2, 0, 95, 8, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 35, 28, 28, 24, 24, 17, 16, 1, 0, 28, 31, 28, 31, 30, 29, 24, 27, 24, 27, 26, 25, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 12, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 1, 53, 51, 21, 33, 53, 51, 21, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 253, 144, 197, 1, 16, 197, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 1, 50, 197, 197, 197, 197, 0, 3, 0, 99, 0, 0, 4, 106, 4, 210, 0, 3, 0, 7, 0, 11, 0, 100, 75, 176, 42, 80, 88, 64, 30, 0, 4, 8, 1, 5, 0, 4, 5, 101, 0, 0, 6, 1, 1, 2, 0, 1, 101, 0, 2, 2, 3, 93, 7, 1, 3, 3, 57, 3, 76, 27, 64, 30, 0, 4, 8, 1, 5, 0, 4, 5, 101, 0, 0, 6, 1, 1, 2, 0, 1, 101, 0, 2, 2, 3, 93, 7, 1, 3, 3, 60, 3, 76, 89, 64, 26, 8, 8, 4, 4, 0, 0, 8, 11, 8, 11, 10, 9, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 9, 9, 21, 43, 19, 53, 33, 21, 1, 53, 51, 21, 3, 53, 51, 21, 99, 4, 7, 253, 129, 247, 247, 247, 2, 31, 148, 148, 253, 225, 247, 247, 3, 219, 247, 247, 0, 0, 0, 3, 0, 111, 255, 231, 4, 94, 4, 86, 0, 21, 0, 28, 0, 35, 0, 60, 64, 57, 9, 1, 4, 0, 35, 28, 12, 1, 4, 5, 4, 20, 1, 2, 5, 3, 74, 0, 4, 4, 0, 95, 1, 1, 0, 0, 65, 75, 0, 5, 5, 2, 95, 6, 3, 2, 2, 2, 66, 2, 76, 0, 0, 32, 30, 25, 23, 0, 21, 0, 21, 38, 18, 38, 7, 9, 23, 43, 23, 55, 38, 53, 16, 55, 54, 51, 50, 23, 55, 51, 7, 22, 21, 16, 7, 6, 35, 34, 39, 7, 1, 38, 35, 32, 17, 20, 23, 23, 22, 51, 32, 17, 52, 39, 111, 127, 127, 135, 135, 239, 179, 122, 72, 125, 127, 127, 135, 135, 240, 180, 120, 72, 2, 74, 80, 128, 254, 212, 43, 51, 71, 135, 1, 45, 43, 25, 164, 172, 234, 1, 8, 151, 150, 92, 92, 163, 172, 235, 254, 248, 150, 151, 93, 93, 3, 148, 96, 254, 67, 150, 100, 96, 97, 1, 187, 148, 104, 0, 0, 0, 0, 2, 0, 68, 255, 231, 4, 142, 6, 68, 0, 3, 0, 27, 0, 183, 182, 25, 10, 2, 3, 6, 1, 74, 75, 176, 40, 80, 88, 64, 48, 0, 0, 1, 2, 1, 0, 2, 126, 0, 1, 1, 58, 75, 9, 1, 6, 6, 2, 93, 7, 1, 2, 2, 59, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 57, 75, 8, 1, 3, 3, 5, 95, 0, 5, 5, 66, 5, 76, 27, 75, 176, 42, 80, 88, 64, 45, 0, 1, 0, 1, 131, 0, 0, 2, 0, 131, 9, 1, 6, 6, 2, 93, 7, 1, 2, 2, 59, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 57, 75, 8, 1, 3, 3, 5, 95, 0, 5, 5, 66, 5, 76, 27, 64, 45, 0, 1, 0, 1, 131, 0, 0, 2, 0, 131, 9, 1, 6, 6, 2, 93, 7, 1, 2, 2, 59, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 60, 75, 8, 1, 3, 3, 5, 95, 0, 5, 5, 66, 5, 76, 89, 89, 64, 14, 27, 26, 34, 17, 18, 36, 17, 17, 17, 17, 16, 10, 9, 29, 43, 1, 35, 1, 51, 19, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 2, 228, 123, 254, 191, 228, 210, 1, 53, 123, 254, 191, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 5, 3, 1, 65, 253, 250, 252, 61, 123, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 0, 0, 2, 0, 68, 255, 231, 4, 142, 6, 68, 0, 3, 0, 27, 0, 198, 182, 25, 10, 2, 3, 6, 1, 74, 75, 176, 40, 80, 88, 64, 49, 10, 1, 1, 0, 2, 0, 1, 2, 126, 0, 0, 0, 58, 75, 9, 1, 6, 6, 2, 93, 7, 1, 2, 2, 59, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 57, 75, 8, 1, 3, 3, 5, 95, 0, 5, 5, 66, 5, 76, 27, 75, 176, 42, 80, 88, 64, 46, 0, 0, 1, 0, 131, 10, 1, 1, 2, 1, 131, 9, 1, 6, 6, 2, 93, 7, 1, 2, 2, 59, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 57, 75, 8, 1, 3, 3, 5, 95, 0, 5, 5, 66, 5, 76, 27, 64, 46, 0, 0, 1, 0, 131, 10, 1, 1, 2, 1, 131, 9, 1, 6, 6, 2, 93, 7, 1, 2, 2, 59, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 60, 75, 8, 1, 3, 3, 5, 95, 0, 5, 5, 66, 5, 76, 89, 89, 64, 26, 0, 0, 27, 26, 24, 22, 20, 19, 18, 17, 15, 13, 9, 8, 7, 6, 5, 4, 0, 3, 0, 3, 17, 11, 9, 21, 43, 1, 19, 51, 1, 23, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 1, 237, 216, 228, 254, 191, 118, 1, 53, 123, 254, 191, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 5, 3, 1, 65, 254, 191, 197, 252, 61, 123, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 0, 0, 2, 0, 68, 255, 231, 4, 142, 6, 68, 0, 7, 0, 31, 0, 207, 64, 11, 5, 1, 1, 0, 29, 14, 2, 4, 7, 2, 74, 75, 176, 40, 80, 88, 64, 50, 11, 2, 2, 1, 0, 3, 0, 1, 3, 126, 0, 0, 0, 58, 75, 10, 1, 7, 7, 3, 93, 8, 1, 3, 3, 59, 75, 9, 1, 4, 4, 5, 93, 0, 5, 5, 57, 75, 9, 1, 4, 4, 6, 95, 0, 6, 6, 66, 6, 76, 27, 75, 176, 42, 80, 88, 64, 47, 0, 0, 1, 0, 131, 11, 2, 2, 1, 3, 1, 131, 10, 1, 7, 7, 3, 93, 8, 1, 3, 3, 59, 75, 9, 1, 4, 4, 5, 93, 0, 5, 5, 57, 75, 9, 1, 4, 4, 6, 95, 0, 6, 6, 66, 6, 76, 27, 64, 47, 0, 0, 1, 0, 131, 11, 2, 2, 1, 3, 1, 131, 10, 1, 7, 7, 3, 93, 8, 1, 3, 3, 59, 75, 9, 1, 4, 4, 5, 93, 0, 5, 5, 60, 75, 9, 1, 4, 4, 6, 95, 0, 6, 6, 66, 6, 76, 89, 89, 64, 27, 0, 0, 31, 30, 28, 26, 24, 23, 22, 21, 19, 17, 13, 12, 11, 10, 9, 8, 0, 7, 0, 7, 17, 17, 12, 9, 22, 43, 19, 1, 51, 1, 35, 39, 35, 7, 5, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 251, 1, 0, 219, 1, 0, 123, 241, 3, 241, 1, 104, 1, 53, 123, 254, 191, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 5, 3, 1, 65, 254, 191, 202, 202, 197, 252, 61, 123, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 0, 0, 3, 0, 68, 255, 231, 4, 142, 5, 210, 0, 3, 0, 7, 0, 31, 0, 152, 182, 29, 14, 2, 5, 8, 1, 74, 75, 176, 42, 80, 88, 64, 49, 13, 3, 12, 3, 1, 1, 0, 93, 2, 1, 0, 0, 56, 75, 11, 1, 8, 8, 4, 93, 9, 1, 4, 4, 59, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 57, 75, 10, 1, 5, 5, 7, 95, 0, 7, 7, 66, 7, 76, 27, 64, 47, 2, 1, 0, 13, 3, 12, 3, 1, 4, 0, 1, 101, 11, 1, 8, 8, 4, 93, 9, 1, 4, 4, 59, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 60, 75, 10, 1, 5, 5, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 34, 4, 4, 0, 0, 31, 30, 28, 26, 24, 23, 22, 21, 19, 17, 13, 12, 11, 10, 9, 8, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 14, 9, 21, 43, 1, 53, 51, 21, 33, 53, 51, 21, 7, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 1, 28, 197, 1, 16, 197, 216, 1, 53, 123, 254, 191, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 5, 13, 197, 197, 197, 197, 207, 252, 61, 123, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 0, 0, 2, 0, 55, 254, 117, 4, 149, 6, 68, 0, 22, 0, 26, 0, 188, 181, 7, 1, 9, 0, 1, 74, 75, 176, 40, 80, 88, 64, 46, 13, 1, 11, 10, 1, 10, 11, 1, 126, 0, 10, 10, 58, 75, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 12, 1, 9, 9, 57, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 27, 75, 176, 42, 80, 88, 64, 43, 0, 10, 11, 10, 131, 13, 1, 11, 1, 11, 131, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 12, 1, 9, 9, 57, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 27, 64, 43, 0, 10, 11, 10, 131, 13, 1, 11, 1, 11, 131, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 12, 1, 9, 9, 60, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 89, 89, 64, 26, 23, 23, 0, 0, 23, 26, 23, 26, 25, 24, 0, 22, 0, 22, 17, 17, 18, 17, 17, 19, 17, 17, 17, 14, 9, 29, 43, 33, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 3, 51, 21, 33, 53, 51, 19, 3, 19, 51, 1, 2, 2, 254, 127, 74, 1, 191, 160, 1, 55, 2, 1, 55, 160, 1, 111, 74, 254, 127, 108, 148, 254, 33, 198, 108, 50, 216, 228, 254, 191, 3, 194, 124, 124, 252, 246, 3, 10, 124, 124, 252, 62, 254, 241, 124, 124, 1, 15, 5, 3, 1, 65, 254, 191, 0, 0, 0, 0, 2, 0, 62, 254, 117, 4, 94, 6, 43, 0, 24, 0, 33, 0, 77, 64, 74, 33, 25, 5, 3, 7, 8, 19, 1, 3, 7, 2, 74, 0, 0, 0, 1, 93, 0, 1, 1, 58, 75, 0, 8, 8, 2, 95, 0, 2, 2, 65, 75, 0, 7, 7, 3, 95, 0, 3, 3, 66, 75, 9, 6, 2, 4, 4, 5, 93, 0, 5, 5, 61, 5, 76, 0, 0, 32, 30, 28, 26, 0, 24, 0, 24, 17, 18, 38, 36, 17, 17, 10, 9, 26, 43, 19, 17, 35, 53, 33, 17, 54, 55, 54, 51, 50, 23, 22, 21, 16, 7, 6, 35, 34, 39, 17, 51, 21, 33, 53, 1, 22, 51, 32, 17, 16, 35, 34, 7, 185, 123, 1, 65, 75, 71, 102, 118, 165, 102, 102, 135, 134, 235, 88, 143, 247, 253, 200, 1, 65, 135, 73, 1, 61, 214, 164, 147, 254, 240, 6, 192, 123, 253, 53, 111, 55, 80, 143, 144, 235, 254, 226, 163, 164, 25, 254, 240, 123, 123, 1, 162, 23, 1, 212, 1, 103, 234, 0, 0, 0, 0, 3, 0, 55, 254, 117, 4, 149, 5, 210, 0, 22, 0, 26, 0, 30, 0, 145, 181, 7, 1, 9, 0, 1, 74, 75, 176, 42, 80, 88, 64, 46, 16, 13, 15, 3, 11, 11, 10, 93, 12, 1, 10, 10, 56, 75, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 14, 1, 9, 9, 57, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 27, 64, 44, 12, 1, 10, 16, 13, 15, 3, 11, 1, 10, 11, 101, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 14, 1, 9, 9, 60, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 89, 64, 34, 27, 27, 23, 23, 0, 0, 27, 30, 27, 30, 29, 28, 23, 26, 23, 26, 25, 24, 0, 22, 0, 22, 17, 17, 18, 17, 17, 19, 17, 17, 17, 17, 9, 29, 43, 33, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 3, 51, 21, 33, 53, 51, 19, 1, 53, 51, 21, 33, 53, 51, 21, 2, 2, 254, 127, 74, 1, 191, 160, 1, 55, 2, 1, 55, 160, 1, 111, 74, 254, 127, 108, 148, 254, 33, 198, 108, 254, 252, 197, 1, 16, 197, 3, 194, 124, 124, 252, 246, 3, 10, 124, 124, 252, 62, 254, 241, 124, 124, 1, 15, 5, 13, 197, 197, 197, 197, 0, 0, 0, 0, 3, 0, 25, 0, 0, 4, 179, 6, 232, 0, 15, 0, 19, 0, 23, 0, 126, 181, 18, 1, 8, 3, 1, 74, 75, 176, 42, 80, 88, 64, 38, 0, 9, 12, 1, 10, 3, 9, 10, 101, 0, 8, 11, 1, 7, 0, 8, 7, 102, 0, 3, 3, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 64, 41, 0, 3, 10, 8, 10, 3, 8, 126, 0, 9, 12, 1, 10, 3, 9, 10, 101, 0, 8, 11, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 60, 1, 76, 89, 64, 26, 20, 20, 0, 0, 20, 23, 20, 23, 22, 21, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 13, 9, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 1, 53, 33, 21, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 254, 196, 2, 179, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 1, 145, 124, 124, 0, 3, 0, 148, 255, 231, 4, 143, 5, 147, 0, 3, 0, 33, 0, 43, 0, 233, 64, 10, 23, 1, 4, 6, 34, 1, 7, 9, 2, 74, 75, 176, 29, 80, 88, 64, 58, 0, 5, 4, 3, 4, 5, 3, 126, 0, 0, 11, 1, 1, 6, 0, 1, 101, 0, 3, 0, 9, 7, 3, 9, 103, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 7, 7, 8, 93, 0, 8, 8, 57, 75, 10, 1, 7, 7, 2, 95, 0, 2, 2, 66, 2, 76, 27, 75, 176, 42, 80, 88, 64, 56, 0, 5, 4, 3, 4, 5, 3, 126, 0, 0, 11, 1, 1, 6, 0, 1, 101, 0, 3, 0, 9, 7, 3, 9, 103, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 0, 7, 7, 8, 93, 0, 8, 8, 57, 75, 0, 10, 10, 2, 95, 0, 2, 2, 66, 2, 76, 27, 64, 56, 0, 5, 4, 3, 4, 5, 3, 126, 0, 0, 11, 1, 1, 6, 0, 1, 101, 0, 3, 0, 9, 7, 3, 9, 103, 0, 4, 4, 6, 95, 0, 6, 6, 65, 75, 0, 7, 7, 8, 93, 0, 8, 8, 60, 75, 0, 10, 10, 2, 95, 0, 2, 2, 66, 2, 76, 89, 89, 64, 28, 0, 0, 43, 41, 37, 35, 33, 32, 31, 30, 26, 24, 22, 21, 19, 17, 15, 13, 7, 5, 0, 3, 0, 3, 17, 12, 9, 21, 43, 1, 53, 33, 21, 3, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 17, 35, 34, 7, 6, 21, 20, 51, 50, 1, 35, 2, 179, 148, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 20, 53, 230, 97, 96, 186, 147, 5, 23, 124, 124, 251, 96, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 1, 13, 1, 6, 52, 52, 144, 177, 0, 0, 3, 0, 25, 0, 0, 4, 179, 7, 112, 0, 15, 0, 19, 0, 35, 0, 136, 181, 18, 1, 8, 3, 1, 74, 75, 176, 42, 80, 88, 64, 43, 11, 1, 9, 10, 9, 131, 0, 10, 0, 12, 3, 10, 12, 103, 0, 8, 13, 1, 7, 0, 8, 7, 102, 0, 3, 3, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 64, 46, 11, 1, 9, 10, 9, 131, 0, 3, 12, 8, 12, 3, 8, 126, 0, 10, 0, 12, 3, 10, 12, 103, 0, 8, 13, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 60, 1, 76, 89, 64, 26, 0, 0, 31, 29, 26, 25, 24, 22, 21, 20, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 14, 9, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 254, 205, 123, 48, 174, 175, 48, 123, 23, 26, 91, 202, 152, 89, 55, 28, 11, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 2, 149, 148, 148, 89, 46, 155, 81, 49, 72, 29, 0, 0, 0, 3, 0, 148, 255, 231, 4, 143, 6, 43, 0, 15, 0, 45, 0, 55, 1, 46, 64, 10, 35, 1, 6, 8, 46, 1, 9, 11, 2, 74, 75, 176, 21, 80, 88, 64, 62, 0, 5, 0, 11, 9, 5, 11, 103, 0, 3, 3, 1, 95, 0, 1, 1, 56, 75, 0, 6, 6, 8, 95, 0, 8, 8, 65, 75, 0, 7, 7, 0, 93, 2, 1, 0, 0, 58, 75, 12, 1, 9, 9, 10, 93, 0, 10, 10, 57, 75, 12, 1, 9, 9, 4, 95, 0, 4, 4, 66, 4, 76, 27, 75, 176, 29, 80, 88, 64, 60, 0, 1, 0, 3, 8, 1, 3, 103, 0, 5, 0, 11, 9, 5, 11, 103, 0, 6, 6, 8, 95, 0, 8, 8, 65, 75, 0, 7, 7, 0, 93, 2, 1, 0, 0, 58, 75, 12, 1, 9, 9, 10, 93, 0, 10, 10, 57, 75, 12, 1, 9, 9, 4, 95, 0, 4, 4, 66, 4, 76, 27, 75, 176, 42, 80, 88, 64, 58, 0, 1, 0, 3, 8, 1, 3, 103, 0, 5, 0, 11, 9, 5, 11, 103, 0, 6, 6, 8, 95, 0, 8, 8, 65, 75, 0, 7, 7, 0, 93, 2, 1, 0, 0, 58, 75, 0, 9, 9, 10, 93, 0, 10, 10, 57, 75, 0, 12, 12, 4, 95, 0, 4, 4, 66, 4, 76, 27, 64, 58, 0, 1, 0, 3, 8, 1, 3, 103, 0, 5, 0, 11, 9, 5, 11, 103, 0, 6, 6, 8, 95, 0, 8, 8, 65, 75, 0, 7, 7, 0, 93, 2, 1, 0, 0, 58, 75, 0, 9, 9, 10, 93, 0, 10, 10, 60, 75, 0, 12, 12, 4, 95, 0, 4, 4, 66, 4, 76, 89, 89, 89, 64, 20, 55, 53, 49, 47, 45, 44, 43, 42, 34, 18, 34, 38, 38, 35, 17, 33, 16, 13, 9, 29, 43, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 1, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 17, 35, 34, 7, 6, 21, 20, 51, 50, 1, 25, 123, 48, 174, 175, 48, 123, 23, 26, 91, 202, 152, 89, 55, 28, 11, 2, 27, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 20, 53, 230, 97, 96, 186, 147, 6, 43, 148, 148, 89, 46, 155, 81, 49, 72, 29, 250, 135, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 1, 13, 1, 6, 52, 52, 144, 177, 0, 0, 0, 0, 2, 0, 25, 254, 142, 4, 179, 5, 200, 0, 29, 0, 33, 0, 175, 64, 14, 32, 1, 11, 3, 18, 1, 6, 1, 19, 1, 7, 6, 3, 74, 75, 176, 40, 80, 88, 64, 40, 0, 11, 12, 1, 10, 0, 11, 10, 102, 0, 3, 3, 56, 75, 9, 4, 2, 3, 0, 0, 1, 93, 8, 5, 2, 1, 1, 57, 75, 0, 6, 6, 7, 95, 0, 7, 7, 61, 7, 76, 27, 75, 176, 42, 80, 88, 64, 37, 0, 11, 12, 1, 10, 0, 11, 10, 102, 0, 6, 0, 7, 6, 7, 99, 0, 3, 3, 56, 75, 9, 4, 2, 3, 0, 0, 1, 93, 8, 5, 2, 1, 1, 57, 1, 76, 27, 64, 37, 0, 3, 11, 3, 131, 0, 11, 12, 1, 10, 0, 11, 10, 102, 0, 6, 0, 7, 6, 7, 99, 9, 4, 2, 3, 0, 0, 1, 93, 8, 5, 2, 1, 1, 60, 1, 76, 89, 89, 64, 22, 0, 0, 31, 30, 0, 29, 0, 29, 28, 27, 19, 35, 35, 17, 17, 17, 17, 17, 17, 13, 9, 29, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 35, 6, 21, 20, 51, 50, 55, 21, 6, 35, 34, 53, 52, 55, 35, 53, 51, 3, 37, 33, 3, 35, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 176, 129, 115, 54, 37, 62, 78, 202, 158, 154, 157, 100, 254, 55, 1, 163, 208, 2, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 81, 98, 96, 15, 81, 29, 157, 123, 90, 123, 1, 65, 124, 2, 163, 0, 0, 0, 2, 0, 148, 254, 142, 4, 143, 4, 87, 0, 43, 0, 53, 1, 42, 64, 18, 19, 1, 2, 4, 44, 1, 5, 10, 35, 1, 7, 0, 36, 1, 8, 7, 4, 74, 75, 176, 29, 80, 88, 64, 60, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 10, 5, 1, 10, 103, 0, 2, 2, 4, 95, 0, 4, 4, 65, 75, 11, 1, 5, 5, 6, 93, 9, 1, 6, 6, 57, 75, 11, 1, 5, 5, 0, 95, 0, 0, 0, 66, 75, 0, 7, 7, 8, 95, 0, 8, 8, 61, 8, 76, 27, 75, 176, 40, 80, 88, 64, 58, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 10, 5, 1, 10, 103, 0, 2, 2, 4, 95, 0, 4, 4, 65, 75, 0, 5, 5, 6, 93, 9, 1, 6, 6, 57, 75, 0, 11, 11, 0, 95, 0, 0, 0, 66, 75, 0, 7, 7, 8, 95, 0, 8, 8, 61, 8, 76, 27, 75, 176, 42, 80, 88, 64, 55, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 10, 5, 1, 10, 103, 0, 7, 0, 8, 7, 8, 99, 0, 2, 2, 4, 95, 0, 4, 4, 65, 75, 0, 5, 5, 6, 93, 9, 1, 6, 6, 57, 75, 0, 11, 11, 0, 95, 0, 0, 0, 66, 0, 76, 27, 64, 55, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 10, 5, 1, 10, 103, 0, 7, 0, 8, 7, 8, 99, 0, 2, 2, 4, 95, 0, 4, 4, 65, 75, 0, 5, 5, 6, 93, 9, 1, 6, 6, 60, 75, 0, 11, 11, 0, 95, 0, 0, 0, 66, 0, 76, 89, 89, 89, 64, 18, 53, 51, 47, 45, 43, 42, 35, 35, 17, 20, 34, 18, 34, 38, 33, 12, 9, 29, 43, 37, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 35, 6, 21, 20, 51, 50, 55, 21, 6, 35, 34, 53, 52, 55, 35, 3, 17, 35, 34, 7, 6, 21, 20, 51, 50, 3, 66, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 136, 129, 115, 54, 37, 62, 78, 202, 158, 70, 20, 53, 230, 97, 96, 186, 147, 119, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 81, 98, 96, 15, 81, 29, 157, 123, 90, 1, 13, 1, 6, 52, 52, 144, 177, 0, 0, 0, 0, 2, 0, 123, 255, 219, 4, 103, 7, 143, 0, 27, 0, 31, 0, 123, 64, 14, 12, 1, 3, 1, 27, 1, 4, 2, 0, 1, 0, 4, 3, 74, 75, 176, 42, 80, 88, 64, 40, 0, 5, 6, 5, 131, 7, 1, 6, 1, 6, 131, 0, 2, 3, 4, 3, 2, 4, 126, 0, 3, 3, 1, 95, 0, 1, 1, 62, 75, 0, 4, 4, 0, 95, 0, 0, 0, 63, 0, 76, 27, 64, 38, 0, 5, 6, 5, 131, 7, 1, 6, 1, 6, 131, 0, 2, 3, 4, 3, 2, 4, 126, 0, 1, 0, 3, 2, 1, 3, 104, 0, 4, 4, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 15, 28, 28, 28, 31, 28, 31, 19, 38, 34, 18, 38, 33, 8, 9, 26, 43, 37, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 1, 19, 51, 1, 4, 103, 207, 181, 254, 223, 163, 164, 156, 156, 1, 34, 164, 217, 123, 29, 113, 111, 187, 104, 103, 114, 113, 200, 178, 186, 253, 232, 216, 228, 254, 191, 74, 111, 206, 206, 1, 117, 1, 113, 200, 200, 64, 254, 169, 231, 53, 176, 175, 254, 203, 254, 213, 168, 168, 135, 5, 100, 1, 65, 254, 191, 0, 0, 0, 0, 2, 0, 110, 255, 231, 4, 86, 6, 68, 0, 3, 0, 31, 0, 133, 64, 14, 16, 1, 5, 3, 31, 1, 6, 4, 4, 1, 2, 6, 3, 74, 75, 176, 40, 80, 88, 64, 43, 7, 1, 1, 0, 3, 0, 1, 3, 126, 0, 4, 5, 6, 5, 4, 6, 126, 0, 0, 0, 58, 75, 0, 5, 5, 3, 95, 0, 3, 3, 65, 75, 0, 6, 6, 2, 95, 0, 2, 2, 66, 2, 76, 27, 64, 40, 0, 0, 1, 0, 131, 7, 1, 1, 3, 1, 131, 0, 4, 5, 6, 5, 4, 6, 126, 0, 5, 5, 3, 95, 0, 3, 3, 65, 75, 0, 6, 6, 2, 95, 0, 2, 2, 66, 2, 76, 89, 64, 20, 0, 0, 30, 28, 22, 20, 18, 17, 15, 13, 7, 5, 0, 3, 0, 3, 17, 8, 9, 21, 43, 1, 19, 51, 1, 1, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 2, 54, 216, 228, 254, 191, 1, 165, 162, 232, 254, 229, 162, 161, 158, 157, 1, 31, 213, 172, 124, 35, 121, 116, 176, 104, 96, 108, 116, 206, 168, 187, 5, 3, 1, 65, 254, 191, 251, 43, 71, 158, 158, 1, 8, 1, 4, 147, 148, 54, 254, 202, 197, 44, 118, 118, 199, 220, 113, 113, 81, 0, 0, 0, 2, 0, 123, 255, 219, 4, 103, 7, 143, 0, 27, 0, 35, 0, 130, 64, 18, 33, 1, 6, 5, 12, 1, 3, 1, 27, 1, 4, 2, 0, 1, 0, 4, 4, 74, 75, 176, 42, 80, 88, 64, 41, 0, 5, 6, 5, 131, 8, 7, 2, 6, 1, 6, 131, 0, 2, 3, 4, 3, 2, 4, 126, 0, 3, 3, 1, 95, 0, 1, 1, 62, 75, 0, 4, 4, 0, 95, 0, 0, 0, 63, 0, 76, 27, 64, 39, 0, 5, 6, 5, 131, 8, 7, 2, 6, 1, 6, 131, 0, 2, 3, 4, 3, 2, 4, 126, 0, 1, 0, 3, 2, 1, 3, 104, 0, 4, 4, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 16, 28, 28, 28, 35, 28, 35, 17, 19, 38, 34, 18, 38, 33, 9, 9, 27, 43, 37, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 1, 1, 51, 1, 35, 39, 35, 7, 4, 103, 207, 181, 254, 223, 163, 164, 156, 156, 1, 34, 164, 217, 123, 29, 113, 111, 187, 104, 103, 114, 113, 200, 178, 186, 252, 245, 1, 0, 219, 1, 0, 123, 241, 3, 241, 74, 111, 206, 206, 1, 117, 1, 113, 200, 200, 64, 254, 169, 231, 53, 176, 175, 254, 203, 254, 213, 168, 168, 135, 5, 100, 1, 65, 254, 191, 202, 202, 0, 0, 2, 0, 110, 255, 231, 4, 86, 6, 68, 0, 7, 0, 35, 0, 140, 64, 18, 5, 1, 1, 0, 20, 1, 6, 4, 35, 1, 7, 5, 8, 1, 3, 7, 4, 74, 75, 176, 40, 80, 88, 64, 44, 8, 2, 2, 1, 0, 4, 0, 1, 4, 126, 0, 5, 6, 7, 6, 5, 7, 126, 0, 0, 0, 58, 75, 0, 6, 6, 4, 95, 0, 4, 4, 65, 75, 0, 7, 7, 3, 95, 0, 3, 3, 66, 3, 76, 27, 64, 41, 0, 0, 1, 0, 131, 8, 2, 2, 1, 4, 1, 131, 0, 5, 6, 7, 6, 5, 7, 126, 0, 6, 6, 4, 95, 0, 4, 4, 65, 75, 0, 7, 7, 3, 95, 0, 3, 3, 66, 3, 76, 89, 64, 21, 0, 0, 34, 32, 26, 24, 22, 21, 19, 17, 11, 9, 0, 7, 0, 7, 17, 17, 9, 9, 22, 43, 1, 1, 51, 1, 35, 39, 35, 7, 1, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 1, 92, 1, 0, 219, 1, 0, 123, 241, 3, 241, 2, 127, 162, 232, 254, 229, 162, 161, 158, 157, 1, 31, 213, 172, 124, 35, 121, 116, 176, 104, 96, 108, 116, 206, 168, 187, 5, 3, 1, 65, 254, 191, 202, 202, 251, 43, 71, 158, 158, 1, 8, 1, 4, 147, 148, 54, 254, 202, 197, 44, 118, 118, 199, 220, 113, 113, 81, 0, 2, 0, 123, 255, 219, 4, 103, 7, 49, 0, 27, 0, 31, 0, 119, 64, 14, 12, 1, 3, 1, 27, 1, 4, 2, 0, 1, 0, 4, 3, 74, 75, 176, 42, 80, 88, 64, 38, 0, 2, 3, 4, 3, 2, 4, 126, 0, 5, 7, 1, 6, 1, 5, 6, 101, 0, 3, 3, 1, 95, 0, 1, 1, 62, 75, 0, 4, 4, 0, 95, 0, 0, 0, 63, 0, 76, 27, 64, 36, 0, 2, 3, 4, 3, 2, 4, 126, 0, 5, 7, 1, 6, 1, 5, 6, 101, 0, 1, 0, 3, 2, 1, 3, 103, 0, 4, 4, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 15, 28, 28, 28, 31, 28, 31, 19, 38, 34, 18, 38, 33, 8, 9, 26, 43, 37, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 1, 53, 51, 21, 4, 103, 207, 181, 254, 223, 163, 164, 156, 156, 1, 34, 164, 217, 123, 29, 113, 111, 187, 104, 103, 114, 113, 200, 178, 186, 254, 0, 197, 74, 111, 206, 206, 1, 117, 1, 113, 200, 200, 64, 254, 169, 231, 53, 176, 175, 254, 203, 254, 213, 168, 168, 135, 5, 130, 197, 197, 0, 2, 0, 110, 255, 231, 4, 86, 5, 220, 0, 3, 0, 31, 0, 128, 64, 14, 16, 1, 5, 3, 31, 1, 6, 4, 4, 1, 2, 6, 3, 74, 75, 176, 42, 80, 88, 64, 40, 0, 4, 5, 6, 5, 4, 6, 126, 7, 1, 1, 1, 0, 93, 0, 0, 0, 56, 75, 0, 5, 5, 3, 95, 0, 3, 3, 65, 75, 0, 6, 6, 2, 95, 0, 2, 2, 66, 2, 76, 27, 64, 38, 0, 4, 5, 6, 5, 4, 6, 126, 0, 0, 7, 1, 1, 3, 0, 1, 101, 0, 5, 5, 3, 95, 0, 3, 3, 65, 75, 0, 6, 6, 2, 95, 0, 2, 2, 66, 2, 76, 89, 64, 20, 0, 0, 30, 28, 22, 20, 18, 17, 15, 13, 7, 5, 0, 3, 0, 3, 17, 8, 9, 21, 43, 1, 53, 51, 21, 1, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 2, 89, 197, 1, 56, 162, 232, 254, 229, 162, 161, 158, 157, 1, 31, 213, 172, 124, 35, 121, 116, 176, 104, 96, 108, 116, 206, 168, 187, 5, 23, 197, 197, 251, 23, 71, 158, 158, 1, 8, 1, 4, 147, 148, 54, 254, 202, 197, 44, 118, 118, 199, 220, 113, 113, 81, 0, 2, 0, 123, 255, 219, 4, 103, 7, 143, 0, 27, 0, 35, 0, 126, 64, 18, 33, 1, 5, 6, 12, 1, 3, 1, 27, 1, 4, 2, 0, 1, 0, 4, 4, 74, 75, 176, 42, 80, 88, 64, 39, 0, 5, 6, 1, 6, 5, 1, 126, 8, 7, 2, 6, 0, 2, 4, 6, 2, 101, 0, 3, 3, 1, 95, 0, 1, 1, 62, 75, 0, 4, 4, 0, 95, 0, 0, 0, 63, 0, 76, 27, 64, 37, 0, 5, 6, 1, 6, 5, 1, 126, 0, 1, 0, 3, 2, 1, 3, 103, 8, 7, 2, 6, 0, 2, 4, 6, 2, 101, 0, 4, 4, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 16, 28, 28, 28, 35, 28, 35, 17, 19, 38, 34, 18, 38, 33, 9, 9, 27, 43, 37, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 3, 1, 35, 1, 51, 23, 51, 55, 4, 103, 207, 181, 254, 223, 163, 164, 156, 156, 1, 34, 164, 217, 123, 29, 113, 111, 187, 104, 103, 114, 113, 200, 178, 186, 47, 254, 255, 218, 254, 255, 124, 241, 2, 242, 74, 111, 206, 206, 1, 117, 1, 113, 200, 200, 64, 254, 169, 231, 53, 176, 175, 254, 203, 254, 213, 168, 168, 135, 6, 165, 254, 191, 1, 65, 202, 202, 0, 0, 0, 2, 0, 110, 255, 231, 4, 86, 6, 68, 0, 7, 0, 35, 0, 135, 64, 18, 5, 1, 0, 1, 20, 1, 6, 4, 35, 1, 7, 5, 8, 1, 3, 7, 4, 74, 75, 176, 40, 80, 88, 64, 41, 0, 0, 1, 4, 1, 0, 4, 126, 0, 6, 6, 4, 95, 0, 4, 4, 65, 75, 0, 5, 5, 1, 93, 8, 2, 2, 1, 1, 58, 75, 0, 7, 7, 3, 95, 0, 3, 3, 66, 3, 76, 27, 64, 39, 0, 0, 1, 4, 1, 0, 4, 126, 8, 2, 2, 1, 0, 5, 7, 1, 5, 101, 0, 6, 6, 4, 95, 0, 4, 4, 65, 75, 0, 7, 7, 3, 95, 0, 3, 3, 66, 3, 76, 89, 64, 21, 0, 0, 34, 32, 26, 24, 22, 21, 19, 17, 11, 9, 0, 7, 0, 7, 17, 17, 9, 9, 22, 43, 1, 1, 35, 1, 51, 23, 51, 55, 19, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 4, 32, 254, 255, 218, 254, 255, 124, 241, 2, 242, 177, 162, 232, 254, 229, 162, 161, 158, 157, 1, 31, 213, 172, 124, 35, 121, 116, 176, 104, 96, 108, 116, 206, 168, 187, 6, 68, 254, 191, 1, 65, 202, 202, 249, 234, 71, 158, 158, 1, 8, 1, 4, 147, 148, 54, 254, 202, 197, 44, 118, 118, 199, 220, 113, 113, 81, 0, 0, 0, 3, 0, 49, 0, 0, 4, 143, 7, 143, 0, 7, 0, 20, 0, 29, 0, 118, 181, 5, 1, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 36, 9, 2, 2, 1, 0, 1, 131, 0, 0, 5, 0, 131, 8, 1, 4, 4, 5, 93, 0, 5, 5, 56, 75, 7, 1, 3, 3, 6, 93, 10, 1, 6, 6, 57, 6, 76, 27, 64, 34, 9, 2, 2, 1, 0, 1, 131, 0, 0, 5, 0, 131, 0, 5, 8, 1, 4, 3, 5, 4, 104, 7, 1, 3, 3, 6, 93, 10, 1, 6, 6, 60, 6, 76, 89, 64, 27, 8, 8, 0, 0, 29, 27, 23, 21, 8, 20, 8, 19, 15, 13, 12, 11, 10, 9, 0, 7, 0, 7, 17, 17, 11, 9, 22, 43, 1, 1, 35, 1, 51, 23, 51, 55, 1, 53, 51, 17, 35, 53, 33, 32, 17, 16, 7, 6, 33, 39, 51, 32, 17, 16, 39, 38, 35, 35, 3, 141, 254, 255, 218, 254, 255, 124, 241, 2, 242, 253, 31, 148, 148, 1, 254, 2, 96, 160, 160, 254, 242, 182, 118, 1, 185, 111, 112, 232, 104, 7, 143, 254, 191, 1, 65, 202, 202, 248, 113, 123, 4, 210, 123, 253, 63, 254, 156, 210, 209, 131, 2, 111, 1, 53, 147, 147, 0, 3, 0, 111, 255, 231, 4, 205, 6, 43, 0, 22, 0, 33, 0, 43, 0, 145, 64, 19, 39, 37, 35, 34, 4, 1, 2, 15, 1, 6, 1, 33, 23, 1, 3, 4, 6, 3, 74, 75, 176, 42, 80, 88, 64, 45, 0, 2, 2, 3, 93, 8, 1, 3, 3, 58, 75, 0, 6, 6, 1, 95, 0, 1, 1, 65, 75, 7, 1, 4, 4, 5, 93, 9, 1, 5, 5, 57, 75, 7, 1, 4, 4, 0, 95, 0, 0, 0, 66, 0, 76, 27, 64, 45, 0, 2, 2, 3, 93, 8, 1, 3, 3, 58, 75, 0, 6, 6, 1, 95, 0, 1, 1, 65, 75, 7, 1, 4, 4, 5, 93, 9, 1, 5, 5, 60, 75, 7, 1, 4, 4, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 20, 0, 0, 41, 40, 32, 30, 26, 24, 0, 22, 0, 22, 17, 17, 18, 38, 36, 10, 9, 25, 43, 33, 53, 6, 7, 6, 35, 34, 39, 38, 53, 16, 55, 54, 51, 50, 23, 17, 35, 53, 33, 17, 51, 21, 1, 38, 35, 34, 7, 6, 21, 16, 51, 50, 55, 1, 53, 54, 53, 53, 35, 53, 51, 21, 2, 2, 241, 62, 61, 88, 107, 145, 89, 90, 118, 117, 208, 80, 119, 216, 1, 157, 108, 254, 207, 108, 71, 141, 57, 58, 172, 154, 109, 1, 22, 77, 77, 198, 1, 222, 111, 56, 80, 144, 144, 235, 1, 28, 164, 164, 24, 1, 114, 123, 250, 80, 123, 3, 187, 24, 105, 118, 254, 254, 133, 247, 2, 243, 59, 21, 160, 17, 197, 171, 254, 250, 0, 0, 0, 2, 0, 49, 0, 0, 4, 143, 5, 200, 0, 16, 0, 29, 0, 108, 75, 176, 42, 80, 88, 64, 35, 6, 1, 2, 7, 1, 1, 0, 2, 1, 101, 11, 9, 2, 3, 3, 4, 93, 0, 4, 4, 56, 75, 8, 1, 0, 0, 5, 93, 10, 1, 5, 5, 57, 5, 76, 27, 64, 33, 0, 4, 11, 9, 2, 3, 2, 4, 3, 103, 6, 1, 2, 7, 1, 1, 0, 2, 1, 101, 8, 1, 0, 0, 5, 93, 10, 1, 5, 5, 60, 5, 76, 89, 64, 26, 17, 17, 0, 0, 17, 29, 17, 28, 24, 22, 21, 20, 19, 18, 0, 16, 0, 15, 33, 17, 17, 17, 17, 12, 9, 25, 43, 51, 53, 51, 17, 35, 53, 51, 17, 35, 53, 33, 32, 17, 16, 7, 6, 33, 3, 17, 33, 21, 33, 17, 51, 32, 17, 16, 39, 38, 35, 49, 148, 148, 148, 148, 1, 253, 2, 97, 160, 160, 254, 242, 183, 1, 16, 254, 240, 119, 1, 185, 112, 112, 231, 123, 2, 81, 123, 2, 6, 123, 253, 64, 254, 155, 210, 209, 5, 77, 253, 250, 123, 253, 183, 2, 111, 1, 52, 148, 147, 0, 2, 0, 111, 255, 231, 4, 143, 6, 43, 0, 30, 0, 41, 0, 158, 64, 12, 15, 1, 10, 1, 41, 31, 1, 3, 8, 10, 2, 74, 75, 176, 42, 80, 88, 64, 54, 6, 1, 3, 7, 1, 2, 1, 3, 2, 101, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 0, 10, 10, 1, 95, 0, 1, 1, 65, 75, 11, 1, 8, 8, 9, 93, 12, 1, 9, 9, 57, 75, 11, 1, 8, 8, 0, 95, 0, 0, 0, 66, 0, 76, 27, 64, 54, 6, 1, 3, 7, 1, 2, 1, 3, 2, 101, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 0, 10, 10, 1, 95, 0, 1, 1, 65, 75, 11, 1, 8, 8, 9, 93, 12, 1, 9, 9, 60, 75, 11, 1, 8, 8, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 22, 0, 0, 40, 38, 34, 32, 0, 30, 0, 30, 17, 17, 17, 17, 17, 17, 18, 38, 36, 13, 9, 29, 43, 33, 53, 6, 7, 6, 35, 34, 39, 38, 53, 16, 55, 54, 51, 50, 23, 53, 33, 53, 33, 53, 35, 53, 33, 21, 51, 21, 35, 17, 51, 21, 1, 38, 35, 34, 7, 6, 17, 16, 51, 50, 55, 3, 78, 75, 70, 102, 119, 165, 102, 102, 135, 134, 238, 87, 141, 254, 192, 1, 64, 246, 1, 188, 123, 123, 123, 254, 191, 136, 77, 165, 74, 73, 214, 164, 147, 222, 111, 56, 80, 144, 143, 236, 1, 29, 163, 164, 24, 135, 124, 111, 123, 234, 124, 251, 182, 123, 3, 189, 22, 107, 106, 254, 250, 254, 131, 234, 0, 0, 0, 0, 2, 0, 74, 0, 0, 4, 82, 6, 232, 0, 23, 0, 27, 0, 244, 75, 176, 10, 80, 88, 64, 63, 0, 3, 1, 6, 1, 3, 112, 0, 10, 7, 0, 0, 10, 112, 0, 12, 15, 1, 13, 2, 12, 13, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 14, 1, 11, 11, 57, 11, 76, 27, 75, 176, 42, 80, 88, 64, 65, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 12, 15, 1, 13, 2, 12, 13, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 14, 1, 11, 11, 57, 11, 76, 27, 64, 63, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 12, 15, 1, 13, 2, 12, 13, 101, 0, 2, 4, 1, 1, 3, 2, 1, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 9, 1, 0, 0, 11, 94, 14, 1, 11, 11, 60, 11, 76, 89, 89, 64, 30, 24, 24, 0, 0, 24, 27, 24, 27, 26, 25, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 9, 29, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 1, 53, 33, 21, 74, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 252, 202, 2, 179, 123, 4, 210, 123, 254, 155, 234, 253, 225, 124, 254, 141, 124, 253, 208, 252, 254, 129, 6, 108, 124, 124, 0, 0, 3, 0, 123, 255, 231, 4, 81, 5, 147, 0, 3, 0, 24, 0, 32, 0, 73, 64, 70, 11, 1, 3, 2, 12, 1, 4, 3, 2, 74, 0, 0, 8, 1, 1, 5, 0, 1, 101, 0, 6, 0, 2, 3, 6, 2, 101, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 0, 3, 3, 4, 95, 0, 4, 4, 66, 4, 76, 0, 0, 30, 28, 26, 25, 23, 21, 15, 13, 10, 8, 5, 4, 0, 3, 0, 3, 17, 9, 9, 21, 43, 1, 53, 33, 21, 19, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 1, 47, 2, 179, 111, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 5, 23, 124, 124, 252, 227, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 2, 0, 74, 0, 0, 4, 82, 7, 112, 0, 23, 0, 39, 1, 3, 75, 176, 10, 80, 88, 64, 68, 14, 1, 12, 13, 12, 131, 0, 3, 1, 6, 1, 3, 112, 0, 10, 7, 0, 0, 10, 112, 0, 13, 0, 15, 2, 13, 15, 103, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 16, 1, 11, 11, 57, 11, 76, 27, 75, 176, 42, 80, 88, 64, 70, 14, 1, 12, 13, 12, 131, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 13, 0, 15, 2, 13, 15, 103, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 16, 1, 11, 11, 57, 11, 76, 27, 64, 68, 14, 1, 12, 13, 12, 131, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 13, 0, 15, 2, 13, 15, 103, 0, 2, 4, 1, 1, 3, 2, 1, 102, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 9, 1, 0, 0, 11, 94, 16, 1, 11, 11, 60, 11, 76, 89, 89, 64, 30, 0, 0, 35, 33, 30, 29, 28, 26, 25, 24, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 29, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 74, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 252, 177, 123, 48, 174, 175, 48, 123, 23, 26, 91, 202, 152, 89, 55, 28, 11, 123, 4, 210, 123, 254, 155, 234, 253, 225, 124, 254, 141, 124, 253, 208, 252, 254, 129, 7, 112, 148, 148, 89, 46, 155, 81, 49, 72, 29, 0, 0, 0, 3, 0, 123, 255, 231, 4, 81, 6, 43, 0, 15, 0, 36, 0, 44, 0, 128, 64, 10, 23, 1, 5, 4, 24, 1, 6, 5, 2, 74, 75, 176, 21, 80, 88, 64, 45, 0, 8, 0, 4, 5, 8, 4, 102, 2, 1, 0, 0, 58, 75, 0, 3, 3, 1, 95, 0, 1, 1, 56, 75, 0, 9, 9, 7, 95, 0, 7, 7, 65, 75, 0, 5, 5, 6, 95, 0, 6, 6, 66, 6, 76, 27, 64, 43, 0, 1, 0, 3, 7, 1, 3, 103, 0, 8, 0, 4, 5, 8, 4, 102, 2, 1, 0, 0, 58, 75, 0, 9, 9, 7, 95, 0, 7, 7, 65, 75, 0, 5, 5, 6, 95, 0, 6, 6, 66, 6, 76, 89, 64, 14, 42, 40, 18, 38, 35, 35, 21, 35, 17, 33, 16, 10, 9, 29, 43, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 1, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 1, 47, 123, 48, 174, 175, 48, 123, 23, 26, 91, 202, 152, 89, 55, 28, 11, 3, 20, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 6, 43, 148, 148, 89, 46, 155, 81, 49, 72, 29, 252, 10, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 2, 0, 74, 0, 0, 4, 82, 7, 49, 0, 23, 0, 27, 0, 244, 75, 176, 10, 80, 88, 64, 63, 0, 3, 1, 6, 1, 3, 112, 0, 10, 7, 0, 0, 10, 112, 0, 12, 15, 1, 13, 2, 12, 13, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 14, 1, 11, 11, 57, 11, 76, 27, 75, 176, 42, 80, 88, 64, 65, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 12, 15, 1, 13, 2, 12, 13, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 14, 1, 11, 11, 57, 11, 76, 27, 64, 63, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 12, 15, 1, 13, 2, 12, 13, 101, 0, 2, 4, 1, 1, 3, 2, 1, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 9, 1, 0, 0, 11, 94, 14, 1, 11, 11, 60, 11, 76, 89, 89, 64, 30, 24, 24, 0, 0, 24, 27, 24, 27, 26, 25, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 9, 29, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 1, 53, 51, 21, 74, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 253, 195, 197, 123, 4, 210, 123, 254, 155, 234, 253, 225, 124, 254, 141, 124, 253, 208, 252, 254, 129, 6, 108, 197, 197, 0, 0, 0, 3, 0, 123, 255, 231, 4, 81, 5, 220, 0, 3, 0, 24, 0, 32, 0, 126, 64, 10, 11, 1, 3, 2, 12, 1, 4, 3, 2, 74, 75, 176, 42, 80, 88, 64, 40, 0, 6, 0, 2, 3, 6, 2, 101, 8, 1, 1, 1, 0, 93, 0, 0, 0, 56, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 0, 3, 3, 4, 95, 0, 4, 4, 66, 4, 76, 27, 64, 38, 0, 0, 8, 1, 1, 5, 0, 1, 101, 0, 6, 0, 2, 3, 6, 2, 101, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 0, 3, 3, 4, 95, 0, 4, 4, 66, 4, 76, 89, 64, 22, 0, 0, 30, 28, 26, 25, 23, 21, 15, 13, 10, 8, 5, 4, 0, 3, 0, 3, 17, 9, 9, 21, 43, 1, 53, 51, 21, 1, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 2, 38, 197, 1, 102, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 5, 23, 197, 197, 252, 227, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 0, 0, 0, 1, 0, 74, 254, 142, 4, 82, 5, 200, 0, 37, 1, 74, 64, 10, 30, 1, 12, 11, 31, 1, 13, 12, 2, 74, 75, 176, 10, 80, 88, 64, 65, 0, 3, 1, 6, 1, 3, 112, 0, 10, 7, 0, 0, 10, 112, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 15, 14, 2, 11, 11, 57, 75, 0, 12, 12, 13, 95, 0, 13, 13, 61, 13, 76, 27, 75, 176, 40, 80, 88, 64, 67, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 15, 14, 2, 11, 11, 57, 75, 0, 12, 12, 13, 95, 0, 13, 13, 61, 13, 76, 27, 75, 176, 42, 80, 88, 64, 64, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 0, 12, 0, 13, 12, 13, 99, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 15, 14, 2, 11, 11, 57, 11, 76, 27, 64, 62, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 2, 4, 1, 1, 3, 2, 1, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 0, 12, 0, 13, 12, 13, 99, 9, 1, 0, 0, 11, 94, 15, 14, 2, 11, 11, 60, 11, 76, 89, 89, 89, 64, 28, 0, 0, 0, 37, 0, 37, 34, 32, 29, 27, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 9, 29, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 6, 21, 20, 51, 50, 55, 21, 6, 35, 34, 53, 52, 55, 74, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 139, 129, 115, 54, 37, 62, 78, 202, 158, 123, 4, 210, 123, 254, 155, 234, 253, 225, 124, 254, 141, 124, 253, 208, 252, 254, 129, 81, 98, 96, 15, 81, 29, 157, 123, 90, 0, 0, 2, 0, 123, 254, 142, 4, 81, 4, 86, 0, 34, 0, 42, 0, 120, 64, 18, 7, 1, 1, 0, 8, 1, 4, 1, 16, 1, 2, 4, 17, 1, 3, 2, 4, 74, 75, 176, 40, 80, 88, 64, 39, 0, 6, 0, 0, 1, 6, 0, 101, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 0, 1, 1, 4, 95, 0, 4, 4, 66, 75, 0, 2, 2, 3, 95, 0, 3, 3, 61, 3, 76, 27, 64, 36, 0, 6, 0, 0, 1, 6, 0, 101, 0, 2, 0, 3, 2, 3, 99, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 0, 1, 1, 4, 95, 0, 4, 4, 66, 4, 76, 89, 64, 11, 34, 18, 38, 35, 35, 39, 35, 16, 8, 9, 28, 43, 1, 33, 22, 23, 22, 33, 50, 55, 21, 6, 7, 6, 21, 20, 51, 50, 55, 21, 6, 35, 34, 53, 52, 55, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 4, 81, 252, 253, 14, 27, 91, 1, 5, 161, 188, 116, 126, 106, 115, 54, 37, 62, 78, 202, 117, 8, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 1, 250, 135, 60, 205, 105, 149, 58, 19, 75, 89, 96, 15, 81, 29, 157, 106, 82, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 0, 2, 0, 74, 0, 0, 4, 82, 7, 143, 0, 23, 0, 31, 1, 6, 181, 29, 1, 12, 13, 1, 74, 75, 176, 10, 80, 88, 64, 66, 16, 14, 2, 13, 12, 13, 131, 0, 12, 2, 12, 131, 0, 3, 1, 6, 1, 3, 112, 0, 10, 7, 0, 0, 10, 112, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 15, 1, 11, 11, 57, 11, 76, 27, 75, 176, 42, 80, 88, 64, 68, 16, 14, 2, 13, 12, 13, 131, 0, 12, 2, 12, 131, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 9, 1, 0, 0, 11, 94, 15, 1, 11, 11, 57, 11, 76, 27, 64, 66, 16, 14, 2, 13, 12, 13, 131, 0, 12, 2, 12, 131, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 2, 4, 1, 1, 3, 2, 1, 102, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 9, 1, 0, 0, 11, 94, 15, 1, 11, 11, 60, 11, 76, 89, 89, 64, 32, 24, 24, 0, 0, 24, 31, 24, 31, 28, 27, 26, 25, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 29, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 3, 1, 35, 1, 51, 23, 51, 55, 74, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 149, 254, 255, 218, 254, 255, 124, 241, 2, 242, 123, 4, 210, 123, 254, 155, 234, 253, 225, 124, 254, 141, 124, 253, 208, 252, 254, 129, 7, 143, 254, 191, 1, 65, 202, 202, 0, 0, 3, 0, 123, 255, 231, 4, 81, 6, 68, 0, 7, 0, 28, 0, 36, 0, 138, 64, 14, 5, 1, 0, 1, 15, 1, 4, 3, 16, 1, 5, 4, 3, 74, 75, 176, 40, 80, 88, 64, 44, 0, 0, 1, 6, 1, 0, 6, 126, 0, 7, 0, 3, 4, 7, 3, 102, 9, 2, 2, 1, 1, 58, 75, 0, 8, 8, 6, 95, 0, 6, 6, 65, 75, 0, 4, 4, 5, 95, 0, 5, 5, 66, 5, 76, 27, 64, 41, 9, 2, 2, 1, 0, 1, 131, 0, 0, 6, 0, 131, 0, 7, 0, 3, 4, 7, 3, 102, 0, 8, 8, 6, 95, 0, 6, 6, 65, 75, 0, 4, 4, 5, 95, 0, 5, 5, 66, 5, 76, 89, 64, 23, 0, 0, 34, 32, 30, 29, 27, 25, 19, 17, 14, 12, 9, 8, 0, 7, 0, 7, 17, 17, 10, 9, 22, 43, 1, 1, 35, 1, 51, 23, 51, 55, 19, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 3, 247, 254, 255, 218, 254, 255, 124, 241, 2, 242, 213, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 6, 68, 254, 191, 1, 65, 202, 202, 251, 182, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 2, 0, 74, 255, 219, 4, 57, 7, 143, 0, 7, 0, 37, 0, 155, 64, 18, 5, 1, 1, 0, 20, 1, 6, 4, 33, 1, 7, 8, 8, 1, 3, 7, 4, 74, 75, 176, 42, 80, 88, 64, 49, 0, 0, 1, 0, 131, 10, 2, 2, 1, 4, 1, 131, 0, 5, 6, 9, 6, 5, 9, 126, 0, 9, 0, 8, 7, 9, 8, 101, 0, 6, 6, 4, 95, 0, 4, 4, 62, 75, 0, 7, 7, 3, 95, 0, 3, 3, 63, 3, 76, 27, 64, 47, 0, 0, 1, 0, 131, 10, 2, 2, 1, 4, 1, 131, 0, 5, 6, 9, 6, 5, 9, 126, 0, 4, 0, 6, 5, 4, 6, 104, 0, 9, 0, 8, 7, 9, 8, 101, 0, 7, 7, 3, 95, 0, 3, 3, 66, 3, 76, 89, 64, 25, 0, 0, 37, 36, 35, 34, 32, 30, 26, 24, 22, 21, 19, 17, 11, 9, 0, 7, 0, 7, 17, 17, 11, 9, 22, 43, 1, 1, 51, 1, 35, 39, 35, 7, 1, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 32, 17, 16, 23, 22, 51, 50, 55, 17, 35, 53, 33, 1, 43, 1, 0, 219, 1, 0, 123, 241, 3, 241, 2, 147, 182, 201, 254, 216, 164, 164, 157, 158, 1, 43, 173, 196, 123, 29, 114, 99, 254, 107, 115, 115, 204, 78, 84, 172, 1, 114, 6, 78, 1, 65, 254, 191, 202, 202, 249, 252, 111, 206, 205, 1, 117, 1, 117, 199, 199, 62, 254, 181, 216, 54, 253, 110, 254, 205, 166, 170, 32, 1, 155, 123, 0, 0, 0, 3, 0, 111, 254, 92, 4, 139, 6, 68, 0, 7, 0, 53, 0, 66, 1, 77, 64, 16, 5, 1, 1, 0, 66, 54, 35, 3, 11, 9, 19, 1, 3, 5, 3, 74, 75, 176, 12, 80, 88, 64, 66, 12, 2, 2, 1, 0, 7, 0, 1, 7, 126, 0, 4, 6, 5, 6, 4, 5, 126, 0, 11, 0, 6, 4, 11, 6, 103, 0, 0, 0, 58, 75, 10, 13, 2, 9, 9, 7, 95, 0, 7, 7, 65, 75, 10, 13, 2, 9, 9, 8, 93, 0, 8, 8, 59, 75, 0, 5, 5, 3, 95, 0, 3, 3, 67, 3, 76, 27, 75, 176, 14, 80, 88, 64, 55, 12, 2, 2, 1, 0, 7, 0, 1, 7, 126, 0, 4, 6, 5, 6, 4, 5, 126, 0, 11, 0, 6, 4, 11, 6, 103, 0, 0, 0, 58, 75, 10, 13, 2, 9, 9, 7, 95, 8, 1, 7, 7, 65, 75, 0, 5, 5, 3, 95, 0, 3, 3, 67, 3, 76, 27, 75, 176, 40, 80, 88, 64, 66, 12, 2, 2, 1, 0, 7, 0, 1, 7, 126, 0, 4, 6, 5, 6, 4, 5, 126, 0, 11, 0, 6, 4, 11, 6, 103, 0, 0, 0, 58, 75, 10, 13, 2, 9, 9, 7, 95, 0, 7, 7, 65, 75, 10, 13, 2, 9, 9, 8, 93, 0, 8, 8, 59, 75, 0, 5, 5, 3, 95, 0, 3, 3, 67, 3, 76, 27, 64, 63, 0, 0, 1, 0, 131, 12, 2, 2, 1, 7, 1, 131, 0, 4, 6, 5, 6, 4, 5, 126, 0, 11, 0, 6, 4, 11, 6, 103, 10, 13, 2, 9, 9, 7, 95, 0, 7, 7, 65, 75, 10, 13, 2, 9, 9, 8, 93, 0, 8, 8, 59, 75, 0, 5, 5, 3, 95, 0, 3, 3, 67, 3, 76, 89, 89, 89, 64, 33, 8, 8, 0, 0, 65, 63, 58, 56, 8, 53, 8, 53, 52, 51, 49, 47, 40, 38, 28, 26, 21, 20, 17, 15, 0, 7, 0, 7, 17, 17, 14, 9, 22, 43, 1, 1, 51, 1, 35, 39, 35, 7, 1, 17, 20, 14, 4, 35, 34, 38, 39, 53, 51, 23, 30, 3, 51, 50, 62, 4, 53, 53, 6, 7, 6, 35, 34, 39, 38, 53, 52, 54, 55, 54, 51, 50, 22, 23, 33, 21, 5, 38, 38, 35, 34, 7, 6, 6, 21, 16, 51, 50, 55, 1, 76, 1, 0, 219, 1, 0, 123, 241, 3, 241, 2, 77, 5, 28, 58, 105, 160, 116, 86, 203, 102, 123, 26, 21, 57, 64, 68, 34, 67, 93, 60, 33, 16, 3, 76, 69, 103, 118, 165, 102, 102, 67, 68, 134, 239, 67, 106, 54, 1, 61, 254, 195, 69, 106, 38, 165, 74, 37, 36, 214, 164, 147, 5, 3, 1, 65, 254, 191, 202, 202, 254, 192, 252, 216, 70, 139, 128, 110, 81, 47, 27, 40, 247, 136, 10, 20, 15, 9, 31, 55, 76, 91, 102, 54, 199, 113, 54, 80, 144, 142, 197, 123, 193, 82, 164, 14, 10, 123, 24, 11, 12, 107, 54, 142, 100, 254, 179, 234, 0, 0, 0, 0, 2, 0, 74, 255, 219, 4, 57, 7, 143, 0, 15, 0, 45, 0, 136, 64, 14, 28, 1, 7, 5, 41, 1, 8, 9, 16, 1, 4, 8, 3, 74, 75, 176, 42, 80, 88, 64, 46, 0, 1, 0, 3, 5, 1, 3, 103, 2, 1, 0, 0, 6, 10, 0, 6, 101, 0, 10, 0, 9, 8, 10, 9, 101, 0, 7, 7, 5, 95, 0, 5, 5, 62, 75, 0, 8, 8, 4, 95, 0, 4, 4, 63, 4, 76, 27, 64, 44, 0, 1, 0, 3, 5, 1, 3, 103, 0, 5, 0, 7, 6, 5, 7, 104, 2, 1, 0, 0, 6, 10, 0, 6, 101, 0, 10, 0, 9, 8, 10, 9, 101, 0, 8, 8, 4, 95, 0, 4, 4, 66, 4, 76, 89, 64, 16, 45, 44, 43, 42, 36, 34, 18, 38, 38, 35, 17, 33, 16, 11, 9, 29, 43, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 1, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 32, 17, 16, 23, 22, 51, 50, 55, 17, 35, 53, 33, 1, 64, 123, 48, 174, 175, 48, 123, 23, 26, 91, 201, 153, 89, 55, 28, 11, 2, 235, 182, 201, 254, 216, 164, 164, 157, 158, 1, 43, 173, 196, 123, 29, 114, 99, 254, 107, 115, 115, 204, 78, 84, 172, 1, 114, 7, 143, 148, 148, 89, 46, 155, 81, 49, 72, 29, 248, 246, 111, 206, 205, 1, 117, 1, 117, 199, 199, 62, 254, 181, 216, 54, 253, 110, 254, 205, 166, 170, 32, 1, 155, 123, 0, 3, 0, 111, 254, 92, 4, 139, 6, 43, 0, 15, 0, 61, 0, 74, 1, 69, 64, 12, 74, 62, 43, 3, 12, 10, 27, 1, 4, 6, 2, 74, 75, 176, 12, 80, 88, 64, 67, 0, 5, 7, 6, 7, 5, 6, 126, 0, 12, 0, 7, 5, 12, 7, 103, 2, 1, 0, 0, 58, 75, 0, 3, 3, 1, 95, 0, 1, 1, 56, 75, 11, 13, 2, 10, 10, 8, 95, 0, 8, 8, 65, 75, 11, 13, 2, 10, 10, 9, 93, 0, 9, 9, 59, 75, 0, 6, 6, 4, 95, 0, 4, 4, 67, 4, 76, 27, 75, 176, 14, 80, 88, 64, 56, 0, 5, 7, 6, 7, 5, 6, 126, 0, 12, 0, 7, 5, 12, 7, 103, 2, 1, 0, 0, 58, 75, 0, 3, 3, 1, 95, 0, 1, 1, 56, 75, 11, 13, 2, 10, 10, 8, 95, 9, 1, 8, 8, 65, 75, 0, 6, 6, 4, 95, 0, 4, 4, 67, 4, 76, 27, 75, 176, 21, 80, 88, 64, 67, 0, 5, 7, 6, 7, 5, 6, 126, 0, 12, 0, 7, 5, 12, 7, 103, 2, 1, 0, 0, 58, 75, 0, 3, 3, 1, 95, 0, 1, 1, 56, 75, 11, 13, 2, 10, 10, 8, 95, 0, 8, 8, 65, 75, 11, 13, 2, 10, 10, 9, 93, 0, 9, 9, 59, 75, 0, 6, 6, 4, 95, 0, 4, 4, 67, 4, 76, 27, 64, 65, 0, 5, 7, 6, 7, 5, 6, 126, 0, 1, 0, 3, 8, 1, 3, 103, 0, 12, 0, 7, 5, 12, 7, 103, 2, 1, 0, 0, 58, 75, 11, 13, 2, 10, 10, 8, 95, 0, 8, 8, 65, 75, 11, 13, 2, 10, 10, 9, 93, 0, 9, 9, 59, 75, 0, 6, 6, 4, 95, 0, 4, 4, 67, 4, 76, 89, 89, 89, 64, 24, 16, 16, 73, 71, 66, 64, 16, 61, 16, 61, 60, 59, 39, 42, 37, 19, 44, 35, 17, 33, 16, 14, 9, 29, 43, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 1, 17, 20, 14, 4, 35, 34, 38, 39, 53, 51, 23, 30, 3, 51, 50, 62, 4, 53, 53, 6, 7, 6, 35, 34, 39, 38, 53, 52, 54, 55, 54, 51, 50, 22, 23, 33, 21, 5, 38, 38, 35, 34, 7, 6, 6, 21, 16, 51, 50, 55, 1, 61, 123, 48, 174, 175, 48, 123, 23, 26, 91, 202, 152, 89, 55, 28, 11, 2, 201, 5, 28, 58, 105, 160, 116, 86, 203, 102, 123, 26, 21, 57, 64, 68, 34, 67, 93, 60, 33, 16, 3, 76, 69, 103, 118, 165, 102, 102, 67, 68, 134, 239, 67, 106, 54, 1, 61, 254, 195, 69, 106, 38, 165, 74, 37, 36, 214, 164, 147, 6, 43, 148, 148, 89, 46, 155, 81, 49, 72, 29, 253, 211, 252, 216, 70, 139, 128, 110, 81, 47, 27, 40, 247, 136, 10, 20, 15, 9, 31, 55, 76, 91, 102, 54, 199, 113, 54, 80, 144, 142, 197, 123, 193, 82, 164, 14, 10, 123, 24, 11, 12, 107, 54, 142, 100, 254, 179, 234, 0, 0, 0, 2, 0, 74, 255, 219, 4, 57, 7, 49, 0, 3, 0, 33, 0, 144, 64, 14, 16, 1, 5, 3, 29, 1, 6, 7, 4, 1, 2, 6, 3, 74, 75, 176, 42, 80, 88, 64, 46, 0, 4, 5, 8, 5, 4, 8, 126, 0, 0, 9, 1, 1, 3, 0, 1, 101, 0, 8, 0, 7, 6, 8, 7, 101, 0, 5, 5, 3, 95, 0, 3, 3, 62, 75, 0, 6, 6, 2, 95, 0, 2, 2, 63, 2, 76, 27, 64, 44, 0, 4, 5, 8, 5, 4, 8, 126, 0, 0, 9, 1, 1, 3, 0, 1, 101, 0, 3, 0, 5, 4, 3, 5, 103, 0, 8, 0, 7, 6, 8, 7, 101, 0, 6, 6, 2, 95, 0, 2, 2, 66, 2, 76, 89, 64, 24, 0, 0, 33, 32, 31, 30, 28, 26, 22, 20, 18, 17, 15, 13, 7, 5, 0, 3, 0, 3, 17, 10, 9, 21, 43, 1, 53, 51, 21, 1, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 32, 17, 16, 23, 22, 51, 50, 55, 17, 35, 53, 33, 2, 54, 197, 1, 62, 182, 201, 254, 216, 164, 164, 157, 158, 1, 43, 173, 196, 123, 29, 114, 99, 254, 107, 115, 115, 204, 78, 84, 172, 1, 114, 6, 108, 197, 197, 249, 222, 111, 206, 205, 1, 117, 1, 117, 199, 199, 62, 254, 181, 216, 54, 253, 110, 254, 205, 166, 170, 32, 1, 155, 123, 0, 0, 3, 0, 111, 254, 92, 4, 139, 5, 220, 0, 3, 0, 49, 0, 62, 1, 57, 64, 12, 62, 50, 31, 3, 10, 8, 15, 1, 2, 4, 2, 74, 75, 176, 12, 80, 88, 64, 62, 0, 3, 5, 4, 5, 3, 4, 126, 0, 10, 0, 5, 3, 10, 5, 103, 11, 1, 1, 1, 0, 93, 0, 0, 0, 56, 75, 9, 12, 2, 8, 8, 6, 95, 0, 6, 6, 65, 75, 9, 12, 2, 8, 8, 7, 93, 0, 7, 7, 59, 75, 0, 4, 4, 2, 95, 0, 2, 2, 67, 2, 76, 27, 75, 176, 14, 80, 88, 64, 51, 0, 3, 5, 4, 5, 3, 4, 126, 0, 10, 0, 5, 3, 10, 5, 103, 11, 1, 1, 1, 0, 93, 0, 0, 0, 56, 75, 9, 12, 2, 8, 8, 6, 95, 7, 1, 6, 6, 65, 75, 0, 4, 4, 2, 95, 0, 2, 2, 67, 2, 76, 27, 75, 176, 42, 80, 88, 64, 62, 0, 3, 5, 4, 5, 3, 4, 126, 0, 10, 0, 5, 3, 10, 5, 103, 11, 1, 1, 1, 0, 93, 0, 0, 0, 56, 75, 9, 12, 2, 8, 8, 6, 95, 0, 6, 6, 65, 75, 9, 12, 2, 8, 8, 7, 93, 0, 7, 7, 59, 75, 0, 4, 4, 2, 95, 0, 2, 2, 67, 2, 76, 27, 64, 60, 0, 3, 5, 4, 5, 3, 4, 126, 0, 0, 11, 1, 1, 6, 0, 1, 101, 0, 10, 0, 5, 3, 10, 5, 103, 9, 12, 2, 8, 8, 6, 95, 0, 6, 6, 65, 75, 9, 12, 2, 8, 8, 7, 93, 0, 7, 7, 59, 75, 0, 4, 4, 2, 95, 0, 2, 2, 67, 2, 76, 89, 89, 89, 64, 32, 4, 4, 0, 0, 61, 59, 54, 52, 4, 49, 4, 49, 48, 47, 45, 43, 36, 34, 24, 22, 17, 16, 13, 11, 0, 3, 0, 3, 17, 13, 9, 21, 43, 1, 53, 51, 21, 1, 17, 20, 14, 4, 35, 34, 38, 39, 53, 51, 23, 30, 3, 51, 50, 62, 4, 53, 53, 6, 7, 6, 35, 34, 39, 38, 53, 52, 54, 55, 54, 51, 50, 22, 23, 33, 21, 5, 38, 38, 35, 34, 7, 6, 6, 21, 16, 51, 50, 55, 2, 49, 197, 1, 30, 5, 28, 58, 105, 160, 116, 86, 203, 102, 123, 26, 21, 57, 64, 68, 34, 67, 93, 60, 33, 16, 3, 76, 69, 103, 118, 165, 102, 102, 67, 68, 134, 239, 67, 106, 54, 1, 61, 254, 195, 69, 106, 38, 165, 74, 37, 36, 214, 164, 147, 5, 23, 197, 197, 254, 172, 252, 216, 70, 139, 128, 110, 81, 47, 27, 40, 247, 136, 10, 20, 15, 9, 31, 55, 76, 91, 102, 54, 199, 113, 54, 80, 144, 142, 197, 123, 193, 82, 164, 14, 10, 123, 24, 11, 12, 107, 54, 142, 100, 254, 179, 234, 0, 0, 0, 0, 2, 0, 74, 254, 80, 4, 57, 5, 238, 0, 15, 0, 45, 0, 224, 64, 23, 28, 1, 6, 4, 41, 1, 7, 8, 16, 1, 3, 7, 7, 1, 2, 0, 1, 0, 1, 2, 0, 5, 74, 75, 176, 10, 80, 88, 64, 54, 0, 5, 6, 9, 6, 5, 9, 126, 0, 1, 3, 0, 0, 1, 112, 0, 9, 0, 8, 7, 9, 8, 101, 0, 6, 6, 4, 95, 0, 4, 4, 62, 75, 0, 7, 7, 3, 95, 0, 3, 3, 63, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 75, 176, 42, 80, 88, 64, 55, 0, 5, 6, 9, 6, 5, 9, 126, 0, 1, 3, 0, 3, 1, 0, 126, 0, 9, 0, 8, 7, 9, 8, 101, 0, 6, 6, 4, 95, 0, 4, 4, 62, 75, 0, 7, 7, 3, 95, 0, 3, 3, 63, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 64, 53, 0, 5, 6, 9, 6, 5, 9, 126, 0, 1, 3, 0, 3, 1, 0, 126, 0, 4, 0, 6, 5, 4, 6, 103, 0, 9, 0, 8, 7, 9, 8, 101, 0, 7, 7, 3, 95, 0, 3, 3, 66, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 89, 89, 64, 14, 45, 44, 18, 36, 34, 18, 38, 34, 36, 20, 34, 10, 9, 29, 43, 1, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 1, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 32, 17, 16, 23, 22, 51, 50, 55, 17, 35, 53, 33, 2, 16, 57, 40, 109, 157, 134, 66, 93, 218, 58, 1, 231, 182, 201, 254, 216, 164, 164, 157, 158, 1, 43, 173, 196, 123, 29, 114, 99, 254, 107, 115, 115, 204, 78, 84, 172, 1, 114, 254, 91, 85, 9, 67, 74, 16, 77, 3, 29, 42, 95, 152, 1, 250, 111, 206, 205, 1, 117, 1, 117, 199, 199, 62, 254, 181, 216, 54, 253, 110, 254, 205, 166, 170, 32, 1, 155, 123, 0, 3, 0, 111, 254, 92, 4, 139, 6, 211, 0, 9, 0, 55, 0, 68, 0, 221, 64, 19, 68, 56, 37, 3, 9, 7, 21, 1, 1, 3, 2, 74, 5, 3, 1, 0, 4, 0, 72, 75, 176, 12, 80, 88, 64, 56, 0, 0, 5, 0, 131, 0, 2, 4, 3, 4, 2, 3, 126, 0, 9, 0, 4, 2, 9, 4, 103, 8, 10, 2, 7, 7, 5, 95, 0, 5, 5, 65, 75, 8, 10, 2, 7, 7, 6, 93, 0, 6, 6, 59, 75, 0, 3, 3, 1, 95, 0, 1, 1, 67, 1, 76, 27, 75, 176, 14, 80, 88, 64, 45, 0, 0, 5, 0, 131, 0, 2, 4, 3, 4, 2, 3, 126, 0, 9, 0, 4, 2, 9, 4, 103, 8, 10, 2, 7, 7, 5, 95, 6, 1, 5, 5, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 67, 1, 76, 27, 64, 56, 0, 0, 5, 0, 131, 0, 2, 4, 3, 4, 2, 3, 126, 0, 9, 0, 4, 2, 9, 4, 103, 8, 10, 2, 7, 7, 5, 95, 0, 5, 5, 65, 75, 8, 10, 2, 7, 7, 6, 93, 0, 6, 6, 59, 75, 0, 3, 3, 1, 95, 0, 1, 1, 67, 1, 76, 89, 89, 64, 20, 10, 10, 67, 65, 60, 58, 10, 55, 10, 55, 18, 39, 42, 37, 19, 42, 22, 11, 9, 27, 43, 1, 21, 6, 21, 21, 51, 21, 35, 53, 18, 1, 17, 20, 14, 4, 35, 34, 38, 39, 53, 51, 23, 30, 3, 51, 50, 62, 4, 53, 53, 6, 7, 6, 35, 34, 39, 38, 53, 52, 54, 55, 54, 51, 50, 22, 23, 33, 21, 5, 38, 38, 35, 34, 7, 6, 6, 21, 16, 51, 50, 55, 2, 251, 77, 77, 198, 1, 1, 222, 5, 28, 58, 105, 160, 116, 86, 203, 102, 123, 26, 21, 57, 64, 68, 34, 67, 93, 60, 33, 16, 3, 76, 69, 103, 118, 165, 102, 102, 67, 68, 134, 239, 67, 106, 54, 1, 61, 254, 195, 69, 106, 38, 165, 74, 37, 36, 214, 164, 147, 6, 211, 59, 21, 160, 17, 197, 171, 1, 6, 253, 5, 252, 216, 70, 139, 128, 110, 81, 47, 27, 40, 247, 136, 10, 20, 15, 9, 31, 55, 76, 91, 102, 54, 199, 113, 54, 80, 144, 142, 197, 123, 193, 82, 164, 14, 10, 123, 24, 11, 12, 107, 54, 142, 100, 254, 179, 234, 0, 2, 0, 62, 0, 0, 4, 144, 7, 143, 0, 27, 0, 35, 0, 155, 181, 33, 1, 15, 14, 1, 74, 75, 176, 42, 80, 88, 64, 50, 0, 14, 15, 14, 131, 18, 16, 2, 15, 4, 15, 131, 0, 6, 17, 1, 13, 0, 6, 13, 102, 9, 7, 5, 3, 3, 3, 4, 93, 8, 1, 4, 4, 56, 75, 12, 10, 2, 3, 0, 0, 1, 93, 11, 1, 1, 1, 57, 1, 76, 27, 64, 48, 0, 14, 15, 14, 131, 18, 16, 2, 15, 4, 15, 131, 8, 1, 4, 9, 7, 5, 3, 3, 6, 4, 3, 101, 0, 6, 17, 1, 13, 0, 6, 13, 102, 12, 10, 2, 3, 0, 0, 1, 93, 11, 1, 1, 1, 60, 1, 76, 89, 64, 36, 28, 28, 0, 0, 28, 35, 28, 35, 32, 31, 30, 29, 0, 27, 0, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 19, 9, 29, 43, 1, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 1, 51, 1, 35, 39, 35, 7, 1, 114, 99, 254, 105, 111, 111, 1, 151, 99, 1, 233, 99, 1, 152, 111, 111, 254, 104, 99, 253, 158, 1, 0, 219, 1, 0, 123, 241, 3, 241, 2, 191, 253, 188, 123, 123, 4, 210, 123, 123, 253, 238, 2, 18, 123, 123, 251, 46, 123, 123, 2, 68, 3, 143, 1, 65, 254, 191, 202, 202, 0, 2, 0, 69, 0, 0, 4, 143, 7, 207, 0, 7, 0, 35, 0, 158, 64, 11, 5, 1, 1, 0, 32, 15, 2, 3, 10, 2, 74, 75, 176, 42, 80, 88, 64, 48, 0, 0, 1, 0, 131, 13, 2, 2, 1, 5, 1, 131, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 0, 10, 10, 6, 95, 0, 6, 6, 65, 75, 11, 9, 7, 3, 3, 3, 8, 93, 14, 12, 2, 8, 8, 57, 8, 76, 27, 64, 48, 0, 0, 1, 0, 131, 13, 2, 2, 1, 5, 1, 131, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 0, 10, 10, 6, 95, 0, 6, 6, 65, 75, 11, 9, 7, 3, 3, 3, 8, 93, 14, 12, 2, 8, 8, 60, 8, 76, 89, 64, 35, 8, 8, 0, 0, 8, 35, 8, 35, 34, 33, 31, 29, 27, 26, 25, 24, 23, 22, 20, 18, 14, 13, 12, 11, 10, 9, 0, 7, 0, 7, 17, 17, 15, 9, 22, 43, 19, 1, 51, 1, 35, 39, 35, 7, 1, 53, 51, 17, 35, 53, 33, 17, 54, 55, 54, 51, 32, 17, 17, 51, 21, 33, 53, 51, 17, 16, 35, 34, 3, 17, 51, 21, 254, 1, 0, 219, 1, 0, 123, 241, 3, 241, 254, 204, 123, 123, 1, 65, 69, 68, 96, 119, 1, 45, 124, 254, 92, 99, 163, 150, 143, 111, 6, 142, 1, 65, 254, 191, 202, 202, 249, 114, 123, 5, 53, 123, 253, 65, 105, 53, 76, 254, 124, 253, 169, 123, 123, 2, 70, 1, 1, 254, 254, 253, 187, 123, 0, 0, 0, 2, 0, 37, 0, 0, 4, 168, 5, 200, 0, 3, 0, 39, 0, 150, 75, 176, 42, 80, 88, 64, 50, 12, 8, 2, 4, 13, 3, 2, 1, 0, 4, 1, 101, 0, 0, 0, 17, 2, 0, 17, 101, 11, 9, 7, 3, 5, 5, 6, 93, 10, 1, 6, 6, 56, 75, 18, 16, 14, 3, 2, 2, 15, 93, 20, 19, 2, 15, 15, 57, 15, 76, 27, 64, 48, 10, 1, 6, 11, 9, 7, 3, 5, 4, 6, 5, 101, 12, 8, 2, 4, 13, 3, 2, 1, 0, 4, 1, 101, 0, 0, 0, 17, 2, 0, 17, 101, 18, 16, 14, 3, 2, 2, 15, 93, 20, 19, 2, 15, 15, 60, 15, 76, 89, 64, 38, 4, 4, 4, 39, 4, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 18, 17, 16, 21, 9, 29, 43, 1, 33, 17, 33, 1, 53, 51, 17, 35, 53, 51, 53, 35, 53, 33, 21, 35, 21, 33, 53, 35, 53, 33, 21, 35, 21, 51, 21, 35, 17, 51, 21, 33, 53, 51, 17, 33, 17, 51, 21, 1, 114, 1, 233, 254, 23, 254, 204, 111, 136, 136, 111, 1, 151, 99, 1, 233, 99, 1, 152, 111, 135, 135, 111, 254, 104, 99, 254, 23, 99, 3, 59, 1, 3, 251, 194, 123, 3, 195, 98, 173, 123, 123, 172, 172, 123, 123, 173, 98, 252, 61, 123, 123, 2, 68, 253, 188, 123, 0, 1, 0, 69, 0, 0, 4, 143, 6, 43, 0, 35, 0, 134, 182, 17, 0, 2, 1, 4, 1, 74, 75, 176, 42, 80, 88, 64, 45, 12, 1, 9, 13, 1, 8, 0, 9, 8, 101, 0, 10, 10, 11, 93, 0, 11, 11, 58, 75, 0, 4, 4, 0, 95, 0, 0, 0, 65, 75, 7, 5, 3, 3, 1, 1, 2, 93, 6, 1, 2, 2, 57, 2, 76, 27, 64, 45, 12, 1, 9, 13, 1, 8, 0, 9, 8, 101, 0, 10, 10, 11, 93, 0, 11, 11, 58, 75, 0, 4, 4, 0, 95, 0, 0, 0, 65, 75, 7, 5, 3, 3, 1, 1, 2, 93, 6, 1, 2, 2, 60, 2, 76, 89, 64, 22, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 17, 17, 17, 18, 34, 17, 17, 18, 35, 14, 9, 29, 43, 1, 54, 55, 54, 51, 32, 17, 17, 51, 21, 33, 53, 51, 17, 16, 35, 34, 3, 17, 51, 21, 33, 53, 51, 17, 35, 53, 51, 53, 35, 53, 33, 21, 33, 21, 33, 1, 134, 69, 68, 96, 119, 1, 45, 124, 254, 92, 99, 163, 150, 143, 111, 254, 80, 123, 123, 123, 123, 1, 65, 1, 40, 254, 216, 3, 108, 105, 53, 76, 254, 124, 253, 169, 123, 123, 2, 66, 1, 5, 254, 254, 253, 187, 123, 123, 4, 87, 98, 124, 123, 247, 98, 0, 2, 0, 160, 0, 0, 4, 44, 7, 77, 0, 11, 0, 35, 0, 128, 75, 176, 42, 80, 88, 64, 43, 8, 1, 6, 0, 10, 9, 6, 10, 103, 0, 7, 13, 11, 2, 9, 2, 7, 9, 104, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 12, 1, 5, 5, 57, 5, 76, 27, 64, 41, 8, 1, 6, 0, 10, 9, 6, 10, 103, 0, 7, 13, 11, 2, 9, 2, 7, 9, 104, 0, 2, 3, 1, 1, 0, 2, 1, 101, 4, 1, 0, 0, 5, 93, 12, 1, 5, 5, 60, 5, 76, 89, 64, 30, 12, 12, 0, 0, 12, 35, 12, 35, 34, 32, 29, 27, 24, 23, 22, 20, 17, 15, 0, 11, 0, 11, 17, 17, 17, 17, 17, 14, 9, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 1, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 252, 237, 6, 25, 45, 109, 72, 63, 60, 62, 34, 68, 11, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 123, 4, 210, 123, 123, 251, 46, 123, 6, 98, 95, 50, 90, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 0, 2, 0, 148, 0, 0, 4, 81, 5, 248, 0, 9, 0, 33, 0, 129, 75, 176, 42, 80, 88, 64, 44, 0, 6, 12, 10, 2, 8, 2, 6, 8, 104, 0, 9, 9, 5, 95, 7, 1, 5, 5, 62, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 11, 1, 4, 4, 57, 4, 76, 27, 64, 42, 7, 1, 5, 0, 9, 8, 5, 9, 103, 0, 6, 12, 10, 2, 8, 2, 6, 8, 104, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 11, 1, 4, 4, 60, 4, 76, 89, 64, 29, 10, 10, 0, 0, 10, 33, 10, 33, 32, 30, 27, 25, 22, 21, 20, 18, 15, 13, 0, 9, 0, 9, 17, 17, 17, 17, 13, 9, 24, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 1, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 148, 1, 134, 254, 122, 2, 75, 1, 114, 252, 166, 6, 25, 45, 109, 72, 63, 60, 62, 34, 68, 11, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 123, 3, 71, 124, 252, 61, 123, 5, 13, 94, 50, 91, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 0, 2, 0, 160, 0, 0, 4, 44, 6, 232, 0, 11, 0, 15, 0, 100, 75, 176, 42, 80, 88, 64, 33, 0, 6, 9, 1, 7, 2, 6, 7, 101, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 8, 1, 5, 5, 57, 5, 76, 27, 64, 31, 0, 6, 9, 1, 7, 2, 6, 7, 101, 0, 2, 3, 1, 1, 0, 2, 1, 101, 4, 1, 0, 0, 5, 93, 8, 1, 5, 5, 60, 5, 76, 89, 64, 22, 12, 12, 0, 0, 12, 15, 12, 15, 14, 13, 0, 11, 0, 11, 17, 17, 17, 17, 17, 10, 9, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 1, 53, 33, 21, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 252, 225, 2, 179, 123, 4, 210, 123, 123, 251, 46, 123, 6, 108, 124, 124, 0, 0, 2, 0, 148, 0, 0, 4, 81, 5, 147, 0, 9, 0, 13, 0, 99, 75, 176, 42, 80, 88, 64, 32, 0, 5, 8, 1, 6, 2, 5, 6, 101, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 57, 4, 76, 27, 64, 32, 0, 5, 8, 1, 6, 2, 5, 6, 101, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 60, 4, 76, 89, 64, 21, 10, 10, 0, 0, 10, 13, 10, 13, 12, 11, 0, 9, 0, 9, 17, 17, 17, 17, 9, 9, 24, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 1, 53, 33, 21, 148, 1, 134, 254, 122, 2, 75, 1, 114, 252, 156, 2, 179, 123, 3, 71, 124, 252, 61, 123, 5, 23, 124, 124, 0, 0, 0, 0, 2, 0, 160, 0, 0, 4, 44, 7, 112, 0, 11, 0, 27, 0, 110, 75, 176, 42, 80, 88, 64, 38, 8, 1, 6, 7, 6, 131, 0, 7, 0, 9, 2, 7, 9, 103, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 10, 1, 5, 5, 57, 5, 76, 27, 64, 36, 8, 1, 6, 7, 6, 131, 0, 7, 0, 9, 2, 7, 9, 103, 0, 2, 3, 1, 1, 0, 2, 1, 102, 4, 1, 0, 0, 5, 93, 10, 1, 5, 5, 60, 5, 76, 89, 64, 22, 0, 0, 23, 21, 18, 17, 16, 14, 13, 12, 0, 11, 0, 11, 17, 17, 17, 17, 17, 11, 9, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 252, 225, 123, 48, 174, 175, 48, 123, 23, 26, 91, 202, 152, 89, 55, 28, 11, 123, 4, 210, 123, 123, 251, 46, 123, 7, 112, 148, 148, 89, 46, 155, 81, 49, 72, 29, 0, 0, 0, 0, 2, 0, 148, 0, 0, 4, 81, 6, 43, 0, 9, 0, 25, 0, 157, 75, 176, 21, 80, 88, 64, 39, 7, 1, 5, 5, 58, 75, 0, 8, 8, 6, 95, 0, 6, 6, 56, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 9, 1, 4, 4, 57, 4, 76, 27, 75, 176, 42, 80, 88, 64, 37, 0, 6, 0, 8, 2, 6, 8, 103, 7, 1, 5, 5, 58, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 9, 1, 4, 4, 57, 4, 76, 27, 64, 37, 0, 6, 0, 8, 2, 6, 8, 103, 7, 1, 5, 5, 58, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 9, 1, 4, 4, 60, 4, 76, 89, 89, 64, 21, 0, 0, 21, 19, 16, 15, 14, 12, 11, 10, 0, 9, 0, 9, 17, 17, 17, 17, 10, 9, 24, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 148, 1, 134, 254, 122, 2, 75, 1, 114, 252, 198, 123, 48, 174, 175, 48, 123, 22, 27, 91, 201, 153, 89, 55, 28, 11, 123, 3, 71, 124, 252, 61, 123, 6, 43, 148, 148, 89, 46, 155, 81, 49, 72, 29, 0, 0, 1, 0, 160, 254, 142, 4, 44, 5, 200, 0, 25, 0, 149, 64, 10, 18, 1, 6, 5, 19, 1, 7, 6, 2, 74, 75, 176, 40, 80, 88, 64, 35, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 9, 8, 2, 5, 5, 57, 75, 0, 6, 6, 7, 95, 0, 7, 7, 61, 7, 76, 27, 75, 176, 42, 80, 88, 64, 32, 0, 6, 0, 7, 6, 7, 99, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 9, 8, 2, 5, 5, 57, 5, 76, 27, 64, 30, 0, 2, 3, 1, 1, 0, 2, 1, 101, 0, 6, 0, 7, 6, 7, 99, 4, 1, 0, 0, 5, 93, 9, 8, 2, 5, 5, 60, 5, 76, 89, 89, 64, 17, 0, 0, 0, 25, 0, 25, 35, 35, 17, 17, 17, 17, 17, 17, 10, 9, 28, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 35, 6, 21, 20, 51, 50, 55, 21, 6, 35, 34, 53, 52, 55, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 176, 129, 115, 54, 37, 62, 77, 203, 158, 123, 4, 210, 123, 123, 251, 46, 123, 81, 98, 96, 15, 81, 29, 157, 123, 90, 0, 0, 0, 2, 0, 148, 254, 142, 4, 81, 6, 43, 0, 23, 0, 27, 0, 188, 64, 10, 16, 1, 5, 4, 17, 1, 6, 5, 2, 74, 75, 176, 40, 80, 88, 64, 45, 11, 1, 9, 9, 8, 93, 0, 8, 8, 58, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 10, 7, 2, 4, 4, 57, 75, 0, 5, 5, 6, 95, 0, 6, 6, 61, 6, 76, 27, 75, 176, 42, 80, 88, 64, 42, 0, 5, 0, 6, 5, 6, 99, 11, 1, 9, 9, 8, 93, 0, 8, 8, 58, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 10, 7, 2, 4, 4, 57, 4, 76, 27, 64, 42, 0, 5, 0, 6, 5, 6, 99, 11, 1, 9, 9, 8, 93, 0, 8, 8, 58, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 10, 7, 2, 4, 4, 60, 4, 76, 89, 89, 64, 24, 24, 24, 0, 0, 24, 27, 24, 27, 26, 25, 0, 23, 0, 23, 35, 35, 17, 17, 17, 17, 17, 12, 9, 27, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 35, 6, 21, 20, 51, 50, 55, 21, 6, 35, 34, 53, 52, 55, 1, 53, 51, 21, 148, 1, 134, 254, 122, 2, 75, 1, 114, 195, 129, 115, 54, 37, 62, 78, 202, 158, 254, 237, 222, 123, 3, 71, 124, 252, 61, 123, 81, 98, 96, 15, 81, 29, 157, 123, 90, 5, 52, 247, 247, 0, 0, 0, 0, 2, 0, 160, 0, 0, 4, 44, 7, 99, 0, 11, 0, 15, 0, 100, 75, 176, 42, 80, 88, 64, 33, 0, 6, 9, 1, 7, 2, 6, 7, 101, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 8, 1, 5, 5, 57, 5, 76, 27, 64, 31, 0, 6, 9, 1, 7, 2, 6, 7, 101, 0, 2, 3, 1, 1, 0, 2, 1, 101, 4, 1, 0, 0, 5, 93, 8, 1, 5, 5, 60, 5, 76, 89, 64, 22, 12, 12, 0, 0, 12, 15, 12, 15, 14, 13, 0, 11, 0, 11, 17, 17, 17, 17, 17, 10, 9, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 1, 53, 51, 21, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 253, 193, 242, 123, 4, 210, 123, 123, 251, 46, 123, 6, 108, 247, 247, 0, 0, 0, 1, 0, 148, 0, 0, 4, 81, 4, 62, 0, 9, 0, 73, 75, 176, 42, 80, 88, 64, 23, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 5, 1, 4, 4, 57, 4, 76, 27, 64, 23, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 5, 1, 4, 4, 60, 4, 76, 89, 64, 13, 0, 0, 0, 9, 0, 9, 17, 17, 17, 17, 6, 9, 24, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 148, 1, 134, 254, 122, 2, 75, 1, 114, 123, 3, 71, 124, 252, 61, 123, 0, 0, 0, 0, 2, 0, 45, 255, 219, 4, 107, 5, 200, 0, 11, 0, 29, 0, 183, 181, 12, 1, 10, 5, 1, 74, 75, 176, 23, 80, 88, 64, 43, 0, 6, 1, 0, 7, 6, 112, 8, 3, 2, 1, 1, 2, 93, 9, 1, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 11, 1, 5, 5, 57, 75, 0, 7, 7, 10, 96, 0, 10, 10, 63, 10, 76, 27, 75, 176, 42, 80, 88, 64, 44, 0, 6, 1, 0, 1, 6, 0, 126, 8, 3, 2, 1, 1, 2, 93, 9, 1, 2, 2, 56, 75, 4, 1, 0, 0, 5, 93, 11, 1, 5, 5, 57, 75, 0, 7, 7, 10, 96, 0, 10, 10, 63, 10, 76, 27, 64, 42, 0, 6, 1, 0, 1, 6, 0, 126, 9, 1, 2, 8, 3, 2, 1, 6, 2, 1, 101, 4, 1, 0, 0, 5, 93, 11, 1, 5, 5, 60, 75, 0, 7, 7, 10, 96, 0, 10, 10, 66, 10, 76, 89, 89, 64, 24, 0, 0, 29, 27, 23, 22, 21, 20, 18, 16, 14, 13, 0, 11, 0, 11, 17, 17, 17, 17, 17, 12, 9, 25, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 21, 23, 53, 51, 23, 22, 51, 50, 17, 17, 35, 53, 33, 17, 16, 7, 6, 35, 34, 45, 99, 99, 1, 139, 99, 99, 123, 124, 12, 30, 33, 171, 197, 1, 139, 97, 114, 209, 59, 123, 4, 210, 123, 123, 251, 46, 123, 19, 216, 89, 22, 1, 68, 3, 179, 123, 252, 77, 254, 205, 121, 142, 0, 4, 0, 57, 254, 92, 4, 32, 6, 43, 0, 9, 0, 25, 0, 29, 0, 33, 0, 180, 181, 15, 1, 5, 7, 1, 74, 75, 176, 42, 80, 88, 64, 58, 0, 6, 4, 7, 4, 6, 7, 126, 17, 13, 16, 3, 11, 11, 10, 93, 12, 1, 10, 10, 58, 75, 8, 1, 1, 1, 2, 93, 15, 9, 2, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 14, 1, 4, 4, 57, 75, 0, 7, 7, 5, 95, 0, 5, 5, 67, 5, 76, 27, 64, 58, 0, 6, 4, 7, 4, 6, 7, 126, 17, 13, 16, 3, 11, 11, 10, 93, 12, 1, 10, 10, 58, 75, 8, 1, 1, 1, 2, 93, 15, 9, 2, 2, 2, 59, 75, 3, 1, 0, 0, 4, 93, 14, 1, 4, 4, 60, 75, 0, 7, 7, 5, 95, 0, 5, 5, 67, 5, 76, 89, 64, 43, 30, 30, 26, 26, 10, 10, 0, 0, 30, 33, 30, 33, 32, 31, 26, 29, 26, 29, 28, 27, 10, 25, 10, 25, 24, 23, 21, 19, 17, 16, 14, 12, 0, 9, 0, 9, 17, 17, 17, 17, 18, 9, 24, 43, 51, 53, 51, 17, 35, 53, 33, 17, 51, 21, 1, 17, 16, 33, 34, 39, 53, 51, 23, 22, 51, 50, 53, 17, 35, 53, 37, 53, 51, 21, 33, 53, 51, 21, 57, 148, 148, 1, 89, 148, 1, 250, 254, 149, 94, 129, 124, 12, 63, 47, 143, 197, 254, 30, 222, 1, 176, 222, 123, 3, 71, 124, 252, 61, 123, 4, 62, 251, 205, 254, 81, 37, 210, 117, 31, 239, 4, 20, 124, 246, 247, 247, 247, 247, 0, 2, 0, 111, 255, 219, 4, 119, 7, 143, 0, 7, 0, 29, 0, 131, 64, 10, 5, 1, 1, 0, 8, 1, 8, 4, 2, 74, 75, 176, 42, 80, 88, 64, 42, 0, 0, 1, 0, 131, 9, 2, 2, 1, 6, 1, 131, 0, 3, 5, 4, 5, 3, 4, 126, 7, 1, 5, 5, 6, 93, 0, 6, 6, 56, 75, 0, 4, 4, 8, 95, 0, 8, 8, 63, 8, 76, 27, 64, 40, 0, 0, 1, 0, 131, 9, 2, 2, 1, 6, 1, 131, 0, 3, 5, 4, 5, 3, 4, 126, 0, 6, 7, 1, 5, 3, 6, 5, 102, 0, 4, 4, 8, 95, 0, 8, 8, 66, 8, 76, 89, 64, 23, 0, 0, 29, 27, 23, 22, 21, 20, 19, 18, 14, 12, 10, 9, 0, 7, 0, 7, 17, 17, 10, 9, 22, 43, 1, 1, 51, 1, 35, 39, 35, 7, 1, 17, 51, 19, 22, 51, 50, 55, 54, 53, 17, 33, 53, 33, 21, 33, 17, 20, 7, 6, 35, 34, 1, 85, 1, 0, 219, 1, 0, 123, 241, 3, 241, 254, 159, 123, 39, 113, 81, 116, 51, 52, 254, 117, 3, 84, 254, 252, 92, 92, 212, 158, 6, 78, 1, 65, 254, 191, 202, 202, 249, 209, 1, 157, 254, 211, 49, 55, 54, 119, 4, 11, 123, 123, 252, 29, 214, 92, 93, 0, 0, 0, 2, 0, 159, 254, 92, 4, 68, 6, 68, 0, 19, 0, 27, 0, 127, 64, 10, 25, 1, 6, 5, 0, 1, 4, 1, 2, 74, 75, 176, 40, 80, 88, 64, 44, 8, 7, 2, 6, 5, 3, 5, 6, 3, 126, 0, 0, 2, 1, 2, 0, 1, 126, 0, 5, 5, 58, 75, 0, 2, 2, 3, 93, 0, 3, 3, 59, 75, 0, 1, 1, 4, 95, 0, 4, 4, 67, 4, 76, 27, 64, 41, 0, 5, 6, 5, 131, 8, 7, 2, 6, 3, 6, 131, 0, 0, 2, 1, 2, 0, 1, 126, 0, 2, 2, 3, 93, 0, 3, 3, 59, 75, 0, 1, 1, 4, 95, 0, 4, 4, 67, 4, 76, 89, 64, 16, 20, 20, 20, 27, 20, 27, 17, 18, 36, 17, 20, 34, 17, 9, 9, 27, 43, 19, 17, 51, 23, 22, 51, 50, 55, 54, 53, 17, 33, 53, 33, 17, 20, 7, 6, 35, 34, 19, 1, 51, 1, 35, 39, 35, 7, 159, 123, 31, 68, 79, 132, 56, 57, 254, 68, 2, 130, 113, 113, 201, 139, 23, 1, 1, 218, 1, 1, 124, 241, 2, 241, 254, 168, 1, 63, 218, 53, 96, 96, 231, 3, 67, 124, 252, 4, 230, 128, 128, 6, 167, 1, 65, 254, 191, 202, 202, 0, 0, 0, 2, 0, 74, 254, 80, 4, 173, 5, 200, 0, 28, 0, 44, 0, 211, 64, 17, 24, 17, 9, 3, 0, 1, 36, 30, 2, 12, 13, 29, 1, 14, 12, 3, 74, 75, 176, 10, 80, 88, 64, 47, 0, 13, 8, 12, 12, 13, 112, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 56, 75, 10, 9, 7, 3, 0, 0, 8, 93, 15, 11, 2, 8, 8, 57, 75, 0, 12, 12, 14, 96, 0, 14, 14, 67, 14, 76, 27, 75, 176, 42, 80, 88, 64, 48, 0, 13, 8, 12, 8, 13, 12, 126, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 56, 75, 10, 9, 7, 3, 0, 0, 8, 93, 15, 11, 2, 8, 8, 57, 75, 0, 12, 12, 14, 96, 0, 14, 14, 67, 14, 76, 27, 64, 46, 0, 13, 8, 12, 8, 13, 12, 126, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 101, 10, 9, 7, 3, 0, 0, 8, 93, 15, 11, 2, 8, 8, 60, 75, 0, 12, 12, 14, 96, 0, 14, 14, 67, 14, 76, 89, 89, 64, 28, 0, 0, 44, 42, 38, 37, 33, 31, 0, 28, 0, 28, 27, 26, 23, 22, 17, 18, 17, 17, 19, 17, 17, 17, 17, 16, 9, 29, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 33, 53, 51, 1, 35, 17, 51, 21, 3, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 74, 130, 130, 1, 176, 105, 7, 1, 174, 111, 1, 100, 92, 254, 115, 2, 17, 74, 254, 87, 111, 254, 37, 7, 123, 12, 57, 40, 109, 157, 134, 66, 93, 218, 58, 123, 4, 210, 123, 123, 253, 167, 2, 89, 123, 123, 253, 222, 253, 80, 123, 123, 2, 105, 253, 151, 123, 254, 91, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 0, 0, 0, 2, 0, 74, 254, 80, 4, 152, 6, 43, 0, 25, 0, 41, 1, 2, 64, 20, 22, 1, 6, 7, 33, 27, 2, 12, 13, 26, 1, 14, 12, 3, 74, 1, 1, 1, 1, 73, 75, 176, 10, 80, 88, 64, 61, 0, 13, 2, 12, 12, 13, 112, 0, 6, 0, 0, 1, 6, 0, 101, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 9, 1, 7, 7, 8, 93, 0, 8, 8, 59, 75, 10, 3, 2, 1, 1, 2, 93, 15, 11, 2, 2, 2, 57, 75, 0, 12, 12, 14, 96, 0, 14, 14, 67, 14, 76, 27, 75, 176, 42, 80, 88, 64, 62, 0, 13, 2, 12, 2, 13, 12, 126, 0, 6, 0, 0, 1, 6, 0, 101, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 9, 1, 7, 7, 8, 93, 0, 8, 8, 59, 75, 10, 3, 2, 1, 1, 2, 93, 15, 11, 2, 2, 2, 57, 75, 0, 12, 12, 14, 96, 0, 14, 14, 67, 14, 76, 27, 64, 62, 0, 13, 2, 12, 2, 13, 12, 126, 0, 6, 0, 0, 1, 6, 0, 101, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 9, 1, 7, 7, 8, 93, 0, 8, 8, 59, 75, 10, 3, 2, 1, 1, 2, 93, 15, 11, 2, 2, 2, 60, 75, 0, 12, 12, 14, 96, 0, 14, 14, 67, 14, 76, 89, 89, 64, 28, 0, 0, 41, 39, 35, 34, 30, 28, 0, 25, 0, 25, 24, 23, 21, 20, 17, 17, 17, 17, 17, 17, 17, 17, 18, 16, 9, 29, 43, 33, 53, 1, 35, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 17, 51, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 1, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 3, 53, 254, 110, 24, 99, 254, 92, 123, 123, 1, 65, 24, 1, 102, 116, 1, 176, 141, 254, 149, 1, 232, 99, 253, 85, 57, 40, 109, 157, 134, 66, 93, 218, 58, 123, 1, 145, 254, 111, 123, 123, 5, 53, 123, 252, 37, 1, 114, 124, 124, 254, 150, 254, 35, 123, 254, 91, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 0, 0, 0, 0, 1, 0, 74, 0, 0, 4, 152, 4, 62, 0, 25, 0, 121, 64, 11, 22, 1, 6, 4, 1, 74, 1, 1, 1, 1, 73, 75, 176, 42, 80, 88, 64, 36, 0, 6, 0, 0, 1, 6, 0, 101, 9, 7, 2, 4, 4, 5, 93, 8, 1, 5, 5, 59, 75, 10, 3, 2, 1, 1, 2, 93, 12, 11, 2, 2, 2, 57, 2, 76, 27, 64, 36, 0, 6, 0, 0, 1, 6, 0, 101, 9, 7, 2, 4, 4, 5, 93, 8, 1, 5, 5, 59, 75, 10, 3, 2, 1, 1, 2, 93, 12, 11, 2, 2, 2, 60, 2, 76, 89, 64, 22, 0, 0, 0, 25, 0, 25, 24, 23, 21, 20, 17, 17, 17, 17, 17, 17, 17, 17, 18, 13, 9, 29, 43, 33, 53, 1, 35, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 17, 51, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 3, 53, 254, 110, 24, 99, 254, 92, 123, 123, 1, 65, 24, 1, 102, 116, 1, 176, 141, 254, 149, 1, 232, 99, 123, 1, 145, 254, 111, 123, 123, 3, 71, 124, 254, 18, 1, 114, 124, 124, 254, 150, 254, 35, 123, 0, 0, 0, 2, 0, 86, 0, 0, 4, 127, 7, 143, 0, 13, 0, 17, 0, 113, 75, 176, 42, 80, 88, 64, 42, 0, 7, 8, 7, 131, 9, 1, 8, 3, 8, 131, 0, 6, 2, 1, 2, 6, 1, 126, 4, 1, 2, 2, 3, 93, 0, 3, 3, 56, 75, 5, 1, 1, 1, 0, 94, 0, 0, 0, 57, 0, 76, 27, 64, 40, 0, 7, 8, 7, 131, 9, 1, 8, 3, 8, 131, 0, 6, 2, 1, 2, 6, 1, 126, 0, 3, 4, 1, 2, 6, 3, 2, 101, 5, 1, 1, 1, 0, 94, 0, 0, 0, 60, 0, 76, 89, 64, 17, 14, 14, 14, 17, 14, 17, 18, 17, 17, 17, 17, 17, 17, 16, 10, 9, 28, 43, 33, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 51, 1, 19, 51, 1, 4, 127, 251, 215, 247, 247, 2, 167, 235, 1, 242, 123, 253, 24, 216, 228, 254, 191, 123, 4, 210, 123, 123, 251, 54, 1, 94, 4, 109, 1, 65, 254, 191, 0, 2, 0, 90, 255, 231, 4, 91, 7, 207, 0, 3, 0, 23, 0, 63, 64, 60, 23, 1, 5, 3, 4, 1, 2, 5, 2, 74, 0, 0, 1, 0, 131, 6, 1, 1, 4, 1, 131, 0, 3, 3, 4, 93, 0, 4, 4, 58, 75, 0, 5, 5, 2, 95, 0, 2, 2, 66, 2, 76, 0, 0, 22, 20, 15, 14, 13, 12, 7, 5, 0, 3, 0, 3, 17, 7, 9, 21, 43, 1, 19, 51, 1, 1, 6, 35, 34, 46, 2, 53, 17, 33, 53, 33, 17, 20, 30, 2, 51, 50, 55, 2, 12, 216, 228, 254, 191, 1, 212, 166, 170, 92, 123, 73, 31, 254, 142, 2, 55, 14, 41, 76, 63, 124, 140, 6, 142, 1, 65, 254, 191, 249, 175, 86, 43, 93, 146, 102, 4, 73, 123, 251, 126, 93, 118, 66, 24, 77, 0, 2, 0, 86, 254, 80, 4, 127, 5, 200, 0, 13, 0, 29, 0, 194, 64, 11, 21, 15, 2, 7, 8, 14, 1, 9, 7, 2, 74, 75, 176, 10, 80, 88, 64, 48, 0, 6, 2, 1, 2, 6, 1, 126, 0, 8, 0, 7, 7, 8, 112, 4, 1, 2, 2, 3, 93, 0, 3, 3, 56, 75, 5, 1, 1, 1, 0, 94, 0, 0, 0, 57, 75, 0, 7, 7, 9, 96, 0, 9, 9, 67, 9, 76, 27, 75, 176, 42, 80, 88, 64, 49, 0, 6, 2, 1, 2, 6, 1, 126, 0, 8, 0, 7, 0, 8, 7, 126, 4, 1, 2, 2, 3, 93, 0, 3, 3, 56, 75, 5, 1, 1, 1, 0, 94, 0, 0, 0, 57, 75, 0, 7, 7, 9, 96, 0, 9, 9, 67, 9, 76, 27, 64, 47, 0, 6, 2, 1, 2, 6, 1, 126, 0, 8, 0, 7, 0, 8, 7, 126, 0, 3, 4, 1, 2, 6, 3, 2, 101, 5, 1, 1, 1, 0, 94, 0, 0, 0, 60, 75, 0, 7, 7, 9, 96, 0, 9, 9, 67, 9, 76, 89, 89, 64, 14, 29, 27, 20, 35, 17, 17, 17, 17, 17, 17, 16, 10, 9, 29, 43, 33, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 51, 1, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 4, 127, 251, 215, 247, 247, 2, 167, 235, 1, 242, 123, 253, 135, 57, 40, 109, 157, 134, 66, 93, 218, 58, 123, 4, 210, 123, 123, 251, 54, 1, 94, 252, 122, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 0, 0, 0, 0, 2, 0, 90, 254, 80, 4, 91, 6, 43, 0, 15, 0, 35, 0, 122, 64, 19, 35, 1, 6, 4, 16, 1, 3, 6, 7, 1, 2, 0, 1, 0, 1, 2, 0, 4, 74, 75, 176, 10, 80, 88, 64, 38, 0, 1, 3, 0, 0, 1, 112, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 0, 6, 6, 3, 95, 0, 3, 3, 66, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 64, 39, 0, 1, 3, 0, 3, 1, 0, 126, 0, 4, 4, 5, 93, 0, 5, 5, 58, 75, 0, 6, 6, 3, 95, 0, 3, 3, 66, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 89, 64, 10, 37, 17, 21, 34, 36, 20, 34, 7, 9, 27, 43, 1, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 1, 6, 35, 34, 46, 2, 53, 17, 33, 53, 33, 17, 20, 30, 2, 51, 50, 55, 1, 245, 57, 40, 109, 157, 134, 66, 93, 218, 58, 2, 36, 166, 170, 92, 123, 73, 31, 254, 142, 2, 55, 14, 41, 76, 63, 124, 140, 254, 91, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 1, 237, 86, 43, 93, 146, 102, 4, 73, 123, 251, 126, 93, 118, 66, 24, 77, 0, 0, 2, 0, 86, 0, 0, 4, 127, 5, 200, 0, 13, 0, 23, 0, 98, 64, 9, 19, 17, 15, 14, 4, 6, 2, 1, 74, 75, 176, 42, 80, 88, 64, 32, 0, 6, 2, 1, 2, 6, 1, 126, 4, 1, 2, 2, 3, 93, 7, 1, 3, 3, 56, 75, 5, 1, 1, 1, 0, 94, 0, 0, 0, 57, 0, 76, 27, 64, 30, 0, 6, 2, 1, 2, 6, 1, 126, 7, 1, 3, 4, 1, 2, 6, 3, 2, 101, 5, 1, 1, 1, 0, 94, 0, 0, 0, 60, 0, 76, 89, 64, 11, 23, 17, 17, 17, 17, 17, 17, 16, 8, 9, 28, 43, 33, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 51, 3, 53, 54, 53, 53, 35, 53, 51, 21, 2, 4, 127, 251, 215, 247, 247, 2, 167, 235, 1, 242, 123, 214, 76, 76, 197, 1, 123, 4, 210, 123, 123, 251, 54, 1, 94, 2, 33, 59, 21, 160, 17, 197, 171, 254, 250, 0, 0, 0, 2, 0, 90, 255, 231, 4, 91, 6, 43, 0, 9, 0, 29, 0, 47, 64, 44, 29, 5, 3, 1, 0, 5, 4, 2, 10, 1, 1, 4, 2, 74, 0, 2, 2, 0, 93, 3, 1, 0, 0, 58, 75, 0, 4, 4, 1, 95, 0, 1, 1, 66, 1, 76, 37, 17, 21, 36, 22, 5, 9, 25, 43, 1, 53, 54, 53, 53, 35, 53, 51, 21, 2, 19, 6, 35, 34, 46, 2, 53, 17, 33, 53, 33, 17, 20, 30, 2, 51, 50, 55, 3, 140, 76, 76, 197, 1, 11, 166, 170, 92, 123, 73, 31, 254, 142, 2, 55, 14, 41, 76, 63, 124, 140, 4, 101, 59, 21, 160, 17, 197, 171, 254, 250, 251, 195, 86, 43, 93, 146, 102, 4, 73, 123, 251, 126, 93, 118, 66, 24, 77, 0, 0, 0, 0, 2, 0, 86, 0, 0, 4, 127, 5, 200, 0, 13, 0, 17, 0, 109, 75, 176, 42, 80, 88, 64, 40, 0, 6, 8, 1, 8, 6, 1, 126, 0, 7, 9, 1, 8, 6, 7, 8, 101, 4, 1, 2, 2, 3, 93, 0, 3, 3, 56, 75, 5, 1, 1, 1, 0, 94, 0, 0, 0, 57, 0, 76, 27, 64, 38, 0, 6, 8, 1, 8, 6, 1, 126, 0, 3, 4, 1, 2, 7, 3, 2, 101, 0, 7, 9, 1, 8, 6, 7, 8, 101, 5, 1, 1, 1, 0, 94, 0, 0, 0, 60, 0, 76, 89, 64, 17, 14, 14, 14, 17, 14, 17, 18, 17, 17, 17, 17, 17, 17, 16, 10, 9, 28, 43, 33, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 51, 3, 53, 51, 21, 4, 127, 251, 215, 247, 247, 2, 167, 235, 1, 242, 123, 197, 197, 123, 4, 210, 123, 123, 251, 54, 1, 94, 1, 3, 197, 197, 0, 0, 0, 2, 0, 90, 255, 231, 4, 184, 6, 43, 0, 3, 0, 23, 0, 61, 64, 58, 23, 1, 5, 1, 4, 1, 2, 5, 2, 74, 0, 0, 6, 1, 1, 5, 0, 1, 101, 0, 3, 3, 4, 93, 0, 4, 4, 58, 75, 0, 5, 5, 2, 95, 0, 2, 2, 66, 2, 76, 0, 0, 22, 20, 15, 14, 13, 12, 7, 5, 0, 3, 0, 3, 17, 7, 9, 21, 43, 1, 53, 51, 21, 3, 6, 35, 34, 46, 2, 53, 17, 33, 53, 33, 17, 20, 30, 2, 51, 50, 55, 3, 243, 197, 93, 166, 170, 92, 123, 73, 31, 254, 142, 2, 55, 14, 41, 76, 63, 124, 140, 2, 154, 197, 197, 253, 163, 86, 43, 93, 146, 102, 4, 73, 123, 251, 126, 93, 118, 66, 24, 77, 0, 1, 0, 86, 0, 0, 4, 127, 5, 200, 0, 21, 0, 106, 64, 13, 16, 15, 14, 13, 6, 5, 4, 3, 8, 5, 1, 1, 74, 75, 176, 42, 80, 88, 64, 32, 0, 5, 1, 0, 1, 5, 0, 126, 3, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 4, 1, 0, 0, 6, 94, 7, 1, 6, 6, 57, 6, 76, 27, 64, 30, 0, 5, 1, 0, 1, 5, 0, 126, 0, 2, 3, 1, 1, 5, 2, 1, 101, 4, 1, 0, 0, 6, 94, 7, 1, 6, 6, 60, 6, 76, 89, 64, 15, 0, 0, 0, 21, 0, 21, 17, 21, 17, 17, 21, 17, 8, 9, 26, 43, 51, 53, 51, 17, 7, 53, 55, 17, 35, 53, 33, 21, 35, 17, 37, 21, 5, 17, 33, 17, 51, 17, 86, 247, 247, 247, 247, 2, 167, 235, 1, 40, 254, 216, 1, 242, 123, 123, 2, 17, 124, 138, 124, 2, 55, 123, 123, 254, 43, 148, 137, 149, 253, 149, 1, 94, 254, 31, 0, 0, 0, 1, 0, 90, 255, 231, 4, 91, 6, 43, 0, 31, 0, 52, 64, 49, 31, 23, 22, 21, 20, 15, 14, 13, 12, 9, 3, 1, 4, 3, 2, 0, 4, 0, 3, 2, 74, 0, 1, 1, 2, 93, 0, 2, 2, 58, 75, 0, 3, 3, 0, 95, 0, 0, 0, 66, 0, 76, 41, 17, 25, 37, 4, 9, 24, 43, 37, 6, 7, 21, 39, 6, 35, 34, 46, 2, 53, 17, 5, 53, 37, 17, 33, 53, 33, 17, 37, 21, 5, 17, 20, 30, 2, 51, 50, 55, 4, 91, 44, 44, 37, 105, 106, 92, 123, 73, 31, 254, 221, 1, 35, 254, 142, 2, 55, 1, 35, 254, 221, 14, 41, 76, 63, 124, 140, 61, 23, 17, 21, 8, 33, 43, 93, 146, 102, 1, 113, 145, 138, 145, 2, 78, 123, 253, 154, 145, 138, 145, 254, 110, 93, 118, 66, 24, 77, 0, 0, 2, 0, 74, 0, 0, 4, 131, 7, 143, 0, 21, 0, 25, 0, 121, 182, 17, 7, 2, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 38, 0, 9, 10, 9, 131, 12, 1, 10, 2, 10, 131, 5, 3, 2, 1, 1, 2, 93, 4, 1, 2, 2, 56, 75, 7, 1, 0, 0, 6, 93, 11, 8, 2, 6, 6, 57, 6, 76, 27, 64, 36, 0, 9, 10, 9, 131, 12, 1, 10, 2, 10, 131, 4, 1, 2, 5, 3, 2, 1, 0, 2, 1, 102, 7, 1, 0, 0, 6, 93, 11, 8, 2, 6, 6, 60, 6, 76, 89, 64, 25, 22, 22, 0, 0, 22, 25, 22, 25, 24, 23, 0, 21, 0, 21, 19, 17, 17, 17, 19, 17, 17, 17, 13, 9, 28, 43, 51, 53, 51, 17, 35, 53, 51, 1, 51, 17, 35, 53, 33, 21, 35, 17, 35, 1, 35, 17, 51, 21, 19, 19, 51, 1, 74, 111, 111, 234, 2, 98, 2, 110, 1, 89, 111, 124, 253, 159, 3, 111, 74, 216, 228, 254, 191, 123, 4, 210, 123, 251, 205, 3, 184, 123, 123, 250, 179, 4, 52, 252, 71, 123, 6, 78, 1, 65, 254, 191, 0, 0, 2, 0, 72, 0, 0, 4, 139, 6, 68, 0, 3, 0, 31, 1, 71, 182, 28, 11, 2, 2, 3, 1, 74, 75, 176, 12, 80, 88, 64, 52, 12, 1, 1, 0, 5, 0, 1, 5, 126, 0, 0, 0, 58, 75, 9, 1, 3, 3, 5, 95, 0, 5, 5, 65, 75, 9, 1, 3, 3, 4, 93, 0, 4, 4, 59, 75, 10, 8, 6, 3, 2, 2, 7, 93, 13, 11, 2, 7, 7, 57, 7, 76, 27, 75, 176, 14, 80, 88, 64, 42, 12, 1, 1, 0, 4, 0, 1, 4, 126, 0, 0, 0, 58, 75, 9, 1, 3, 3, 4, 95, 5, 1, 4, 4, 59, 75, 10, 8, 6, 3, 2, 2, 7, 93, 13, 11, 2, 7, 7, 57, 7, 76, 27, 75, 176, 40, 80, 88, 64, 52, 12, 1, 1, 0, 5, 0, 1, 5, 126, 0, 0, 0, 58, 75, 9, 1, 3, 3, 5, 95, 0, 5, 5, 65, 75, 9, 1, 3, 3, 4, 93, 0, 4, 4, 59, 75, 10, 8, 6, 3, 2, 2, 7, 93, 13, 11, 2, 7, 7, 57, 7, 76, 27, 75, 176, 42, 80, 88, 64, 49, 0, 0, 1, 0, 131, 12, 1, 1, 5, 1, 131, 9, 1, 3, 3, 5, 95, 0, 5, 5, 65, 75, 9, 1, 3, 3, 4, 93, 0, 4, 4, 59, 75, 10, 8, 6, 3, 2, 2, 7, 93, 13, 11, 2, 7, 7, 57, 7, 76, 27, 64, 49, 0, 0, 1, 0, 131, 12, 1, 1, 5, 1, 131, 9, 1, 3, 3, 5, 95, 0, 5, 5, 65, 75, 9, 1, 3, 3, 4, 93, 0, 4, 4, 59, 75, 10, 8, 6, 3, 2, 2, 7, 93, 13, 11, 2, 7, 7, 60, 7, 76, 89, 89, 89, 89, 64, 34, 4, 4, 0, 0, 4, 31, 4, 31, 30, 29, 27, 25, 23, 22, 21, 20, 19, 18, 16, 14, 10, 9, 8, 7, 6, 5, 0, 3, 0, 3, 17, 14, 9, 21, 43, 1, 19, 51, 1, 1, 53, 51, 17, 35, 53, 33, 21, 54, 55, 54, 51, 32, 17, 17, 51, 21, 33, 53, 51, 17, 16, 35, 34, 3, 17, 51, 21, 1, 232, 216, 228, 254, 191, 253, 229, 120, 120, 1, 62, 69, 68, 96, 119, 1, 45, 120, 254, 95, 100, 163, 150, 143, 100, 5, 3, 1, 65, 254, 191, 250, 253, 123, 3, 71, 124, 210, 105, 53, 76, 254, 124, 253, 169, 123, 123, 2, 70, 1, 1, 254, 254, 253, 187, 123, 0, 2, 0, 74, 254, 80, 4, 131, 5, 200, 0, 21, 0, 37, 0, 196, 64, 16, 17, 7, 2, 0, 1, 29, 23, 2, 9, 10, 22, 1, 11, 9, 3, 74, 75, 176, 10, 80, 88, 64, 44, 0, 10, 6, 9, 9, 10, 112, 5, 3, 2, 1, 1, 2, 93, 4, 1, 2, 2, 56, 75, 7, 1, 0, 0, 6, 93, 12, 8, 2, 6, 6, 57, 75, 0, 9, 9, 11, 96, 0, 11, 11, 67, 11, 76, 27, 75, 176, 42, 80, 88, 64, 45, 0, 10, 6, 9, 6, 10, 9, 126, 5, 3, 2, 1, 1, 2, 93, 4, 1, 2, 2, 56, 75, 7, 1, 0, 0, 6, 93, 12, 8, 2, 6, 6, 57, 75, 0, 9, 9, 11, 96, 0, 11, 11, 67, 11, 76, 27, 64, 43, 0, 10, 6, 9, 6, 10, 9, 126, 4, 1, 2, 5, 3, 2, 1, 0, 2, 1, 101, 7, 1, 0, 0, 6, 93, 12, 8, 2, 6, 6, 60, 75, 0, 9, 9, 11, 96, 0, 11, 11, 67, 11, 76, 89, 89, 64, 23, 0, 0, 37, 35, 31, 30, 26, 24, 0, 21, 0, 21, 19, 17, 17, 17, 19, 17, 17, 17, 13, 9, 28, 43, 51, 53, 51, 17, 35, 53, 51, 1, 51, 17, 35, 53, 33, 21, 35, 17, 35, 1, 35, 17, 51, 21, 19, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 74, 111, 111, 234, 2, 98, 2, 110, 1, 89, 111, 124, 253, 159, 3, 111, 62, 57, 40, 109, 157, 134, 66, 93, 218, 58, 123, 4, 210, 123, 251, 205, 3, 184, 123, 123, 250, 179, 4, 52, 252, 71, 123, 254, 91, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 0, 0, 0, 2, 0, 72, 254, 80, 4, 139, 4, 86, 0, 15, 0, 43, 1, 96, 64, 16, 40, 23, 2, 3, 4, 7, 1, 2, 0, 1, 0, 1, 2, 0, 3, 74, 75, 176, 10, 80, 88, 64, 55, 0, 1, 8, 0, 0, 1, 112, 10, 1, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 4, 4, 5, 93, 0, 5, 5, 59, 75, 11, 9, 7, 3, 3, 3, 8, 93, 13, 12, 2, 8, 8, 57, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 75, 176, 12, 80, 88, 64, 56, 0, 1, 8, 0, 8, 1, 0, 126, 10, 1, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 4, 4, 5, 93, 0, 5, 5, 59, 75, 11, 9, 7, 3, 3, 3, 8, 93, 13, 12, 2, 8, 8, 57, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 75, 176, 14, 80, 88, 64, 46, 0, 1, 8, 0, 8, 1, 0, 126, 10, 1, 4, 4, 5, 95, 6, 1, 5, 5, 59, 75, 11, 9, 7, 3, 3, 3, 8, 93, 13, 12, 2, 8, 8, 57, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 75, 176, 42, 80, 88, 64, 56, 0, 1, 8, 0, 8, 1, 0, 126, 10, 1, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 4, 4, 5, 93, 0, 5, 5, 59, 75, 11, 9, 7, 3, 3, 3, 8, 93, 13, 12, 2, 8, 8, 57, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 64, 56, 0, 1, 8, 0, 8, 1, 0, 126, 10, 1, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 4, 4, 5, 93, 0, 5, 5, 59, 75, 11, 9, 7, 3, 3, 3, 8, 93, 13, 12, 2, 8, 8, 60, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 89, 89, 89, 89, 64, 24, 16, 16, 16, 43, 16, 43, 42, 41, 39, 37, 35, 34, 17, 18, 36, 17, 17, 18, 36, 20, 34, 14, 9, 29, 43, 1, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 1, 53, 51, 17, 35, 53, 33, 21, 54, 55, 54, 51, 32, 17, 17, 51, 21, 33, 53, 51, 17, 16, 35, 34, 3, 17, 51, 21, 1, 232, 57, 40, 109, 157, 134, 66, 93, 218, 58, 254, 30, 120, 120, 1, 62, 69, 68, 96, 119, 1, 45, 120, 254, 95, 100, 163, 150, 143, 100, 254, 91, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 1, 176, 123, 3, 71, 124, 210, 105, 53, 76, 254, 124, 253, 169, 123, 123, 2, 70, 1, 1, 254, 254, 253, 187, 123, 0, 0, 0, 0, 2, 0, 74, 0, 0, 4, 131, 7, 143, 0, 21, 0, 29, 0, 130, 64, 11, 27, 1, 9, 10, 17, 7, 2, 0, 1, 2, 74, 75, 176, 42, 80, 88, 64, 39, 13, 11, 2, 10, 9, 10, 131, 0, 9, 2, 9, 131, 5, 3, 2, 1, 1, 2, 93, 4, 1, 2, 2, 56, 75, 7, 1, 0, 0, 6, 93, 12, 8, 2, 6, 6, 57, 6, 76, 27, 64, 37, 13, 11, 2, 10, 9, 10, 131, 0, 9, 2, 9, 131, 4, 1, 2, 5, 3, 2, 1, 0, 2, 1, 102, 7, 1, 0, 0, 6, 93, 12, 8, 2, 6, 6, 60, 6, 76, 89, 64, 27, 22, 22, 0, 0, 22, 29, 22, 29, 26, 25, 24, 23, 0, 21, 0, 21, 19, 17, 17, 17, 19, 17, 17, 17, 14, 9, 28, 43, 51, 53, 51, 17, 35, 53, 51, 1, 51, 17, 35, 53, 33, 21, 35, 17, 35, 1, 35, 17, 51, 21, 1, 1, 35, 1, 51, 23, 51, 55, 74, 111, 111, 234, 2, 98, 2, 110, 1, 89, 111, 124, 253, 159, 3, 111, 2, 50, 254, 255, 218, 254, 255, 124, 241, 2, 242, 123, 4, 210, 123, 251, 205, 3, 184, 123, 123, 250, 179, 4, 52, 252, 71, 123, 7, 143, 254, 191, 1, 65, 202, 202, 0, 2, 0, 72, 0, 0, 4, 139, 6, 68, 0, 7, 0, 35, 1, 82, 64, 11, 5, 1, 0, 1, 32, 15, 2, 3, 4, 2, 74, 75, 176, 12, 80, 88, 64, 53, 0, 0, 1, 6, 1, 0, 6, 126, 13, 2, 2, 1, 1, 58, 75, 10, 1, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 4, 4, 5, 93, 0, 5, 5, 59, 75, 11, 9, 7, 3, 3, 3, 8, 93, 14, 12, 2, 8, 8, 57, 8, 76, 27, 75, 176, 14, 80, 88, 64, 43, 0, 0, 1, 5, 1, 0, 5, 126, 13, 2, 2, 1, 1, 58, 75, 10, 1, 4, 4, 5, 95, 6, 1, 5, 5, 59, 75, 11, 9, 7, 3, 3, 3, 8, 93, 14, 12, 2, 8, 8, 57, 8, 76, 27, 75, 176, 40, 80, 88, 64, 53, 0, 0, 1, 6, 1, 0, 6, 126, 13, 2, 2, 1, 1, 58, 75, 10, 1, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 4, 4, 5, 93, 0, 5, 5, 59, 75, 11, 9, 7, 3, 3, 3, 8, 93, 14, 12, 2, 8, 8, 57, 8, 76, 27, 75, 176, 42, 80, 88, 64, 50, 13, 2, 2, 1, 0, 1, 131, 0, 0, 6, 0, 131, 10, 1, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 4, 4, 5, 93, 0, 5, 5, 59, 75, 11, 9, 7, 3, 3, 3, 8, 93, 14, 12, 2, 8, 8, 57, 8, 76, 27, 64, 50, 13, 2, 2, 1, 0, 1, 131, 0, 0, 6, 0, 131, 10, 1, 4, 4, 6, 95, 0, 6, 6, 65, 75, 10, 1, 4, 4, 5, 93, 0, 5, 5, 59, 75, 11, 9, 7, 3, 3, 3, 8, 93, 14, 12, 2, 8, 8, 60, 8, 76, 89, 89, 89, 89, 64, 35, 8, 8, 0, 0, 8, 35, 8, 35, 34, 33, 31, 29, 27, 26, 25, 24, 23, 22, 20, 18, 14, 13, 12, 11, 10, 9, 0, 7, 0, 7, 17, 17, 15, 9, 22, 43, 1, 1, 35, 1, 51, 23, 51, 55, 1, 53, 51, 17, 35, 53, 33, 21, 54, 55, 54, 51, 32, 17, 17, 51, 21, 33, 53, 51, 17, 16, 35, 34, 3, 17, 51, 21, 3, 186, 254, 255, 218, 254, 255, 124, 241, 2, 242, 253, 9, 120, 120, 1, 62, 69, 68, 96, 119, 1, 45, 120, 254, 95, 100, 163, 150, 143, 100, 6, 68, 254, 191, 1, 65, 202, 202, 249, 188, 123, 3, 71, 124, 210, 105, 53, 76, 254, 124, 253, 169, 123, 123, 2, 70, 1, 1, 254, 254, 253, 187, 123, 0, 0, 0, 2, 0, 8, 0, 0, 4, 139, 6, 43, 0, 9, 0, 37, 1, 20, 75, 176, 12, 80, 88, 64, 14, 5, 3, 1, 0, 4, 4, 0, 34, 17, 2, 1, 2, 2, 74, 27, 75, 176, 14, 80, 88, 64, 14, 5, 3, 1, 0, 4, 3, 0, 34, 17, 2, 1, 2, 2, 74, 27, 64, 14, 5, 3, 1, 0, 4, 4, 0, 34, 17, 2, 1, 2, 2, 74, 89, 89, 75, 176, 12, 80, 88, 64, 43, 0, 0, 0, 58, 75, 8, 1, 2, 2, 4, 95, 0, 4, 4, 65, 75, 8, 1, 2, 2, 3, 93, 0, 3, 3, 59, 75, 9, 7, 5, 3, 1, 1, 6, 93, 11, 10, 2, 6, 6, 57, 6, 76, 27, 75, 176, 14, 80, 88, 64, 33, 0, 0, 0, 58, 75, 8, 1, 2, 2, 3, 95, 4, 1, 3, 3, 59, 75, 9, 7, 5, 3, 1, 1, 6, 93, 11, 10, 2, 6, 6, 57, 6, 76, 27, 75, 176, 42, 80, 88, 64, 43, 0, 0, 0, 58, 75, 8, 1, 2, 2, 4, 95, 0, 4, 4, 65, 75, 8, 1, 2, 2, 3, 93, 0, 3, 3, 59, 75, 9, 7, 5, 3, 1, 1, 6, 93, 11, 10, 2, 6, 6, 57, 6, 76, 27, 64, 43, 0, 0, 0, 58, 75, 8, 1, 2, 2, 4, 95, 0, 4, 4, 65, 75, 8, 1, 2, 2, 3, 93, 0, 3, 3, 59, 75, 9, 7, 5, 3, 1, 1, 6, 93, 11, 10, 2, 6, 6, 60, 6, 76, 89, 89, 89, 64, 20, 10, 10, 10, 37, 10, 37, 36, 35, 34, 17, 17, 18, 36, 17, 17, 20, 22, 12, 9, 29, 43, 19, 53, 54, 53, 53, 35, 53, 51, 21, 2, 3, 53, 51, 17, 35, 53, 33, 21, 54, 55, 54, 51, 32, 17, 17, 51, 21, 33, 53, 51, 17, 16, 35, 34, 3, 17, 51, 21, 8, 76, 76, 197, 1, 132, 120, 120, 1, 62, 69, 68, 96, 119, 1, 45, 120, 254, 95, 100, 163, 150, 143, 100, 4, 101, 59, 21, 160, 17, 197, 171, 254, 250, 251, 134, 123, 3, 71, 124, 210, 105, 53, 76, 254, 124, 253, 169, 123, 123, 2, 70, 1, 1, 254, 254, 253, 187, 123, 0, 0, 0, 0, 1, 0, 74, 254, 216, 4, 131, 5, 200, 0, 38, 0, 131, 64, 15, 34, 7, 2, 0, 1, 30, 1, 7, 10, 21, 1, 6, 8, 3, 74, 75, 176, 42, 80, 88, 64, 41, 0, 7, 10, 8, 10, 7, 8, 126, 0, 8, 0, 6, 8, 6, 99, 5, 3, 2, 1, 1, 2, 93, 4, 1, 2, 2, 56, 75, 9, 1, 0, 0, 10, 93, 11, 1, 10, 10, 57, 10, 76, 27, 64, 39, 0, 7, 10, 8, 10, 7, 8, 126, 4, 1, 2, 5, 3, 2, 1, 0, 2, 1, 101, 0, 8, 0, 6, 8, 6, 99, 9, 1, 0, 0, 10, 93, 11, 1, 10, 10, 60, 10, 76, 89, 64, 20, 0, 0, 0, 38, 0, 38, 37, 36, 34, 18, 36, 17, 17, 19, 17, 17, 17, 12, 9, 29, 43, 51, 53, 51, 17, 35, 53, 51, 1, 51, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 34, 39, 53, 51, 23, 22, 51, 50, 55, 54, 53, 52, 39, 39, 1, 35, 17, 51, 21, 74, 111, 111, 234, 2, 98, 2, 110, 1, 89, 111, 80, 79, 133, 88, 128, 123, 13, 64, 47, 62, 35, 42, 1, 1, 253, 159, 3, 111, 123, 4, 210, 123, 251, 205, 3, 184, 123, 123, 250, 179, 134, 81, 81, 37, 210, 118, 31, 40, 47, 85, 7, 9, 10, 4, 52, 252, 71, 123, 0, 0, 1, 0, 69, 254, 92, 4, 21, 4, 86, 0, 33, 1, 9, 64, 11, 30, 7, 2, 0, 1, 18, 1, 4, 6, 2, 74, 75, 176, 12, 80, 88, 64, 53, 0, 5, 9, 6, 9, 5, 6, 126, 7, 1, 1, 1, 3, 95, 0, 3, 3, 65, 75, 7, 1, 1, 1, 2, 93, 0, 2, 2, 59, 75, 8, 1, 0, 0, 9, 93, 10, 1, 9, 9, 57, 75, 0, 6, 6, 4, 95, 0, 4, 4, 67, 4, 76, 27, 75, 176, 14, 80, 88, 64, 43, 0, 5, 9, 6, 9, 5, 6, 126, 7, 1, 1, 1, 2, 95, 3, 1, 2, 2, 59, 75, 8, 1, 0, 0, 9, 93, 10, 1, 9, 9, 57, 75, 0, 6, 6, 4, 95, 0, 4, 4, 67, 4, 76, 27, 75, 176, 42, 80, 88, 64, 53, 0, 5, 9, 6, 9, 5, 6, 126, 7, 1, 1, 1, 3, 95, 0, 3, 3, 65, 75, 7, 1, 1, 1, 2, 93, 0, 2, 2, 59, 75, 8, 1, 0, 0, 9, 93, 10, 1, 9, 9, 57, 75, 0, 6, 6, 4, 95, 0, 4, 4, 67, 4, 76, 27, 64, 53, 0, 5, 9, 6, 9, 5, 6, 126, 7, 1, 1, 1, 3, 95, 0, 3, 3, 65, 75, 7, 1, 1, 1, 2, 93, 0, 2, 2, 59, 75, 8, 1, 0, 0, 9, 93, 10, 1, 9, 9, 60, 75, 0, 6, 6, 4, 95, 0, 4, 4, 67, 4, 76, 89, 89, 89, 64, 18, 0, 0, 0, 33, 0, 33, 18, 35, 34, 18, 35, 36, 17, 17, 17, 11, 9, 29, 43, 51, 53, 51, 17, 35, 53, 33, 21, 54, 55, 54, 51, 32, 17, 19, 18, 33, 34, 39, 53, 51, 23, 22, 51, 50, 53, 17, 16, 35, 34, 3, 17, 51, 21, 69, 123, 123, 1, 65, 69, 68, 96, 119, 1, 45, 1, 1, 254, 148, 96, 127, 123, 12, 64, 47, 142, 163, 150, 143, 111, 123, 3, 71, 124, 210, 105, 53, 76, 254, 124, 253, 57, 254, 81, 37, 210, 117, 31, 239, 3, 15, 1, 5, 254, 254, 253, 187, 123, 0, 0, 3, 0, 62, 255, 219, 4, 144, 6, 232, 0, 3, 0, 19, 0, 35, 0, 102, 75, 176, 42, 80, 88, 64, 32, 0, 0, 6, 1, 1, 2, 0, 1, 101, 8, 1, 4, 4, 2, 95, 7, 1, 2, 2, 62, 75, 0, 5, 5, 3, 95, 0, 3, 3, 63, 3, 76, 27, 64, 30, 0, 0, 6, 1, 1, 2, 0, 1, 101, 7, 1, 2, 8, 1, 4, 5, 2, 4, 103, 0, 5, 5, 3, 95, 0, 3, 3, 66, 3, 76, 89, 64, 26, 21, 20, 5, 4, 0, 0, 29, 27, 20, 35, 21, 35, 13, 11, 4, 19, 5, 19, 0, 3, 0, 3, 17, 9, 9, 21, 43, 1, 53, 33, 21, 5, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 1, 13, 2, 179, 254, 167, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 6, 108, 124, 124, 127, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 133, 167, 170, 254, 203, 254, 206, 169, 171, 147, 164, 1, 77, 1, 57, 168, 167, 0, 0, 3, 0, 111, 255, 231, 4, 94, 5, 147, 0, 15, 0, 23, 0, 27, 0, 62, 64, 59, 0, 4, 8, 1, 5, 0, 4, 5, 101, 7, 1, 2, 2, 0, 95, 6, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 24, 24, 17, 16, 1, 0, 24, 27, 24, 27, 26, 25, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 9, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 1, 53, 33, 21, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 253, 132, 2, 179, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 1, 60, 124, 124, 0, 0, 3, 0, 62, 255, 219, 4, 144, 7, 112, 0, 15, 0, 31, 0, 47, 0, 109, 75, 176, 42, 80, 88, 64, 37, 2, 1, 0, 1, 0, 131, 0, 1, 0, 3, 4, 1, 3, 103, 9, 1, 6, 6, 4, 95, 8, 1, 4, 4, 62, 75, 0, 7, 7, 5, 95, 0, 5, 5, 63, 5, 76, 27, 64, 35, 2, 1, 0, 1, 0, 131, 0, 1, 0, 3, 4, 1, 3, 103, 8, 1, 4, 9, 1, 6, 7, 4, 6, 103, 0, 7, 7, 5, 95, 0, 5, 5, 66, 5, 76, 89, 64, 23, 33, 32, 17, 16, 41, 39, 32, 47, 33, 47, 25, 23, 16, 31, 17, 31, 35, 17, 33, 16, 10, 9, 24, 43, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 1, 13, 123, 48, 174, 175, 48, 123, 23, 26, 91, 202, 152, 89, 55, 28, 11, 1, 76, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 7, 112, 148, 148, 89, 46, 155, 81, 49, 72, 29, 254, 184, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 133, 167, 170, 254, 203, 254, 206, 169, 171, 147, 164, 1, 77, 1, 57, 168, 167, 0, 0, 3, 0, 111, 255, 231, 4, 94, 6, 43, 0, 15, 0, 23, 0, 39, 0, 117, 75, 176, 21, 80, 88, 64, 39, 6, 1, 4, 4, 58, 75, 0, 7, 7, 5, 95, 0, 5, 5, 56, 75, 9, 1, 2, 2, 0, 95, 8, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 27, 64, 37, 0, 5, 0, 7, 0, 5, 7, 103, 6, 1, 4, 4, 58, 75, 9, 1, 2, 2, 0, 95, 8, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 27, 17, 16, 1, 0, 35, 33, 30, 29, 28, 26, 25, 24, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 10, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 253, 132, 123, 48, 174, 175, 48, 123, 23, 26, 91, 202, 152, 89, 55, 28, 11, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 2, 80, 148, 148, 89, 46, 155, 81, 49, 72, 29, 0, 0, 0, 4, 0, 62, 255, 219, 4, 144, 7, 143, 0, 3, 0, 7, 0, 23, 0, 39, 0, 116, 75, 176, 42, 80, 88, 64, 35, 2, 1, 0, 9, 3, 8, 3, 1, 4, 0, 1, 101, 11, 1, 6, 6, 4, 95, 10, 1, 4, 4, 62, 75, 0, 7, 7, 5, 95, 0, 5, 5, 63, 5, 76, 27, 64, 33, 2, 1, 0, 9, 3, 8, 3, 1, 4, 0, 1, 101, 10, 1, 4, 11, 1, 6, 7, 4, 6, 103, 0, 7, 7, 5, 95, 0, 5, 5, 66, 5, 76, 89, 64, 34, 25, 24, 9, 8, 4, 4, 0, 0, 33, 31, 24, 39, 25, 39, 17, 15, 8, 23, 9, 23, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 12, 9, 21, 43, 1, 19, 51, 1, 51, 19, 51, 1, 7, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 1, 62, 240, 192, 254, 191, 240, 241, 191, 254, 191, 165, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 6, 78, 1, 65, 254, 191, 1, 65, 254, 191, 97, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 133, 167, 170, 254, 203, 254, 206, 169, 171, 147, 164, 1, 77, 1, 57, 168, 167, 0, 0, 4, 0, 111, 255, 231, 4, 94, 6, 68, 0, 15, 0, 23, 0, 27, 0, 31, 0, 121, 75, 176, 40, 80, 88, 64, 37, 11, 7, 10, 3, 5, 5, 4, 93, 6, 1, 4, 4, 58, 75, 9, 1, 2, 2, 0, 95, 8, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 27, 64, 35, 6, 1, 4, 11, 7, 10, 3, 5, 0, 4, 5, 101, 9, 1, 2, 2, 0, 95, 8, 1, 0, 0, 65, 75, 0, 3, 3, 1, 95, 0, 1, 1, 66, 1, 76, 89, 64, 35, 28, 28, 24, 24, 17, 16, 1, 0, 28, 31, 28, 31, 30, 29, 24, 27, 24, 27, 26, 25, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 12, 9, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 1, 19, 51, 1, 51, 19, 51, 1, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 253, 188, 240, 192, 254, 191, 240, 241, 191, 254, 191, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 1, 40, 1, 65, 254, 191, 1, 65, 254, 191, 0, 0, 0, 0, 2, 0, 37, 255, 219, 4, 143, 5, 238, 0, 32, 0, 43, 1, 103, 64, 10, 13, 1, 12, 2, 1, 1, 11, 13, 2, 74, 75, 176, 10, 80, 88, 64, 72, 0, 3, 4, 6, 4, 3, 112, 0, 10, 7, 9, 9, 10, 112, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 0, 12, 12, 1, 95, 0, 1, 1, 62, 75, 0, 4, 4, 2, 93, 0, 2, 2, 56, 75, 0, 9, 9, 11, 94, 14, 1, 11, 11, 57, 75, 0, 13, 13, 0, 95, 0, 0, 0, 63, 0, 76, 27, 75, 176, 14, 80, 88, 64, 73, 0, 3, 4, 6, 4, 3, 112, 0, 10, 7, 9, 7, 10, 9, 126, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 0, 12, 12, 1, 95, 0, 1, 1, 62, 75, 0, 4, 4, 2, 93, 0, 2, 2, 56, 75, 0, 9, 9, 11, 94, 14, 1, 11, 11, 57, 75, 0, 13, 13, 0, 95, 0, 0, 0, 63, 0, 76, 27, 75, 176, 42, 80, 88, 64, 74, 0, 3, 4, 6, 4, 3, 6, 126, 0, 10, 7, 9, 7, 10, 9, 126, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 0, 12, 12, 1, 95, 0, 1, 1, 62, 75, 0, 4, 4, 2, 93, 0, 2, 2, 56, 75, 0, 9, 9, 11, 94, 14, 1, 11, 11, 57, 75, 0, 13, 13, 0, 95, 0, 0, 0, 63, 0, 76, 27, 64, 70, 0, 3, 4, 6, 4, 3, 6, 126, 0, 10, 7, 9, 7, 10, 9, 126, 0, 1, 0, 12, 4, 1, 12, 103, 0, 2, 0, 4, 3, 2, 4, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 0, 9, 9, 11, 94, 14, 1, 11, 11, 60, 75, 0, 13, 13, 0, 95, 0, 0, 0, 66, 0, 76, 89, 89, 89, 64, 26, 0, 0, 43, 41, 37, 35, 0, 32, 0, 32, 31, 30, 29, 28, 17, 17, 17, 17, 17, 17, 18, 38, 34, 15, 9, 29, 43, 33, 53, 6, 35, 34, 39, 38, 17, 16, 55, 54, 51, 50, 23, 53, 33, 17, 35, 53, 35, 17, 51, 53, 51, 17, 35, 53, 35, 17, 51, 53, 51, 17, 1, 17, 16, 35, 34, 17, 16, 23, 22, 51, 50, 2, 97, 60, 113, 184, 107, 108, 107, 107, 184, 117, 57, 2, 21, 123, 219, 145, 111, 111, 145, 244, 123, 253, 210, 149, 223, 52, 51, 117, 152, 74, 111, 207, 207, 1, 107, 1, 105, 209, 208, 112, 74, 254, 198, 191, 253, 238, 123, 254, 142, 123, 253, 196, 239, 254, 142, 1, 108, 2, 241, 1, 22, 253, 119, 254, 162, 156, 154, 0, 0, 3, 0, 49, 255, 231, 4, 155, 4, 87, 0, 27, 0, 39, 0, 45, 0, 228, 75, 176, 12, 80, 88, 64, 14, 12, 1, 8, 6, 23, 1, 4, 3, 24, 1, 0, 7, 3, 74, 27, 75, 176, 14, 80, 88, 64, 14, 12, 1, 8, 6, 23, 1, 4, 3, 24, 1, 0, 4, 3, 74, 27, 64, 14, 12, 1, 8, 6, 23, 1, 4, 3, 24, 1, 0, 7, 3, 74, 89, 89, 75, 176, 12, 80, 88, 64, 44, 0, 8, 0, 3, 4, 8, 3, 101, 9, 10, 2, 6, 6, 1, 95, 2, 1, 1, 1, 65, 75, 0, 4, 4, 0, 95, 5, 1, 0, 0, 66, 75, 0, 7, 7, 0, 95, 5, 1, 0, 0, 66, 0, 76, 27, 75, 176, 14, 80, 88, 64, 34, 0, 8, 0, 3, 4, 8, 3, 101, 9, 10, 2, 6, 6, 1, 95, 2, 1, 1, 1, 65, 75, 7, 1, 4, 4, 0, 95, 5, 1, 0, 0, 66, 0, 76, 27, 64, 44, 0, 8, 0, 3, 4, 8, 3, 101, 9, 10, 2, 6, 6, 1, 95, 2, 1, 1, 1, 65, 75, 0, 4, 4, 0, 95, 5, 1, 0, 0, 66, 75, 0, 7, 7, 0, 95, 5, 1, 0, 0, 66, 0, 76, 89, 89, 64, 21, 29, 28, 45, 43, 41, 40, 33, 31, 28, 39, 29, 39, 35, 34, 18, 34, 38, 33, 11, 9, 26, 43, 37, 6, 35, 34, 39, 38, 53, 52, 55, 54, 51, 50, 23, 54, 51, 32, 17, 21, 33, 21, 16, 51, 50, 55, 21, 6, 35, 34, 1, 34, 17, 16, 51, 50, 55, 54, 53, 52, 39, 38, 19, 33, 53, 16, 35, 34, 2, 135, 83, 151, 164, 100, 100, 101, 100, 166, 158, 89, 86, 144, 1, 30, 254, 68, 216, 100, 128, 152, 124, 158, 254, 188, 181, 181, 96, 25, 20, 25, 26, 225, 1, 2, 112, 141, 118, 143, 156, 156, 255, 255, 157, 156, 159, 160, 254, 8, 76, 16, 254, 120, 87, 154, 81, 3, 244, 254, 66, 254, 70, 125, 100, 214, 247, 97, 105, 254, 179, 62, 1, 15, 0, 0, 0, 3, 0, 86, 0, 0, 4, 180, 7, 143, 0, 23, 0, 30, 0, 34, 0, 137, 181, 14, 1, 5, 8, 1, 74, 75, 176, 42, 80, 88, 64, 45, 0, 10, 11, 10, 131, 13, 1, 11, 2, 11, 131, 0, 8, 0, 5, 0, 8, 5, 101, 9, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 6, 3, 2, 0, 0, 4, 93, 12, 7, 2, 4, 4, 57, 4, 76, 27, 64, 43, 0, 10, 11, 10, 131, 13, 1, 11, 2, 11, 131, 0, 2, 9, 1, 1, 8, 2, 1, 102, 0, 8, 0, 5, 0, 8, 5, 101, 6, 3, 2, 0, 0, 4, 93, 12, 7, 2, 4, 4, 60, 4, 76, 89, 64, 28, 31, 31, 0, 0, 31, 34, 31, 34, 33, 32, 30, 28, 26, 24, 0, 23, 0, 23, 17, 17, 17, 24, 33, 17, 17, 14, 9, 27, 43, 51, 53, 51, 17, 35, 53, 33, 50, 23, 22, 21, 20, 7, 6, 7, 1, 51, 21, 35, 1, 35, 17, 51, 21, 3, 51, 32, 17, 16, 35, 35, 19, 19, 51, 1, 86, 130, 130, 2, 75, 176, 101, 102, 92, 54, 103, 1, 57, 88, 253, 254, 173, 199, 130, 130, 99, 1, 74, 250, 179, 37, 216, 228, 254, 191, 123, 4, 210, 123, 97, 97, 168, 153, 118, 68, 70, 253, 182, 123, 2, 136, 253, 243, 123, 3, 3, 1, 69, 1, 5, 1, 1, 1, 65, 254, 191, 0, 0, 2, 0, 74, 0, 0, 4, 82, 6, 68, 0, 23, 0, 27, 1, 120, 75, 176, 12, 80, 88, 64, 14, 17, 1, 3, 4, 11, 1, 6, 7, 0, 1, 0, 6, 3, 74, 27, 75, 176, 14, 80, 88, 64, 14, 17, 1, 3, 4, 11, 1, 6, 3, 0, 1, 0, 6, 3, 74, 27, 64, 14, 17, 1, 3, 4, 11, 1, 6, 7, 0, 1, 0, 6, 3, 74, 89, 89, 75, 176, 12, 80, 88, 64, 53, 10, 1, 9, 8, 5, 8, 9, 5, 126, 0, 6, 7, 0, 7, 6, 112, 0, 8, 8, 58, 75, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 75, 176, 14, 80, 88, 64, 46, 10, 1, 9, 8, 4, 8, 9, 4, 126, 0, 6, 3, 0, 3, 6, 0, 126, 0, 8, 8, 58, 75, 7, 1, 3, 3, 4, 95, 5, 1, 4, 4, 59, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 75, 176, 40, 80, 88, 64, 54, 10, 1, 9, 8, 5, 8, 9, 5, 126, 0, 6, 7, 0, 7, 6, 0, 126, 0, 8, 8, 58, 75, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 75, 176, 42, 80, 88, 64, 51, 0, 8, 9, 8, 131, 10, 1, 9, 5, 9, 131, 0, 6, 7, 0, 7, 6, 0, 126, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 64, 51, 0, 8, 9, 8, 131, 10, 1, 9, 5, 9, 131, 0, 6, 7, 0, 7, 6, 0, 126, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 60, 1, 76, 89, 89, 89, 89, 64, 18, 24, 24, 24, 27, 24, 27, 18, 34, 18, 36, 17, 17, 17, 17, 17, 11, 9, 29, 43, 1, 17, 33, 21, 33, 53, 33, 17, 33, 53, 33, 21, 54, 55, 54, 51, 50, 23, 17, 35, 39, 38, 35, 34, 3, 19, 51, 1, 2, 18, 1, 113, 252, 199, 1, 3, 254, 253, 1, 200, 74, 67, 96, 111, 118, 110, 124, 20, 56, 62, 184, 228, 216, 228, 254, 191, 2, 190, 253, 189, 123, 123, 3, 71, 124, 211, 106, 53, 76, 68, 254, 184, 188, 36, 1, 89, 1, 65, 254, 191, 0, 3, 0, 86, 254, 80, 4, 180, 5, 200, 0, 23, 0, 30, 0, 46, 0, 219, 64, 15, 14, 1, 5, 8, 38, 32, 2, 10, 11, 31, 1, 12, 10, 3, 74, 75, 176, 10, 80, 88, 64, 51, 0, 11, 4, 10, 10, 11, 112, 0, 8, 0, 5, 0, 8, 5, 101, 9, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 6, 3, 2, 0, 0, 4, 93, 13, 7, 2, 4, 4, 57, 75, 0, 10, 10, 12, 96, 0, 12, 12, 67, 12, 76, 27, 75, 176, 42, 80, 88, 64, 52, 0, 11, 4, 10, 4, 11, 10, 126, 0, 8, 0, 5, 0, 8, 5, 101, 9, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 6, 3, 2, 0, 0, 4, 93, 13, 7, 2, 4, 4, 57, 75, 0, 10, 10, 12, 96, 0, 12, 12, 67, 12, 76, 27, 64, 50, 0, 11, 4, 10, 4, 11, 10, 126, 0, 2, 9, 1, 1, 8, 2, 1, 101, 0, 8, 0, 5, 0, 8, 5, 101, 6, 3, 2, 0, 0, 4, 93, 13, 7, 2, 4, 4, 60, 75, 0, 10, 10, 12, 96, 0, 12, 12, 67, 12, 76, 89, 89, 64, 26, 0, 0, 46, 44, 40, 39, 35, 33, 30, 28, 26, 24, 0, 23, 0, 23, 17, 17, 17, 24, 33, 17, 17, 14, 9, 27, 43, 51, 53, 51, 17, 35, 53, 33, 50, 23, 22, 21, 20, 7, 6, 7, 1, 51, 21, 35, 1, 35, 17, 51, 21, 3, 51, 32, 17, 16, 35, 35, 19, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 86, 130, 130, 2, 75, 176, 101, 102, 92, 54, 103, 1, 57, 88, 253, 254, 173, 199, 130, 130, 99, 1, 74, 250, 179, 129, 57, 40, 109, 157, 134, 66, 93, 218, 59, 123, 4, 210, 123, 97, 97, 168, 153, 118, 68, 70, 253, 182, 123, 2, 136, 253, 243, 123, 3, 3, 1, 69, 1, 5, 249, 14, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 0, 0, 0, 0, 2, 0, 74, 254, 80, 4, 82, 4, 86, 0, 23, 0, 39, 1, 169, 75, 176, 12, 80, 88, 64, 23, 17, 1, 3, 4, 11, 1, 6, 7, 0, 1, 0, 6, 31, 25, 2, 8, 9, 24, 1, 10, 8, 5, 74, 27, 75, 176, 14, 80, 88, 64, 23, 17, 1, 3, 4, 11, 1, 6, 3, 0, 1, 0, 6, 31, 25, 2, 8, 9, 24, 1, 10, 8, 5, 74, 27, 64, 23, 17, 1, 3, 4, 11, 1, 6, 7, 0, 1, 0, 6, 31, 25, 2, 8, 9, 24, 1, 10, 8, 5, 74, 89, 89, 75, 176, 10, 80, 88, 64, 56, 0, 6, 7, 0, 7, 6, 112, 0, 9, 1, 8, 8, 9, 112, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 75, 0, 8, 8, 10, 96, 0, 10, 10, 67, 10, 76, 27, 75, 176, 12, 80, 88, 64, 57, 0, 6, 7, 0, 7, 6, 112, 0, 9, 1, 8, 1, 9, 8, 126, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 75, 0, 8, 8, 10, 96, 0, 10, 10, 67, 10, 76, 27, 75, 176, 14, 80, 88, 64, 50, 0, 6, 3, 0, 3, 6, 0, 126, 0, 9, 1, 8, 1, 9, 8, 126, 7, 1, 3, 3, 4, 95, 5, 1, 4, 4, 59, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 75, 0, 8, 8, 10, 96, 0, 10, 10, 67, 10, 76, 27, 75, 176, 42, 80, 88, 64, 58, 0, 6, 7, 0, 7, 6, 0, 126, 0, 9, 1, 8, 1, 9, 8, 126, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 75, 0, 8, 8, 10, 96, 0, 10, 10, 67, 10, 76, 27, 64, 58, 0, 6, 7, 0, 7, 6, 0, 126, 0, 9, 1, 8, 1, 9, 8, 126, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 60, 75, 0, 8, 8, 10, 96, 0, 10, 10, 67, 10, 76, 89, 89, 89, 89, 64, 16, 39, 37, 33, 32, 35, 34, 18, 36, 17, 17, 17, 17, 17, 11, 9, 29, 43, 1, 17, 33, 21, 33, 53, 33, 17, 33, 53, 33, 21, 54, 55, 54, 51, 50, 23, 17, 35, 39, 38, 35, 34, 3, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 2, 18, 1, 113, 252, 199, 1, 3, 254, 253, 1, 200, 74, 67, 96, 111, 118, 110, 124, 20, 56, 62, 184, 228, 57, 40, 109, 157, 134, 66, 93, 218, 58, 2, 190, 253, 189, 123, 123, 3, 71, 124, 211, 106, 53, 76, 68, 254, 184, 188, 36, 250, 177, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 0, 0, 0, 0, 3, 0, 86, 0, 0, 4, 180, 7, 143, 0, 23, 0, 30, 0, 38, 0, 146, 64, 10, 36, 1, 10, 11, 14, 1, 5, 8, 2, 74, 75, 176, 42, 80, 88, 64, 46, 14, 12, 2, 11, 10, 11, 131, 0, 10, 2, 10, 131, 0, 8, 0, 5, 0, 8, 5, 101, 9, 1, 1, 1, 2, 93, 0, 2, 2, 56, 75, 6, 3, 2, 0, 0, 4, 93, 13, 7, 2, 4, 4, 57, 4, 76, 27, 64, 44, 14, 12, 2, 11, 10, 11, 131, 0, 10, 2, 10, 131, 0, 2, 9, 1, 1, 8, 2, 1, 102, 0, 8, 0, 5, 0, 8, 5, 101, 6, 3, 2, 0, 0, 4, 93, 13, 7, 2, 4, 4, 60, 4, 76, 89, 64, 30, 31, 31, 0, 0, 31, 38, 31, 38, 35, 34, 33, 32, 30, 28, 26, 24, 0, 23, 0, 23, 17, 17, 17, 24, 33, 17, 17, 15, 9, 27, 43, 51, 53, 51, 17, 35, 53, 33, 50, 23, 22, 21, 20, 7, 6, 7, 1, 51, 21, 35, 1, 35, 17, 51, 21, 3, 51, 32, 17, 16, 35, 35, 1, 1, 35, 1, 51, 23, 51, 55, 86, 130, 130, 2, 75, 176, 101, 102, 92, 54, 103, 1, 57, 88, 253, 254, 173, 199, 130, 130, 99, 1, 74, 250, 179, 2, 0, 254, 255, 218, 254, 255, 124, 241, 2, 242, 123, 4, 210, 123, 97, 97, 168, 153, 118, 68, 70, 253, 182, 123, 2, 136, 253, 243, 123, 3, 3, 1, 69, 1, 5, 2, 66, 254, 191, 1, 65, 202, 202, 0, 2, 0, 74, 0, 0, 4, 82, 6, 68, 0, 23, 0, 31, 1, 139, 75, 176, 12, 80, 88, 64, 18, 29, 1, 8, 9, 17, 1, 3, 4, 11, 1, 6, 7, 0, 1, 0, 6, 4, 74, 27, 75, 176, 14, 80, 88, 64, 18, 29, 1, 8, 9, 17, 1, 3, 4, 11, 1, 6, 3, 0, 1, 0, 6, 4, 74, 27, 64, 18, 29, 1, 8, 9, 17, 1, 3, 4, 11, 1, 6, 7, 0, 1, 0, 6, 4, 74, 89, 89, 75, 176, 12, 80, 88, 64, 54, 0, 8, 9, 5, 9, 8, 5, 126, 0, 6, 7, 0, 7, 6, 112, 11, 10, 2, 9, 9, 58, 75, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 75, 176, 14, 80, 88, 64, 47, 0, 8, 9, 4, 9, 8, 4, 126, 0, 6, 3, 0, 3, 6, 0, 126, 11, 10, 2, 9, 9, 58, 75, 7, 1, 3, 3, 4, 95, 5, 1, 4, 4, 59, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 75, 176, 40, 80, 88, 64, 55, 0, 8, 9, 5, 9, 8, 5, 126, 0, 6, 7, 0, 7, 6, 0, 126, 11, 10, 2, 9, 9, 58, 75, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 75, 176, 42, 80, 88, 64, 52, 11, 10, 2, 9, 8, 9, 131, 0, 8, 5, 8, 131, 0, 6, 7, 0, 7, 6, 0, 126, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 57, 1, 76, 27, 64, 52, 11, 10, 2, 9, 8, 9, 131, 0, 8, 5, 8, 131, 0, 6, 7, 0, 7, 6, 0, 126, 0, 3, 3, 4, 93, 0, 4, 4, 59, 75, 0, 7, 7, 5, 95, 0, 5, 5, 65, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 60, 1, 76, 89, 89, 89, 89, 64, 20, 24, 24, 24, 31, 24, 31, 28, 27, 18, 34, 18, 36, 17, 17, 17, 17, 17, 12, 9, 29, 43, 1, 17, 33, 21, 33, 53, 33, 17, 33, 53, 33, 21, 54, 55, 54, 51, 50, 23, 17, 35, 39, 38, 35, 34, 1, 1, 35, 1, 51, 23, 51, 55, 2, 18, 1, 113, 252, 199, 1, 3, 254, 253, 1, 200, 74, 67, 96, 111, 118, 110, 124, 20, 56, 62, 184, 1, 40, 254, 255, 218, 254, 255, 124, 241, 2, 242, 2, 190, 253, 189, 123, 123, 3, 71, 124, 211, 106, 53, 76, 68, 254, 184, 188, 36, 2, 154, 254, 191, 1, 65, 202, 202, 0, 0, 2, 0, 151, 255, 219, 4, 67, 7, 143, 0, 3, 0, 45, 0, 140, 64, 10, 24, 1, 6, 4, 4, 1, 7, 3, 2, 74, 75, 176, 42, 80, 88, 64, 47, 0, 0, 1, 0, 131, 8, 1, 1, 4, 1, 131, 0, 5, 6, 2, 6, 5, 2, 126, 0, 2, 3, 6, 2, 3, 124, 0, 6, 6, 4, 95, 0, 4, 4, 62, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 45, 0, 0, 1, 0, 131, 8, 1, 1, 4, 1, 131, 0, 5, 6, 2, 6, 5, 2, 126, 0, 2, 3, 6, 2, 3, 124, 0, 4, 0, 6, 5, 4, 6, 104, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 22, 0, 0, 45, 43, 30, 28, 26, 25, 23, 21, 10, 8, 6, 5, 0, 3, 0, 3, 17, 9, 9, 21, 43, 1, 19, 51, 1, 1, 17, 51, 23, 22, 51, 50, 55, 54, 53, 52, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 21, 20, 23, 22, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 1, 253, 216, 228, 254, 191, 254, 31, 124, 24, 187, 124, 127, 79, 79, 200, 190, 189, 67, 66, 1, 192, 183, 192, 123, 25, 125, 117, 241, 56, 49, 126, 169, 195, 60, 61, 134, 135, 224, 205, 6, 78, 1, 65, 254, 191, 249, 239, 1, 102, 234, 91, 79, 78, 114, 157, 104, 99, 98, 83, 80, 137, 1, 138, 73, 254, 193, 195, 74, 246, 101, 48, 42, 68, 91, 105, 73, 74, 133, 204, 123, 123, 0, 2, 0, 173, 255, 231, 4, 64, 6, 68, 0, 41, 0, 45, 0, 197, 64, 10, 20, 1, 4, 2, 0, 1, 5, 1, 2, 74, 75, 176, 10, 80, 88, 64, 49, 8, 1, 7, 6, 2, 6, 7, 2, 126, 0, 3, 4, 0, 4, 3, 112, 0, 0, 1, 4, 0, 1, 124, 0, 6, 6, 58, 75, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 1, 1, 5, 95, 0, 5, 5, 66, 5, 76, 27, 75, 176, 40, 80, 88, 64, 50, 8, 1, 7, 6, 2, 6, 7, 2, 126, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 6, 6, 58, 75, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 1, 1, 5, 95, 0, 5, 5, 66, 5, 76, 27, 64, 47, 0, 6, 7, 6, 131, 8, 1, 7, 2, 7, 131, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 1, 1, 5, 95, 0, 5, 5, 66, 5, 76, 89, 89, 64, 16, 42, 42, 42, 45, 42, 45, 18, 45, 34, 18, 43, 34, 17, 9, 9, 27, 43, 55, 17, 51, 23, 22, 51, 50, 53, 52, 39, 38, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 19, 19, 51, 1, 173, 123, 25, 196, 137, 238, 40, 40, 103, 204, 171, 78, 77, 1, 176, 221, 181, 123, 25, 109, 146, 110, 61, 72, 206, 202, 168, 73, 72, 123, 123, 220, 226, 109, 216, 228, 254, 191, 61, 1, 41, 183, 76, 168, 66, 36, 37, 27, 54, 45, 73, 71, 118, 1, 61, 72, 254, 226, 181, 53, 35, 41, 85, 112, 54, 53, 44, 68, 67, 115, 157, 90, 91, 5, 28, 1, 65, 254, 191, 0, 0, 0, 2, 0, 151, 255, 219, 4, 67, 7, 143, 0, 7, 0, 49, 0, 147, 64, 14, 5, 1, 1, 0, 28, 1, 7, 5, 8, 1, 8, 4, 3, 74, 75, 176, 42, 80, 88, 64, 48, 0, 0, 1, 0, 131, 9, 2, 2, 1, 5, 1, 131, 0, 6, 7, 3, 7, 6, 3, 126, 0, 3, 4, 7, 3, 4, 124, 0, 7, 7, 5, 95, 0, 5, 5, 62, 75, 0, 4, 4, 8, 95, 0, 8, 8, 63, 8, 76, 27, 64, 46, 0, 0, 1, 0, 131, 9, 2, 2, 1, 5, 1, 131, 0, 6, 7, 3, 7, 6, 3, 126, 0, 3, 4, 7, 3, 4, 124, 0, 5, 0, 7, 6, 5, 7, 104, 0, 4, 4, 8, 95, 0, 8, 8, 66, 8, 76, 89, 64, 23, 0, 0, 49, 47, 34, 32, 30, 29, 27, 25, 14, 12, 10, 9, 0, 7, 0, 7, 17, 17, 10, 9, 22, 43, 1, 1, 51, 1, 35, 39, 35, 7, 3, 17, 51, 23, 22, 51, 50, 55, 54, 53, 52, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 21, 20, 23, 22, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 1, 11, 1, 0, 219, 1, 0, 123, 241, 3, 241, 239, 124, 24, 187, 124, 127, 79, 79, 200, 190, 189, 67, 66, 1, 192, 183, 192, 123, 25, 125, 117, 241, 56, 49, 126, 169, 195, 60, 61, 134, 135, 224, 205, 6, 78, 1, 65, 254, 191, 202, 202, 249, 239, 1, 102, 234, 91, 79, 78, 114, 157, 104, 99, 98, 83, 80, 137, 1, 138, 73, 254, 193, 195, 74, 246, 101, 48, 42, 68, 91, 105, 73, 74, 133, 204, 123, 123, 0, 0, 0, 0, 2, 0, 173, 255, 231, 4, 64, 6, 68, 0, 41, 0, 49, 0, 146, 64, 14, 47, 1, 7, 6, 20, 1, 4, 2, 0, 1, 5, 1, 3, 74, 75, 176, 40, 80, 88, 64, 51, 9, 8, 2, 7, 6, 2, 6, 7, 2, 126, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 6, 6, 58, 75, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 1, 1, 5, 95, 0, 5, 5, 66, 5, 76, 27, 64, 48, 0, 6, 7, 6, 131, 9, 8, 2, 7, 2, 7, 131, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 1, 1, 5, 95, 0, 5, 5, 66, 5, 76, 89, 64, 17, 42, 42, 42, 49, 42, 49, 17, 18, 45, 34, 18, 43, 34, 17, 10, 9, 28, 43, 55, 17, 51, 23, 22, 51, 50, 53, 52, 39, 38, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 3, 1, 51, 1, 35, 39, 35, 7, 173, 123, 25, 196, 137, 238, 40, 40, 103, 204, 171, 78, 77, 1, 176, 221, 181, 123, 25, 109, 146, 110, 61, 72, 206, 202, 168, 73, 72, 123, 123, 220, 226, 133, 1, 0, 219, 1, 0, 123, 241, 3, 241, 61, 1, 41, 183, 76, 168, 66, 36, 37, 27, 54, 45, 73, 71, 118, 1, 61, 72, 254, 226, 181, 53, 35, 41, 85, 112, 54, 53, 44, 68, 67, 115, 157, 90, 91, 5, 28, 1, 65, 254, 191, 202, 202, 0, 0, 0, 1, 0, 151, 254, 80, 4, 67, 5, 237, 0, 60, 0, 158, 64, 18, 20, 1, 4, 2, 0, 1, 5, 1, 52, 1, 8, 9, 51, 1, 7, 8, 4, 74, 75, 176, 42, 80, 88, 64, 55, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 6, 0, 9, 8, 6, 9, 103, 0, 4, 4, 2, 95, 0, 2, 2, 62, 75, 0, 1, 1, 5, 95, 10, 1, 5, 5, 66, 75, 0, 8, 8, 7, 95, 0, 7, 7, 67, 7, 76, 27, 64, 53, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 2, 0, 4, 3, 2, 4, 103, 0, 6, 0, 9, 8, 6, 9, 103, 0, 1, 1, 5, 95, 10, 1, 5, 5, 66, 75, 0, 8, 8, 7, 95, 0, 7, 7, 67, 7, 76, 89, 64, 16, 60, 59, 58, 57, 35, 38, 17, 29, 34, 18, 43, 34, 17, 11, 9, 29, 43, 55, 17, 51, 23, 22, 51, 50, 55, 54, 53, 52, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 21, 20, 23, 22, 23, 23, 22, 23, 22, 21, 20, 7, 6, 7, 7, 22, 23, 22, 21, 20, 7, 6, 35, 34, 39, 53, 22, 51, 50, 53, 52, 39, 55, 38, 151, 124, 24, 187, 124, 127, 79, 79, 200, 190, 189, 67, 66, 1, 192, 183, 192, 123, 25, 125, 117, 241, 56, 49, 126, 169, 195, 60, 61, 134, 120, 189, 40, 72, 52, 70, 59, 58, 87, 67, 76, 50, 54, 104, 187, 75, 185, 61, 1, 102, 234, 91, 79, 78, 114, 157, 104, 99, 98, 83, 80, 137, 1, 138, 73, 254, 193, 195, 74, 246, 101, 48, 42, 68, 91, 105, 73, 74, 133, 204, 123, 109, 12, 74, 2, 37, 49, 72, 68, 47, 48, 21, 81, 15, 74, 93, 3, 139, 10, 0, 1, 0, 173, 254, 80, 4, 64, 4, 87, 0, 60, 0, 92, 64, 89, 20, 1, 4, 2, 0, 1, 5, 1, 52, 1, 8, 9, 51, 1, 7, 8, 4, 74, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 6, 0, 9, 8, 6, 9, 103, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 1, 1, 5, 95, 10, 1, 5, 5, 66, 75, 0, 8, 8, 7, 95, 0, 7, 7, 67, 7, 76, 60, 59, 58, 57, 35, 38, 17, 29, 34, 18, 43, 34, 17, 11, 9, 29, 43, 55, 17, 51, 23, 22, 51, 50, 53, 52, 39, 38, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 23, 22, 23, 22, 21, 20, 7, 6, 7, 7, 22, 23, 22, 21, 20, 7, 6, 35, 34, 39, 53, 22, 51, 50, 53, 52, 39, 55, 38, 173, 123, 25, 196, 137, 238, 40, 40, 103, 204, 171, 78, 77, 1, 176, 221, 181, 123, 25, 109, 146, 110, 61, 72, 206, 202, 168, 73, 72, 123, 110, 188, 47, 72, 52, 70, 59, 58, 87, 67, 76, 50, 54, 104, 187, 82, 200, 61, 1, 41, 183, 76, 168, 66, 36, 37, 27, 54, 45, 73, 71, 118, 1, 61, 72, 254, 226, 181, 53, 35, 41, 85, 112, 54, 53, 44, 68, 67, 115, 157, 90, 81, 9, 85, 2, 37, 49, 72, 68, 47, 48, 21, 81, 15, 74, 93, 3, 152, 8, 0, 0, 0, 2, 0, 151, 255, 219, 4, 67, 7, 143, 0, 7, 0, 49, 0, 145, 64, 14, 5, 1, 0, 1, 28, 1, 7, 5, 8, 1, 8, 4, 3, 74, 75, 176, 42, 80, 88, 64, 47, 0, 0, 1, 5, 1, 0, 5, 126, 0, 3, 6, 4, 6, 3, 4, 126, 9, 2, 2, 1, 0, 6, 3, 1, 6, 101, 0, 7, 7, 5, 95, 0, 5, 5, 62, 75, 0, 4, 4, 8, 95, 0, 8, 8, 63, 8, 76, 27, 64, 45, 0, 0, 1, 5, 1, 0, 5, 126, 0, 3, 6, 4, 6, 3, 4, 126, 0, 5, 0, 7, 6, 5, 7, 104, 9, 2, 2, 1, 0, 6, 3, 1, 6, 101, 0, 4, 4, 8, 95, 0, 8, 8, 66, 8, 76, 89, 64, 23, 0, 0, 49, 47, 34, 32, 30, 29, 27, 25, 14, 12, 10, 9, 0, 7, 0, 7, 17, 17, 10, 9, 22, 43, 1, 1, 35, 1, 51, 23, 51, 55, 1, 17, 51, 23, 22, 51, 50, 55, 54, 53, 52, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 21, 20, 23, 22, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 3, 231, 254, 255, 218, 254, 255, 124, 241, 2, 242, 253, 43, 124, 24, 187, 124, 127, 79, 79, 200, 190, 189, 67, 66, 1, 192, 183, 192, 123, 25, 125, 117, 241, 56, 49, 126, 169, 195, 60, 61, 134, 135, 224, 205, 7, 143, 254, 191, 1, 65, 202, 202, 248, 174, 1, 102, 234, 91, 79, 78, 114, 157, 104, 99, 98, 83, 80, 137, 1, 138, 73, 254, 193, 195, 74, 246, 101, 48, 42, 68, 91, 105, 73, 74, 133, 204, 123, 123, 0, 2, 0, 173, 255, 231, 4, 64, 6, 68, 0, 41, 0, 49, 0, 143, 64, 14, 47, 1, 6, 7, 20, 1, 4, 2, 0, 1, 5, 1, 3, 74, 75, 176, 40, 80, 88, 64, 49, 0, 6, 7, 2, 7, 6, 2, 126, 0, 0, 3, 1, 3, 0, 1, 126, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 3, 3, 7, 93, 9, 8, 2, 7, 7, 58, 75, 0, 1, 1, 5, 95, 0, 5, 5, 66, 5, 76, 27, 64, 47, 0, 6, 7, 2, 7, 6, 2, 126, 0, 0, 3, 1, 3, 0, 1, 126, 9, 8, 2, 7, 0, 3, 0, 7, 3, 101, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 1, 1, 5, 95, 0, 5, 5, 66, 5, 76, 89, 64, 17, 42, 42, 42, 49, 42, 49, 17, 18, 45, 34, 18, 43, 34, 17, 10, 9, 28, 43, 55, 17, 51, 23, 22, 51, 50, 53, 52, 39, 38, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 1, 1, 35, 1, 51, 23, 51, 55, 173, 123, 25, 196, 137, 238, 40, 40, 103, 204, 171, 78, 77, 1, 176, 221, 181, 123, 25, 109, 146, 110, 61, 72, 206, 202, 168, 73, 72, 123, 123, 220, 226, 2, 87, 254, 255, 218, 254, 255, 124, 241, 2, 242, 61, 1, 41, 183, 76, 168, 66, 36, 37, 27, 54, 45, 73, 71, 118, 1, 61, 72, 254, 226, 181, 53, 35, 41, 85, 112, 54, 53, 44, 68, 67, 115, 157, 90, 91, 6, 93, 254, 191, 1, 65, 202, 202, 0, 1, 0, 62, 254, 80, 4, 144, 5, 200, 0, 35, 0, 212, 64, 10, 28, 1, 10, 11, 27, 1, 9, 10, 2, 74, 75, 176, 10, 80, 88, 64, 51, 4, 1, 2, 1, 0, 1, 2, 112, 0, 8, 0, 11, 10, 8, 11, 103, 5, 1, 1, 1, 3, 93, 0, 3, 3, 56, 75, 6, 1, 0, 0, 7, 93, 13, 12, 2, 7, 7, 57, 75, 0, 10, 10, 9, 95, 0, 9, 9, 67, 9, 76, 27, 75, 176, 42, 80, 88, 64, 52, 4, 1, 2, 1, 0, 1, 2, 0, 126, 0, 8, 0, 11, 10, 8, 11, 103, 5, 1, 1, 1, 3, 93, 0, 3, 3, 56, 75, 6, 1, 0, 0, 7, 93, 13, 12, 2, 7, 7, 57, 75, 0, 10, 10, 9, 95, 0, 9, 9, 67, 9, 76, 27, 64, 50, 4, 1, 2, 1, 0, 1, 2, 0, 126, 0, 3, 5, 1, 1, 2, 3, 1, 101, 0, 8, 0, 11, 10, 8, 11, 103, 6, 1, 0, 0, 7, 93, 13, 12, 2, 7, 7, 60, 75, 0, 10, 10, 9, 95, 0, 9, 9, 67, 9, 76, 89, 89, 64, 24, 0, 0, 0, 35, 0, 35, 34, 33, 31, 29, 26, 24, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14, 9, 29, 43, 33, 53, 33, 17, 33, 21, 35, 17, 33, 17, 35, 53, 33, 17, 33, 21, 33, 7, 22, 23, 22, 21, 20, 7, 6, 35, 34, 39, 53, 22, 51, 50, 53, 52, 39, 55, 1, 1, 1, 3, 254, 181, 123, 4, 82, 124, 254, 182, 1, 3, 254, 228, 60, 72, 52, 70, 59, 59, 85, 68, 76, 50, 54, 104, 187, 95, 123, 4, 210, 232, 1, 99, 254, 157, 232, 251, 46, 123, 109, 2, 37, 49, 72, 68, 47, 48, 21, 81, 15, 74, 93, 3, 175, 0, 0, 1, 0, 119, 254, 80, 4, 8, 5, 62, 0, 43, 0, 141, 64, 19, 43, 1, 10, 5, 22, 0, 2, 0, 10, 15, 1, 3, 4, 14, 1, 2, 3, 4, 74, 75, 176, 40, 80, 88, 64, 46, 0, 7, 6, 7, 131, 0, 1, 0, 4, 3, 1, 4, 103, 9, 1, 5, 5, 6, 93, 8, 1, 6, 6, 59, 75, 0, 10, 10, 0, 95, 0, 0, 0, 66, 75, 0, 3, 3, 2, 95, 0, 2, 2, 67, 2, 76, 27, 64, 44, 0, 7, 6, 7, 131, 8, 1, 6, 9, 1, 5, 10, 6, 5, 101, 0, 1, 0, 4, 3, 1, 4, 103, 0, 10, 10, 0, 95, 0, 0, 0, 66, 75, 0, 3, 3, 2, 95, 0, 2, 2, 67, 2, 76, 89, 64, 16, 42, 40, 36, 35, 17, 17, 17, 22, 18, 35, 38, 18, 17, 11, 9, 29, 43, 37, 6, 35, 35, 7, 22, 23, 22, 21, 20, 7, 6, 35, 34, 39, 53, 22, 51, 50, 53, 52, 39, 55, 38, 39, 38, 53, 17, 33, 53, 33, 17, 51, 17, 33, 21, 33, 17, 20, 23, 22, 51, 50, 55, 4, 8, 165, 171, 6, 46, 72, 52, 70, 59, 58, 87, 67, 76, 50, 54, 104, 187, 86, 86, 46, 69, 254, 234, 1, 22, 197, 1, 170, 254, 86, 32, 32, 95, 107, 172, 61, 86, 84, 2, 37, 49, 72, 68, 47, 48, 21, 81, 15, 74, 93, 3, 159, 16, 50, 74, 175, 2, 114, 136, 1, 25, 254, 231, 136, 253, 231, 160, 52, 53, 77, 0, 0, 0, 2, 0, 62, 0, 0, 4, 144, 7, 143, 0, 7, 0, 23, 0, 193, 181, 5, 1, 0, 1, 1, 74, 75, 176, 10, 80, 88, 64, 44, 11, 2, 2, 1, 0, 1, 131, 0, 0, 6, 0, 131, 7, 1, 5, 4, 3, 4, 5, 112, 8, 1, 4, 4, 6, 93, 0, 6, 6, 56, 75, 9, 1, 3, 3, 10, 93, 12, 1, 10, 10, 57, 10, 76, 27, 75, 176, 42, 80, 88, 64, 45, 11, 2, 2, 1, 0, 1, 131, 0, 0, 6, 0, 131, 7, 1, 5, 4, 3, 4, 5, 3, 126, 8, 1, 4, 4, 6, 93, 0, 6, 6, 56, 75, 9, 1, 3, 3, 10, 93, 12, 1, 10, 10, 57, 10, 76, 27, 64, 43, 11, 2, 2, 1, 0, 1, 131, 0, 0, 6, 0, 131, 7, 1, 5, 4, 3, 4, 5, 3, 126, 0, 6, 8, 1, 4, 5, 6, 4, 102, 9, 1, 3, 3, 10, 93, 12, 1, 10, 10, 60, 10, 76, 89, 89, 64, 31, 8, 8, 0, 0, 8, 23, 8, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 0, 7, 0, 7, 17, 17, 13, 9, 22, 43, 1, 1, 35, 1, 51, 23, 51, 55, 1, 53, 33, 17, 33, 21, 35, 17, 33, 17, 35, 53, 33, 17, 33, 21, 3, 213, 254, 255, 218, 254, 255, 124, 241, 2, 242, 253, 167, 1, 3, 254, 181, 123, 4, 82, 124, 254, 182, 1, 3, 7, 143, 254, 191, 1, 65, 202, 202, 248, 113, 123, 4, 210, 232, 1, 99, 254, 157, 232, 251, 46, 123, 0, 2, 0, 119, 255, 231, 4, 8, 6, 152, 0, 23, 0, 33, 0, 111, 64, 20, 29, 27, 2, 3, 7, 25, 24, 2, 2, 3, 23, 1, 6, 1, 0, 1, 0, 6, 4, 74, 75, 176, 40, 80, 88, 64, 33, 0, 7, 3, 7, 131, 0, 3, 2, 3, 131, 5, 1, 1, 1, 2, 93, 4, 1, 2, 2, 59, 75, 0, 6, 6, 0, 95, 0, 0, 0, 66, 0, 76, 27, 64, 31, 0, 7, 3, 7, 131, 0, 3, 2, 3, 131, 4, 1, 2, 5, 1, 1, 6, 2, 1, 102, 0, 6, 6, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 11, 24, 36, 17, 17, 17, 17, 20, 33, 8, 9, 28, 43, 37, 6, 35, 34, 39, 38, 53, 17, 33, 53, 33, 17, 51, 17, 33, 21, 33, 17, 20, 23, 22, 51, 50, 55, 1, 53, 54, 53, 53, 35, 53, 51, 21, 2, 4, 8, 165, 171, 161, 69, 69, 254, 234, 1, 22, 197, 1, 170, 254, 86, 32, 32, 95, 106, 173, 254, 247, 76, 76, 197, 1, 61, 86, 75, 74, 175, 2, 114, 136, 1, 25, 254, 231, 136, 253, 231, 160, 52, 53, 77, 4, 10, 59, 21, 160, 17, 197, 171, 254, 250, 0, 0, 0, 0, 1, 0, 62, 0, 0, 4, 144, 5, 200, 0, 23, 0, 171, 75, 176, 10, 80, 88, 64, 42, 6, 1, 4, 3, 2, 3, 4, 112, 8, 1, 2, 9, 1, 1, 0, 2, 1, 101, 7, 1, 3, 3, 5, 93, 0, 5, 5, 56, 75, 10, 1, 0, 0, 11, 93, 12, 1, 11, 11, 57, 11, 76, 27, 75, 176, 42, 80, 88, 64, 43, 6, 1, 4, 3, 2, 3, 4, 2, 126, 8, 1, 2, 9, 1, 1, 0, 2, 1, 101, 7, 1, 3, 3, 5, 93, 0, 5, 5, 56, 75, 10, 1, 0, 0, 11, 93, 12, 1, 11, 11, 57, 11, 76, 27, 64, 41, 6, 1, 4, 3, 2, 3, 4, 2, 126, 0, 5, 7, 1, 3, 4, 5, 3, 101, 8, 1, 2, 9, 1, 1, 0, 2, 1, 101, 10, 1, 0, 0, 11, 93, 12, 1, 11, 11, 60, 11, 76, 89, 89, 64, 22, 0, 0, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13, 9, 29, 43, 33, 53, 33, 17, 33, 53, 33, 17, 33, 21, 35, 17, 33, 17, 35, 53, 33, 17, 33, 21, 33, 17, 33, 21, 1, 1, 1, 3, 254, 216, 1, 40, 254, 181, 123, 4, 82, 124, 254, 182, 1, 40, 254, 216, 1, 3, 123, 2, 81, 98, 2, 31, 232, 1, 99, 254, 157, 232, 253, 225, 98, 253, 175, 123, 0, 0, 0, 0, 1, 0, 119, 255, 231, 4, 8, 5, 62, 0, 31, 0, 116, 64, 10, 0, 1, 10, 1, 1, 1, 0, 10, 2, 74, 75, 176, 40, 80, 88, 64, 38, 0, 5, 4, 5, 131, 8, 1, 2, 9, 1, 1, 10, 2, 1, 101, 7, 1, 3, 3, 4, 93, 6, 1, 4, 4, 59, 75, 0, 10, 10, 0, 95, 0, 0, 0, 66, 0, 76, 27, 64, 36, 0, 5, 4, 5, 131, 6, 1, 4, 7, 1, 3, 2, 4, 3, 101, 8, 1, 2, 9, 1, 1, 10, 2, 1, 101, 0, 10, 10, 0, 95, 0, 0, 0, 66, 0, 76, 89, 64, 16, 31, 29, 25, 24, 17, 17, 17, 17, 17, 17, 17, 20, 34, 11, 9, 29, 43, 37, 21, 6, 35, 34, 39, 38, 53, 17, 35, 53, 51, 53, 33, 53, 33, 17, 51, 17, 33, 21, 33, 21, 33, 21, 33, 21, 20, 23, 22, 51, 50, 4, 8, 165, 171, 161, 69, 69, 229, 229, 254, 234, 1, 22, 197, 1, 170, 254, 86, 1, 46, 254, 210, 32, 32, 95, 106, 200, 139, 86, 75, 74, 175, 1, 40, 98, 232, 136, 1, 25, 254, 231, 136, 232, 98, 207, 160, 52, 53, 0, 0, 0, 2, 0, 62, 255, 219, 4, 144, 7, 77, 0, 25, 0, 49, 0, 126, 75, 176, 42, 80, 88, 64, 44, 10, 1, 8, 0, 12, 11, 8, 12, 103, 0, 9, 14, 13, 2, 11, 1, 9, 11, 104, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 42, 10, 1, 8, 0, 12, 11, 8, 12, 103, 0, 9, 14, 13, 2, 11, 1, 9, 11, 104, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 26, 26, 26, 26, 49, 26, 49, 48, 46, 43, 41, 38, 37, 36, 34, 37, 36, 17, 17, 18, 36, 17, 17, 16, 15, 9, 29, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 32, 17, 19, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 110, 202, 254, 76, 99, 6, 25, 45, 109, 72, 63, 60, 62, 34, 68, 11, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 141, 2, 75, 4, 60, 95, 50, 90, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 0, 0, 0, 0, 2, 0, 68, 255, 231, 4, 142, 5, 248, 0, 23, 0, 47, 0, 162, 182, 45, 30, 2, 7, 10, 1, 74, 75, 176, 42, 80, 88, 64, 56, 0, 1, 14, 5, 2, 3, 6, 1, 3, 104, 0, 4, 4, 0, 95, 2, 1, 0, 0, 62, 75, 13, 1, 10, 10, 6, 93, 11, 1, 6, 6, 59, 75, 12, 1, 7, 7, 8, 93, 0, 8, 8, 57, 75, 12, 1, 7, 7, 9, 95, 0, 9, 9, 66, 9, 76, 27, 64, 54, 2, 1, 0, 0, 4, 3, 0, 4, 103, 0, 1, 14, 5, 2, 3, 6, 1, 3, 104, 13, 1, 10, 10, 6, 93, 11, 1, 6, 6, 59, 75, 12, 1, 7, 7, 8, 93, 0, 8, 8, 60, 75, 12, 1, 7, 7, 9, 95, 0, 9, 9, 66, 9, 76, 89, 64, 30, 0, 0, 47, 46, 44, 42, 40, 39, 38, 37, 35, 33, 29, 28, 27, 26, 25, 24, 0, 23, 0, 23, 35, 35, 17, 35, 35, 15, 9, 25, 43, 1, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 5, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 1, 22, 6, 25, 45, 109, 72, 63, 60, 62, 34, 68, 11, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 1, 90, 1, 53, 123, 254, 191, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 5, 13, 95, 50, 90, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 207, 252, 61, 123, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 2, 0, 62, 255, 219, 4, 144, 6, 232, 0, 25, 0, 29, 0, 98, 75, 176, 42, 80, 88, 64, 34, 0, 8, 10, 1, 9, 1, 8, 9, 101, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 32, 0, 8, 10, 1, 9, 1, 8, 9, 101, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 18, 26, 26, 26, 29, 26, 29, 19, 36, 17, 17, 18, 36, 17, 17, 16, 11, 9, 29, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 32, 17, 19, 53, 33, 21, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 110, 202, 254, 76, 118, 2, 179, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 141, 2, 75, 4, 70, 124, 124, 0, 2, 0, 68, 255, 231, 4, 142, 5, 147, 0, 3, 0, 27, 0, 136, 182, 25, 10, 2, 3, 6, 1, 74, 75, 176, 42, 80, 88, 64, 44, 0, 0, 10, 1, 1, 2, 0, 1, 101, 9, 1, 6, 6, 2, 93, 7, 1, 2, 2, 59, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 57, 75, 8, 1, 3, 3, 5, 95, 0, 5, 5, 66, 5, 76, 27, 64, 44, 0, 0, 10, 1, 1, 2, 0, 1, 101, 9, 1, 6, 6, 2, 93, 7, 1, 2, 2, 59, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 60, 75, 8, 1, 3, 3, 5, 95, 0, 5, 5, 66, 5, 76, 89, 64, 26, 0, 0, 27, 26, 24, 22, 20, 19, 18, 17, 15, 13, 9, 8, 7, 6, 5, 4, 0, 3, 0, 3, 17, 11, 9, 21, 43, 1, 53, 33, 21, 7, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 1, 9, 2, 179, 222, 1, 53, 123, 254, 191, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 5, 23, 124, 124, 217, 252, 61, 123, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 2, 0, 62, 255, 219, 4, 144, 7, 112, 0, 25, 0, 41, 0, 108, 75, 176, 42, 80, 88, 64, 39, 10, 1, 8, 9, 8, 131, 0, 9, 0, 11, 1, 9, 11, 103, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 37, 10, 1, 8, 9, 8, 131, 0, 9, 0, 11, 1, 9, 11, 103, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 102, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 18, 37, 35, 32, 31, 30, 28, 18, 36, 17, 17, 18, 36, 17, 17, 16, 12, 9, 29, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 32, 17, 19, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 110, 202, 254, 76, 121, 123, 48, 174, 175, 48, 123, 23, 26, 91, 202, 152, 89, 55, 28, 11, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 141, 2, 75, 5, 74, 148, 148, 89, 46, 155, 81, 49, 72, 29, 0, 0, 0, 2, 0, 68, 255, 231, 4, 142, 6, 43, 0, 15, 0, 39, 0, 198, 182, 37, 22, 2, 5, 8, 1, 74, 75, 176, 21, 80, 88, 64, 51, 2, 1, 0, 0, 58, 75, 0, 3, 3, 1, 95, 0, 1, 1, 56, 75, 11, 1, 8, 8, 4, 93, 9, 1, 4, 4, 59, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 57, 75, 10, 1, 5, 5, 7, 95, 0, 7, 7, 66, 7, 76, 27, 75, 176, 42, 80, 88, 64, 49, 0, 1, 0, 3, 4, 1, 3, 103, 2, 1, 0, 0, 58, 75, 11, 1, 8, 8, 4, 93, 9, 1, 4, 4, 59, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 57, 75, 10, 1, 5, 5, 7, 95, 0, 7, 7, 66, 7, 76, 27, 64, 49, 0, 1, 0, 3, 4, 1, 3, 103, 2, 1, 0, 0, 58, 75, 11, 1, 8, 8, 4, 93, 9, 1, 4, 4, 59, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 60, 75, 10, 1, 5, 5, 7, 95, 0, 7, 7, 66, 7, 76, 89, 89, 64, 18, 39, 38, 36, 34, 32, 31, 18, 36, 17, 17, 21, 35, 17, 33, 16, 12, 9, 29, 43, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 1, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 1, 9, 123, 48, 174, 175, 48, 123, 23, 26, 91, 201, 153, 89, 55, 28, 11, 1, 199, 1, 53, 123, 254, 191, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 6, 43, 148, 148, 89, 46, 155, 81, 49, 72, 29, 254, 78, 252, 61, 123, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 3, 0, 62, 255, 219, 4, 144, 7, 241, 0, 25, 0, 41, 0, 57, 0, 125, 75, 176, 42, 80, 88, 64, 43, 12, 1, 8, 13, 1, 10, 11, 8, 10, 103, 0, 11, 0, 9, 1, 11, 9, 103, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 41, 12, 1, 8, 13, 1, 10, 11, 8, 10, 103, 0, 11, 0, 9, 1, 11, 9, 103, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 27, 43, 42, 27, 26, 51, 49, 42, 57, 43, 57, 35, 33, 26, 41, 27, 41, 36, 17, 17, 18, 36, 17, 17, 16, 14, 9, 28, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 32, 17, 1, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 110, 202, 254, 76, 1, 175, 94, 66, 67, 67, 66, 96, 83, 62, 80, 67, 66, 94, 57, 42, 42, 41, 42, 56, 54, 39, 50, 42, 41, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 141, 2, 75, 5, 203, 66, 66, 94, 97, 65, 66, 54, 70, 103, 94, 66, 67, 87, 41, 40, 59, 58, 41, 42, 33, 43, 66, 58, 40, 41, 0, 0, 0, 3, 0, 68, 255, 231, 4, 142, 6, 201, 0, 15, 0, 31, 0, 55, 0, 163, 182, 53, 38, 2, 5, 8, 1, 74, 75, 176, 42, 80, 88, 64, 53, 12, 1, 0, 13, 1, 2, 3, 0, 2, 103, 0, 3, 0, 1, 4, 3, 1, 103, 11, 1, 8, 8, 4, 93, 9, 1, 4, 4, 59, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 57, 75, 10, 1, 5, 5, 7, 95, 0, 7, 7, 66, 7, 76, 27, 64, 53, 12, 1, 0, 13, 1, 2, 3, 0, 2, 103, 0, 3, 0, 1, 4, 3, 1, 103, 11, 1, 8, 8, 4, 93, 9, 1, 4, 4, 59, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 60, 75, 10, 1, 5, 5, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 35, 17, 16, 1, 0, 55, 54, 52, 50, 48, 47, 46, 45, 43, 41, 37, 36, 35, 34, 33, 32, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 14, 9, 20, 43, 1, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 19, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 2, 99, 94, 66, 67, 67, 66, 96, 83, 62, 80, 67, 67, 93, 58, 41, 42, 41, 41, 58, 53, 39, 50, 42, 42, 66, 1, 53, 123, 254, 191, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 6, 201, 66, 66, 94, 97, 65, 66, 54, 69, 104, 94, 66, 67, 87, 41, 40, 59, 58, 41, 42, 33, 43, 66, 58, 40, 41, 253, 204, 252, 61, 123, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 0, 0, 3, 0, 62, 255, 219, 4, 144, 7, 143, 0, 25, 0, 29, 0, 33, 0, 112, 75, 176, 42, 80, 88, 64, 37, 10, 1, 8, 13, 11, 12, 3, 9, 1, 8, 9, 101, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 7, 95, 0, 7, 7, 63, 7, 76, 27, 64, 35, 10, 1, 8, 13, 11, 12, 3, 9, 1, 8, 9, 101, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 0, 3, 3, 7, 95, 0, 7, 7, 66, 7, 76, 89, 64, 26, 30, 30, 26, 26, 30, 33, 30, 33, 32, 31, 26, 29, 26, 29, 19, 36, 17, 17, 18, 36, 17, 17, 16, 14, 9, 29, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 35, 32, 17, 19, 19, 51, 1, 51, 19, 51, 1, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 110, 202, 254, 76, 199, 240, 192, 254, 191, 240, 241, 191, 254, 191, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 141, 2, 75, 4, 40, 1, 65, 254, 191, 1, 65, 254, 191, 0, 0, 0, 0, 3, 0, 68, 255, 231, 4, 142, 6, 68, 0, 3, 0, 7, 0, 31, 0, 208, 182, 29, 14, 2, 5, 8, 1, 74, 75, 176, 40, 80, 88, 64, 49, 13, 3, 12, 3, 1, 1, 0, 93, 2, 1, 0, 0, 58, 75, 11, 1, 8, 8, 4, 93, 9, 1, 4, 4, 59, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 57, 75, 10, 1, 5, 5, 7, 95, 0, 7, 7, 66, 7, 76, 27, 75, 176, 42, 80, 88, 64, 47, 2, 1, 0, 13, 3, 12, 3, 1, 4, 0, 1, 101, 11, 1, 8, 8, 4, 93, 9, 1, 4, 4, 59, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 57, 75, 10, 1, 5, 5, 7, 95, 0, 7, 7, 66, 7, 76, 27, 64, 47, 2, 1, 0, 13, 3, 12, 3, 1, 4, 0, 1, 101, 11, 1, 8, 8, 4, 93, 9, 1, 4, 4, 59, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 60, 75, 10, 1, 5, 5, 7, 95, 0, 7, 7, 66, 7, 76, 89, 89, 64, 34, 4, 4, 0, 0, 31, 30, 28, 26, 24, 23, 22, 21, 19, 17, 13, 12, 11, 10, 9, 8, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 14, 9, 21, 43, 1, 19, 51, 1, 51, 19, 51, 1, 7, 33, 17, 51, 21, 33, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 1, 59, 240, 192, 254, 191, 240, 241, 191, 254, 191, 43, 1, 53, 123, 254, 191, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 5, 3, 1, 65, 254, 191, 1, 65, 254, 191, 197, 252, 61, 123, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 0, 1, 0, 62, 254, 142, 4, 144, 5, 200, 0, 39, 0, 146, 64, 10, 29, 1, 7, 9, 30, 1, 8, 7, 2, 74, 75, 176, 40, 80, 88, 64, 35, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 9, 95, 0, 9, 9, 63, 75, 0, 7, 7, 8, 95, 0, 8, 8, 61, 8, 76, 27, 75, 176, 42, 80, 88, 64, 32, 0, 7, 0, 8, 7, 8, 99, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 0, 3, 3, 9, 95, 0, 9, 9, 63, 9, 76, 27, 64, 30, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 0, 7, 0, 8, 7, 8, 99, 0, 3, 3, 9, 95, 0, 9, 9, 66, 9, 76, 89, 89, 64, 14, 38, 36, 35, 40, 17, 17, 18, 36, 17, 17, 16, 10, 9, 29, 43, 19, 35, 53, 33, 21, 35, 17, 20, 23, 22, 51, 32, 17, 17, 35, 53, 33, 21, 35, 17, 20, 7, 6, 7, 6, 21, 20, 51, 50, 55, 21, 6, 35, 34, 53, 52, 55, 35, 32, 17, 185, 123, 1, 201, 136, 72, 71, 130, 1, 9, 136, 1, 127, 124, 111, 64, 95, 110, 115, 54, 37, 62, 78, 202, 101, 8, 254, 76, 5, 77, 123, 123, 252, 190, 210, 113, 114, 1, 190, 3, 57, 123, 123, 252, 163, 252, 140, 82, 34, 76, 91, 96, 15, 81, 29, 157, 99, 77, 2, 75, 0, 1, 0, 68, 254, 142, 4, 142, 4, 62, 0, 37, 0, 188, 64, 15, 35, 20, 2, 1, 7, 11, 1, 3, 6, 12, 1, 4, 3, 3, 74, 75, 176, 40, 80, 88, 64, 46, 10, 1, 7, 7, 0, 93, 8, 1, 0, 0, 59, 75, 9, 1, 1, 1, 2, 93, 5, 1, 2, 2, 57, 75, 9, 1, 1, 1, 6, 95, 0, 6, 6, 66, 75, 0, 3, 3, 4, 95, 0, 4, 4, 61, 4, 76, 27, 75, 176, 42, 80, 88, 64, 43, 0, 3, 0, 4, 3, 4, 99, 10, 1, 7, 7, 0, 93, 8, 1, 0, 0, 59, 75, 9, 1, 1, 1, 2, 93, 5, 1, 2, 2, 57, 75, 9, 1, 1, 1, 6, 95, 0, 6, 6, 66, 6, 76, 27, 64, 43, 0, 3, 0, 4, 3, 4, 99, 10, 1, 7, 7, 0, 93, 8, 1, 0, 0, 59, 75, 9, 1, 1, 1, 2, 93, 5, 1, 2, 2, 60, 75, 9, 1, 1, 1, 6, 95, 0, 6, 6, 66, 6, 76, 89, 89, 64, 16, 37, 36, 34, 32, 17, 18, 36, 19, 35, 35, 17, 17, 16, 11, 9, 29, 43, 1, 33, 17, 51, 21, 35, 6, 21, 20, 51, 50, 55, 21, 6, 35, 34, 53, 52, 55, 35, 53, 6, 7, 6, 35, 32, 17, 17, 35, 53, 33, 17, 20, 51, 50, 19, 17, 35, 2, 222, 1, 53, 123, 123, 129, 115, 54, 37, 62, 78, 202, 158, 91, 69, 68, 96, 119, 254, 210, 123, 1, 65, 163, 149, 144, 111, 4, 62, 252, 61, 123, 81, 98, 96, 15, 81, 29, 157, 123, 90, 209, 105, 53, 76, 1, 132, 2, 87, 124, 253, 62, 255, 1, 1, 2, 68, 0, 0, 0, 2, 0, 23, 0, 0, 4, 183, 7, 143, 0, 23, 0, 31, 0, 137, 64, 12, 29, 1, 10, 9, 21, 11, 7, 3, 7, 3, 2, 74, 75, 176, 42, 80, 88, 64, 42, 0, 9, 10, 9, 131, 13, 11, 2, 10, 1, 10, 131, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 12, 8, 2, 7, 7, 57, 7, 76, 27, 64, 40, 0, 9, 10, 9, 131, 13, 11, 2, 10, 1, 10, 131, 0, 3, 0, 7, 0, 3, 7, 126, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 12, 8, 2, 7, 7, 60, 7, 76, 89, 64, 27, 24, 24, 0, 0, 24, 31, 24, 31, 28, 27, 26, 25, 0, 23, 0, 23, 17, 17, 17, 19, 19, 17, 17, 17, 14, 9, 28, 43, 51, 3, 35, 53, 33, 21, 35, 19, 51, 19, 51, 19, 51, 19, 35, 53, 33, 21, 35, 3, 35, 3, 35, 3, 3, 1, 51, 1, 35, 39, 35, 7, 242, 170, 49, 1, 53, 98, 134, 2, 186, 156, 184, 3, 134, 99, 1, 17, 50, 170, 188, 182, 2, 184, 164, 1, 0, 219, 1, 0, 123, 241, 3, 241, 5, 77, 123, 123, 251, 204, 3, 209, 252, 51, 4, 48, 123, 123, 250, 179, 3, 206, 252, 50, 6, 78, 1, 65, 254, 191, 202, 202, 0, 0, 0, 0, 2, 0, 23, 0, 0, 4, 183, 6, 68, 0, 23, 0, 31, 0, 193, 64, 12, 29, 1, 10, 9, 21, 11, 7, 3, 7, 3, 2, 74, 75, 176, 40, 80, 88, 64, 45, 13, 11, 2, 10, 9, 1, 9, 10, 1, 126, 0, 3, 0, 7, 0, 3, 7, 126, 0, 9, 9, 58, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 12, 8, 2, 7, 7, 57, 7, 76, 27, 75, 176, 42, 80, 88, 64, 42, 0, 9, 10, 9, 131, 13, 11, 2, 10, 1, 10, 131, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 12, 8, 2, 7, 7, 57, 7, 76, 27, 64, 42, 0, 9, 10, 9, 131, 13, 11, 2, 10, 1, 10, 131, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 12, 8, 2, 7, 7, 60, 7, 76, 89, 89, 64, 27, 24, 24, 0, 0, 24, 31, 24, 31, 28, 27, 26, 25, 0, 23, 0, 23, 17, 17, 17, 19, 19, 17, 17, 17, 14, 9, 28, 43, 51, 3, 35, 53, 33, 21, 35, 19, 51, 19, 51, 19, 51, 19, 35, 53, 33, 21, 35, 3, 35, 3, 35, 3, 3, 1, 51, 1, 35, 39, 35, 7, 242, 170, 49, 1, 55, 86, 129, 2, 177, 167, 178, 2, 130, 98, 1, 16, 49, 170, 193, 179, 2, 182, 164, 1, 0, 219, 1, 0, 123, 241, 3, 241, 3, 194, 124, 124, 253, 44, 2, 173, 253, 80, 2, 215, 124, 124, 252, 62, 2, 191, 253, 65, 5, 3, 1, 65, 254, 191, 202, 202, 0, 0, 0, 0, 2, 0, 27, 0, 0, 4, 177, 7, 143, 0, 21, 0, 29, 0, 131, 64, 12, 27, 1, 10, 9, 18, 10, 3, 3, 0, 1, 2, 74, 75, 176, 42, 80, 88, 64, 39, 0, 9, 10, 9, 131, 13, 11, 2, 10, 2, 10, 131, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 56, 75, 7, 1, 0, 0, 8, 93, 12, 1, 8, 8, 57, 8, 76, 27, 64, 37, 0, 9, 10, 9, 131, 13, 11, 2, 10, 2, 10, 131, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 101, 7, 1, 0, 0, 8, 93, 12, 1, 8, 8, 60, 8, 76, 89, 64, 27, 22, 22, 0, 0, 22, 29, 22, 29, 26, 25, 24, 23, 0, 21, 0, 21, 18, 17, 17, 19, 17, 17, 18, 17, 14, 9, 28, 43, 33, 53, 51, 17, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 17, 51, 21, 1, 1, 51, 1, 35, 39, 35, 7, 1, 38, 222, 254, 109, 86, 1, 207, 149, 1, 59, 2, 1, 59, 148, 1, 120, 86, 254, 110, 222, 253, 124, 1, 0, 219, 1, 0, 123, 241, 3, 241, 123, 2, 25, 2, 185, 123, 123, 253, 224, 2, 32, 123, 123, 253, 72, 253, 230, 123, 6, 78, 1, 65, 254, 191, 202, 202, 0, 0, 2, 0, 55, 254, 117, 4, 149, 6, 68, 0, 22, 0, 30, 0, 198, 64, 10, 28, 1, 11, 10, 7, 1, 9, 0, 2, 74, 75, 176, 40, 80, 88, 64, 47, 14, 12, 2, 11, 10, 1, 10, 11, 1, 126, 0, 10, 10, 58, 75, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 13, 1, 9, 9, 57, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 27, 75, 176, 42, 80, 88, 64, 44, 0, 10, 11, 10, 131, 14, 12, 2, 11, 1, 11, 131, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 13, 1, 9, 9, 57, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 27, 64, 44, 0, 10, 11, 10, 131, 14, 12, 2, 11, 1, 11, 131, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 13, 1, 9, 9, 60, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 89, 89, 64, 28, 23, 23, 0, 0, 23, 30, 23, 30, 27, 26, 25, 24, 0, 22, 0, 22, 17, 17, 18, 17, 17, 19, 17, 17, 17, 15, 9, 29, 43, 33, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 3, 51, 21, 33, 53, 51, 19, 1, 1, 51, 1, 35, 39, 35, 7, 2, 2, 254, 127, 74, 1, 191, 160, 1, 55, 2, 1, 55, 160, 1, 111, 74, 254, 127, 108, 148, 254, 33, 198, 108, 254, 219, 1, 0, 219, 1, 0, 123, 241, 3, 241, 3, 194, 124, 124, 252, 246, 3, 10, 124, 124, 252, 62, 254, 241, 124, 124, 1, 15, 5, 3, 1, 65, 254, 191, 202, 202, 0, 0, 3, 0, 27, 0, 0, 4, 177, 7, 39, 0, 21, 0, 25, 0, 29, 0, 132, 183, 18, 10, 3, 3, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 39, 11, 1, 9, 15, 12, 14, 3, 10, 2, 9, 10, 101, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 56, 75, 7, 1, 0, 0, 8, 93, 13, 1, 8, 8, 57, 8, 76, 27, 64, 37, 11, 1, 9, 15, 12, 14, 3, 10, 2, 9, 10, 101, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 101, 7, 1, 0, 0, 8, 93, 13, 1, 8, 8, 60, 8, 76, 89, 64, 33, 26, 26, 22, 22, 0, 0, 26, 29, 26, 29, 28, 27, 22, 25, 22, 25, 24, 23, 0, 21, 0, 21, 18, 17, 17, 19, 17, 17, 18, 17, 16, 9, 28, 43, 33, 53, 51, 17, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 17, 51, 21, 1, 53, 51, 21, 33, 53, 51, 21, 1, 38, 222, 254, 109, 86, 1, 207, 149, 1, 59, 2, 1, 59, 148, 1, 120, 86, 254, 110, 222, 253, 157, 197, 1, 16, 197, 123, 2, 25, 2, 185, 123, 123, 253, 224, 2, 32, 123, 123, 253, 72, 253, 230, 123, 6, 98, 197, 197, 197, 197, 0, 0, 2, 0, 148, 0, 0, 4, 57, 7, 143, 0, 3, 0, 17, 0, 203, 64, 11, 5, 1, 5, 6, 1, 74, 12, 1, 2, 1, 73, 75, 176, 10, 80, 88, 64, 47, 0, 0, 1, 0, 131, 8, 1, 1, 4, 1, 131, 0, 3, 2, 6, 2, 3, 112, 0, 6, 5, 2, 6, 5, 124, 0, 2, 2, 4, 93, 0, 4, 4, 56, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 57, 7, 76, 27, 75, 176, 42, 80, 88, 64, 48, 0, 0, 1, 0, 131, 8, 1, 1, 4, 1, 131, 0, 3, 2, 6, 2, 3, 6, 126, 0, 6, 5, 2, 6, 5, 124, 0, 2, 2, 4, 93, 0, 4, 4, 56, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 57, 7, 76, 27, 64, 46, 0, 0, 1, 0, 131, 8, 1, 1, 4, 1, 131, 0, 3, 2, 6, 2, 3, 6, 126, 0, 6, 5, 2, 6, 5, 124, 0, 4, 0, 2, 3, 4, 2, 102, 0, 5, 5, 7, 94, 9, 1, 7, 7, 60, 7, 76, 89, 89, 64, 26, 4, 4, 0, 0, 4, 17, 4, 17, 16, 15, 14, 13, 11, 10, 9, 8, 7, 6, 0, 3, 0, 3, 17, 10, 9, 21, 43, 1, 19, 51, 1, 1, 53, 1, 33, 21, 35, 17, 33, 21, 1, 33, 17, 51, 17, 1, 235, 216, 228, 254, 191, 254, 46, 2, 188, 253, 210, 123, 3, 133, 253, 60, 2, 85, 124, 6, 78, 1, 65, 254, 191, 249, 178, 136, 4, 197, 232, 1, 99, 123, 251, 54, 1, 40, 254, 85, 0, 0, 0, 2, 0, 123, 0, 0, 4, 69, 6, 68, 0, 3, 0, 17, 1, 11, 64, 11, 5, 1, 7, 5, 1, 74, 12, 1, 2, 1, 73, 75, 176, 14, 80, 88, 64, 49, 8, 1, 1, 0, 4, 0, 1, 4, 126, 0, 3, 2, 6, 2, 3, 112, 0, 6, 5, 5, 6, 110, 0, 0, 0, 58, 75, 0, 2, 2, 4, 93, 0, 4, 4, 59, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 57, 7, 76, 27, 75, 176, 40, 80, 88, 64, 51, 8, 1, 1, 0, 4, 0, 1, 4, 126, 0, 3, 2, 6, 2, 3, 6, 126, 0, 6, 5, 2, 6, 5, 124, 0, 0, 0, 58, 75, 0, 2, 2, 4, 93, 0, 4, 4, 59, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 57, 7, 76, 27, 75, 176, 42, 80, 88, 64, 48, 0, 0, 1, 0, 131, 8, 1, 1, 4, 1, 131, 0, 3, 2, 6, 2, 3, 6, 126, 0, 6, 5, 2, 6, 5, 124, 0, 2, 2, 4, 93, 0, 4, 4, 59, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 57, 7, 76, 27, 64, 48, 0, 0, 1, 0, 131, 8, 1, 1, 4, 1, 131, 0, 3, 2, 6, 2, 3, 6, 126, 0, 6, 5, 2, 6, 5, 124, 0, 2, 2, 4, 93, 0, 4, 4, 59, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 60, 7, 76, 89, 89, 89, 64, 26, 4, 4, 0, 0, 4, 17, 4, 17, 16, 15, 14, 13, 11, 10, 9, 8, 7, 6, 0, 3, 0, 3, 17, 10, 9, 21, 43, 1, 19, 51, 1, 1, 53, 1, 33, 21, 35, 17, 33, 21, 1, 33, 53, 51, 17, 1, 229, 216, 228, 254, 191, 254, 27, 2, 188, 253, 228, 123, 3, 128, 253, 77, 2, 92, 124, 5, 3, 1, 65, 254, 191, 250, 253, 123, 3, 71, 197, 1, 65, 124, 252, 193, 195, 254, 186, 0, 0, 0, 0, 2, 0, 148, 0, 0, 4, 57, 7, 49, 0, 3, 0, 17, 0, 197, 64, 11, 5, 1, 5, 6, 1, 74, 12, 1, 2, 1, 73, 75, 176, 10, 80, 88, 64, 45, 0, 3, 2, 6, 2, 3, 112, 0, 6, 5, 2, 6, 5, 124, 0, 0, 8, 1, 1, 4, 0, 1, 101, 0, 2, 2, 4, 93, 0, 4, 4, 56, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 57, 7, 76, 27, 75, 176, 42, 80, 88, 64, 46, 0, 3, 2, 6, 2, 3, 6, 126, 0, 6, 5, 2, 6, 5, 124, 0, 0, 8, 1, 1, 4, 0, 1, 101, 0, 2, 2, 4, 93, 0, 4, 4, 56, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 57, 7, 76, 27, 64, 44, 0, 3, 2, 6, 2, 3, 6, 126, 0, 6, 5, 2, 6, 5, 124, 0, 0, 8, 1, 1, 4, 0, 1, 101, 0, 4, 0, 2, 3, 4, 2, 101, 0, 5, 5, 7, 94, 9, 1, 7, 7, 60, 7, 76, 89, 89, 64, 26, 4, 4, 0, 0, 4, 17, 4, 17, 16, 15, 14, 13, 11, 10, 9, 8, 7, 6, 0, 3, 0, 3, 17, 10, 9, 21, 43, 1, 53, 51, 21, 1, 53, 1, 33, 21, 35, 17, 33, 21, 1, 33, 17, 51, 17, 2, 4, 197, 253, 203, 2, 188, 253, 210, 123, 3, 133, 253, 60, 2, 85, 124, 6, 108, 197, 197, 249, 148, 136, 4, 197, 232, 1, 99, 123, 251, 54, 1, 40, 254, 85, 0, 0, 2, 0, 123, 0, 0, 4, 69, 5, 220, 0, 3, 0, 17, 0, 202, 64, 11, 5, 1, 7, 5, 1, 74, 12, 1, 2, 1, 73, 75, 176, 14, 80, 88, 64, 46, 0, 3, 2, 6, 2, 3, 112, 0, 6, 5, 5, 6, 110, 8, 1, 1, 1, 0, 93, 0, 0, 0, 56, 75, 0, 2, 2, 4, 93, 0, 4, 4, 59, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 57, 7, 76, 27, 75, 176, 42, 80, 88, 64, 48, 0, 3, 2, 6, 2, 3, 6, 126, 0, 6, 5, 2, 6, 5, 124, 8, 1, 1, 1, 0, 93, 0, 0, 0, 56, 75, 0, 2, 2, 4, 93, 0, 4, 4, 59, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 57, 7, 76, 27, 64, 46, 0, 3, 2, 6, 2, 3, 6, 126, 0, 6, 5, 2, 6, 5, 124, 0, 0, 8, 1, 1, 4, 0, 1, 101, 0, 2, 2, 4, 93, 0, 4, 4, 59, 75, 0, 5, 5, 7, 94, 9, 1, 7, 7, 60, 7, 76, 89, 89, 64, 26, 4, 4, 0, 0, 4, 17, 4, 17, 16, 15, 14, 13, 11, 10, 9, 8, 7, 6, 0, 3, 0, 3, 17, 10, 9, 21, 43, 1, 53, 51, 21, 1, 53, 1, 33, 21, 35, 17, 33, 21, 1, 33, 53, 51, 17, 1, 253, 197, 253, 185, 2, 188, 253, 228, 123, 3, 128, 253, 77, 2, 92, 124, 5, 23, 197, 197, 250, 233, 123, 3, 71, 197, 1, 65, 124, 252, 193, 195, 254, 186, 0, 0, 2, 0, 148, 0, 0, 4, 57, 7, 143, 0, 7, 0, 21, 0, 211, 64, 15, 5, 1, 0, 1, 9, 1, 6, 7, 2, 74, 16, 1, 3, 1, 73, 75, 176, 10, 80, 88, 64, 48, 9, 2, 2, 1, 0, 1, 131, 0, 0, 5, 0, 131, 0, 4, 3, 7, 3, 4, 112, 0, 7, 6, 3, 7, 6, 124, 0, 3, 3, 5, 93, 0, 5, 5, 56, 75, 0, 6, 6, 8, 94, 10, 1, 8, 8, 57, 8, 76, 27, 75, 176, 42, 80, 88, 64, 49, 9, 2, 2, 1, 0, 1, 131, 0, 0, 5, 0, 131, 0, 4, 3, 7, 3, 4, 7, 126, 0, 7, 6, 3, 7, 6, 124, 0, 3, 3, 5, 93, 0, 5, 5, 56, 75, 0, 6, 6, 8, 94, 10, 1, 8, 8, 57, 8, 76, 27, 64, 47, 9, 2, 2, 1, 0, 1, 131, 0, 0, 5, 0, 131, 0, 4, 3, 7, 3, 4, 7, 126, 0, 7, 6, 3, 7, 6, 124, 0, 5, 0, 3, 4, 5, 3, 102, 0, 6, 6, 8, 94, 10, 1, 8, 8, 60, 8, 76, 89, 89, 64, 27, 8, 8, 0, 0, 8, 21, 8, 21, 20, 19, 18, 17, 15, 14, 13, 12, 11, 10, 0, 7, 0, 7, 17, 17, 11, 9, 22, 43, 1, 1, 35, 1, 51, 23, 51, 55, 1, 53, 1, 33, 21, 35, 17, 33, 21, 1, 33, 17, 51, 17, 3, 212, 254, 255, 218, 254, 255, 124, 241, 2, 242, 253, 59, 2, 188, 253, 210, 123, 3, 133, 253, 60, 2, 85, 124, 7, 143, 254, 191, 1, 65, 202, 202, 248, 113, 136, 4, 197, 232, 1, 99, 123, 251, 54, 1, 40, 254, 85, 0, 0, 0, 0, 2, 0, 123, 0, 0, 4, 69, 6, 68, 0, 7, 0, 21, 1, 20, 64, 15, 5, 1, 0, 1, 9, 1, 8, 6, 2, 74, 16, 1, 3, 1, 73, 75, 176, 14, 80, 88, 64, 50, 0, 0, 1, 5, 1, 0, 5, 126, 0, 4, 3, 7, 3, 4, 112, 0, 7, 6, 6, 7, 110, 9, 2, 2, 1, 1, 58, 75, 0, 3, 3, 5, 93, 0, 5, 5, 59, 75, 0, 6, 6, 8, 94, 10, 1, 8, 8, 57, 8, 76, 27, 75, 176, 40, 80, 88, 64, 52, 0, 0, 1, 5, 1, 0, 5, 126, 0, 4, 3, 7, 3, 4, 7, 126, 0, 7, 6, 3, 7, 6, 124, 9, 2, 2, 1, 1, 58, 75, 0, 3, 3, 5, 93, 0, 5, 5, 59, 75, 0, 6, 6, 8, 94, 10, 1, 8, 8, 57, 8, 76, 27, 75, 176, 42, 80, 88, 64, 49, 9, 2, 2, 1, 0, 1, 131, 0, 0, 5, 0, 131, 0, 4, 3, 7, 3, 4, 7, 126, 0, 7, 6, 3, 7, 6, 124, 0, 3, 3, 5, 93, 0, 5, 5, 59, 75, 0, 6, 6, 8, 94, 10, 1, 8, 8, 57, 8, 76, 27, 64, 49, 9, 2, 2, 1, 0, 1, 131, 0, 0, 5, 0, 131, 0, 4, 3, 7, 3, 4, 7, 126, 0, 7, 6, 3, 7, 6, 124, 0, 3, 3, 5, 93, 0, 5, 5, 59, 75, 0, 6, 6, 8, 94, 10, 1, 8, 8, 60, 8, 76, 89, 89, 89, 64, 27, 8, 8, 0, 0, 8, 21, 8, 21, 20, 19, 18, 17, 15, 14, 13, 12, 11, 10, 0, 7, 0, 7, 17, 17, 11, 9, 22, 43, 1, 1, 35, 1, 51, 23, 51, 55, 1, 53, 1, 33, 21, 35, 17, 33, 21, 1, 33, 53, 51, 17, 3, 206, 254, 255, 218, 254, 255, 124, 241, 2, 242, 253, 40, 2, 188, 253, 228, 123, 3, 128, 253, 77, 2, 92, 124, 6, 68, 254, 191, 1, 65, 202, 202, 249, 188, 123, 3, 71, 197, 1, 65, 124, 252, 193, 195, 254, 186, 0, 0, 0, 0, 1, 0, 148, 0, 0, 4, 143, 6, 68, 0, 25, 0, 165, 181, 13, 1, 5, 3, 1, 74, 75, 176, 40, 80, 88, 64, 41, 0, 4, 5, 2, 5, 4, 2, 126, 0, 5, 5, 3, 95, 0, 3, 3, 64, 75, 0, 1, 1, 2, 93, 0, 2, 2, 59, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 57, 7, 76, 27, 75, 176, 42, 80, 88, 64, 39, 0, 4, 5, 2, 5, 4, 2, 126, 0, 2, 0, 1, 0, 2, 1, 101, 0, 5, 5, 3, 95, 0, 3, 3, 64, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 57, 7, 76, 27, 64, 39, 0, 4, 5, 2, 5, 4, 2, 126, 0, 2, 0, 1, 0, 2, 1, 101, 0, 5, 5, 3, 95, 0, 3, 3, 64, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 60, 7, 76, 89, 89, 64, 16, 0, 0, 0, 25, 0, 25, 20, 34, 18, 36, 17, 17, 17, 9, 9, 27, 43, 51, 53, 33, 17, 33, 53, 33, 53, 52, 55, 54, 51, 50, 23, 21, 35, 39, 38, 35, 34, 7, 6, 21, 17, 33, 21, 148, 1, 15, 254, 241, 1, 15, 91, 91, 202, 171, 193, 123, 31, 101, 83, 119, 46, 47, 1, 114, 123, 3, 34, 136, 118, 225, 100, 100, 80, 247, 156, 47, 60, 60, 159, 251, 202, 123, 0, 1, 0, 84, 254, 216, 4, 57, 5, 237, 0, 21, 0, 156, 181, 9, 1, 4, 2, 1, 74, 75, 176, 12, 80, 88, 64, 34, 0, 3, 4, 1, 4, 3, 112, 8, 1, 7, 0, 7, 132, 5, 1, 1, 6, 1, 0, 7, 1, 0, 101, 0, 4, 4, 2, 95, 0, 2, 2, 62, 4, 76, 27, 75, 176, 42, 80, 88, 64, 35, 0, 3, 4, 1, 4, 3, 1, 126, 8, 1, 7, 0, 7, 132, 5, 1, 1, 6, 1, 0, 7, 1, 0, 101, 0, 4, 4, 2, 95, 0, 2, 2, 62, 4, 76, 27, 64, 41, 0, 3, 4, 1, 4, 3, 1, 126, 8, 1, 7, 0, 7, 132, 0, 2, 0, 4, 3, 2, 4, 103, 5, 1, 1, 0, 0, 1, 85, 5, 1, 1, 1, 0, 93, 6, 1, 0, 1, 0, 77, 89, 89, 64, 16, 0, 0, 0, 21, 0, 21, 17, 18, 34, 18, 34, 17, 17, 9, 9, 27, 43, 19, 19, 35, 53, 51, 55, 18, 33, 50, 23, 17, 35, 39, 38, 35, 34, 3, 7, 51, 21, 33, 3, 84, 204, 172, 197, 27, 103, 1, 193, 79, 110, 123, 25, 80, 48, 187, 63, 45, 244, 254, 244, 204, 254, 216, 4, 0, 123, 139, 2, 15, 18, 254, 179, 197, 25, 254, 200, 225, 123, 252, 0, 0, 3, 0, 25, 0, 0, 4, 179, 8, 179, 0, 33, 0, 37, 0, 53, 0, 174, 64, 12, 32, 1, 9, 7, 36, 21, 6, 3, 8, 10, 2, 74, 75, 176, 34, 80, 88, 64, 39, 0, 7, 9, 7, 131, 11, 1, 9, 10, 9, 131, 0, 8, 0, 3, 0, 8, 3, 102, 0, 10, 10, 62, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 75, 176, 42, 80, 88, 64, 39, 0, 7, 9, 7, 131, 11, 1, 9, 10, 9, 131, 0, 10, 8, 10, 131, 0, 8, 0, 3, 0, 8, 3, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 64, 39, 0, 7, 9, 7, 131, 11, 1, 9, 10, 9, 131, 0, 10, 8, 10, 131, 0, 8, 0, 3, 0, 8, 3, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 60, 1, 76, 89, 89, 64, 20, 39, 38, 47, 45, 38, 53, 39, 53, 19, 26, 17, 17, 17, 17, 17, 17, 23, 12, 9, 29, 43, 1, 22, 21, 20, 7, 6, 7, 1, 51, 21, 33, 53, 51, 3, 33, 3, 51, 21, 33, 53, 51, 1, 38, 39, 38, 53, 52, 55, 54, 55, 19, 51, 1, 22, 1, 33, 3, 35, 19, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 3, 6, 67, 67, 30, 35, 1, 164, 74, 254, 75, 157, 100, 254, 16, 99, 143, 254, 166, 74, 1, 165, 28, 25, 80, 67, 43, 56, 216, 228, 254, 191, 55, 254, 147, 1, 163, 208, 2, 39, 58, 41, 42, 41, 41, 57, 54, 39, 50, 42, 41, 7, 56, 66, 94, 97, 65, 30, 16, 250, 179, 123, 123, 1, 65, 254, 191, 123, 123, 5, 76, 13, 22, 69, 104, 94, 66, 44, 15, 1, 65, 254, 191, 15, 250, 213, 2, 163, 2, 72, 40, 41, 58, 59, 41, 42, 33, 43, 66, 58, 41, 40, 0, 4, 0, 148, 255, 231, 4, 143, 7, 209, 0, 29, 0, 48, 0, 58, 0, 74, 1, 7, 64, 14, 47, 1, 11, 8, 19, 1, 2, 4, 49, 1, 5, 9, 3, 74, 75, 176, 29, 80, 88, 64, 68, 0, 8, 11, 8, 131, 13, 1, 11, 12, 11, 131, 0, 3, 2, 1, 2, 3, 1, 126, 0, 12, 0, 7, 4, 12, 7, 103, 0, 1, 0, 9, 5, 1, 9, 103, 0, 2, 2, 4, 95, 0, 4, 4, 65, 75, 10, 1, 5, 5, 6, 93, 0, 6, 6, 57, 75, 10, 1, 5, 5, 0, 95, 0, 0, 0, 66, 0, 76, 27, 75, 176, 42, 80, 88, 64, 66, 0, 8, 11, 8, 131, 13, 1, 11, 12, 11, 131, 0, 3, 2, 1, 2, 3, 1, 126, 0, 12, 0, 7, 4, 12, 7, 103, 0, 1, 0, 9, 5, 1, 9, 103, 0, 2, 2, 4, 95, 0, 4, 4, 65, 75, 0, 5, 5, 6, 93, 0, 6, 6, 57, 75, 0, 10, 10, 0, 95, 0, 0, 0, 66, 0, 76, 27, 64, 66, 0, 8, 11, 8, 131, 13, 1, 11, 12, 11, 131, 0, 3, 2, 1, 2, 3, 1, 126, 0, 12, 0, 7, 4, 12, 7, 103, 0, 1, 0, 9, 5, 1, 9, 103, 0, 2, 2, 4, 95, 0, 4, 4, 65, 75, 0, 5, 5, 6, 93, 0, 6, 6, 60, 75, 0, 10, 10, 0, 95, 0, 0, 0, 66, 0, 76, 89, 89, 64, 24, 60, 59, 68, 66, 59, 74, 60, 74, 58, 56, 52, 50, 24, 38, 17, 20, 34, 18, 34, 38, 33, 14, 9, 29, 43, 37, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 55, 19, 51, 1, 22, 19, 17, 35, 34, 7, 6, 21, 20, 51, 50, 3, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 3, 66, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 18, 67, 67, 66, 96, 83, 62, 80, 67, 44, 56, 216, 228, 254, 191, 54, 41, 53, 230, 97, 96, 186, 147, 15, 58, 41, 42, 41, 41, 58, 53, 39, 50, 42, 42, 119, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 6, 86, 66, 94, 97, 65, 66, 54, 69, 104, 94, 66, 44, 15, 1, 65, 254, 191, 16, 250, 141, 1, 6, 52, 52, 144, 177, 5, 215, 41, 40, 59, 58, 41, 42, 33, 43, 66, 58, 40, 41, 0, 0, 3, 0, 12, 0, 0, 4, 193, 7, 143, 0, 29, 0, 33, 0, 37, 1, 124, 181, 32, 1, 9, 10, 1, 74, 75, 176, 12, 80, 88, 64, 75, 0, 16, 17, 16, 131, 19, 1, 17, 8, 17, 131, 0, 9, 10, 12, 10, 9, 112, 0, 1, 4, 0, 0, 1, 112, 0, 11, 18, 1, 14, 13, 11, 14, 101, 0, 12, 0, 13, 15, 12, 13, 101, 0, 15, 0, 4, 1, 15, 4, 101, 0, 10, 10, 8, 93, 0, 8, 8, 56, 75, 7, 5, 3, 3, 0, 0, 2, 94, 6, 1, 2, 2, 57, 2, 76, 27, 75, 176, 14, 80, 88, 64, 76, 0, 16, 17, 16, 131, 19, 1, 17, 8, 17, 131, 0, 9, 10, 12, 10, 9, 112, 0, 1, 4, 0, 4, 1, 0, 126, 0, 11, 18, 1, 14, 13, 11, 14, 101, 0, 12, 0, 13, 15, 12, 13, 101, 0, 15, 0, 4, 1, 15, 4, 101, 0, 10, 10, 8, 93, 0, 8, 8, 56, 75, 7, 5, 3, 3, 0, 0, 2, 94, 6, 1, 2, 2, 57, 2, 76, 27, 75, 176, 42, 80, 88, 64, 77, 0, 16, 17, 16, 131, 19, 1, 17, 8, 17, 131, 0, 9, 10, 12, 10, 9, 12, 126, 0, 1, 4, 0, 4, 1, 0, 126, 0, 11, 18, 1, 14, 13, 11, 14, 101, 0, 12, 0, 13, 15, 12, 13, 101, 0, 15, 0, 4, 1, 15, 4, 101, 0, 10, 10, 8, 93, 0, 8, 8, 56, 75, 7, 5, 3, 3, 0, 0, 2, 94, 6, 1, 2, 2, 57, 2, 76, 27, 64, 75, 0, 16, 17, 16, 131, 19, 1, 17, 8, 17, 131, 0, 9, 10, 12, 10, 9, 12, 126, 0, 1, 4, 0, 4, 1, 0, 126, 0, 8, 0, 10, 9, 8, 10, 102, 0, 11, 18, 1, 14, 13, 11, 14, 101, 0, 12, 0, 13, 15, 12, 13, 101, 0, 15, 0, 4, 1, 15, 4, 101, 7, 5, 3, 3, 0, 0, 2, 94, 6, 1, 2, 2, 60, 2, 76, 89, 89, 89, 64, 38, 34, 34, 0, 0, 34, 37, 34, 37, 36, 35, 31, 30, 0, 29, 0, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 9, 29, 43, 1, 17, 33, 53, 51, 17, 33, 53, 51, 17, 33, 3, 51, 21, 33, 53, 51, 1, 33, 17, 35, 53, 35, 17, 51, 53, 51, 17, 35, 53, 5, 33, 17, 35, 19, 19, 51, 1, 3, 56, 1, 13, 124, 253, 79, 111, 254, 183, 127, 121, 254, 220, 44, 2, 71, 2, 47, 123, 251, 177, 123, 123, 253, 130, 1, 20, 1, 63, 216, 228, 254, 191, 2, 191, 253, 188, 210, 254, 179, 123, 1, 40, 254, 216, 123, 123, 5, 77, 254, 198, 191, 253, 238, 123, 254, 142, 123, 160, 2, 125, 1, 178, 1, 65, 254, 191, 0, 4, 0, 42, 255, 231, 4, 168, 6, 68, 0, 46, 0, 54, 0, 61, 0, 65, 0, 174, 64, 19, 23, 1, 2, 4, 29, 1, 3, 2, 47, 42, 2, 7, 6, 43, 1, 0, 7, 4, 74, 75, 176, 40, 80, 88, 64, 57, 15, 1, 14, 13, 4, 13, 14, 4, 126, 0, 3, 2, 1, 2, 3, 1, 126, 11, 1, 1, 9, 1, 6, 7, 1, 6, 103, 0, 13, 13, 58, 75, 12, 1, 2, 2, 4, 95, 5, 1, 4, 4, 65, 75, 10, 1, 7, 7, 0, 95, 8, 1, 0, 0, 66, 0, 76, 27, 64, 54, 0, 13, 14, 13, 131, 15, 1, 14, 4, 14, 131, 0, 3, 2, 1, 2, 3, 1, 126, 11, 1, 1, 9, 1, 6, 7, 1, 6, 103, 12, 1, 2, 2, 4, 95, 5, 1, 4, 4, 65, 75, 10, 1, 7, 7, 0, 95, 8, 1, 0, 0, 66, 0, 76, 89, 64, 28, 62, 62, 62, 65, 62, 65, 64, 63, 61, 59, 56, 55, 54, 52, 50, 48, 35, 34, 20, 36, 34, 18, 36, 38, 35, 16, 9, 29, 43, 37, 6, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 51, 51, 53, 52, 39, 38, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 23, 54, 51, 50, 23, 22, 21, 21, 33, 23, 16, 51, 50, 55, 21, 6, 35, 34, 39, 17, 35, 34, 21, 20, 51, 50, 19, 33, 38, 39, 38, 35, 34, 3, 19, 51, 1, 2, 82, 37, 44, 65, 96, 131, 89, 90, 117, 116, 206, 43, 21, 22, 68, 63, 61, 25, 123, 153, 145, 97, 61, 36, 20, 78, 148, 146, 81, 80, 254, 30, 3, 241, 84, 160, 176, 131, 166, 195, 31, 247, 141, 85, 232, 1, 24, 3, 32, 31, 59, 134, 195, 216, 228, 254, 191, 154, 81, 40, 58, 95, 94, 143, 168, 96, 95, 141, 110, 35, 35, 40, 136, 232, 67, 48, 29, 54, 131, 136, 136, 246, 49, 51, 254, 126, 84, 147, 68, 253, 1, 59, 236, 201, 2, 48, 178, 72, 71, 1, 40, 1, 65, 254, 191, 0, 0, 0, 4, 0, 62, 255, 219, 4, 144, 7, 143, 0, 8, 0, 17, 0, 39, 0, 43, 0, 117, 64, 11, 38, 30, 27, 19, 17, 1, 6, 1, 0, 1, 74, 75, 176, 42, 80, 88, 64, 35, 0, 6, 7, 6, 131, 9, 1, 7, 2, 7, 131, 0, 0, 0, 2, 95, 3, 1, 2, 2, 62, 75, 0, 1, 1, 4, 95, 8, 5, 2, 4, 4, 63, 4, 76, 27, 64, 33, 0, 6, 7, 6, 131, 9, 1, 7, 2, 7, 131, 3, 1, 2, 0, 0, 1, 2, 0, 104, 0, 1, 1, 4, 95, 8, 5, 2, 4, 4, 66, 4, 76, 89, 64, 22, 40, 40, 18, 18, 40, 43, 40, 43, 42, 41, 18, 39, 18, 39, 38, 18, 44, 38, 34, 10, 9, 25, 43, 1, 1, 38, 35, 34, 7, 6, 17, 20, 19, 22, 51, 50, 55, 54, 17, 52, 39, 1, 55, 38, 17, 16, 55, 54, 51, 50, 23, 55, 51, 7, 22, 17, 16, 7, 6, 35, 34, 39, 7, 1, 19, 51, 1, 1, 65, 2, 32, 91, 158, 163, 89, 94, 94, 93, 156, 163, 89, 95, 52, 252, 178, 144, 144, 154, 154, 243, 186, 159, 93, 117, 145, 145, 154, 154, 244, 185, 159, 93, 1, 55, 216, 228, 254, 191, 1, 115, 3, 86, 159, 162, 173, 254, 205, 197, 254, 221, 160, 164, 173, 1, 51, 199, 173, 251, 133, 227, 242, 1, 51, 1, 88, 217, 217, 146, 146, 227, 242, 254, 204, 254, 170, 217, 218, 147, 147, 6, 115, 1, 65, 254, 191, 0, 0, 0, 0, 4, 0, 111, 255, 231, 4, 94, 6, 68, 0, 21, 0, 28, 0, 35, 0, 39, 0, 130, 64, 17, 9, 1, 4, 0, 35, 28, 12, 1, 4, 5, 4, 20, 1, 2, 5, 3, 74, 75, 176, 40, 80, 88, 64, 38, 9, 1, 7, 6, 0, 6, 7, 0, 126, 0, 6, 6, 58, 75, 0, 4, 4, 0, 95, 1, 1, 0, 0, 65, 75, 0, 5, 5, 2, 95, 8, 3, 2, 2, 2, 66, 2, 76, 27, 64, 35, 0, 6, 7, 6, 131, 9, 1, 7, 0, 7, 131, 0, 4, 4, 0, 95, 1, 1, 0, 0, 65, 75, 0, 5, 5, 2, 95, 8, 3, 2, 2, 2, 66, 2, 76, 89, 64, 24, 36, 36, 0, 0, 36, 39, 36, 39, 38, 37, 32, 30, 25, 23, 0, 21, 0, 21, 38, 18, 38, 10, 9, 23, 43, 23, 55, 38, 53, 16, 55, 54, 51, 50, 23, 55, 51, 7, 22, 21, 16, 7, 6, 35, 34, 39, 7, 1, 38, 35, 32, 17, 20, 23, 23, 22, 51, 32, 17, 52, 39, 1, 19, 51, 1, 111, 127, 127, 135, 135, 239, 179, 122, 72, 125, 127, 127, 135, 135, 240, 180, 120, 72, 2, 74, 95, 113, 254, 222, 33, 51, 86, 120, 1, 35, 33, 254, 137, 216, 228, 254, 191, 25, 164, 172, 234, 1, 8, 151, 150, 92, 92, 163, 172, 235, 254, 248, 150, 151, 93, 93, 3, 148, 96, 254, 67, 150, 100, 96, 97, 1, 187, 148, 104, 1, 233, 1, 65, 254, 191, 0, 0, 0, 0, 2, 0, 151, 254, 80, 4, 67, 5, 237, 0, 15, 0, 57, 0, 215, 64, 19, 36, 1, 7, 5, 16, 1, 8, 4, 7, 1, 2, 0, 1, 0, 1, 2, 0, 4, 74, 75, 176, 10, 80, 88, 64, 53, 0, 6, 7, 3, 7, 6, 3, 126, 0, 3, 4, 7, 3, 4, 124, 0, 1, 8, 0, 0, 1, 112, 0, 7, 7, 5, 95, 0, 5, 5, 62, 75, 0, 4, 4, 8, 95, 0, 8, 8, 63, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 75, 176, 42, 80, 88, 64, 54, 0, 6, 7, 3, 7, 6, 3, 126, 0, 3, 4, 7, 3, 4, 124, 0, 1, 8, 0, 8, 1, 0, 126, 0, 7, 7, 5, 95, 0, 5, 5, 62, 75, 0, 4, 4, 8, 95, 0, 8, 8, 63, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 64, 52, 0, 6, 7, 3, 7, 6, 3, 126, 0, 3, 4, 7, 3, 4, 124, 0, 1, 8, 0, 8, 1, 0, 126, 0, 5, 0, 7, 6, 5, 7, 103, 0, 4, 4, 8, 95, 0, 8, 8, 66, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 89, 89, 64, 12, 45, 34, 18, 43, 34, 18, 36, 20, 34, 9, 9, 29, 43, 1, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 1, 17, 51, 23, 22, 51, 50, 55, 54, 53, 52, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 21, 20, 23, 22, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 1, 228, 57, 40, 109, 157, 134, 66, 93, 218, 58, 254, 113, 124, 24, 187, 124, 127, 79, 79, 200, 190, 189, 67, 66, 1, 192, 183, 192, 123, 25, 125, 117, 241, 56, 49, 126, 169, 195, 60, 61, 134, 135, 224, 205, 254, 91, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 1, 237, 1, 102, 234, 91, 79, 78, 114, 157, 104, 99, 98, 83, 80, 137, 1, 138, 73, 254, 193, 195, 74, 246, 101, 48, 42, 68, 91, 105, 73, 74, 133, 204, 123, 123, 0, 0, 2, 0, 173, 254, 80, 4, 64, 4, 87, 0, 41, 0, 57, 0, 154, 64, 19, 20, 1, 4, 2, 0, 1, 5, 1, 49, 43, 2, 6, 7, 42, 1, 8, 6, 4, 74, 75, 176, 10, 80, 88, 64, 53, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 7, 5, 6, 6, 7, 112, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 1, 1, 5, 95, 0, 5, 5, 66, 75, 0, 6, 6, 8, 96, 0, 8, 8, 67, 8, 76, 27, 64, 54, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 7, 5, 6, 5, 7, 6, 126, 0, 4, 4, 2, 95, 0, 2, 2, 65, 75, 0, 1, 1, 5, 95, 0, 5, 5, 66, 75, 0, 6, 6, 8, 96, 0, 8, 8, 67, 8, 76, 89, 64, 12, 36, 20, 35, 45, 34, 18, 43, 34, 17, 9, 9, 29, 43, 55, 17, 51, 23, 22, 51, 50, 53, 52, 39, 38, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 19, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 173, 123, 25, 196, 137, 238, 40, 40, 103, 204, 171, 78, 77, 1, 176, 221, 181, 123, 25, 109, 146, 110, 61, 72, 206, 202, 168, 73, 72, 123, 123, 220, 226, 110, 57, 40, 109, 157, 134, 66, 93, 218, 58, 61, 1, 41, 183, 76, 168, 66, 36, 37, 27, 54, 45, 73, 71, 118, 1, 61, 72, 254, 226, 181, 53, 35, 41, 85, 112, 54, 53, 44, 68, 67, 115, 157, 90, 91, 254, 116, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 0, 0, 2, 0, 62, 254, 80, 4, 144, 5, 200, 0, 15, 0, 31, 0, 205, 64, 11, 7, 1, 2, 0, 1, 0, 1, 2, 0, 2, 74, 75, 176, 10, 80, 88, 64, 49, 7, 1, 5, 4, 3, 4, 5, 112, 0, 1, 10, 0, 0, 1, 112, 8, 1, 4, 4, 6, 93, 0, 6, 6, 56, 75, 9, 1, 3, 3, 10, 93, 11, 1, 10, 10, 57, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 75, 176, 42, 80, 88, 64, 51, 7, 1, 5, 4, 3, 4, 5, 3, 126, 0, 1, 10, 0, 10, 1, 0, 126, 8, 1, 4, 4, 6, 93, 0, 6, 6, 56, 75, 9, 1, 3, 3, 10, 93, 11, 1, 10, 10, 57, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 27, 64, 49, 7, 1, 5, 4, 3, 4, 5, 3, 126, 0, 1, 10, 0, 10, 1, 0, 126, 0, 6, 8, 1, 4, 5, 6, 4, 101, 9, 1, 3, 3, 10, 93, 11, 1, 10, 10, 60, 75, 0, 0, 0, 2, 96, 0, 2, 2, 67, 2, 76, 89, 89, 64, 20, 16, 16, 16, 31, 16, 31, 30, 29, 17, 17, 17, 17, 17, 18, 36, 20, 34, 12, 9, 29, 43, 1, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 1, 53, 33, 17, 33, 21, 35, 17, 33, 17, 35, 53, 33, 17, 33, 21, 1, 216, 57, 40, 109, 157, 134, 66, 93, 218, 58, 254, 231, 1, 3, 254, 181, 123, 4, 82, 124, 254, 182, 1, 3, 254, 91, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 1, 176, 123, 4, 210, 232, 1, 99, 254, 157, 232, 251, 46, 123, 0, 0, 0, 0, 2, 0, 119, 254, 80, 4, 8, 5, 62, 0, 23, 0, 39, 0, 193, 64, 19, 23, 1, 6, 1, 0, 1, 0, 6, 31, 25, 2, 7, 8, 24, 1, 9, 7, 4, 74, 75, 176, 10, 80, 88, 64, 45, 0, 3, 2, 3, 131, 0, 8, 0, 7, 7, 8, 112, 5, 1, 1, 1, 2, 93, 4, 1, 2, 2, 59, 75, 0, 6, 6, 0, 95, 0, 0, 0, 66, 75, 0, 7, 7, 9, 96, 0, 9, 9, 67, 9, 76, 27, 75, 176, 40, 80, 88, 64, 46, 0, 3, 2, 3, 131, 0, 8, 0, 7, 0, 8, 7, 126, 5, 1, 1, 1, 2, 93, 4, 1, 2, 2, 59, 75, 0, 6, 6, 0, 95, 0, 0, 0, 66, 75, 0, 7, 7, 9, 96, 0, 9, 9, 67, 9, 76, 27, 64, 44, 0, 3, 2, 3, 131, 0, 8, 0, 7, 0, 8, 7, 126, 4, 1, 2, 5, 1, 1, 6, 2, 1, 101, 0, 6, 6, 0, 95, 0, 0, 0, 66, 75, 0, 7, 7, 9, 96, 0, 9, 9, 67, 9, 76, 89, 89, 64, 14, 39, 37, 20, 36, 36, 17, 17, 17, 17, 20, 33, 10, 9, 29, 43, 37, 6, 35, 34, 39, 38, 53, 17, 33, 53, 33, 17, 51, 17, 33, 21, 33, 17, 20, 23, 22, 51, 50, 55, 1, 53, 22, 51, 50, 53, 52, 39, 53, 22, 23, 22, 21, 20, 35, 34, 4, 8, 165, 171, 161, 69, 69, 254, 234, 1, 22, 197, 1, 170, 254, 86, 32, 32, 95, 106, 173, 254, 6, 57, 40, 109, 157, 134, 66, 93, 218, 58, 61, 86, 75, 74, 175, 2, 114, 136, 1, 25, 254, 231, 136, 253, 231, 160, 52, 53, 77, 253, 147, 85, 9, 67, 73, 17, 77, 3, 29, 42, 95, 152, 0, 0, 0, 0, 1, 0, 248, 5, 3, 3, 211, 6, 68, 0, 7, 0, 39, 177, 6, 100, 68, 64, 28, 5, 1, 1, 0, 1, 74, 0, 0, 1, 0, 131, 3, 2, 2, 1, 1, 116, 0, 0, 0, 7, 0, 7, 17, 17, 4, 9, 22, 43, 177, 6, 0, 68, 19, 1, 51, 1, 35, 39, 35, 7, 248, 1, 0, 219, 1, 0, 123, 241, 3, 241, 5, 3, 1, 65, 254, 191, 202, 202, 0, 0, 1, 0, 248, 5, 3, 3, 212, 6, 68, 0, 7, 0, 39, 177, 6, 100, 68, 64, 28, 5, 1, 0, 1, 1, 74, 3, 2, 2, 1, 0, 1, 131, 0, 0, 0, 116, 0, 0, 0, 7, 0, 7, 17, 17, 4, 9, 22, 43, 177, 6, 0, 68, 1, 1, 35, 1, 51, 23, 51, 55, 3, 212, 254, 255, 218, 254, 255, 124, 241, 2, 242, 6, 68, 254, 191, 1, 65, 202, 202, 0, 1, 1, 13, 5, 23, 3, 192, 5, 147, 0, 3, 0, 38, 177, 6, 100, 68, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 177, 6, 0, 68, 1, 53, 33, 21, 1, 13, 2, 179, 5, 23, 124, 124, 0, 1, 1, 13, 5, 9, 3, 192, 6, 43, 0, 15, 0, 40, 177, 6, 100, 68, 64, 29, 2, 1, 0, 1, 0, 131, 0, 1, 3, 3, 1, 87, 0, 1, 1, 3, 95, 0, 3, 1, 3, 79, 35, 17, 33, 16, 4, 9, 24, 43, 177, 6, 0, 68, 1, 51, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 38, 39, 38, 1, 13, 123, 48, 174, 175, 48, 123, 23, 26, 91, 202, 152, 89, 55, 28, 11, 6, 43, 148, 148, 89, 46, 155, 81, 49, 72, 29, 0, 0, 0, 1, 2, 4, 5, 23, 2, 201, 5, 220, 0, 3, 0, 38, 177, 6, 100, 68, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 177, 6, 0, 68, 1, 53, 51, 21, 2, 4, 197, 5, 23, 197, 197, 0, 0, 2, 1, 132, 5, 3, 3, 74, 6, 201, 0, 15, 0, 31, 0, 56, 177, 6, 100, 68, 64, 45, 4, 1, 0, 5, 1, 2, 3, 0, 2, 103, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 95, 0, 1, 3, 1, 79, 17, 16, 1, 0, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 6, 9, 20, 43, 177, 6, 0, 68, 1, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 54, 53, 52, 39, 38, 2, 103, 94, 66, 67, 67, 66, 96, 83, 62, 80, 67, 67, 93, 58, 41, 42, 41, 41, 58, 53, 39, 50, 42, 42, 6, 201, 66, 66, 94, 97, 65, 66, 54, 69, 104, 94, 66, 67, 87, 41, 40, 59, 58, 41, 42, 33, 43, 66, 58, 40, 41, 0, 1, 1, 188, 254, 142, 3, 18, 0, 0, 0, 13, 0, 82, 177, 6, 100, 68, 64, 10, 7, 1, 1, 0, 8, 1, 2, 1, 2, 74, 75, 176, 10, 80, 88, 64, 22, 0, 0, 1, 1, 0, 110, 0, 1, 2, 2, 1, 87, 0, 1, 1, 2, 96, 0, 2, 1, 2, 80, 27, 64, 21, 0, 0, 1, 0, 131, 0, 1, 2, 2, 1, 87, 0, 1, 1, 2, 96, 0, 2, 1, 2, 80, 89, 181, 35, 35, 16, 3, 9, 23, 43, 177, 6, 0, 68, 33, 51, 6, 21, 20, 51, 50, 55, 21, 6, 35, 34, 53, 52, 2, 90, 107, 129, 115, 54, 37, 62, 78, 202, 81, 98, 96, 15, 81, 29, 157, 123, 0, 1, 1, 25, 5, 13, 3, 179, 5, 248, 0, 23, 0, 52, 177, 6, 100, 68, 64, 41, 0, 1, 4, 3, 1, 87, 2, 1, 0, 0, 4, 3, 0, 4, 103, 0, 1, 1, 3, 96, 6, 5, 2, 3, 1, 3, 80, 0, 0, 0, 23, 0, 23, 35, 35, 17, 35, 35, 7, 9, 25, 43, 177, 6, 0, 68, 1, 54, 55, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 6, 7, 6, 35, 34, 39, 39, 38, 35, 34, 7, 1, 25, 6, 25, 45, 109, 72, 63, 60, 62, 34, 68, 11, 111, 7, 25, 46, 107, 73, 63, 60, 60, 36, 68, 11, 5, 13, 94, 51, 90, 39, 37, 38, 114, 94, 50, 91, 39, 37, 37, 113, 0, 0, 2, 0, 223, 5, 3, 3, 238, 6, 68, 0, 3, 0, 7, 0, 50, 177, 6, 100, 68, 64, 39, 2, 1, 0, 1, 1, 0, 85, 2, 1, 0, 0, 1, 93, 5, 3, 4, 3, 1, 0, 1, 77, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 9, 21, 43, 177, 6, 0, 68, 19, 19, 51, 1, 51, 19, 51, 1, 223, 240, 192, 254, 191, 240, 241, 191, 254, 191, 5, 3, 1, 65, 254, 191, 1, 65, 254, 191, 0, 0, 0, 1, 1, 249, 5, 3, 3, 26, 6, 166, 0, 3, 0, 38, 177, 6, 100, 68, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 8, 21, 43, 177, 6, 0, 68, 1, 19, 51, 3, 1, 249, 84, 205, 176, 5, 3, 1, 163, 254, 93, 0, 0, 3, 0, 214, 5, 13, 3, 248, 6, 176, 0, 3, 0, 7, 0, 11, 0, 66, 177, 6, 100, 68, 64, 55, 0, 4, 0, 1, 4, 85, 2, 1, 0, 1, 1, 0, 85, 2, 1, 0, 0, 1, 93, 8, 5, 7, 3, 6, 5, 1, 0, 1, 77, 8, 8, 4, 4, 0, 0, 8, 11, 8, 11, 10, 9, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 9, 8, 21, 43, 177, 6, 0, 68, 19, 53, 51, 21, 33, 53, 51, 21, 33, 19, 51, 3, 214, 185, 1, 176, 185, 254, 17, 84, 205, 176, 5, 13, 185, 185, 185, 185, 1, 163, 254, 93, 0, 3, 0, 25, 0, 0, 4, 179, 6, 166, 0, 15, 0, 19, 0, 23, 0, 126, 181, 18, 1, 8, 10, 1, 74, 75, 176, 42, 80, 88, 64, 38, 0, 9, 12, 1, 10, 8, 9, 10, 101, 0, 8, 11, 1, 7, 0, 8, 7, 102, 0, 3, 3, 40, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 41, 1, 76, 27, 64, 41, 0, 3, 9, 10, 9, 3, 10, 126, 0, 9, 12, 1, 10, 8, 9, 10, 101, 0, 8, 11, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 44, 1, 76, 89, 64, 26, 20, 20, 0, 0, 20, 23, 20, 23, 22, 21, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 13, 8, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 37, 19, 51, 3, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 254, 22, 84, 205, 176, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 40, 1, 163, 254, 93, 0, 0, 0, 1, 1, 211, 3, 22, 2, 251, 4, 62, 0, 3, 0, 25, 64, 22, 2, 1, 1, 1, 0, 93, 0, 0, 0, 43, 1, 76, 0, 0, 0, 3, 0, 3, 17, 3, 8, 21, 43, 1, 17, 33, 17, 1, 211, 1, 40, 3, 22, 1, 40, 254, 216, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 82, 6, 166, 0, 21, 0, 25, 1, 68, 75, 176, 10, 80, 88, 64, 62, 0, 2, 12, 5, 3, 2, 112, 0, 9, 6, 0, 0, 9, 112, 0, 11, 14, 1, 12, 2, 11, 12, 101, 0, 4, 0, 7, 6, 4, 7, 101, 0, 5, 0, 6, 9, 5, 6, 101, 0, 3, 3, 1, 93, 0, 1, 1, 40, 75, 8, 1, 0, 0, 10, 94, 13, 1, 10, 10, 41, 10, 76, 27, 75, 176, 38, 80, 88, 64, 64, 0, 2, 12, 5, 12, 2, 5, 126, 0, 9, 6, 0, 6, 9, 0, 126, 0, 11, 14, 1, 12, 2, 11, 12, 101, 0, 4, 0, 7, 6, 4, 7, 101, 0, 5, 0, 6, 9, 5, 6, 101, 0, 3, 3, 1, 93, 0, 1, 1, 40, 75, 8, 1, 0, 0, 10, 94, 13, 1, 10, 10, 41, 10, 76, 27, 75, 176, 42, 80, 88, 64, 70, 0, 2, 12, 5, 12, 2, 5, 126, 0, 9, 6, 8, 6, 9, 8, 126, 0, 0, 8, 10, 8, 0, 112, 0, 11, 14, 1, 12, 2, 11, 12, 101, 0, 4, 0, 7, 6, 4, 7, 101, 0, 5, 0, 6, 9, 5, 6, 101, 0, 3, 3, 1, 93, 0, 1, 1, 40, 75, 0, 8, 8, 10, 94, 13, 1, 10, 10, 41, 10, 76, 27, 64, 68, 0, 2, 12, 5, 12, 2, 5, 126, 0, 9, 6, 8, 6, 9, 8, 126, 0, 0, 8, 10, 8, 0, 112, 0, 1, 0, 3, 12, 1, 3, 101, 0, 11, 14, 1, 12, 2, 11, 12, 101, 0, 4, 0, 7, 6, 4, 7, 101, 0, 5, 0, 6, 9, 5, 6, 101, 0, 8, 8, 10, 94, 13, 1, 10, 10, 44, 10, 76, 89, 89, 89, 64, 28, 22, 22, 0, 0, 22, 25, 22, 25, 24, 23, 0, 21, 0, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 8, 29, 43, 51, 53, 51, 17, 33, 17, 35, 53, 33, 17, 51, 53, 51, 17, 35, 53, 35, 17, 33, 53, 51, 17, 1, 19, 51, 3, 219, 140, 2, 185, 123, 254, 136, 191, 123, 123, 191, 1, 169, 124, 251, 174, 84, 205, 176, 123, 5, 77, 254, 155, 234, 253, 225, 124, 254, 141, 124, 253, 213, 247, 254, 129, 5, 3, 1, 163, 254, 93, 0, 2, 0, 0, 0, 0, 4, 154, 6, 166, 0, 25, 0, 29, 0, 136, 75, 176, 42, 80, 88, 64, 46, 0, 13, 16, 1, 14, 5, 13, 14, 101, 0, 5, 15, 1, 12, 0, 5, 12, 101, 8, 6, 2, 4, 4, 3, 93, 7, 1, 3, 3, 40, 75, 11, 9, 2, 3, 0, 0, 1, 93, 10, 1, 1, 1, 41, 1, 76, 27, 64, 44, 7, 1, 3, 8, 6, 2, 4, 14, 3, 4, 101, 0, 13, 16, 1, 14, 5, 13, 14, 101, 0, 5, 15, 1, 12, 0, 5, 12, 101, 11, 9, 2, 3, 0, 0, 1, 93, 10, 1, 1, 1, 44, 1, 76, 89, 64, 32, 26, 26, 0, 0, 26, 29, 26, 29, 28, 27, 0, 25, 0, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 8, 29, 43, 1, 17, 51, 21, 33, 53, 51, 17, 33, 21, 35, 17, 33, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 19, 51, 3, 1, 255, 90, 254, 125, 100, 1, 21, 80, 1, 123, 80, 1, 112, 90, 90, 254, 134, 90, 252, 134, 84, 205, 176, 2, 191, 253, 188, 123, 123, 5, 77, 123, 253, 238, 2, 18, 123, 123, 251, 46, 123, 123, 2, 68, 2, 68, 1, 163, 254, 93, 0, 0, 0, 0, 2, 0, 10, 0, 0, 4, 44, 6, 166, 0, 11, 0, 15, 0, 100, 75, 176, 42, 80, 88, 64, 33, 0, 6, 9, 1, 7, 0, 6, 7, 101, 3, 1, 1, 1, 2, 93, 0, 2, 2, 40, 75, 4, 1, 0, 0, 5, 93, 8, 1, 5, 5, 41, 5, 76, 27, 64, 31, 0, 2, 3, 1, 1, 7, 2, 1, 101, 0, 6, 9, 1, 7, 0, 6, 7, 101, 4, 1, 0, 0, 5, 93, 8, 1, 5, 5, 44, 5, 76, 89, 64, 22, 12, 12, 0, 0, 12, 15, 12, 15, 14, 13, 0, 11, 0, 11, 17, 17, 17, 17, 17, 10, 8, 25, 43, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 21, 1, 19, 51, 3, 1, 154, 230, 230, 2, 146, 230, 230, 251, 222, 84, 205, 176, 123, 4, 210, 123, 123, 251, 46, 123, 5, 3, 1, 163, 254, 93, 0, 0, 3, 0, 0, 255, 219, 4, 144, 6, 166, 0, 15, 0, 31, 0, 35, 0, 103, 75, 176, 42, 80, 88, 64, 32, 0, 4, 8, 1, 5, 3, 4, 5, 101, 7, 1, 2, 2, 0, 95, 6, 1, 0, 0, 46, 75, 0, 3, 3, 1, 95, 0, 1, 1, 47, 1, 76, 27, 64, 30, 6, 1, 0, 7, 1, 2, 5, 0, 2, 103, 0, 4, 8, 1, 5, 3, 4, 5, 101, 0, 3, 3, 1, 95, 0, 1, 1, 50, 1, 76, 89, 64, 27, 32, 32, 17, 16, 1, 0, 32, 35, 32, 35, 34, 33, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 9, 8, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 5, 19, 51, 3, 2, 158, 219, 140, 139, 139, 140, 225, 192, 131, 168, 138, 140, 219, 125, 81, 81, 81, 79, 127, 127, 76, 85, 81, 81, 252, 228, 84, 205, 176, 5, 237, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 123, 172, 173, 254, 203, 254, 206, 174, 174, 150, 169, 1, 77, 1, 57, 171, 172, 111, 1, 163, 254, 93, 0, 0, 2, 0, 0, 0, 0, 4, 205, 6, 166, 0, 21, 0, 25, 0, 162, 64, 15, 18, 1, 3, 4, 14, 1, 0, 6, 2, 74, 17, 1, 4, 1, 73, 75, 176, 12, 80, 88, 64, 37, 0, 5, 4, 4, 5, 110, 7, 1, 6, 3, 0, 3, 6, 0, 126, 0, 3, 3, 4, 95, 0, 4, 4, 40, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 41, 1, 76, 27, 75, 176, 42, 80, 88, 64, 36, 0, 5, 4, 5, 131, 7, 1, 6, 3, 0, 3, 6, 0, 126, 0, 3, 3, 4, 95, 0, 4, 4, 40, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 41, 1, 76, 27, 64, 34, 0, 5, 4, 5, 131, 7, 1, 6, 3, 0, 3, 6, 0, 126, 0, 4, 0, 3, 6, 4, 3, 104, 2, 1, 0, 0, 1, 93, 0, 1, 1, 44, 1, 76, 89, 89, 64, 15, 22, 22, 22, 25, 22, 25, 27, 33, 19, 17, 17, 16, 8, 8, 26, 43, 37, 51, 21, 33, 53, 51, 17, 16, 2, 35, 53, 51, 50, 0, 19, 18, 0, 55, 21, 6, 2, 21, 1, 19, 51, 3, 3, 45, 200, 253, 170, 200, 157, 225, 15, 220, 1, 14, 4, 64, 1, 9, 158, 163, 253, 252, 211, 84, 205, 176, 123, 123, 123, 1, 100, 1, 121, 1, 196, 172, 254, 165, 254, 222, 1, 39, 1, 60, 26, 148, 30, 254, 2, 242, 2, 221, 1, 163, 254, 93, 0, 0, 0, 2, 0, 0, 0, 0, 4, 160, 6, 166, 0, 31, 0, 35, 0, 100, 182, 20, 0, 2, 1, 7, 1, 74, 75, 176, 42, 80, 88, 64, 32, 0, 6, 8, 1, 7, 1, 6, 7, 101, 0, 5, 5, 2, 95, 0, 2, 2, 46, 75, 3, 1, 1, 1, 0, 93, 4, 1, 0, 0, 41, 0, 76, 27, 64, 30, 0, 2, 0, 5, 7, 2, 5, 103, 0, 6, 8, 1, 7, 1, 6, 7, 101, 3, 1, 1, 1, 0, 93, 4, 1, 0, 0, 44, 0, 76, 89, 64, 16, 32, 32, 32, 35, 32, 35, 22, 38, 17, 21, 37, 17, 17, 9, 8, 27, 43, 37, 21, 33, 53, 33, 38, 2, 53, 16, 0, 51, 50, 0, 17, 20, 2, 7, 33, 21, 33, 53, 54, 18, 53, 16, 2, 35, 34, 2, 17, 20, 18, 1, 19, 51, 3, 2, 89, 254, 73, 1, 24, 140, 129, 1, 7, 237, 237, 1, 7, 131, 139, 1, 25, 254, 73, 127, 101, 156, 144, 144, 156, 101, 254, 38, 84, 205, 176, 148, 148, 136, 176, 1, 100, 192, 1, 56, 1, 89, 254, 167, 254, 200, 192, 254, 156, 176, 136, 148, 160, 1, 32, 223, 1, 39, 1, 24, 254, 232, 254, 217, 224, 254, 225, 3, 207, 1, 163, 254, 93, 0, 0, 0, 4, 0, 123, 255, 231, 4, 12, 6, 176, 0, 13, 0, 17, 0, 21, 0, 25, 0, 129, 64, 10, 13, 1, 2, 1, 0, 1, 0, 2, 2, 74, 75, 176, 42, 80, 88, 64, 38, 0, 7, 3, 4, 7, 85, 11, 8, 10, 6, 9, 5, 4, 4, 3, 93, 5, 1, 3, 3, 40, 75, 0, 1, 1, 43, 75, 0, 2, 2, 0, 96, 0, 0, 0, 50, 0, 76, 27, 64, 36, 0, 7, 3, 4, 7, 85, 5, 1, 3, 11, 8, 10, 6, 9, 5, 4, 1, 3, 4, 101, 0, 1, 1, 43, 75, 0, 2, 2, 0, 96, 0, 0, 0, 50, 0, 76, 89, 64, 29, 22, 22, 18, 18, 14, 14, 22, 25, 22, 25, 24, 23, 18, 21, 18, 21, 20, 19, 14, 17, 14, 17, 19, 35, 19, 33, 12, 8, 24, 43, 37, 6, 35, 34, 38, 53, 17, 51, 17, 20, 22, 51, 50, 55, 1, 53, 51, 21, 33, 53, 51, 21, 33, 19, 51, 3, 4, 12, 136, 139, 221, 153, 197, 77, 132, 108, 135, 252, 111, 185, 1, 176, 185, 254, 17, 84, 205, 176, 27, 52, 176, 231, 2, 192, 253, 83, 180, 99, 53, 4, 94, 185, 185, 185, 185, 1, 163, 254, 93, 0, 0, 0, 2, 0, 25, 0, 0, 4, 179, 5, 200, 0, 15, 0, 19, 0, 97, 181, 18, 1, 8, 3, 1, 74, 75, 176, 42, 80, 88, 64, 29, 0, 8, 9, 1, 7, 0, 8, 7, 102, 0, 3, 3, 40, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 41, 1, 76, 27, 64, 29, 0, 3, 8, 3, 131, 0, 8, 9, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 44, 1, 76, 89, 64, 18, 0, 0, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 10, 8, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 0, 0, 0, 0, 3, 0, 74, 0, 0, 4, 88, 5, 200, 0, 18, 0, 27, 0, 34, 0, 103, 181, 10, 1, 5, 6, 1, 74, 75, 176, 42, 80, 88, 64, 32, 0, 6, 0, 5, 3, 6, 5, 103, 7, 1, 0, 0, 1, 93, 0, 1, 1, 40, 75, 4, 8, 2, 3, 3, 2, 93, 0, 2, 2, 41, 2, 76, 27, 64, 30, 0, 1, 7, 1, 0, 6, 1, 0, 101, 0, 6, 0, 5, 3, 6, 5, 103, 4, 8, 2, 3, 3, 2, 93, 0, 2, 2, 44, 2, 76, 89, 64, 20, 0, 0, 34, 32, 30, 28, 27, 25, 21, 19, 0, 18, 0, 18, 42, 33, 17, 9, 8, 23, 43, 55, 17, 35, 53, 33, 32, 17, 20, 7, 6, 7, 22, 23, 22, 21, 16, 33, 33, 53, 33, 51, 32, 17, 52, 39, 38, 35, 35, 53, 51, 32, 17, 52, 35, 35, 247, 173, 2, 106, 1, 118, 102, 60, 114, 98, 50, 174, 254, 68, 253, 174, 1, 114, 163, 1, 39, 97, 96, 168, 97, 98, 1, 57, 211, 200, 123, 4, 210, 123, 254, 187, 168, 105, 63, 48, 26, 30, 105, 233, 254, 135, 123, 1, 5, 148, 86, 85, 124, 1, 56, 218, 0, 1, 0, 111, 0, 0, 4, 112, 5, 200, 0, 13, 0, 123, 75, 176, 10, 80, 88, 64, 30, 0, 5, 3, 0, 3, 5, 112, 6, 1, 3, 3, 4, 93, 0, 4, 4, 40, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 41, 1, 76, 27, 75, 176, 42, 80, 88, 64, 31, 0, 5, 3, 0, 3, 5, 0, 126, 6, 1, 3, 3, 4, 93, 0, 4, 4, 40, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 41, 1, 76, 27, 64, 29, 0, 5, 3, 0, 3, 5, 0, 126, 0, 4, 6, 1, 3, 5, 4, 3, 101, 2, 1, 0, 0, 1, 93, 0, 1, 1, 44, 1, 76, 89, 89, 64, 10, 17, 17, 17, 17, 17, 17, 16, 7, 8, 27, 43, 37, 33, 21, 33, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 2, 18, 1, 16, 253, 77, 222, 222, 4, 1, 123, 254, 29, 123, 123, 123, 4, 210, 123, 254, 142, 247, 0, 0, 0, 0, 2, 0, 26, 0, 0, 4, 179, 5, 200, 0, 5, 0, 9, 0, 74, 64, 12, 8, 1, 2, 0, 1, 74, 4, 1, 2, 2, 1, 73, 75, 176, 42, 80, 88, 64, 17, 0, 0, 0, 40, 75, 0, 2, 2, 1, 93, 3, 1, 1, 1, 41, 1, 76, 27, 64, 17, 0, 0, 2, 0, 131, 0, 2, 2, 1, 93, 3, 1, 1, 1, 44, 1, 76, 89, 64, 12, 0, 0, 7, 6, 0, 5, 0, 5, 18, 4, 8, 21, 43, 51, 53, 1, 51, 1, 21, 37, 33, 1, 35, 26, 1, 238, 189, 1, 238, 251, 243, 3, 49, 254, 107, 4, 136, 5, 64, 250, 192, 136, 136, 4, 83, 0, 0, 0, 1, 0, 74, 0, 0, 4, 82, 5, 200, 0, 23, 1, 30, 75, 176, 10, 80, 88, 64, 54, 0, 3, 1, 6, 1, 3, 112, 0, 10, 7, 0, 0, 10, 112, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 40, 75, 9, 1, 0, 0, 11, 94, 12, 1, 11, 11, 41, 11, 76, 27, 75, 176, 38, 80, 88, 64, 56, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 40, 75, 9, 1, 0, 0, 11, 94, 12, 1, 11, 11, 41, 11, 76, 27, 75, 176, 42, 80, 88, 64, 62, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 9, 7, 10, 9, 126, 0, 0, 9, 11, 9, 0, 112, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 40, 75, 0, 9, 9, 11, 94, 12, 1, 11, 11, 41, 11, 76, 27, 64, 60, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 9, 7, 10, 9, 126, 0, 0, 9, 11, 9, 0, 112, 0, 2, 4, 1, 1, 3, 2, 1, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 0, 9, 9, 11, 94, 12, 1, 11, 11, 44, 11, 76, 89, 89, 89, 64, 22, 0, 0, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13, 8, 29, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 74, 185, 185, 3, 214, 123, 254, 36, 1, 35, 123, 123, 254, 221, 2, 13, 124, 123, 4, 210, 123, 254, 155, 234, 253, 225, 124, 254, 141, 124, 253, 213, 247, 254, 129, 0, 0, 1, 0, 148, 0, 0, 4, 57, 5, 200, 0, 13, 0, 154, 183, 8, 1, 0, 1, 1, 3, 2, 73, 75, 176, 10, 80, 88, 64, 36, 0, 1, 0, 4, 0, 1, 112, 0, 4, 3, 0, 4, 3, 124, 0, 0, 0, 2, 93, 0, 2, 2, 40, 75, 0, 3, 3, 5, 94, 6, 1, 5, 5, 41, 5, 76, 27, 75, 176, 42, 80, 88, 64, 37, 0, 1, 0, 4, 0, 1, 4, 126, 0, 4, 3, 0, 4, 3, 124, 0, 0, 0, 2, 93, 0, 2, 2, 40, 75, 0, 3, 3, 5, 94, 6, 1, 5, 5, 41, 5, 76, 27, 64, 35, 0, 1, 0, 4, 0, 1, 4, 126, 0, 4, 3, 0, 4, 3, 124, 0, 2, 0, 0, 1, 2, 0, 101, 0, 3, 3, 5, 94, 6, 1, 5, 5, 44, 5, 76, 89, 89, 64, 14, 0, 0, 0, 13, 0, 13, 17, 18, 17, 17, 18, 7, 8, 25, 43, 51, 53, 1, 33, 17, 35, 17, 33, 21, 1, 33, 17, 51, 17, 148, 2, 188, 253, 210, 123, 3, 133, 253, 68, 2, 77, 124, 136, 4, 197, 254, 241, 1, 138, 123, 251, 59, 1, 40, 254, 80, 0, 0, 0, 0, 1, 0, 62, 0, 0, 4, 144, 5, 200, 0, 27, 0, 114, 75, 176, 42, 80, 88, 64, 38, 0, 6, 14, 1, 13, 0, 6, 13, 101, 9, 7, 5, 3, 3, 3, 4, 93, 8, 1, 4, 4, 40, 75, 12, 10, 2, 3, 0, 0, 1, 93, 11, 1, 1, 1, 41, 1, 76, 27, 64, 36, 8, 1, 4, 9, 7, 5, 3, 3, 6, 4, 3, 101, 0, 6, 14, 1, 13, 0, 6, 13, 101, 12, 10, 2, 3, 0, 0, 1, 93, 11, 1, 1, 1, 44, 1, 76, 89, 64, 26, 0, 0, 0, 27, 0, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 8, 29, 43, 1, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 114, 99, 254, 105, 111, 111, 1, 151, 99, 1, 233, 99, 1, 152, 111, 111, 254, 104, 99, 2, 191, 253, 188, 123, 123, 4, 210, 123, 123, 253, 238, 2, 18, 123, 123, 251, 46, 123, 123, 2, 68, 0, 0, 0, 3, 0, 62, 255, 219, 4, 144, 5, 237, 0, 15, 0, 31, 0, 43, 0, 131, 75, 176, 42, 80, 88, 64, 42, 0, 6, 12, 1, 9, 4, 6, 9, 101, 7, 1, 5, 8, 1, 4, 3, 5, 4, 101, 11, 1, 2, 2, 0, 95, 10, 1, 0, 0, 46, 75, 0, 3, 3, 1, 95, 0, 1, 1, 47, 1, 76, 27, 64, 40, 10, 1, 0, 11, 1, 2, 5, 0, 2, 103, 0, 6, 12, 1, 9, 4, 6, 9, 101, 7, 1, 5, 8, 1, 4, 3, 5, 4, 101, 0, 3, 3, 1, 95, 0, 1, 1, 50, 1, 76, 89, 64, 35, 32, 32, 17, 16, 1, 0, 32, 43, 32, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 13, 8, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 1, 21, 35, 53, 51, 21, 51, 53, 51, 21, 35, 53, 2, 103, 243, 155, 155, 155, 155, 243, 221, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 163, 161, 84, 95, 90, 91, 254, 248, 123, 123, 210, 123, 123, 5, 237, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 123, 172, 173, 254, 203, 254, 206, 174, 174, 150, 169, 1, 77, 1, 57, 171, 172, 253, 68, 60, 240, 60, 60, 240, 60, 0, 1, 0, 160, 0, 0, 4, 44, 5, 200, 0, 11, 0, 74, 75, 176, 42, 80, 88, 64, 24, 3, 1, 1, 1, 2, 93, 0, 2, 2, 40, 75, 4, 1, 0, 0, 5, 93, 6, 1, 5, 5, 41, 5, 76, 27, 64, 22, 0, 2, 3, 1, 1, 0, 2, 1, 101, 4, 1, 0, 0, 5, 93, 6, 1, 5, 5, 44, 5, 76, 89, 64, 14, 0, 0, 0, 11, 0, 11, 17, 17, 17, 17, 17, 7, 8, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 123, 4, 210, 123, 123, 251, 46, 123, 0, 0, 1, 0, 74, 0, 0, 4, 173, 5, 200, 0, 28, 0, 103, 183, 24, 17, 9, 3, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 30, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 40, 75, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 41, 8, 76, 27, 64, 28, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 101, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 44, 8, 76, 89, 64, 22, 0, 0, 0, 28, 0, 28, 27, 26, 23, 22, 17, 18, 17, 17, 19, 17, 17, 17, 17, 13, 8, 29, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 33, 53, 51, 1, 35, 17, 51, 21, 74, 130, 130, 1, 176, 105, 7, 1, 174, 111, 1, 100, 92, 254, 115, 2, 17, 74, 254, 87, 111, 254, 37, 7, 123, 123, 4, 210, 123, 123, 253, 167, 2, 89, 123, 123, 253, 222, 253, 80, 123, 123, 2, 105, 253, 151, 123, 0, 0, 0, 0, 1, 0, 25, 0, 0, 4, 179, 5, 200, 0, 15, 0, 64, 75, 176, 42, 80, 88, 64, 20, 0, 3, 3, 40, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 41, 1, 76, 27, 64, 20, 0, 3, 0, 3, 131, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 44, 1, 76, 89, 64, 10, 17, 17, 17, 17, 17, 17, 18, 7, 8, 27, 43, 1, 35, 1, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 2, 66, 3, 254, 165, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 4, 219, 251, 160, 123, 123, 5, 77, 250, 179, 123, 123, 0, 1, 0, 25, 0, 0, 4, 180, 5, 200, 0, 27, 0, 113, 183, 23, 19, 7, 3, 8, 1, 1, 74, 75, 176, 42, 80, 88, 64, 36, 0, 8, 1, 0, 1, 8, 0, 126, 4, 1, 1, 1, 2, 93, 3, 1, 2, 2, 40, 75, 9, 7, 5, 3, 0, 0, 6, 93, 11, 10, 2, 6, 6, 41, 6, 76, 27, 64, 34, 0, 8, 1, 0, 1, 8, 0, 126, 3, 1, 2, 4, 1, 1, 8, 2, 1, 101, 9, 7, 5, 3, 0, 0, 6, 93, 11, 10, 2, 6, 6, 44, 6, 76, 89, 64, 20, 0, 0, 0, 27, 0, 27, 26, 25, 19, 17, 17, 17, 17, 19, 17, 17, 17, 12, 8, 29, 43, 51, 53, 51, 17, 35, 53, 33, 1, 51, 1, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 35, 1, 35, 1, 35, 17, 51, 21, 25, 86, 86, 1, 29, 1, 50, 2, 1, 61, 1, 13, 86, 86, 254, 192, 72, 2, 254, 221, 135, 254, 221, 2, 86, 123, 4, 210, 123, 252, 6, 3, 250, 123, 251, 46, 123, 123, 3, 237, 252, 90, 3, 204, 251, 237, 123, 0, 0, 0, 1, 0, 74, 0, 0, 4, 131, 5, 200, 0, 21, 0, 91, 182, 17, 7, 2, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 27, 5, 3, 2, 1, 1, 2, 93, 4, 1, 2, 2, 40, 75, 7, 1, 0, 0, 6, 93, 9, 8, 2, 6, 6, 41, 6, 76, 27, 64, 25, 4, 1, 2, 5, 3, 2, 1, 0, 2, 1, 101, 7, 1, 0, 0, 6, 93, 9, 8, 2, 6, 6, 44, 6, 76, 89, 64, 17, 0, 0, 0, 21, 0, 21, 19, 17, 17, 17, 19, 17, 17, 17, 10, 8, 28, 43, 51, 53, 51, 17, 35, 53, 51, 1, 51, 17, 35, 53, 33, 21, 35, 17, 35, 1, 35, 17, 51, 21, 74, 111, 111, 234, 2, 98, 2, 110, 1, 89, 111, 124, 253, 159, 3, 111, 123, 4, 210, 123, 251, 205, 3, 184, 123, 123, 250, 179, 4, 52, 252, 71, 123, 0, 3, 0, 74, 0, 0, 4, 82, 5, 200, 0, 11, 0, 19, 0, 27, 1, 49, 75, 176, 10, 80, 88, 64, 58, 12, 1, 10, 13, 1, 13, 10, 112, 8, 1, 6, 0, 7, 7, 6, 112, 0, 2, 14, 1, 5, 0, 2, 5, 101, 3, 1, 1, 4, 1, 0, 6, 1, 0, 101, 16, 1, 13, 13, 11, 93, 0, 11, 11, 40, 75, 0, 7, 7, 9, 94, 15, 1, 9, 9, 41, 9, 76, 27, 75, 176, 12, 80, 88, 64, 59, 12, 1, 10, 13, 1, 13, 10, 112, 8, 1, 6, 0, 7, 0, 6, 7, 126, 0, 2, 14, 1, 5, 0, 2, 5, 101, 3, 1, 1, 4, 1, 0, 6, 1, 0, 101, 16, 1, 13, 13, 11, 93, 0, 11, 11, 40, 75, 0, 7, 7, 9, 94, 15, 1, 9, 9, 41, 9, 76, 27, 75, 176, 42, 80, 88, 64, 60, 12, 1, 10, 13, 1, 13, 10, 1, 126, 8, 1, 6, 0, 7, 0, 6, 7, 126, 0, 2, 14, 1, 5, 0, 2, 5, 101, 3, 1, 1, 4, 1, 0, 6, 1, 0, 101, 16, 1, 13, 13, 11, 93, 0, 11, 11, 40, 75, 0, 7, 7, 9, 94, 15, 1, 9, 9, 41, 9, 76, 27, 64, 58, 12, 1, 10, 13, 1, 13, 10, 1, 126, 8, 1, 6, 0, 7, 0, 6, 7, 126, 0, 11, 16, 1, 13, 10, 11, 13, 101, 0, 2, 14, 1, 5, 0, 2, 5, 101, 3, 1, 1, 4, 1, 0, 6, 1, 0, 101, 0, 7, 7, 9, 94, 15, 1, 9, 9, 44, 9, 76, 89, 89, 89, 64, 38, 20, 20, 12, 12, 0, 0, 20, 27, 20, 27, 26, 25, 24, 23, 22, 21, 12, 19, 12, 19, 18, 17, 16, 15, 14, 13, 0, 11, 0, 11, 17, 17, 17, 17, 17, 17, 8, 25, 43, 1, 21, 35, 17, 51, 21, 33, 53, 51, 17, 35, 53, 1, 17, 51, 21, 33, 53, 51, 17, 1, 21, 35, 17, 33, 17, 35, 53, 1, 176, 123, 123, 1, 60, 123, 123, 253, 94, 124, 3, 16, 124, 252, 165, 123, 3, 164, 123, 2, 179, 122, 1, 111, 122, 122, 254, 145, 122, 253, 77, 1, 127, 247, 247, 254, 129, 5, 64, 221, 1, 101, 254, 155, 221, 0, 0, 0, 0, 2, 0, 62, 255, 219, 4, 144, 5, 237, 0, 15, 0, 31, 0, 77, 75, 176, 42, 80, 88, 64, 23, 5, 1, 2, 2, 0, 95, 4, 1, 0, 0, 46, 75, 0, 3, 3, 1, 95, 0, 1, 1, 47, 1, 76, 27, 64, 21, 4, 1, 0, 5, 1, 2, 3, 0, 2, 103, 0, 3, 3, 1, 95, 0, 1, 1, 50, 1, 76, 89, 64, 19, 17, 16, 1, 0, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 6, 8, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 2, 103, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 5, 237, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 123, 172, 173, 254, 203, 254, 206, 174, 174, 150, 169, 1, 77, 1, 57, 171, 172, 0, 0, 0, 0, 1, 0, 62, 0, 0, 4, 144, 5, 200, 0, 19, 0, 86, 75, 176, 42, 80, 88, 64, 28, 10, 9, 5, 3, 3, 3, 4, 93, 0, 4, 4, 40, 75, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 1, 41, 1, 76, 27, 64, 26, 0, 4, 10, 9, 5, 3, 3, 0, 4, 3, 101, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 1, 44, 1, 76, 89, 64, 18, 0, 0, 0, 19, 0, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11, 8, 29, 43, 1, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 114, 99, 254, 105, 111, 111, 4, 82, 111, 111, 254, 104, 99, 5, 77, 251, 46, 123, 123, 4, 210, 123, 123, 251, 46, 123, 123, 4, 210, 0, 0, 0, 2, 0, 86, 0, 0, 4, 100, 5, 200, 0, 16, 0, 23, 0, 94, 75, 176, 42, 80, 88, 64, 32, 0, 6, 8, 1, 5, 0, 6, 5, 103, 7, 1, 3, 3, 4, 93, 0, 4, 4, 40, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 41, 1, 76, 27, 64, 30, 0, 4, 7, 1, 3, 6, 4, 3, 101, 0, 6, 8, 1, 5, 0, 6, 5, 103, 2, 1, 0, 0, 1, 93, 0, 1, 1, 44, 1, 76, 89, 64, 18, 0, 0, 23, 21, 19, 17, 0, 16, 0, 15, 33, 17, 17, 17, 17, 9, 8, 25, 43, 1, 17, 33, 21, 33, 53, 51, 17, 35, 53, 33, 32, 17, 20, 7, 6, 35, 39, 51, 32, 17, 16, 35, 35, 1, 225, 1, 28, 253, 89, 197, 197, 2, 149, 1, 121, 140, 140, 245, 118, 111, 1, 66, 232, 201, 2, 86, 254, 37, 123, 123, 4, 210, 123, 254, 151, 241, 140, 140, 124, 1, 111, 1, 12, 0, 0, 0, 1, 0, 66, 0, 0, 4, 140, 5, 200, 0, 15, 0, 153, 64, 15, 15, 7, 2, 1, 4, 1, 74, 8, 1, 5, 6, 1, 0, 2, 73, 75, 176, 10, 80, 88, 64, 34, 0, 4, 5, 1, 5, 4, 112, 0, 1, 0, 0, 1, 110, 0, 5, 5, 3, 93, 0, 3, 3, 40, 75, 0, 0, 0, 2, 94, 0, 2, 2, 41, 2, 76, 27, 75, 176, 42, 80, 88, 64, 36, 0, 4, 5, 1, 5, 4, 1, 126, 0, 1, 0, 5, 1, 0, 124, 0, 5, 5, 3, 93, 0, 3, 3, 40, 75, 0, 0, 0, 2, 94, 0, 2, 2, 41, 2, 76, 27, 64, 34, 0, 4, 5, 1, 5, 4, 1, 126, 0, 1, 0, 5, 1, 0, 124, 0, 3, 0, 5, 4, 3, 5, 101, 0, 0, 0, 2, 94, 0, 2, 2, 44, 2, 76, 89, 89, 64, 9, 17, 17, 20, 17, 17, 16, 6, 8, 26, 43, 55, 33, 53, 51, 17, 33, 53, 1, 1, 53, 33, 17, 35, 53, 33, 1, 240, 3, 32, 124, 251, 182, 2, 100, 253, 181, 4, 18, 123, 253, 122, 2, 27, 136, 247, 254, 129, 136, 2, 98, 2, 99, 123, 254, 152, 237, 253, 206, 0, 0, 1, 0, 62, 0, 0, 4, 144, 5, 200, 0, 15, 0, 135, 75, 176, 10, 80, 88, 64, 32, 4, 1, 2, 1, 0, 1, 2, 112, 5, 1, 1, 1, 3, 93, 0, 3, 3, 40, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 41, 7, 76, 27, 75, 176, 42, 80, 88, 64, 33, 4, 1, 2, 1, 0, 1, 2, 0, 126, 5, 1, 1, 1, 3, 93, 0, 3, 3, 40, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 41, 7, 76, 27, 64, 31, 4, 1, 2, 1, 0, 1, 2, 0, 126, 0, 3, 5, 1, 1, 2, 3, 1, 101, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 44, 7, 76, 89, 89, 64, 16, 0, 0, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 9, 8, 27, 43, 33, 53, 33, 17, 33, 21, 35, 17, 33, 17, 35, 53, 33, 17, 33, 21, 1, 1, 1, 3, 254, 181, 123, 4, 82, 124, 254, 182, 1, 3, 123, 4, 210, 232, 1, 99, 254, 157, 232, 251, 46, 123, 0, 0, 1, 0, 13, 0, 0, 4, 205, 5, 200, 0, 21, 0, 79, 64, 14, 18, 1, 3, 4, 14, 1, 0, 3, 2, 74, 17, 1, 4, 72, 75, 176, 42, 80, 88, 64, 22, 0, 3, 3, 4, 95, 0, 4, 4, 40, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 41, 1, 76, 27, 64, 20, 0, 4, 0, 3, 0, 4, 3, 103, 2, 1, 0, 0, 1, 93, 0, 1, 1, 44, 1, 76, 89, 183, 33, 19, 17, 17, 16, 5, 8, 25, 43, 37, 51, 21, 33, 53, 51, 17, 16, 0, 35, 53, 51, 50, 0, 19, 54, 0, 55, 21, 6, 0, 21, 2, 201, 200, 253, 170, 200, 254, 217, 207, 15, 234, 1, 56, 68, 91, 1, 88, 152, 206, 254, 202, 123, 123, 123, 1, 100, 1, 116, 1, 201, 172, 254, 213, 254, 214, 244, 1, 69, 28, 148, 66, 254, 22, 255, 0, 0, 3, 0, 40, 0, 0, 4, 165, 5, 200, 0, 25, 0, 32, 0, 39, 0, 126, 75, 176, 42, 80, 88, 64, 44, 9, 1, 3, 13, 1, 10, 11, 3, 10, 103, 12, 14, 2, 11, 8, 1, 4, 5, 11, 4, 103, 2, 1, 0, 0, 1, 93, 0, 1, 1, 40, 75, 7, 1, 5, 5, 6, 93, 0, 6, 6, 41, 6, 76, 27, 64, 42, 0, 1, 2, 1, 0, 3, 1, 0, 101, 9, 1, 3, 13, 1, 10, 11, 3, 10, 103, 12, 14, 2, 11, 8, 1, 4, 5, 11, 4, 103, 7, 1, 5, 5, 6, 93, 0, 6, 6, 44, 6, 76, 89, 64, 26, 26, 26, 39, 38, 34, 33, 26, 32, 26, 32, 28, 27, 25, 24, 17, 17, 17, 17, 20, 17, 17, 17, 16, 15, 8, 29, 43, 1, 35, 53, 33, 21, 35, 21, 50, 4, 21, 20, 4, 35, 21, 51, 21, 33, 53, 51, 53, 34, 36, 53, 52, 36, 51, 17, 17, 34, 6, 21, 20, 22, 33, 50, 54, 53, 52, 38, 35, 2, 11, 120, 1, 168, 120, 201, 1, 25, 254, 231, 201, 120, 254, 88, 120, 202, 254, 231, 1, 25, 202, 134, 152, 152, 1, 62, 132, 153, 153, 132, 5, 77, 123, 123, 168, 252, 197, 196, 253, 168, 123, 123, 168, 253, 196, 197, 252, 252, 249, 2, 140, 162, 164, 165, 161, 161, 165, 164, 162, 0, 1, 0, 49, 0, 0, 4, 155, 5, 200, 0, 27, 0, 105, 64, 9, 24, 17, 10, 3, 4, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 30, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 40, 75, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 41, 8, 76, 27, 64, 28, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 101, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 44, 8, 76, 89, 64, 22, 0, 0, 0, 27, 0, 27, 26, 25, 23, 22, 17, 18, 17, 17, 18, 17, 17, 18, 17, 13, 8, 29, 43, 51, 53, 51, 1, 1, 35, 53, 33, 21, 35, 1, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 33, 53, 51, 1, 1, 51, 21, 49, 111, 1, 94, 254, 150, 99, 1, 164, 100, 1, 32, 1, 33, 128, 1, 105, 105, 254, 159, 1, 104, 98, 254, 69, 124, 254, 226, 254, 226, 154, 123, 2, 95, 2, 115, 123, 123, 254, 12, 1, 244, 123, 123, 253, 157, 253, 145, 123, 123, 1, 240, 254, 16, 123, 0, 0, 0, 1, 0, 15, 0, 0, 4, 190, 5, 200, 0, 49, 0, 107, 64, 9, 47, 29, 22, 4, 4, 4, 3, 1, 74, 75, 176, 42, 80, 88, 64, 38, 9, 1, 1, 1, 0, 95, 8, 2, 2, 0, 0, 40, 75, 7, 1, 3, 3, 0, 95, 8, 2, 2, 0, 0, 40, 75, 6, 1, 4, 4, 5, 93, 0, 5, 5, 41, 5, 76, 27, 64, 30, 9, 1, 1, 3, 0, 1, 85, 8, 2, 2, 0, 7, 1, 3, 4, 0, 3, 103, 6, 1, 4, 4, 5, 93, 0, 5, 5, 44, 5, 76, 89, 64, 14, 49, 48, 34, 24, 17, 17, 24, 34, 23, 17, 16, 10, 8, 29, 43, 1, 33, 21, 35, 17, 54, 54, 55, 55, 54, 54, 51, 51, 21, 35, 34, 6, 15, 2, 6, 6, 7, 17, 51, 21, 33, 53, 51, 17, 38, 38, 47, 2, 38, 38, 35, 35, 53, 51, 50, 22, 23, 23, 22, 22, 23, 17, 35, 1, 145, 1, 171, 115, 76, 75, 29, 21, 31, 126, 126, 17, 14, 44, 44, 15, 14, 20, 28, 175, 147, 120, 254, 75, 120, 148, 175, 27, 20, 14, 13, 49, 41, 14, 17, 126, 127, 30, 21, 30, 74, 76, 115, 5, 200, 123, 253, 157, 8, 133, 175, 120, 167, 131, 148, 54, 77, 71, 126, 172, 190, 19, 254, 12, 123, 123, 1, 244, 19, 190, 172, 126, 71, 65, 66, 148, 131, 167, 120, 175, 133, 8, 2, 99, 0, 0, 0, 1, 0, 58, 0, 0, 4, 147, 5, 237, 0, 31, 0, 75, 182, 20, 0, 2, 1, 5, 1, 74, 75, 176, 42, 80, 88, 64, 23, 0, 5, 5, 2, 95, 0, 2, 2, 46, 75, 3, 1, 1, 1, 0, 93, 4, 1, 0, 0, 41, 0, 76, 27, 64, 21, 0, 2, 0, 5, 1, 2, 5, 103, 3, 1, 1, 1, 0, 93, 4, 1, 0, 0, 44, 0, 76, 89, 64, 9, 38, 17, 21, 37, 17, 17, 6, 8, 26, 43, 37, 21, 33, 53, 33, 38, 2, 53, 16, 0, 33, 32, 0, 17, 20, 2, 7, 33, 21, 33, 53, 54, 18, 53, 16, 2, 35, 34, 2, 17, 20, 18, 2, 10, 254, 48, 1, 44, 155, 144, 1, 36, 1, 8, 1, 7, 1, 36, 145, 155, 1, 45, 254, 48, 141, 112, 173, 172, 173, 173, 112, 148, 148, 136, 176, 1, 100, 192, 1, 56, 1, 89, 254, 167, 254, 200, 192, 254, 156, 176, 136, 148, 160, 1, 42, 213, 1, 29, 1, 34, 254, 222, 254, 227, 214, 254, 215, 0, 0, 0, 3, 0, 160, 0, 0, 4, 44, 7, 39, 0, 11, 0, 15, 0, 19, 0, 114, 75, 176, 42, 80, 88, 64, 36, 8, 1, 6, 12, 9, 11, 3, 7, 2, 6, 7, 101, 3, 1, 1, 1, 2, 93, 0, 2, 2, 40, 75, 4, 1, 0, 0, 5, 93, 10, 1, 5, 5, 41, 5, 76, 27, 64, 34, 8, 1, 6, 12, 9, 11, 3, 7, 2, 6, 7, 101, 0, 2, 3, 1, 1, 0, 2, 1, 101, 4, 1, 0, 0, 5, 93, 10, 1, 5, 5, 44, 5, 76, 89, 64, 30, 16, 16, 12, 12, 0, 0, 16, 19, 16, 19, 18, 17, 12, 15, 12, 15, 14, 13, 0, 11, 0, 11, 17, 17, 17, 17, 17, 13, 8, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 1, 53, 51, 21, 33, 53, 51, 21, 160, 1, 99, 254, 157, 3, 140, 254, 157, 1, 99, 252, 237, 197, 1, 16, 197, 123, 4, 210, 123, 123, 251, 46, 123, 6, 98, 197, 197, 197, 197, 0, 0, 3, 0, 13, 0, 0, 4, 205, 7, 39, 0, 3, 0, 7, 0, 29, 0, 125, 64, 15, 26, 1, 7, 8, 22, 1, 4, 7, 2, 74, 25, 1, 8, 1, 73, 75, 176, 42, 80, 88, 64, 34, 2, 1, 0, 10, 3, 9, 3, 1, 8, 0, 1, 101, 0, 7, 7, 8, 95, 0, 8, 8, 40, 75, 6, 1, 4, 4, 5, 93, 0, 5, 5, 41, 5, 76, 27, 64, 32, 2, 1, 0, 10, 3, 9, 3, 1, 8, 0, 1, 101, 0, 8, 0, 7, 4, 8, 7, 103, 6, 1, 4, 4, 5, 93, 0, 5, 5, 44, 5, 76, 89, 64, 28, 4, 4, 0, 0, 20, 18, 17, 16, 13, 12, 11, 10, 9, 8, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 11, 8, 21, 43, 1, 53, 51, 21, 33, 53, 51, 21, 1, 51, 21, 33, 53, 51, 17, 16, 0, 35, 53, 51, 50, 0, 19, 54, 0, 55, 21, 6, 0, 21, 1, 68, 197, 1, 16, 197, 254, 235, 200, 253, 170, 200, 254, 217, 207, 15, 234, 1, 56, 68, 91, 1, 88, 152, 206, 254, 202, 6, 98, 197, 197, 197, 197, 250, 25, 123, 123, 1, 100, 1, 116, 1, 201, 172, 254, 213, 254, 214, 244, 1, 69, 28, 148, 66, 254, 22, 255, 0, 0, 0, 3, 0, 93, 255, 231, 4, 191, 6, 166, 0, 3, 0, 50, 0, 71, 0, 125, 183, 71, 26, 15, 3, 7, 6, 1, 74, 75, 176, 42, 80, 88, 64, 40, 0, 0, 8, 1, 1, 5, 0, 1, 101, 0, 2, 2, 43, 75, 0, 6, 6, 5, 95, 0, 5, 5, 49, 75, 0, 3, 3, 41, 75, 0, 7, 7, 4, 95, 0, 4, 4, 50, 4, 76, 27, 64, 40, 0, 0, 8, 1, 1, 5, 0, 1, 101, 0, 2, 2, 43, 75, 0, 6, 6, 5, 95, 0, 5, 5, 49, 75, 0, 3, 3, 44, 75, 0, 7, 7, 4, 95, 0, 4, 4, 50, 4, 76, 89, 64, 22, 0, 0, 67, 65, 57, 55, 46, 44, 32, 30, 21, 20, 10, 9, 0, 3, 0, 3, 17, 9, 8, 21, 43, 1, 19, 51, 3, 1, 62, 3, 53, 51, 14, 3, 7, 30, 3, 23, 35, 46, 3, 39, 14, 3, 35, 34, 46, 4, 53, 52, 62, 4, 51, 50, 30, 2, 23, 39, 46, 3, 35, 34, 14, 4, 21, 20, 22, 51, 50, 62, 2, 55, 1, 229, 84, 205, 176, 1, 30, 23, 32, 20, 9, 210, 16, 40, 55, 73, 50, 39, 69, 66, 64, 33, 228, 20, 33, 34, 36, 23, 45, 93, 105, 117, 69, 64, 97, 71, 47, 28, 12, 16, 38, 60, 87, 117, 75, 68, 98, 79, 71, 42, 183, 28, 49, 46, 44, 22, 37, 54, 38, 23, 13, 5, 69, 70, 41, 83, 85, 87, 45, 5, 3, 1, 163, 254, 93, 253, 79, 57, 124, 127, 125, 59, 84, 156, 155, 155, 82, 80, 129, 108, 93, 44, 31, 58, 66, 80, 53, 69, 115, 83, 46, 44, 75, 99, 108, 110, 49, 63, 146, 145, 133, 103, 61, 59, 110, 157, 97, 23, 69, 98, 61, 28, 58, 92, 115, 115, 102, 33, 172, 162, 27, 67, 114, 86, 0, 0, 0, 2, 0, 148, 255, 231, 4, 86, 6, 166, 0, 30, 0, 34, 0, 79, 64, 76, 13, 1, 2, 1, 14, 1, 3, 2, 7, 1, 4, 3, 0, 1, 5, 4, 1, 1, 0, 5, 5, 74, 0, 6, 8, 1, 7, 1, 6, 7, 101, 0, 3, 0, 4, 5, 3, 4, 101, 0, 2, 2, 1, 95, 0, 1, 1, 49, 75, 0, 5, 5, 0, 95, 0, 0, 0, 50, 0, 76, 31, 31, 31, 34, 31, 34, 18, 35, 33, 35, 35, 38, 34, 9, 8, 27, 43, 37, 21, 6, 35, 32, 17, 52, 37, 38, 53, 16, 33, 50, 23, 21, 38, 35, 34, 6, 21, 20, 33, 33, 21, 33, 34, 6, 21, 20, 33, 50, 1, 19, 51, 3, 4, 86, 224, 180, 253, 210, 1, 0, 220, 1, 250, 175, 208, 229, 135, 179, 151, 1, 103, 1, 5, 255, 0, 215, 170, 1, 123, 184, 254, 154, 84, 205, 176, 186, 143, 68, 1, 67, 205, 101, 56, 170, 1, 24, 40, 142, 59, 86, 71, 188, 124, 102, 109, 204, 4, 156, 1, 163, 254, 93, 0, 0, 0, 2, 0, 116, 254, 117, 4, 34, 6, 166, 0, 18, 0, 22, 0, 201, 182, 17, 6, 2, 4, 3, 1, 74, 75, 176, 12, 80, 88, 64, 36, 0, 5, 8, 1, 6, 1, 5, 6, 101, 0, 0, 0, 43, 75, 0, 3, 3, 1, 95, 0, 1, 1, 49, 75, 7, 1, 4, 4, 41, 75, 0, 2, 2, 45, 2, 76, 27, 75, 176, 14, 80, 88, 64, 32, 0, 5, 8, 1, 6, 0, 5, 6, 101, 0, 3, 3, 0, 95, 1, 1, 0, 0, 43, 75, 7, 1, 4, 4, 41, 75, 0, 2, 2, 45, 2, 76, 27, 75, 176, 42, 80, 88, 64, 36, 0, 5, 8, 1, 6, 1, 5, 6, 101, 0, 0, 0, 43, 75, 0, 3, 3, 1, 95, 0, 1, 1, 49, 75, 7, 1, 4, 4, 41, 75, 0, 2, 2, 45, 2, 76, 27, 64, 36, 0, 5, 8, 1, 6, 1, 5, 6, 101, 0, 0, 0, 43, 75, 0, 3, 3, 1, 95, 0, 1, 1, 49, 75, 7, 1, 4, 4, 44, 75, 0, 2, 2, 45, 2, 76, 89, 89, 89, 64, 21, 19, 19, 0, 0, 19, 22, 19, 22, 21, 20, 0, 18, 0, 18, 34, 18, 35, 19, 9, 8, 24, 43, 51, 17, 52, 39, 51, 22, 23, 54, 51, 32, 17, 17, 35, 17, 16, 35, 34, 7, 17, 19, 19, 51, 3, 182, 66, 220, 27, 16, 175, 206, 1, 42, 197, 172, 165, 145, 86, 84, 205, 176, 2, 241, 182, 151, 88, 118, 230, 254, 111, 251, 176, 4, 56, 1, 21, 253, 253, 59, 5, 3, 1, 163, 254, 93, 0, 0, 0, 0, 2, 1, 131, 255, 231, 4, 12, 6, 166, 0, 13, 0, 17, 0, 51, 64, 48, 13, 1, 2, 1, 0, 1, 0, 2, 2, 74, 0, 3, 5, 1, 4, 1, 3, 4, 101, 0, 1, 1, 43, 75, 0, 2, 2, 0, 96, 0, 0, 0, 50, 0, 76, 14, 14, 14, 17, 14, 17, 19, 35, 19, 33, 6, 8, 24, 43, 37, 6, 35, 34, 38, 53, 17, 51, 17, 20, 22, 51, 50, 55, 1, 19, 51, 3, 4, 12, 136, 139, 221, 153, 197, 77, 132, 108, 135, 253, 203, 84, 205, 176, 27, 52, 176, 231, 2, 192, 253, 83, 180, 99, 53, 4, 84, 1, 163, 254, 93, 0, 0, 0, 4, 0, 179, 255, 231, 4, 68, 6, 176, 0, 3, 0, 7, 0, 40, 0, 44, 0, 124, 75, 176, 42, 80, 88, 64, 39, 0, 8, 0, 1, 8, 85, 12, 9, 11, 3, 10, 5, 1, 1, 0, 93, 2, 1, 0, 0, 40, 75, 6, 1, 4, 4, 43, 75, 0, 5, 5, 7, 95, 0, 7, 7, 50, 7, 76, 27, 64, 37, 0, 8, 0, 1, 8, 85, 2, 1, 0, 12, 9, 11, 3, 10, 5, 1, 4, 0, 1, 101, 6, 1, 4, 4, 43, 75, 0, 5, 5, 7, 95, 0, 7, 7, 50, 7, 76, 89, 64, 34, 41, 41, 4, 4, 0, 0, 41, 44, 41, 44, 43, 42, 36, 34, 28, 27, 18, 16, 9, 8, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 13, 8, 21, 43, 19, 53, 51, 21, 33, 53, 51, 21, 5, 51, 17, 20, 30, 4, 51, 50, 62, 2, 53, 52, 46, 2, 39, 51, 18, 17, 20, 14, 2, 35, 34, 46, 2, 53, 1, 19, 51, 3, 216, 185, 1, 176, 185, 252, 185, 197, 3, 14, 30, 55, 82, 60, 90, 116, 68, 27, 19, 38, 58, 39, 202, 123, 71, 134, 193, 121, 108, 150, 94, 42, 1, 88, 84, 205, 176, 5, 13, 185, 185, 185, 185, 207, 253, 225, 49, 102, 95, 85, 63, 36, 76, 120, 148, 72, 73, 148, 143, 134, 59, 254, 245, 254, 224, 123, 205, 147, 81, 67, 131, 194, 127, 3, 31, 1, 163, 254, 93, 0, 0, 0, 0, 2, 0, 93, 255, 231, 4, 191, 4, 87, 0, 46, 0, 67, 0, 94, 183, 67, 22, 11, 3, 5, 4, 1, 74, 75, 176, 42, 80, 88, 64, 31, 0, 0, 0, 43, 75, 0, 4, 4, 3, 95, 0, 3, 3, 49, 75, 0, 1, 1, 41, 75, 0, 5, 5, 2, 95, 0, 2, 2, 50, 2, 76, 27, 64, 31, 0, 0, 0, 43, 75, 0, 4, 4, 3, 95, 0, 3, 3, 49, 75, 0, 1, 1, 44, 75, 0, 5, 5, 2, 95, 0, 2, 2, 50, 2, 76, 89, 64, 9, 40, 41, 44, 41, 26, 21, 6, 8, 26, 43, 1, 62, 3, 53, 51, 14, 3, 7, 30, 3, 23, 35, 46, 3, 39, 14, 3, 35, 34, 46, 4, 53, 52, 62, 4, 51, 50, 30, 2, 23, 39, 46, 3, 35, 34, 14, 4, 21, 20, 22, 51, 50, 62, 2, 55, 3, 116, 23, 32, 20, 9, 210, 16, 40, 55, 73, 50, 39, 69, 66, 64, 33, 228, 20, 33, 34, 36, 23, 45, 93, 105, 117, 69, 64, 97, 71, 47, 28, 12, 16, 38, 60, 87, 117, 75, 68, 98, 79, 71, 42, 183, 28, 49, 46, 44, 22, 37, 54, 38, 23, 13, 5, 69, 70, 41, 83, 85, 87, 45, 2, 82, 57, 124, 127, 125, 59, 84, 156, 155, 155, 82, 80, 129, 108, 93, 44, 31, 58, 66, 80, 53, 69, 115, 83, 46, 44, 75, 99, 108, 110, 49, 63, 146, 145, 133, 103, 61, 59, 110, 157, 97, 23, 69, 98, 61, 28, 58, 92, 115, 115, 102, 33, 172, 162, 27, 67, 114, 86, 0, 0, 0, 2, 0, 197, 254, 117, 4, 111, 6, 68, 0, 18, 0, 39, 0, 71, 64, 68, 9, 1, 6, 3, 29, 1, 5, 6, 17, 1, 1, 5, 3, 74, 0, 3, 0, 6, 5, 3, 6, 103, 0, 4, 4, 0, 95, 0, 0, 0, 42, 75, 0, 5, 5, 1, 95, 0, 1, 1, 50, 75, 7, 1, 2, 2, 45, 2, 76, 0, 0, 39, 37, 33, 31, 27, 25, 21, 19, 0, 18, 0, 18, 41, 35, 8, 8, 22, 43, 19, 17, 16, 18, 51, 50, 22, 21, 16, 5, 22, 22, 21, 20, 4, 35, 34, 39, 17, 19, 51, 50, 54, 53, 52, 38, 35, 34, 17, 17, 22, 22, 51, 50, 54, 53, 52, 38, 35, 35, 197, 234, 209, 172, 212, 254, 241, 192, 190, 254, 237, 216, 137, 113, 74, 36, 131, 191, 108, 91, 233, 64, 141, 42, 125, 171, 217, 213, 39, 254, 117, 5, 169, 1, 4, 1, 34, 180, 147, 254, 255, 141, 61, 225, 164, 199, 255, 42, 254, 100, 5, 18, 218, 141, 88, 131, 254, 116, 252, 111, 32, 33, 189, 125, 178, 181, 0, 0, 0, 0, 1, 0, 1, 254, 92, 4, 101, 4, 62, 0, 58, 0, 66, 183, 58, 41, 18, 3, 3, 0, 1, 74, 75, 176, 40, 80, 88, 64, 17, 0, 0, 0, 1, 95, 2, 1, 1, 1, 43, 75, 0, 3, 3, 45, 3, 76, 27, 64, 17, 0, 3, 0, 3, 132, 0, 0, 0, 1, 95, 2, 1, 1, 1, 43, 0, 76, 89, 64, 9, 50, 49, 29, 28, 34, 22, 4, 8, 22, 43, 1, 46, 3, 39, 38, 35, 35, 55, 51, 50, 22, 23, 30, 3, 23, 62, 3, 53, 52, 46, 2, 39, 51, 22, 21, 20, 14, 2, 7, 14, 3, 7, 30, 3, 21, 20, 6, 7, 35, 46, 3, 53, 52, 54, 55, 1, 210, 36, 73, 66, 57, 21, 83, 117, 12, 67, 12, 84, 143, 58, 57, 96, 78, 58, 19, 66, 102, 70, 36, 3, 8, 17, 13, 199, 20, 15, 26, 37, 21, 32, 84, 85, 78, 26, 14, 23, 16, 9, 32, 29, 156, 9, 22, 19, 13, 33, 25, 1, 127, 80, 142, 116, 85, 24, 95, 161, 69, 74, 72, 166, 163, 147, 52, 91, 173, 152, 127, 45, 23, 40, 36, 36, 20, 54, 48, 24, 67, 77, 80, 38, 57, 144, 141, 119, 32, 37, 84, 87, 87, 39, 75, 152, 64, 24, 64, 73, 79, 38, 106, 153, 57, 0, 0, 2, 0, 123, 255, 231, 4, 86, 6, 68, 0, 26, 0, 37, 0, 41, 64, 38, 7, 1, 1, 0, 8, 1, 3, 1, 2, 74, 0, 1, 1, 0, 95, 0, 0, 0, 42, 75, 0, 3, 3, 2, 95, 0, 2, 2, 50, 2, 76, 40, 42, 35, 36, 4, 8, 24, 43, 1, 36, 53, 52, 54, 51, 50, 23, 21, 38, 35, 34, 21, 20, 31, 2, 22, 18, 21, 20, 0, 35, 34, 0, 53, 16, 37, 4, 17, 20, 22, 51, 50, 54, 53, 52, 38, 1, 246, 254, 170, 247, 219, 139, 157, 168, 149, 248, 177, 94, 108, 198, 176, 254, 235, 217, 212, 254, 231, 2, 14, 254, 196, 166, 124, 119, 158, 106, 3, 209, 179, 174, 129, 145, 29, 164, 70, 135, 73, 104, 54, 66, 119, 254, 251, 175, 227, 254, 220, 1, 29, 216, 1, 136, 13, 27, 254, 130, 173, 200, 209, 180, 134, 198, 0, 0, 0, 0, 1, 0, 148, 255, 231, 4, 86, 4, 86, 0, 30, 0, 63, 64, 60, 13, 1, 2, 1, 14, 1, 3, 2, 7, 1, 4, 3, 0, 1, 5, 4, 1, 1, 0, 5, 5, 74, 0, 3, 0, 4, 5, 3, 4, 101, 0, 2, 2, 1, 95, 0, 1, 1, 49, 75, 0, 5, 5, 0, 95, 0, 0, 0, 50, 0, 76, 35, 33, 35, 35, 38, 34, 6, 8, 26, 43, 37, 21, 6, 35, 32, 17, 52, 37, 38, 53, 16, 33, 50, 23, 21, 38, 35, 34, 6, 21, 20, 33, 33, 21, 33, 34, 6, 21, 20, 33, 50, 4, 86, 224, 180, 253, 210, 1, 0, 220, 1, 250, 175, 208, 229, 135, 179, 151, 1, 103, 1, 5, 255, 0, 215, 170, 1, 123, 184, 186, 143, 68, 1, 67, 205, 101, 56, 170, 1, 24, 40, 142, 59, 86, 71, 188, 124, 102, 109, 204, 0, 0, 0, 0, 1, 0, 31, 254, 92, 4, 198, 6, 68, 0, 41, 0, 135, 64, 20, 19, 1, 2, 3, 1, 1, 0, 1, 0, 1, 5, 0, 3, 74, 27, 26, 20, 3, 3, 72, 75, 176, 40, 80, 88, 64, 29, 0, 3, 0, 2, 4, 3, 2, 103, 0, 4, 4, 1, 95, 0, 1, 1, 41, 75, 0, 0, 0, 5, 95, 0, 5, 5, 45, 5, 76, 27, 75, 176, 42, 80, 88, 64, 26, 0, 3, 0, 2, 4, 3, 2, 103, 0, 0, 0, 5, 0, 5, 99, 0, 4, 4, 1, 95, 0, 1, 1, 41, 1, 76, 27, 64, 26, 0, 3, 0, 2, 4, 3, 2, 103, 0, 0, 0, 5, 0, 5, 99, 0, 4, 4, 1, 95, 0, 1, 1, 44, 1, 76, 89, 89, 64, 9, 35, 58, 35, 53, 51, 34, 6, 8, 26, 43, 1, 53, 22, 51, 50, 53, 52, 38, 35, 35, 32, 36, 53, 52, 18, 55, 6, 35, 34, 39, 53, 22, 23, 55, 54, 36, 55, 23, 6, 5, 2, 17, 20, 22, 51, 51, 50, 22, 21, 16, 33, 34, 2, 142, 100, 82, 236, 101, 153, 75, 254, 230, 254, 237, 155, 155, 77, 24, 171, 193, 228, 255, 70, 155, 1, 12, 133, 60, 243, 254, 195, 245, 176, 204, 46, 214, 187, 254, 71, 40, 254, 100, 148, 33, 168, 68, 61, 248, 254, 150, 1, 133, 162, 4, 70, 175, 119, 9, 1, 154, 121, 12, 127, 230, 47, 254, 173, 254, 163, 182, 157, 127, 144, 254, 190, 0, 1, 0, 116, 254, 117, 4, 34, 4, 86, 0, 18, 0, 157, 182, 17, 6, 2, 4, 3, 1, 74, 75, 176, 12, 80, 88, 64, 27, 0, 0, 0, 43, 75, 0, 3, 3, 1, 95, 0, 1, 1, 49, 75, 5, 1, 4, 4, 41, 75, 0, 2, 2, 45, 2, 76, 27, 75, 176, 14, 80, 88, 64, 23, 0, 3, 3, 0, 95, 1, 1, 0, 0, 43, 75, 5, 1, 4, 4, 41, 75, 0, 2, 2, 45, 2, 76, 27, 75, 176, 42, 80, 88, 64, 27, 0, 0, 0, 43, 75, 0, 3, 3, 1, 95, 0, 1, 1, 49, 75, 5, 1, 4, 4, 41, 75, 0, 2, 2, 45, 2, 76, 27, 64, 27, 0, 0, 0, 43, 75, 0, 3, 3, 1, 95, 0, 1, 1, 49, 75, 5, 1, 4, 4, 44, 75, 0, 2, 2, 45, 2, 76, 89, 89, 89, 64, 13, 0, 0, 0, 18, 0, 18, 34, 18, 35, 19, 6, 8, 24, 43, 51, 17, 52, 39, 51, 22, 23, 54, 51, 32, 17, 17, 35, 17, 16, 35, 34, 7, 17, 182, 66, 220, 27, 16, 175, 206, 1, 42, 197, 172, 165, 145, 2, 241, 182, 151, 88, 118, 230, 254, 111, 251, 176, 4, 56, 1, 21, 253, 253, 59, 0, 0, 0, 0, 3, 0, 123, 255, 231, 4, 86, 6, 68, 0, 11, 0, 18, 0, 25, 0, 41, 64, 38, 0, 2, 0, 4, 5, 2, 4, 101, 0, 3, 3, 0, 95, 0, 0, 0, 42, 75, 0, 5, 5, 1, 95, 0, 1, 1, 50, 1, 76, 34, 18, 34, 18, 36, 34, 6, 8, 26, 43, 19, 16, 18, 51, 50, 18, 17, 16, 2, 35, 34, 2, 19, 33, 16, 2, 35, 34, 2, 1, 33, 16, 18, 51, 50, 18, 123, 254, 240, 239, 254, 254, 239, 244, 250, 200, 2, 75, 158, 136, 135, 158, 2, 75, 253, 181, 153, 139, 137, 158, 3, 21, 1, 139, 1, 164, 254, 92, 254, 118, 254, 117, 254, 92, 1, 157, 1, 222, 1, 11, 1, 92, 254, 164, 254, 122, 254, 220, 254, 159, 1, 105, 0, 0, 0, 0, 1, 1, 131, 255, 231, 4, 12, 4, 62, 0, 13, 0, 35, 64, 32, 13, 1, 2, 1, 0, 1, 0, 2, 2, 74, 0, 1, 1, 43, 75, 0, 2, 2, 0, 96, 0, 0, 0, 50, 0, 76, 35, 19, 33, 3, 8, 23, 43, 37, 6, 35, 34, 38, 53, 17, 51, 17, 20, 22, 51, 50, 55, 4, 12, 136, 139, 221, 153, 197, 77, 132, 108, 135, 27, 52, 176, 231, 2, 192, 253, 83, 180, 99, 53, 0, 0, 0, 0, 1, 0, 207, 0, 0, 4, 154, 4, 62, 0, 18, 0, 76, 64, 9, 17, 14, 9, 3, 4, 3, 2, 1, 74, 75, 176, 42, 80, 88, 64, 19, 0, 2, 2, 0, 95, 1, 1, 0, 0, 43, 75, 5, 4, 2, 3, 3, 41, 3, 76, 27, 64, 19, 0, 2, 2, 0, 95, 1, 1, 0, 0, 43, 75, 5, 4, 2, 3, 3, 44, 3, 76, 89, 64, 13, 0, 0, 0, 18, 0, 18, 19, 35, 20, 17, 6, 8, 24, 43, 51, 17, 51, 17, 55, 0, 54, 51, 51, 21, 38, 35, 34, 7, 7, 1, 35, 1, 17, 207, 187, 105, 1, 9, 177, 113, 13, 25, 13, 106, 145, 184, 2, 72, 237, 253, 221, 4, 62, 253, 196, 120, 1, 47, 149, 168, 3, 154, 210, 253, 211, 2, 2, 253, 254, 0, 0, 0, 0, 1, 0, 58, 0, 0, 4, 168, 6, 43, 0, 35, 0, 83, 181, 18, 1, 2, 0, 1, 74, 75, 176, 40, 80, 88, 64, 17, 0, 0, 0, 1, 95, 0, 1, 1, 42, 75, 3, 1, 2, 2, 41, 2, 76, 27, 75, 176, 42, 80, 88, 64, 15, 0, 1, 0, 0, 2, 1, 0, 103, 3, 1, 2, 2, 41, 2, 76, 27, 64, 15, 0, 1, 0, 0, 2, 1, 0, 103, 3, 1, 2, 2, 44, 2, 76, 89, 89, 182, 28, 22, 33, 35, 4, 8, 24, 43, 1, 39, 38, 38, 35, 35, 53, 51, 50, 22, 23, 1, 22, 23, 23, 35, 38, 39, 3, 3, 14, 3, 21, 20, 22, 23, 33, 62, 5, 55, 1, 252, 100, 49, 106, 104, 29, 37, 193, 165, 86, 1, 100, 97, 104, 34, 222, 102, 83, 211, 119, 27, 55, 44, 28, 9, 6, 254, 254, 3, 30, 47, 59, 63, 66, 29, 3, 217, 230, 113, 88, 163, 116, 198, 252, 212, 220, 175, 58, 169, 189, 1, 222, 254, 254, 59, 127, 127, 126, 57, 23, 45, 14, 29, 85, 103, 119, 125, 130, 64, 0, 0, 0, 0, 1, 0, 182, 254, 117, 4, 100, 4, 62, 0, 24, 0, 97, 64, 11, 19, 9, 2, 1, 0, 23, 1, 3, 1, 2, 74, 75, 176, 42, 80, 88, 64, 28, 2, 1, 0, 0, 43, 75, 0, 3, 3, 41, 75, 0, 1, 1, 4, 95, 0, 4, 4, 50, 75, 6, 1, 5, 5, 45, 5, 76, 27, 64, 28, 2, 1, 0, 0, 43, 75, 0, 3, 3, 44, 75, 0, 1, 1, 4, 95, 0, 4, 4, 50, 75, 6, 1, 5, 5, 45, 5, 76, 89, 64, 14, 0, 0, 0, 24, 0, 24, 37, 19, 18, 36, 17, 7, 8, 25, 43, 19, 17, 51, 17, 20, 22, 22, 51, 50, 55, 17, 51, 17, 20, 23, 35, 38, 39, 38, 39, 6, 35, 34, 39, 17, 182, 197, 36, 108, 83, 156, 105, 197, 60, 216, 21, 16, 1, 3, 92, 183, 132, 81, 254, 117, 5, 201, 253, 215, 182, 142, 83, 254, 2, 194, 253, 17, 217, 118, 58, 115, 10, 20, 228, 72, 254, 70, 0, 0, 0, 1, 0, 25, 0, 0, 4, 91, 4, 62, 0, 37, 0, 59, 181, 16, 1, 2, 0, 1, 74, 75, 176, 42, 80, 88, 64, 13, 1, 1, 0, 0, 43, 75, 3, 1, 2, 2, 41, 2, 76, 27, 64, 13, 1, 1, 0, 0, 43, 75, 3, 1, 2, 2, 44, 2, 76, 89, 64, 12, 0, 0, 0, 37, 0, 37, 29, 28, 24, 4, 8, 21, 43, 33, 46, 3, 39, 38, 2, 39, 51, 30, 5, 23, 62, 3, 55, 62, 3, 53, 52, 39, 51, 22, 21, 20, 6, 6, 2, 7, 7, 1, 255, 33, 72, 64, 51, 12, 106, 123, 25, 213, 14, 50, 65, 76, 83, 85, 40, 28, 46, 42, 39, 21, 31, 43, 27, 12, 35, 194, 16, 47, 94, 140, 94, 36, 78, 170, 151, 118, 27, 232, 1, 8, 46, 25, 102, 141, 172, 190, 200, 98, 63, 100, 90, 85, 48, 70, 112, 92, 79, 37, 87, 65, 47, 69, 65, 172, 223, 254, 235, 169, 64, 0, 0, 0, 0, 1, 0, 12, 254, 93, 4, 148, 6, 68, 0, 93, 0, 214, 64, 23, 41, 1, 3, 4, 55, 40, 2, 2, 3, 27, 1, 7, 6, 1, 1, 0, 1, 0, 1, 9, 0, 5, 74, 75, 176, 42, 80, 88, 64, 48, 5, 1, 2, 3, 6, 3, 2, 6, 126, 0, 6, 0, 7, 8, 6, 7, 102, 0, 4, 4, 42, 75, 0, 3, 3, 40, 75, 0, 8, 8, 1, 95, 0, 1, 1, 41, 75, 0, 0, 0, 9, 95, 0, 9, 9, 45, 9, 76, 27, 75, 176, 45, 80, 88, 64, 50, 0, 3, 4, 2, 4, 3, 2, 126, 5, 1, 2, 6, 4, 2, 6, 124, 0, 6, 0, 7, 8, 6, 7, 102, 0, 4, 4, 42, 75, 0, 8, 8, 1, 95, 0, 1, 1, 44, 75, 0, 0, 0, 9, 95, 0, 9, 9, 45, 9, 76, 27, 64, 47, 0, 3, 4, 2, 4, 3, 2, 126, 5, 1, 2, 6, 4, 2, 6, 124, 0, 6, 0, 7, 8, 6, 7, 102, 0, 0, 0, 9, 0, 9, 99, 0, 4, 4, 42, 75, 0, 8, 8, 1, 95, 0, 1, 1, 44, 1, 76, 89, 89, 64, 21, 93, 89, 81, 78, 71, 69, 68, 66, 60, 58, 52, 50, 46, 45, 36, 35, 56, 37, 10, 8, 22, 43, 1, 53, 30, 3, 51, 50, 62, 2, 53, 52, 46, 2, 35, 35, 34, 46, 2, 53, 52, 62, 2, 55, 38, 38, 53, 52, 62, 2, 55, 46, 3, 39, 53, 30, 3, 23, 62, 3, 51, 50, 22, 23, 23, 14, 3, 35, 6, 21, 20, 30, 2, 51, 51, 21, 35, 34, 14, 4, 21, 20, 33, 51, 50, 30, 2, 21, 20, 14, 2, 35, 34, 38, 39, 2, 49, 21, 55, 57, 55, 23, 63, 94, 61, 30, 29, 57, 85, 56, 104, 99, 191, 148, 91, 70, 111, 140, 70, 155, 150, 13, 24, 32, 18, 28, 76, 86, 89, 42, 42, 84, 100, 124, 82, 45, 104, 108, 108, 48, 34, 71, 37, 26, 59, 122, 128, 134, 70, 68, 81, 124, 150, 69, 131, 152, 54, 113, 106, 94, 69, 41, 1, 52, 99, 108, 151, 94, 42, 73, 125, 167, 94, 17, 44, 29, 254, 102, 155, 7, 15, 12, 8, 24, 41, 56, 32, 46, 56, 31, 11, 44, 93, 143, 100, 89, 146, 112, 80, 24, 52, 168, 117, 22, 53, 55, 56, 26, 1, 6, 12, 21, 17, 161, 20, 34, 27, 18, 3, 27, 40, 27, 14, 6, 7, 102, 43, 48, 23, 5, 80, 94, 86, 121, 76, 35, 127, 14, 32, 52, 76, 101, 65, 238, 35, 69, 104, 69, 92, 121, 72, 30, 2, 2, 0, 2, 0, 111, 255, 231, 4, 94, 4, 86, 0, 15, 0, 23, 0, 45, 64, 42, 5, 1, 2, 2, 0, 95, 4, 1, 0, 0, 49, 75, 0, 3, 3, 1, 95, 0, 1, 1, 50, 1, 76, 17, 16, 1, 0, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 6, 8, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 0, 1, 0, 36, 0, 0, 4, 135, 4, 62, 0, 19, 0, 80, 64, 10, 5, 1, 0, 1, 4, 1, 3, 0, 2, 74, 75, 176, 42, 80, 88, 64, 20, 4, 2, 2, 0, 0, 1, 93, 0, 1, 1, 43, 75, 6, 5, 2, 3, 3, 41, 3, 76, 27, 64, 20, 4, 2, 2, 0, 0, 1, 93, 0, 1, 1, 43, 75, 6, 5, 2, 3, 3, 44, 3, 76, 89, 64, 14, 0, 0, 0, 19, 0, 19, 19, 19, 17, 35, 33, 7, 8, 25, 43, 33, 17, 35, 34, 7, 53, 54, 51, 33, 21, 35, 17, 20, 23, 35, 38, 53, 17, 33, 17, 1, 10, 19, 96, 115, 102, 124, 3, 129, 180, 77, 209, 65, 254, 193, 3, 170, 60, 168, 40, 148, 253, 205, 249, 126, 146, 237, 2, 43, 252, 86, 0, 0, 0, 0, 2, 0, 179, 254, 117, 4, 93, 4, 86, 0, 12, 0, 23, 0, 95, 64, 10, 13, 1, 3, 4, 11, 1, 1, 3, 2, 74, 75, 176, 42, 80, 88, 64, 27, 0, 4, 4, 0, 95, 0, 0, 0, 49, 75, 0, 3, 3, 1, 95, 0, 1, 1, 41, 75, 5, 1, 2, 2, 45, 2, 76, 27, 64, 27, 0, 4, 4, 0, 95, 0, 0, 0, 49, 75, 0, 3, 3, 1, 95, 0, 1, 1, 44, 75, 5, 1, 2, 2, 45, 2, 76, 89, 64, 15, 0, 0, 22, 20, 16, 14, 0, 12, 0, 12, 36, 34, 6, 8, 22, 43, 19, 17, 16, 33, 50, 22, 21, 16, 0, 35, 34, 39, 17, 17, 22, 51, 50, 18, 53, 52, 38, 35, 32, 17, 179, 1, 221, 227, 234, 254, 198, 239, 90, 98, 94, 117, 143, 190, 148, 121, 254, 237, 254, 117, 3, 44, 2, 181, 248, 220, 254, 235, 254, 147, 35, 254, 82, 2, 93, 78, 1, 22, 198, 159, 219, 254, 31, 0, 0, 0, 1, 0, 133, 254, 92, 4, 139, 4, 86, 0, 38, 0, 139, 64, 18, 19, 1, 3, 2, 20, 1, 4, 3, 0, 1, 0, 1, 38, 1, 5, 0, 4, 74, 75, 176, 40, 80, 88, 64, 31, 0, 3, 3, 2, 95, 0, 2, 2, 49, 75, 0, 4, 4, 1, 95, 0, 1, 1, 41, 75, 0, 0, 0, 5, 95, 0, 5, 5, 45, 5, 76, 27, 75, 176, 42, 80, 88, 64, 28, 0, 0, 0, 5, 0, 5, 99, 0, 3, 3, 2, 95, 0, 2, 2, 49, 75, 0, 4, 4, 1, 95, 0, 1, 1, 41, 1, 76, 27, 64, 28, 0, 0, 0, 5, 0, 5, 99, 0, 3, 3, 2, 95, 0, 2, 2, 49, 75, 0, 4, 4, 1, 95, 0, 1, 1, 44, 1, 76, 89, 89, 64, 9, 37, 52, 35, 36, 54, 33, 6, 8, 26, 43, 1, 22, 51, 50, 55, 54, 55, 38, 39, 38, 35, 35, 32, 36, 53, 16, 0, 33, 50, 23, 21, 38, 35, 34, 2, 21, 20, 22, 51, 51, 50, 23, 22, 21, 20, 6, 35, 34, 39, 2, 46, 109, 78, 128, 50, 91, 1, 4, 42, 48, 152, 100, 254, 245, 254, 243, 1, 149, 1, 26, 141, 91, 88, 169, 213, 246, 173, 189, 109, 192, 81, 83, 236, 219, 74, 76, 254, 247, 31, 26, 50, 104, 69, 19, 28, 244, 224, 1, 19, 1, 111, 22, 160, 38, 254, 238, 210, 152, 157, 72, 59, 146, 165, 151, 13, 0, 0, 0, 2, 0, 62, 255, 231, 4, 205, 4, 86, 0, 15, 0, 23, 0, 136, 75, 176, 12, 80, 88, 64, 32, 0, 5, 5, 3, 95, 0, 3, 3, 49, 75, 0, 1, 1, 0, 93, 0, 0, 0, 43, 75, 6, 1, 4, 4, 2, 95, 0, 2, 2, 50, 2, 76, 27, 75, 176, 14, 80, 88, 64, 34, 0, 5, 5, 0, 95, 3, 1, 0, 0, 43, 75, 0, 1, 1, 0, 95, 3, 1, 0, 0, 43, 75, 6, 1, 4, 4, 2, 95, 0, 2, 2, 50, 2, 76, 27, 64, 32, 0, 5, 5, 3, 95, 0, 3, 3, 49, 75, 0, 1, 1, 0, 93, 0, 0, 0, 43, 75, 6, 1, 4, 4, 2, 95, 0, 2, 2, 50, 2, 76, 89, 89, 64, 15, 17, 16, 21, 19, 16, 23, 17, 23, 36, 36, 17, 16, 7, 8, 24, 43, 1, 33, 21, 33, 22, 7, 16, 0, 35, 34, 0, 17, 16, 0, 51, 50, 3, 32, 17, 16, 33, 32, 17, 16, 2, 208, 1, 253, 254, 211, 112, 3, 254, 253, 228, 229, 254, 253, 1, 3, 228, 76, 79, 1, 25, 254, 235, 254, 234, 4, 62, 153, 172, 221, 254, 248, 254, 211, 1, 46, 1, 10, 1, 10, 1, 45, 252, 12, 1, 191, 1, 186, 254, 68, 254, 67, 0, 1, 0, 56, 0, 0, 4, 143, 4, 62, 0, 15, 0, 66, 64, 10, 5, 1, 0, 1, 4, 1, 3, 0, 2, 74, 75, 176, 42, 80, 88, 64, 17, 2, 1, 0, 0, 1, 93, 0, 1, 1, 43, 75, 0, 3, 3, 41, 3, 76, 27, 64, 17, 2, 1, 0, 0, 1, 93, 0, 1, 1, 43, 75, 0, 3, 3, 44, 3, 76, 89, 182, 19, 17, 35, 33, 4, 8, 24, 43, 1, 17, 35, 34, 7, 53, 54, 51, 33, 21, 33, 17, 20, 23, 35, 38, 2, 1, 206, 138, 113, 106, 158, 3, 79, 254, 55, 77, 209, 65, 1, 127, 2, 43, 50, 158, 40, 148, 253, 205, 249, 126, 146, 0, 0, 1, 0, 179, 255, 231, 4, 68, 4, 62, 0, 32, 0, 27, 64, 24, 2, 1, 0, 0, 43, 75, 0, 1, 1, 3, 95, 0, 3, 3, 50, 3, 76, 38, 25, 39, 16, 4, 8, 24, 43, 19, 51, 17, 20, 30, 4, 51, 50, 62, 2, 53, 52, 46, 2, 39, 51, 18, 17, 20, 14, 2, 35, 34, 46, 2, 53, 179, 197, 3, 14, 30, 55, 82, 60, 90, 116, 68, 27, 19, 38, 58, 39, 202, 123, 71, 134, 193, 121, 108, 150, 94, 42, 4, 62, 253, 225, 49, 102, 95, 85, 63, 36, 76, 120, 148, 72, 73, 148, 143, 134, 59, 254, 245, 254, 224, 123, 205, 147, 81, 67, 131, 194, 127, 0, 2, 0, 49, 254, 117, 4, 160, 4, 86, 0, 43, 0, 63, 0, 94, 64, 10, 18, 1, 6, 4, 19, 1, 3, 6, 2, 74, 75, 176, 33, 80, 88, 64, 28, 0, 6, 6, 4, 95, 0, 4, 4, 49, 75, 5, 1, 3, 3, 0, 95, 2, 1, 0, 0, 41, 75, 0, 1, 1, 45, 1, 76, 27, 64, 26, 5, 1, 3, 2, 1, 0, 1, 3, 0, 103, 0, 6, 6, 4, 95, 0, 4, 4, 49, 75, 0, 1, 1, 45, 1, 76, 89, 64, 14, 57, 55, 45, 44, 38, 36, 29, 28, 17, 17, 20, 7, 8, 23, 43, 1, 20, 14, 2, 7, 17, 35, 17, 46, 3, 53, 52, 62, 2, 55, 21, 14, 3, 21, 20, 30, 2, 23, 17, 52, 62, 4, 51, 50, 30, 4, 1, 62, 3, 53, 52, 46, 4, 35, 34, 14, 4, 21, 4, 160, 61, 120, 179, 118, 179, 120, 179, 119, 60, 54, 105, 156, 101, 75, 91, 49, 16, 27, 67, 113, 86, 10, 26, 44, 71, 99, 67, 76, 110, 75, 46, 25, 8, 254, 34, 94, 118, 67, 24, 2, 9, 19, 35, 54, 39, 36, 50, 32, 18, 8, 1, 2, 73, 128, 203, 143, 78, 1, 254, 85, 1, 171, 1, 76, 140, 195, 119, 118, 192, 138, 82, 9, 140, 14, 73, 107, 133, 75, 78, 145, 112, 68, 1, 1, 146, 72, 139, 122, 103, 75, 41, 47, 80, 105, 117, 121, 254, 28, 1, 71, 115, 149, 78, 34, 89, 92, 89, 70, 42, 44, 72, 90, 94, 87, 33, 0, 0, 0, 1, 0, 54, 254, 116, 4, 164, 4, 62, 0, 47, 0, 31, 64, 28, 35, 24, 13, 3, 0, 1, 1, 74, 2, 1, 1, 1, 43, 75, 3, 1, 0, 0, 45, 0, 76, 28, 26, 26, 22, 4, 8, 24, 43, 37, 3, 14, 3, 7, 35, 62, 3, 55, 1, 3, 38, 38, 39, 51, 30, 3, 23, 23, 19, 54, 54, 55, 51, 14, 3, 7, 1, 1, 30, 3, 23, 35, 46, 3, 39, 2, 80, 209, 20, 38, 31, 20, 2, 196, 6, 33, 42, 43, 15, 1, 40, 213, 101, 130, 13, 221, 13, 50, 68, 83, 46, 84, 167, 56, 43, 4, 196, 6, 26, 32, 35, 15, 254, 240, 1, 7, 48, 75, 56, 36, 11, 212, 18, 53, 57, 54, 19, 229, 254, 175, 32, 81, 81, 72, 22, 24, 71, 77, 73, 25, 1, 234, 1, 102, 169, 179, 16, 17, 71, 103, 133, 78, 142, 1, 16, 91, 136, 45, 24, 59, 62, 61, 25, 254, 64, 254, 73, 81, 121, 87, 58, 16, 25, 81, 90, 87, 32, 0, 0, 1, 0, 44, 254, 117, 4, 155, 5, 3, 0, 29, 0, 102, 64, 10, 18, 1, 4, 1, 1, 1, 5, 4, 2, 74, 75, 176, 27, 80, 88, 64, 31, 0, 2, 0, 2, 131, 0, 1, 0, 4, 0, 1, 4, 126, 3, 1, 0, 0, 43, 75, 0, 4, 4, 41, 75, 6, 1, 5, 5, 45, 5, 76, 27, 64, 31, 0, 2, 0, 2, 131, 0, 1, 0, 4, 0, 1, 4, 126, 0, 4, 4, 0, 93, 3, 1, 0, 0, 43, 75, 6, 1, 5, 5, 45, 5, 76, 89, 64, 14, 0, 0, 0, 29, 0, 29, 20, 21, 17, 22, 23, 7, 8, 25, 43, 1, 17, 38, 2, 17, 53, 52, 39, 51, 22, 23, 22, 21, 21, 16, 23, 17, 51, 17, 36, 17, 16, 39, 51, 22, 21, 20, 2, 7, 17, 2, 19, 239, 199, 49, 187, 20, 14, 13, 253, 185, 1, 22, 79, 184, 80, 249, 214, 254, 117, 1, 171, 25, 1, 39, 1, 38, 153, 173, 114, 36, 57, 53, 128, 153, 254, 27, 18, 4, 103, 251, 153, 35, 1, 205, 1, 6, 172, 204, 254, 247, 254, 173, 10, 254, 85, 0, 0, 0, 1, 0, 47, 255, 231, 4, 163, 4, 62, 0, 38, 0, 47, 64, 44, 24, 15, 2, 2, 3, 1, 74, 0, 3, 1, 2, 1, 3, 2, 126, 5, 1, 1, 1, 43, 75, 4, 1, 2, 2, 0, 96, 6, 1, 0, 0, 50, 0, 76, 36, 20, 37, 21, 36, 20, 33, 7, 8, 27, 43, 1, 2, 35, 34, 2, 53, 16, 55, 51, 6, 17, 20, 22, 51, 50, 19, 38, 53, 52, 55, 51, 22, 21, 20, 7, 18, 51, 50, 54, 53, 16, 39, 51, 22, 17, 20, 2, 35, 34, 2, 109, 81, 172, 144, 177, 145, 191, 161, 90, 69, 111, 53, 47, 47, 156, 47, 47, 36, 131, 63, 80, 148, 190, 134, 181, 141, 188, 1, 21, 254, 210, 1, 39, 239, 1, 80, 241, 229, 254, 159, 160, 213, 1, 79, 123, 128, 140, 124, 124, 140, 128, 123, 254, 177, 215, 162, 1, 111, 211, 198, 254, 172, 252, 254, 191, 0, 0, 0, 3, 0, 222, 255, 231, 4, 12, 5, 198, 0, 3, 0, 7, 0, 21, 0, 108, 64, 10, 21, 1, 6, 5, 8, 1, 4, 6, 2, 74, 75, 176, 42, 80, 88, 64, 30, 8, 3, 7, 3, 1, 1, 0, 93, 2, 1, 0, 0, 40, 75, 0, 5, 5, 43, 75, 0, 6, 6, 4, 96, 0, 4, 4, 50, 4, 76, 27, 64, 28, 2, 1, 0, 8, 3, 7, 3, 1, 5, 0, 1, 101, 0, 5, 5, 43, 75, 0, 6, 6, 4, 96, 0, 4, 4, 50, 4, 76, 89, 64, 24, 4, 4, 0, 0, 20, 18, 15, 14, 11, 9, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 9, 8, 21, 43, 19, 53, 51, 21, 51, 53, 51, 21, 19, 6, 35, 34, 38, 53, 17, 51, 17, 20, 22, 51, 50, 55, 222, 185, 222, 185, 222, 136, 139, 221, 153, 197, 77, 132, 108, 135, 5, 13, 185, 185, 185, 185, 251, 14, 52, 176, 231, 2, 192, 253, 83, 180, 99, 53, 0, 3, 0, 179, 255, 231, 4, 68, 5, 198, 0, 3, 0, 7, 0, 40, 0, 100, 75, 176, 42, 80, 88, 64, 31, 9, 3, 8, 3, 1, 1, 0, 93, 2, 1, 0, 0, 40, 75, 6, 1, 4, 4, 43, 75, 0, 5, 5, 7, 95, 0, 7, 7, 50, 7, 76, 27, 64, 29, 2, 1, 0, 9, 3, 8, 3, 1, 4, 0, 1, 101, 6, 1, 4, 4, 43, 75, 0, 5, 5, 7, 95, 0, 7, 7, 50, 7, 76, 89, 64, 26, 4, 4, 0, 0, 36, 34, 28, 27, 18, 16, 9, 8, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 10, 8, 21, 43, 1, 53, 51, 21, 51, 53, 51, 21, 5, 51, 17, 20, 30, 4, 51, 50, 62, 2, 53, 52, 46, 2, 39, 51, 18, 17, 20, 14, 2, 35, 34, 46, 2, 53, 1, 45, 185, 222, 185, 253, 54, 197, 3, 14, 30, 55, 82, 60, 90, 116, 68, 27, 19, 38, 58, 39, 202, 123, 71, 134, 193, 121, 108, 150, 94, 42, 5, 13, 185, 185, 185, 185, 207, 253, 225, 49, 102, 95, 85, 63, 36, 76, 120, 148, 72, 73, 148, 143, 134, 59, 254, 245, 254, 224, 123, 205, 147, 81, 67, 131, 194, 127, 0, 3, 0, 111, 255, 231, 4, 94, 6, 166, 0, 15, 0, 23, 0, 27, 0, 62, 64, 59, 0, 4, 8, 1, 5, 0, 4, 5, 101, 7, 1, 2, 2, 0, 95, 6, 1, 0, 0, 49, 75, 0, 3, 3, 1, 95, 0, 1, 1, 50, 1, 76, 24, 24, 17, 16, 1, 0, 24, 27, 24, 27, 26, 25, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 9, 8, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 1, 19, 51, 3, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 254, 138, 84, 205, 176, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 1, 40, 1, 163, 254, 93, 0, 0, 0, 2, 0, 179, 255, 231, 4, 68, 6, 166, 0, 32, 0, 36, 0, 43, 64, 40, 0, 4, 6, 1, 5, 0, 4, 5, 101, 2, 1, 0, 0, 43, 75, 0, 1, 1, 3, 95, 0, 3, 3, 50, 3, 76, 33, 33, 33, 36, 33, 36, 22, 38, 25, 39, 16, 7, 8, 25, 43, 19, 51, 17, 20, 30, 4, 51, 50, 62, 2, 53, 52, 46, 2, 39, 51, 18, 17, 20, 14, 2, 35, 34, 46, 2, 53, 1, 19, 51, 3, 179, 197, 3, 14, 30, 55, 82, 60, 90, 116, 68, 27, 19, 38, 58, 39, 202, 123, 71, 134, 193, 121, 108, 150, 94, 42, 1, 77, 84, 205, 176, 4, 62, 253, 225, 49, 102, 95, 85, 63, 36, 76, 120, 148, 72, 73, 148, 143, 134, 59, 254, 245, 254, 224, 123, 205, 147, 81, 67, 131, 194, 127, 3, 21, 1, 163, 254, 93, 0, 0, 0, 0, 2, 0, 47, 255, 231, 4, 163, 6, 166, 0, 38, 0, 42, 0, 63, 64, 60, 24, 15, 2, 2, 3, 1, 74, 0, 3, 1, 2, 1, 3, 2, 126, 0, 7, 9, 1, 8, 1, 7, 8, 101, 5, 1, 1, 1, 43, 75, 4, 1, 2, 2, 0, 96, 6, 1, 0, 0, 50, 0, 76, 39, 39, 39, 42, 39, 42, 18, 36, 20, 37, 21, 36, 20, 33, 10, 8, 28, 43, 1, 2, 35, 34, 2, 53, 16, 55, 51, 6, 17, 20, 22, 51, 50, 19, 38, 53, 52, 55, 51, 22, 21, 20, 7, 18, 51, 50, 54, 53, 16, 39, 51, 22, 17, 20, 2, 35, 34, 3, 19, 51, 3, 2, 109, 81, 172, 144, 177, 145, 191, 161, 90, 69, 111, 53, 47, 47, 156, 47, 47, 36, 131, 63, 80, 148, 190, 134, 181, 141, 188, 142, 84, 205, 176, 1, 21, 254, 210, 1, 39, 239, 1, 80, 241, 229, 254, 159, 160, 213, 1, 79, 123, 128, 140, 124, 124, 140, 128, 123, 254, 177, 215, 162, 1, 111, 211, 198, 254, 172, 252, 254, 191, 5, 28, 1, 163, 254, 93, 0, 0, 0, 2, 0, 74, 0, 0, 4, 82, 7, 143, 0, 23, 0, 27, 0, 243, 75, 176, 10, 80, 88, 64, 64, 0, 13, 12, 13, 131, 0, 12, 2, 12, 131, 0, 3, 1, 6, 1, 3, 112, 0, 10, 7, 0, 0, 10, 112, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 9, 1, 0, 0, 11, 94, 14, 1, 11, 11, 27, 11, 76, 27, 75, 176, 42, 80, 88, 64, 66, 0, 13, 12, 13, 131, 0, 12, 2, 12, 131, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 9, 1, 0, 0, 11, 94, 14, 1, 11, 11, 27, 11, 76, 27, 64, 64, 0, 13, 12, 13, 131, 0, 12, 2, 12, 131, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 2, 4, 1, 1, 3, 2, 1, 102, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 9, 1, 0, 0, 11, 94, 14, 1, 11, 11, 29, 11, 76, 89, 89, 64, 26, 0, 0, 27, 26, 25, 24, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 7, 29, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 1, 35, 1, 51, 74, 185, 185, 3, 214, 123, 254, 35, 1, 36, 123, 123, 254, 220, 2, 14, 124, 254, 146, 123, 254, 191, 228, 123, 4, 210, 123, 254, 157, 232, 253, 225, 124, 254, 141, 124, 253, 208, 252, 254, 129, 6, 78, 1, 65, 0, 3, 0, 74, 0, 0, 4, 82, 7, 39, 0, 23, 0, 27, 0, 31, 1, 5, 75, 176, 10, 80, 88, 64, 66, 0, 3, 1, 6, 1, 3, 112, 0, 10, 7, 0, 0, 10, 112, 14, 1, 12, 18, 15, 17, 3, 13, 2, 12, 13, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 9, 1, 0, 0, 11, 94, 16, 1, 11, 11, 27, 11, 76, 27, 75, 176, 42, 80, 88, 64, 68, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 14, 1, 12, 18, 15, 17, 3, 13, 2, 12, 13, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 9, 1, 0, 0, 11, 94, 16, 1, 11, 11, 27, 11, 76, 27, 64, 66, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 14, 1, 12, 18, 15, 17, 3, 13, 2, 12, 13, 101, 0, 2, 4, 1, 1, 3, 2, 1, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 9, 1, 0, 0, 11, 94, 16, 1, 11, 11, 29, 11, 76, 89, 89, 64, 38, 28, 28, 24, 24, 0, 0, 28, 31, 28, 31, 30, 29, 24, 27, 24, 27, 26, 25, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 19, 7, 29, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 1, 53, 51, 21, 33, 53, 51, 21, 74, 185, 185, 3, 214, 123, 254, 35, 1, 36, 123, 123, 254, 220, 2, 14, 124, 252, 177, 197, 1, 16, 197, 123, 4, 210, 123, 254, 157, 232, 253, 225, 124, 254, 141, 124, 253, 208, 252, 254, 129, 6, 98, 197, 197, 197, 197, 0, 0, 0, 1, 0, 0, 255, 231, 4, 143, 5, 200, 0, 31, 0, 195, 64, 10, 23, 1, 1, 9, 8, 1, 3, 1, 2, 74, 75, 176, 12, 80, 88, 64, 48, 7, 1, 5, 4, 9, 4, 5, 112, 0, 9, 0, 1, 3, 9, 1, 103, 8, 1, 4, 4, 6, 93, 0, 6, 6, 26, 75, 0, 3, 3, 2, 93, 0, 2, 2, 27, 75, 0, 0, 0, 10, 95, 0, 10, 10, 34, 10, 76, 27, 75, 176, 42, 80, 88, 64, 49, 7, 1, 5, 4, 9, 4, 5, 9, 126, 0, 9, 0, 1, 3, 9, 1, 103, 8, 1, 4, 4, 6, 93, 0, 6, 6, 26, 75, 0, 3, 3, 2, 93, 0, 2, 2, 27, 75, 0, 0, 0, 10, 95, 0, 10, 10, 34, 10, 76, 27, 64, 47, 7, 1, 5, 4, 9, 4, 5, 9, 126, 0, 6, 8, 1, 4, 5, 6, 4, 101, 0, 9, 0, 1, 3, 9, 1, 103, 0, 3, 3, 2, 93, 0, 2, 2, 29, 75, 0, 0, 0, 10, 95, 0, 10, 10, 34, 10, 76, 89, 89, 64, 16, 31, 30, 26, 24, 17, 17, 17, 17, 17, 17, 18, 36, 16, 11, 7, 29, 43, 37, 50, 54, 53, 52, 38, 35, 34, 7, 17, 33, 53, 51, 17, 35, 21, 35, 17, 33, 17, 35, 53, 35, 17, 54, 51, 50, 22, 21, 20, 2, 35, 2, 231, 109, 106, 99, 90, 159, 108, 254, 173, 140, 180, 123, 3, 77, 123, 220, 135, 171, 166, 193, 222, 202, 98, 167, 214, 159, 169, 143, 253, 104, 123, 4, 210, 210, 1, 77, 254, 179, 210, 253, 230, 131, 244, 227, 225, 254, 233, 0, 0, 0, 0, 2, 0, 100, 0, 0, 4, 112, 7, 143, 0, 13, 0, 17, 0, 163, 75, 176, 10, 80, 88, 64, 41, 0, 7, 8, 7, 131, 9, 1, 8, 4, 8, 131, 0, 5, 3, 0, 3, 5, 112, 6, 1, 3, 3, 4, 93, 0, 4, 4, 26, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 75, 176, 42, 80, 88, 64, 42, 0, 7, 8, 7, 131, 9, 1, 8, 4, 8, 131, 0, 5, 3, 0, 3, 5, 0, 126, 6, 1, 3, 3, 4, 93, 0, 4, 4, 26, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 64, 40, 0, 7, 8, 7, 131, 9, 1, 8, 4, 8, 131, 0, 5, 3, 0, 3, 5, 0, 126, 0, 4, 6, 1, 3, 5, 4, 3, 102, 2, 1, 0, 0, 1, 93, 0, 1, 1, 29, 1, 76, 89, 89, 64, 17, 14, 14, 14, 17, 14, 17, 18, 17, 17, 17, 17, 17, 17, 16, 10, 7, 28, 43, 37, 33, 21, 33, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 3, 19, 51, 1, 2, 7, 1, 16, 253, 77, 222, 222, 4, 12, 123, 254, 18, 62, 216, 228, 254, 191, 123, 123, 123, 4, 210, 123, 254, 157, 232, 1, 1, 1, 65, 254, 191, 0, 0, 0, 1, 0, 115, 255, 219, 4, 134, 5, 237, 0, 30, 0, 130, 64, 14, 10, 1, 3, 1, 30, 1, 8, 6, 0, 1, 0, 8, 3, 74, 75, 176, 42, 80, 88, 64, 45, 0, 2, 3, 5, 3, 2, 5, 126, 0, 4, 0, 7, 6, 4, 7, 101, 0, 5, 0, 6, 8, 5, 6, 101, 0, 3, 3, 1, 95, 0, 1, 1, 31, 75, 0, 8, 8, 0, 95, 0, 0, 0, 32, 0, 76, 27, 64, 43, 0, 2, 3, 5, 3, 2, 5, 126, 0, 1, 0, 3, 2, 1, 3, 103, 0, 4, 0, 7, 6, 4, 7, 101, 0, 5, 0, 6, 8, 5, 6, 101, 0, 8, 8, 0, 95, 0, 0, 0, 34, 0, 76, 89, 64, 12, 34, 17, 17, 17, 18, 34, 18, 36, 33, 9, 7, 29, 43, 37, 6, 35, 32, 0, 17, 16, 0, 33, 50, 23, 17, 35, 39, 38, 35, 6, 2, 3, 33, 53, 51, 17, 35, 53, 33, 16, 0, 51, 50, 55, 4, 134, 175, 175, 254, 187, 254, 144, 1, 120, 1, 58, 161, 173, 123, 29, 60, 123, 197, 247, 27, 1, 186, 123, 123, 254, 70, 1, 20, 205, 171, 173, 20, 57, 1, 159, 1, 111, 1, 96, 1, 164, 57, 254, 169, 249, 28, 7, 254, 238, 254, 232, 110, 254, 169, 110, 254, 238, 254, 170, 85, 0, 1, 0, 151, 255, 219, 4, 67, 5, 237, 0, 41, 0, 105, 64, 10, 20, 1, 4, 2, 0, 1, 5, 1, 2, 74, 75, 176, 42, 80, 88, 64, 36, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 4, 4, 2, 95, 0, 2, 2, 31, 75, 0, 1, 1, 5, 95, 0, 5, 5, 32, 5, 76, 27, 64, 34, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 2, 0, 4, 3, 2, 4, 103, 0, 1, 1, 5, 95, 0, 5, 5, 34, 5, 76, 89, 64, 9, 45, 34, 18, 43, 34, 17, 6, 7, 26, 43, 55, 17, 51, 23, 22, 51, 50, 55, 54, 53, 52, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 21, 20, 23, 22, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 151, 124, 24, 187, 124, 127, 79, 79, 200, 190, 189, 67, 66, 1, 192, 183, 192, 123, 25, 125, 117, 241, 56, 49, 126, 169, 195, 60, 61, 134, 135, 224, 205, 61, 1, 102, 234, 99, 79, 78, 122, 157, 104, 99, 98, 83, 80, 137, 1, 138, 73, 254, 193, 195, 74, 246, 101, 48, 42, 68, 91, 105, 73, 74, 133, 204, 123, 123, 0, 0, 0, 0, 1, 0, 161, 0, 0, 4, 44, 5, 200, 0, 11, 0, 74, 75, 176, 42, 80, 88, 64, 24, 3, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 4, 1, 0, 0, 5, 93, 6, 1, 5, 5, 27, 5, 76, 27, 64, 22, 0, 2, 3, 1, 1, 0, 2, 1, 101, 4, 1, 0, 0, 5, 93, 6, 1, 5, 5, 29, 5, 76, 89, 64, 14, 0, 0, 0, 11, 0, 11, 17, 17, 17, 17, 17, 7, 7, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 161, 1, 99, 254, 157, 3, 139, 254, 157, 1, 99, 123, 4, 210, 123, 123, 251, 46, 123, 0, 0, 3, 0, 161, 0, 0, 4, 44, 7, 39, 0, 11, 0, 15, 0, 19, 0, 114, 75, 176, 42, 80, 88, 64, 36, 8, 1, 6, 12, 9, 11, 3, 7, 2, 6, 7, 101, 3, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 4, 1, 0, 0, 5, 93, 10, 1, 5, 5, 27, 5, 76, 27, 64, 34, 8, 1, 6, 12, 9, 11, 3, 7, 2, 6, 7, 101, 0, 2, 3, 1, 1, 0, 2, 1, 101, 4, 1, 0, 0, 5, 93, 10, 1, 5, 5, 29, 5, 76, 89, 64, 30, 16, 16, 12, 12, 0, 0, 16, 19, 16, 19, 18, 17, 12, 15, 12, 15, 14, 13, 0, 11, 0, 11, 17, 17, 17, 17, 17, 13, 7, 25, 43, 51, 53, 33, 17, 33, 53, 33, 21, 33, 17, 33, 21, 1, 53, 51, 21, 33, 53, 51, 21, 161, 1, 99, 254, 157, 3, 139, 254, 157, 1, 99, 252, 238, 197, 1, 16, 197, 123, 4, 210, 123, 123, 251, 46, 123, 6, 98, 197, 197, 197, 197, 0, 0, 1, 0, 111, 255, 219, 4, 119, 5, 200, 0, 21, 0, 88, 181, 0, 1, 5, 1, 1, 74, 75, 176, 42, 80, 88, 64, 30, 0, 0, 2, 1, 2, 0, 1, 126, 4, 1, 2, 2, 3, 93, 0, 3, 3, 26, 75, 0, 1, 1, 5, 95, 0, 5, 5, 32, 5, 76, 27, 64, 28, 0, 0, 2, 1, 2, 0, 1, 126, 0, 3, 4, 1, 2, 0, 3, 2, 101, 0, 1, 1, 5, 95, 0, 5, 5, 34, 5, 76, 89, 64, 9, 36, 17, 17, 20, 34, 17, 6, 7, 26, 43, 55, 17, 51, 19, 22, 51, 50, 55, 54, 53, 17, 33, 53, 33, 21, 33, 17, 20, 7, 6, 35, 34, 111, 123, 39, 113, 81, 116, 51, 52, 254, 117, 3, 84, 254, 252, 92, 92, 212, 158, 31, 1, 157, 254, 211, 49, 55, 54, 127, 4, 3, 123, 123, 252, 29, 214, 92, 93, 0, 2, 0, 10, 0, 0, 4, 170, 5, 200, 0, 34, 0, 44, 0, 88, 75, 176, 42, 80, 88, 64, 32, 0, 3, 0, 8, 0, 3, 8, 103, 5, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 7, 1, 0, 0, 4, 95, 6, 1, 4, 4, 27, 4, 76, 27, 64, 30, 0, 2, 5, 1, 1, 3, 2, 1, 101, 0, 3, 0, 8, 0, 3, 8, 103, 7, 1, 0, 0, 4, 95, 6, 1, 4, 4, 29, 4, 76, 89, 64, 12, 21, 33, 23, 17, 40, 33, 17, 21, 33, 9, 7, 29, 43, 51, 53, 51, 50, 62, 2, 53, 17, 35, 53, 33, 17, 51, 50, 30, 2, 21, 20, 14, 2, 35, 35, 17, 35, 17, 20, 14, 4, 35, 37, 51, 50, 62, 2, 53, 16, 35, 35, 10, 22, 54, 59, 29, 5, 100, 2, 156, 55, 93, 145, 101, 53, 64, 117, 165, 101, 182, 204, 5, 22, 43, 75, 113, 81, 2, 213, 11, 78, 98, 55, 21, 250, 13, 123, 41, 75, 106, 66, 3, 178, 123, 253, 152, 59, 106, 146, 87, 110, 173, 120, 63, 5, 77, 252, 219, 93, 154, 123, 91, 61, 30, 131, 47, 85, 117, 71, 1, 34, 0, 2, 0, 11, 0, 0, 4, 164, 5, 200, 0, 34, 0, 44, 0, 118, 75, 176, 42, 80, 88, 64, 39, 11, 1, 7, 14, 1, 0, 1, 7, 0, 103, 10, 8, 6, 3, 4, 4, 5, 93, 9, 1, 5, 5, 26, 75, 13, 3, 2, 1, 1, 2, 93, 15, 12, 2, 2, 2, 27, 2, 76, 27, 64, 37, 9, 1, 5, 10, 8, 6, 3, 4, 7, 5, 4, 101, 11, 1, 7, 14, 1, 0, 1, 7, 0, 103, 13, 3, 2, 1, 1, 2, 93, 15, 12, 2, 2, 2, 29, 2, 76, 89, 64, 28, 0, 0, 43, 42, 37, 35, 0, 34, 0, 33, 25, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 7, 29, 43, 33, 17, 33, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 35, 53, 33, 21, 35, 17, 51, 50, 30, 2, 21, 20, 14, 2, 35, 53, 51, 50, 62, 2, 53, 16, 35, 35, 2, 46, 254, 248, 100, 254, 129, 100, 100, 1, 77, 50, 1, 8, 50, 1, 77, 100, 55, 93, 145, 101, 53, 64, 117, 165, 101, 11, 78, 98, 55, 21, 250, 13, 2, 229, 253, 150, 123, 123, 4, 210, 123, 123, 254, 19, 1, 237, 123, 123, 254, 19, 59, 106, 146, 87, 110, 173, 120, 63, 131, 47, 85, 117, 71, 1, 34, 0, 0, 1, 0, 0, 0, 0, 4, 185, 5, 200, 0, 35, 0, 177, 182, 29, 12, 2, 0, 3, 1, 74, 75, 176, 12, 80, 88, 64, 42, 10, 1, 8, 7, 12, 7, 8, 112, 0, 12, 0, 3, 0, 12, 3, 103, 11, 1, 7, 7, 9, 93, 0, 9, 9, 26, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 27, 1, 76, 27, 75, 176, 42, 80, 88, 64, 43, 10, 1, 8, 7, 12, 7, 8, 12, 126, 0, 12, 0, 3, 0, 12, 3, 103, 11, 1, 7, 7, 9, 93, 0, 9, 9, 26, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 27, 1, 76, 27, 64, 41, 10, 1, 8, 7, 12, 7, 8, 12, 126, 0, 9, 11, 1, 7, 8, 9, 7, 101, 0, 12, 0, 3, 0, 12, 3, 103, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 29, 1, 76, 89, 89, 64, 20, 33, 31, 28, 27, 26, 25, 24, 23, 17, 17, 17, 17, 19, 35, 17, 17, 16, 13, 7, 29, 43, 37, 51, 21, 33, 53, 51, 17, 52, 38, 35, 34, 6, 7, 17, 51, 21, 33, 53, 51, 17, 35, 21, 35, 17, 33, 17, 35, 53, 35, 17, 54, 54, 51, 50, 22, 21, 4, 108, 77, 254, 137, 100, 76, 84, 69, 135, 68, 100, 254, 73, 140, 180, 123, 3, 77, 123, 220, 93, 160, 86, 143, 148, 123, 123, 123, 1, 172, 141, 115, 70, 69, 253, 223, 123, 123, 4, 210, 210, 1, 77, 254, 179, 210, 253, 217, 72, 72, 184, 184, 0, 2, 0, 75, 0, 0, 4, 163, 7, 143, 0, 46, 0, 50, 0, 158, 64, 11, 39, 1, 2, 9, 1, 74, 4, 1, 0, 1, 73, 75, 176, 42, 80, 88, 64, 56, 0, 12, 13, 12, 131, 14, 1, 13, 7, 13, 131, 0, 9, 0, 2, 0, 9, 2, 101, 8, 1, 6, 6, 7, 95, 10, 1, 7, 7, 26, 75, 0, 11, 11, 7, 95, 10, 1, 7, 7, 26, 75, 5, 3, 2, 0, 0, 1, 93, 4, 1, 1, 1, 27, 1, 76, 27, 64, 49, 0, 12, 13, 12, 131, 14, 1, 13, 7, 13, 131, 8, 1, 6, 11, 7, 6, 85, 10, 1, 7, 0, 11, 9, 7, 11, 103, 0, 9, 0, 2, 0, 9, 2, 101, 5, 3, 2, 0, 0, 1, 93, 4, 1, 1, 1, 29, 1, 76, 89, 64, 26, 47, 47, 47, 50, 47, 50, 49, 48, 32, 30, 29, 27, 23, 22, 17, 17, 17, 17, 17, 17, 21, 17, 16, 15, 7, 29, 43, 37, 51, 21, 33, 53, 39, 39, 2, 39, 35, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 50, 54, 55, 55, 54, 23, 51, 21, 35, 34, 6, 7, 6, 7, 7, 6, 7, 22, 22, 23, 23, 22, 23, 22, 1, 19, 51, 1, 4, 82, 81, 254, 213, 19, 84, 129, 133, 121, 80, 254, 105, 130, 130, 1, 151, 80, 94, 84, 112, 115, 106, 203, 36, 18, 84, 63, 53, 11, 28, 30, 130, 115, 110, 142, 90, 51, 11, 45, 19, 254, 20, 216, 228, 254, 191, 123, 123, 123, 39, 172, 1, 6, 89, 253, 206, 123, 123, 4, 210, 123, 123, 253, 244, 74, 192, 200, 182, 1, 148, 58, 98, 21, 50, 54, 229, 28, 35, 156, 184, 103, 22, 95, 40, 5, 175, 1, 65, 254, 191, 0, 2, 0, 70, 0, 0, 4, 135, 7, 143, 0, 3, 0, 25, 0, 112, 182, 25, 14, 2, 3, 4, 1, 74, 75, 176, 42, 80, 88, 64, 37, 0, 1, 0, 1, 131, 0, 0, 5, 0, 131, 8, 6, 2, 4, 4, 5, 93, 7, 1, 5, 5, 26, 75, 11, 9, 2, 3, 3, 2, 93, 10, 1, 2, 2, 27, 2, 76, 27, 64, 35, 0, 1, 0, 1, 131, 0, 0, 5, 0, 131, 7, 1, 5, 8, 6, 2, 4, 3, 5, 4, 102, 11, 9, 2, 3, 3, 2, 93, 10, 1, 2, 2, 29, 2, 76, 89, 64, 18, 24, 23, 22, 21, 20, 19, 17, 18, 17, 17, 17, 17, 17, 17, 16, 12, 7, 29, 43, 1, 35, 1, 51, 3, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 1, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 2, 225, 123, 254, 191, 228, 154, 254, 215, 100, 100, 1, 131, 90, 1, 239, 1, 41, 100, 100, 254, 125, 90, 6, 78, 1, 65, 248, 113, 123, 4, 210, 123, 123, 251, 236, 4, 143, 123, 251, 46, 123, 123, 4, 20, 0, 0, 2, 0, 32, 0, 0, 4, 204, 7, 118, 0, 25, 0, 35, 0, 198, 182, 24, 5, 2, 6, 1, 1, 74, 75, 176, 12, 80, 88, 64, 48, 11, 1, 9, 10, 10, 9, 110, 0, 6, 1, 7, 7, 6, 112, 0, 10, 0, 12, 0, 10, 12, 104, 13, 8, 4, 2, 4, 1, 1, 0, 93, 3, 1, 0, 0, 26, 75, 0, 7, 7, 5, 96, 0, 5, 5, 27, 5, 76, 27, 75, 176, 42, 80, 88, 64, 48, 11, 1, 9, 10, 9, 131, 0, 6, 1, 7, 1, 6, 7, 126, 0, 10, 0, 12, 0, 10, 12, 104, 13, 8, 4, 2, 4, 1, 1, 0, 93, 3, 1, 0, 0, 26, 75, 0, 7, 7, 5, 96, 0, 5, 5, 27, 5, 76, 27, 64, 46, 11, 1, 9, 10, 9, 131, 0, 6, 1, 7, 1, 6, 7, 126, 0, 10, 0, 12, 0, 10, 12, 104, 3, 1, 0, 13, 8, 4, 2, 4, 1, 6, 0, 1, 101, 0, 7, 7, 5, 96, 0, 5, 5, 29, 5, 76, 89, 89, 64, 25, 0, 0, 35, 33, 32, 31, 30, 28, 27, 26, 0, 25, 0, 25, 17, 18, 19, 17, 17, 18, 17, 17, 14, 7, 28, 43, 19, 53, 33, 21, 35, 1, 1, 35, 53, 33, 21, 35, 1, 6, 6, 35, 35, 17, 51, 23, 50, 55, 54, 55, 55, 1, 19, 51, 20, 51, 50, 53, 51, 16, 33, 32, 32, 1, 181, 150, 1, 57, 1, 102, 199, 1, 181, 70, 254, 7, 129, 184, 199, 14, 123, 20, 62, 37, 49, 66, 40, 254, 106, 179, 160, 173, 172, 161, 254, 179, 254, 179, 5, 77, 123, 123, 253, 66, 2, 190, 123, 123, 252, 35, 236, 132, 1, 88, 207, 42, 56, 132, 77, 3, 145, 2, 41, 206, 206, 254, 216, 0, 0, 1, 0, 63, 254, 127, 4, 143, 5, 200, 0, 23, 0, 102, 75, 176, 42, 80, 88, 64, 34, 10, 8, 2, 3, 0, 0, 1, 93, 9, 1, 1, 1, 26, 75, 12, 11, 7, 3, 3, 3, 4, 93, 6, 1, 4, 4, 27, 75, 0, 5, 5, 30, 5, 76, 27, 64, 32, 9, 1, 1, 10, 8, 2, 3, 0, 3, 1, 0, 101, 12, 11, 7, 3, 3, 3, 4, 93, 6, 1, 4, 4, 29, 75, 0, 5, 5, 30, 5, 76, 89, 64, 22, 0, 0, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13, 7, 29, 43, 37, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 17, 35, 17, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 3, 92, 100, 1, 151, 110, 110, 254, 53, 186, 254, 53, 110, 110, 1, 151, 100, 131, 4, 202, 123, 123, 251, 46, 123, 254, 127, 1, 129, 123, 4, 210, 123, 123, 251, 54, 0, 2, 0, 25, 0, 0, 4, 179, 5, 200, 0, 15, 0, 19, 0, 97, 181, 18, 1, 8, 3, 1, 74, 75, 176, 42, 80, 88, 64, 29, 0, 8, 9, 1, 7, 0, 8, 7, 102, 0, 3, 3, 26, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 27, 1, 76, 27, 64, 29, 0, 3, 8, 3, 131, 0, 8, 9, 1, 7, 0, 8, 7, 102, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 29, 1, 76, 89, 64, 18, 0, 0, 17, 16, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 10, 7, 27, 43, 1, 3, 51, 21, 33, 53, 51, 1, 51, 1, 51, 21, 33, 53, 51, 3, 37, 33, 3, 35, 1, 71, 99, 143, 254, 166, 74, 1, 165, 189, 1, 164, 74, 254, 75, 157, 100, 254, 55, 1, 163, 208, 2, 1, 188, 254, 191, 123, 123, 5, 77, 250, 179, 123, 123, 1, 65, 124, 2, 163, 0, 0, 0, 0, 2, 0, 70, 0, 0, 4, 115, 5, 200, 0, 20, 0, 29, 0, 159, 75, 176, 10, 80, 88, 64, 39, 0, 3, 1, 5, 1, 3, 112, 0, 5, 0, 8, 0, 5, 8, 103, 4, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 7, 1, 0, 0, 6, 93, 9, 1, 6, 6, 27, 6, 76, 27, 75, 176, 42, 80, 88, 64, 40, 0, 3, 1, 5, 1, 3, 5, 126, 0, 5, 0, 8, 0, 5, 8, 103, 4, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 7, 1, 0, 0, 6, 93, 9, 1, 6, 6, 27, 6, 76, 27, 64, 38, 0, 3, 1, 5, 1, 3, 5, 126, 0, 2, 4, 1, 1, 3, 2, 1, 101, 0, 5, 0, 8, 0, 5, 8, 103, 7, 1, 0, 0, 6, 93, 9, 1, 6, 6, 29, 6, 76, 89, 89, 64, 19, 0, 0, 29, 27, 23, 21, 0, 20, 0, 19, 33, 17, 17, 17, 17, 17, 10, 7, 26, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 51, 32, 23, 22, 21, 20, 7, 6, 33, 39, 51, 50, 54, 53, 52, 38, 35, 35, 70, 150, 150, 3, 217, 123, 253, 253, 139, 1, 38, 119, 170, 193, 132, 254, 200, 85, 79, 224, 209, 176, 207, 129, 123, 4, 210, 123, 254, 157, 232, 254, 0, 75, 108, 211, 247, 121, 83, 123, 144, 177, 147, 131, 0, 0, 0, 0, 3, 0, 74, 0, 0, 4, 88, 5, 200, 0, 18, 0, 27, 0, 34, 0, 103, 181, 10, 1, 5, 6, 1, 74, 75, 176, 42, 80, 88, 64, 32, 0, 6, 0, 5, 3, 6, 5, 103, 7, 1, 0, 0, 1, 93, 0, 1, 1, 26, 75, 4, 8, 2, 3, 3, 2, 93, 0, 2, 2, 27, 2, 76, 27, 64, 30, 0, 1, 7, 1, 0, 6, 1, 0, 101, 0, 6, 0, 5, 3, 6, 5, 103, 4, 8, 2, 3, 3, 2, 93, 0, 2, 2, 29, 2, 76, 89, 64, 20, 0, 0, 34, 32, 30, 28, 27, 25, 21, 19, 0, 18, 0, 18, 42, 33, 17, 9, 7, 23, 43, 55, 17, 35, 53, 33, 32, 17, 20, 7, 6, 7, 22, 23, 22, 21, 16, 33, 33, 53, 33, 51, 32, 17, 52, 39, 38, 35, 35, 53, 51, 32, 17, 52, 35, 35, 247, 173, 2, 106, 1, 118, 102, 60, 114, 98, 50, 174, 254, 68, 253, 174, 1, 114, 163, 1, 39, 97, 96, 168, 97, 98, 1, 57, 211, 200, 123, 4, 210, 123, 254, 187, 168, 105, 63, 48, 26, 30, 105, 233, 254, 135, 123, 1, 5, 148, 86, 85, 124, 1, 56, 218, 0, 1, 0, 100, 0, 0, 4, 112, 5, 200, 0, 13, 0, 123, 75, 176, 10, 80, 88, 64, 30, 0, 5, 3, 0, 3, 5, 112, 6, 1, 3, 3, 4, 93, 0, 4, 4, 26, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 75, 176, 42, 80, 88, 64, 31, 0, 5, 3, 0, 3, 5, 0, 126, 6, 1, 3, 3, 4, 93, 0, 4, 4, 26, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 64, 29, 0, 5, 3, 0, 3, 5, 0, 126, 0, 4, 6, 1, 3, 5, 4, 3, 101, 2, 1, 0, 0, 1, 93, 0, 1, 1, 29, 1, 76, 89, 89, 64, 10, 17, 17, 17, 17, 17, 17, 16, 7, 7, 27, 43, 37, 33, 21, 33, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 2, 7, 1, 16, 253, 77, 222, 222, 4, 12, 123, 254, 18, 123, 123, 123, 4, 210, 123, 254, 157, 232, 0, 0, 0, 0, 2, 0, 30, 254, 127, 4, 115, 5, 200, 0, 18, 0, 25, 0, 110, 75, 176, 42, 80, 88, 64, 39, 9, 3, 2, 1, 1, 2, 93, 0, 2, 2, 26, 75, 8, 4, 2, 0, 0, 6, 93, 0, 6, 6, 27, 75, 8, 4, 2, 0, 0, 5, 93, 10, 7, 2, 5, 5, 30, 5, 76, 27, 64, 37, 0, 2, 9, 3, 2, 1, 0, 2, 1, 101, 8, 4, 2, 0, 0, 6, 93, 0, 6, 6, 29, 75, 8, 4, 2, 0, 0, 5, 93, 10, 7, 2, 5, 5, 30, 5, 76, 89, 64, 20, 0, 0, 22, 21, 20, 19, 0, 18, 0, 18, 17, 17, 17, 17, 17, 20, 17, 11, 7, 27, 43, 19, 17, 51, 18, 18, 17, 53, 35, 53, 33, 21, 35, 17, 51, 17, 35, 17, 33, 17, 19, 33, 17, 33, 21, 18, 2, 30, 83, 176, 139, 130, 3, 73, 75, 75, 186, 253, 31, 96, 2, 42, 254, 252, 1, 142, 254, 127, 2, 4, 1, 42, 2, 10, 1, 113, 37, 123, 123, 251, 54, 253, 252, 1, 129, 254, 127, 2, 4, 4, 202, 24, 254, 159, 253, 196, 0, 0, 0, 0, 1, 0, 74, 0, 0, 4, 82, 5, 200, 0, 23, 1, 30, 75, 176, 10, 80, 88, 64, 54, 0, 3, 1, 6, 1, 3, 112, 0, 10, 7, 0, 0, 10, 112, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 9, 1, 0, 0, 11, 94, 12, 1, 11, 11, 27, 11, 76, 27, 75, 176, 38, 80, 88, 64, 56, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 0, 7, 10, 0, 126, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 9, 1, 0, 0, 11, 94, 12, 1, 11, 11, 27, 11, 76, 27, 75, 176, 42, 80, 88, 64, 62, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 9, 7, 10, 9, 126, 0, 0, 9, 11, 9, 0, 112, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 4, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 0, 9, 9, 11, 94, 12, 1, 11, 11, 27, 11, 76, 27, 64, 60, 0, 3, 1, 6, 1, 3, 6, 126, 0, 10, 7, 9, 7, 10, 9, 126, 0, 0, 9, 11, 9, 0, 112, 0, 2, 4, 1, 1, 3, 2, 1, 101, 0, 5, 0, 8, 7, 5, 8, 101, 0, 6, 0, 7, 10, 6, 7, 101, 0, 9, 9, 11, 94, 12, 1, 11, 11, 29, 11, 76, 89, 89, 89, 64, 22, 0, 0, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13, 7, 29, 43, 51, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 17, 33, 53, 51, 17, 35, 53, 33, 17, 33, 53, 51, 17, 74, 185, 185, 3, 214, 123, 254, 35, 1, 36, 123, 123, 254, 220, 2, 14, 124, 123, 4, 210, 123, 254, 155, 234, 253, 225, 124, 254, 141, 124, 253, 213, 247, 254, 129, 0, 0, 1, 0, 0, 0, 0, 4, 205, 5, 200, 0, 105, 0, 138, 64, 9, 84, 60, 53, 29, 4, 3, 6, 1, 74, 75, 176, 42, 80, 88, 64, 41, 16, 15, 2, 3, 6, 0, 6, 3, 0, 126, 12, 10, 8, 3, 6, 6, 7, 95, 11, 9, 2, 7, 7, 26, 75, 13, 5, 2, 3, 0, 0, 1, 93, 14, 4, 2, 1, 1, 27, 1, 76, 27, 64, 39, 16, 15, 2, 3, 6, 0, 6, 3, 0, 126, 11, 9, 2, 7, 12, 10, 8, 3, 6, 3, 7, 6, 103, 13, 5, 2, 3, 0, 0, 1, 93, 14, 4, 2, 1, 1, 29, 1, 76, 89, 64, 33, 0, 0, 0, 105, 0, 105, 93, 92, 91, 90, 74, 73, 72, 70, 59, 58, 57, 56, 55, 54, 43, 41, 40, 39, 17, 43, 17, 17, 17, 17, 17, 7, 26, 43, 1, 17, 51, 21, 33, 53, 51, 17, 35, 14, 3, 7, 14, 5, 7, 35, 53, 51, 19, 62, 3, 55, 46, 3, 39, 39, 46, 3, 35, 53, 51, 50, 30, 2, 23, 23, 30, 3, 23, 17, 35, 53, 33, 21, 35, 17, 62, 3, 55, 55, 62, 3, 51, 51, 21, 34, 14, 2, 7, 7, 14, 3, 7, 30, 3, 23, 19, 51, 21, 35, 46, 5, 39, 46, 3, 39, 2, 183, 100, 254, 152, 100, 41, 15, 33, 39, 48, 28, 5, 20, 26, 29, 26, 21, 5, 199, 58, 140, 36, 52, 51, 57, 41, 35, 56, 47, 43, 22, 34, 14, 27, 39, 56, 44, 23, 74, 100, 67, 42, 18, 27, 34, 41, 32, 33, 26, 100, 1, 104, 100, 26, 33, 32, 41, 34, 27, 18, 42, 67, 100, 74, 23, 44, 56, 39, 27, 14, 34, 23, 42, 47, 56, 35, 41, 57, 51, 52, 36, 139, 58, 198, 5, 21, 26, 29, 26, 20, 5, 29, 47, 39, 33, 15, 2, 197, 253, 182, 123, 123, 2, 74, 28, 66, 87, 114, 76, 13, 53, 67, 74, 67, 52, 12, 123, 1, 75, 85, 112, 71, 42, 17, 20, 52, 69, 87, 55, 82, 34, 75, 62, 40, 123, 49, 78, 96, 46, 70, 88, 112, 69, 39, 14, 2, 26, 123, 123, 253, 230, 14, 39, 69, 112, 88, 70, 46, 96, 78, 49, 123, 40, 62, 75, 34, 82, 55, 87, 69, 52, 20, 17, 42, 71, 112, 85, 254, 181, 123, 12, 52, 67, 74, 67, 54, 12, 76, 114, 87, 66, 28, 0, 0, 0, 0, 1, 0, 112, 255, 223, 4, 51, 5, 241, 0, 41, 0, 133, 64, 22, 27, 1, 4, 6, 24, 1, 5, 4, 36, 1, 2, 3, 3, 1, 1, 2, 2, 1, 0, 1, 5, 74, 75, 176, 42, 80, 88, 64, 38, 0, 5, 4, 3, 4, 5, 3, 126, 0, 3, 0, 2, 1, 3, 2, 103, 0, 4, 4, 6, 95, 0, 6, 6, 31, 75, 0, 1, 1, 0, 95, 7, 1, 0, 0, 32, 0, 76, 27, 64, 36, 0, 5, 4, 3, 4, 5, 3, 126, 0, 6, 0, 4, 5, 6, 4, 103, 0, 3, 0, 2, 1, 3, 2, 103, 0, 1, 1, 0, 95, 7, 1, 0, 0, 34, 0, 76, 89, 64, 21, 1, 0, 31, 29, 26, 25, 21, 19, 15, 13, 12, 10, 6, 4, 0, 41, 1, 41, 8, 7, 20, 43, 5, 38, 39, 53, 22, 23, 50, 54, 53, 52, 38, 35, 35, 53, 51, 50, 54, 53, 52, 38, 35, 34, 7, 6, 7, 7, 35, 3, 54, 54, 51, 50, 4, 21, 20, 6, 7, 22, 22, 21, 20, 0, 2, 8, 202, 206, 185, 223, 146, 199, 254, 252, 41, 38, 238, 237, 170, 153, 84, 93, 29, 30, 12, 124, 1, 96, 189, 98, 247, 1, 10, 161, 160, 173, 192, 254, 196, 33, 1, 110, 156, 135, 1, 159, 154, 157, 162, 123, 154, 141, 129, 121, 24, 7, 10, 207, 1, 53, 31, 31, 185, 170, 132, 179, 47, 28, 203, 152, 195, 254, 249, 0, 0, 0, 1, 0, 70, 0, 0, 4, 135, 5, 200, 0, 21, 0, 88, 182, 21, 10, 2, 1, 2, 1, 74, 75, 176, 42, 80, 88, 64, 27, 6, 4, 2, 2, 2, 3, 93, 5, 1, 3, 3, 26, 75, 9, 7, 2, 1, 1, 0, 93, 8, 1, 0, 0, 27, 0, 76, 27, 64, 25, 5, 1, 3, 6, 4, 2, 2, 1, 3, 2, 101, 9, 7, 2, 1, 1, 0, 93, 8, 1, 0, 0, 29, 0, 76, 89, 64, 14, 20, 19, 17, 17, 17, 18, 17, 17, 17, 17, 16, 10, 7, 29, 43, 33, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 1, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 111, 254, 215, 100, 100, 1, 131, 90, 1, 239, 1, 41, 100, 100, 254, 125, 90, 123, 4, 210, 123, 123, 251, 236, 4, 143, 123, 251, 46, 123, 123, 4, 20, 0, 0, 0, 2, 0, 70, 0, 0, 4, 135, 7, 118, 0, 9, 0, 31, 0, 175, 182, 31, 20, 2, 5, 6, 1, 74, 75, 176, 12, 80, 88, 64, 42, 2, 1, 0, 1, 1, 0, 110, 0, 1, 0, 3, 7, 1, 3, 104, 10, 8, 2, 6, 6, 7, 93, 9, 1, 7, 7, 26, 75, 13, 11, 2, 5, 5, 4, 93, 12, 1, 4, 4, 27, 4, 76, 27, 75, 176, 42, 80, 88, 64, 41, 2, 1, 0, 1, 0, 131, 0, 1, 0, 3, 7, 1, 3, 104, 10, 8, 2, 6, 6, 7, 93, 9, 1, 7, 7, 26, 75, 13, 11, 2, 5, 5, 4, 93, 12, 1, 4, 4, 27, 4, 76, 27, 64, 39, 2, 1, 0, 1, 0, 131, 0, 1, 0, 3, 7, 1, 3, 104, 9, 1, 7, 10, 8, 2, 6, 5, 7, 6, 101, 13, 11, 2, 5, 5, 4, 93, 12, 1, 4, 4, 29, 4, 76, 89, 89, 64, 22, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 17, 17, 17, 17, 17, 33, 17, 33, 16, 14, 7, 29, 43, 1, 51, 20, 51, 50, 53, 51, 16, 33, 32, 19, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 1, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 25, 160, 173, 172, 161, 254, 179, 254, 179, 86, 254, 215, 100, 100, 1, 131, 90, 1, 239, 1, 41, 100, 100, 254, 125, 90, 7, 118, 206, 206, 254, 216, 249, 178, 123, 4, 210, 123, 123, 251, 236, 4, 143, 123, 251, 46, 123, 123, 4, 20, 0, 0, 0, 1, 0, 75, 0, 0, 4, 163, 5, 201, 0, 46, 0, 128, 64, 11, 39, 1, 2, 9, 1, 74, 4, 1, 0, 1, 73, 75, 176, 42, 80, 88, 64, 45, 0, 9, 0, 2, 0, 9, 2, 101, 8, 1, 6, 6, 7, 95, 10, 1, 7, 7, 26, 75, 0, 11, 11, 7, 95, 10, 1, 7, 7, 26, 75, 5, 3, 2, 0, 0, 1, 93, 4, 1, 1, 1, 27, 1, 76, 27, 64, 38, 8, 1, 6, 11, 7, 6, 85, 10, 1, 7, 0, 11, 9, 7, 11, 103, 0, 9, 0, 2, 0, 9, 2, 101, 5, 3, 2, 0, 0, 1, 93, 4, 1, 1, 1, 29, 1, 76, 89, 64, 18, 32, 30, 29, 27, 23, 22, 17, 17, 17, 17, 17, 17, 21, 17, 16, 12, 7, 29, 43, 37, 51, 21, 33, 53, 39, 39, 2, 39, 35, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 50, 54, 55, 55, 54, 23, 51, 21, 35, 34, 6, 7, 6, 7, 7, 6, 7, 22, 22, 23, 23, 22, 23, 22, 4, 82, 81, 254, 213, 19, 84, 129, 133, 121, 80, 254, 105, 130, 130, 1, 151, 80, 94, 84, 112, 115, 106, 203, 36, 18, 84, 63, 53, 11, 28, 30, 130, 115, 110, 142, 90, 51, 11, 45, 19, 123, 123, 123, 39, 172, 1, 6, 89, 253, 206, 123, 123, 4, 210, 123, 123, 253, 244, 74, 192, 200, 182, 1, 148, 58, 98, 21, 50, 54, 229, 28, 35, 156, 184, 103, 22, 95, 40, 0, 1, 0, 34, 0, 0, 4, 166, 5, 200, 0, 27, 0, 83, 75, 176, 42, 80, 88, 64, 27, 7, 3, 2, 1, 1, 2, 93, 0, 2, 2, 26, 75, 6, 4, 2, 0, 0, 5, 95, 9, 8, 2, 5, 5, 27, 5, 76, 27, 64, 25, 0, 2, 7, 3, 2, 1, 0, 2, 1, 101, 6, 4, 2, 0, 0, 5, 95, 9, 8, 2, 5, 5, 29, 5, 76, 89, 64, 17, 0, 0, 0, 27, 0, 27, 17, 17, 17, 17, 17, 17, 22, 17, 10, 7, 28, 43, 51, 53, 54, 54, 55, 54, 18, 17, 53, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 33, 21, 16, 2, 7, 6, 6, 34, 101, 128, 26, 26, 27, 130, 3, 210, 95, 95, 254, 125, 94, 254, 146, 44, 43, 54, 203, 123, 7, 113, 105, 105, 2, 20, 1, 45, 71, 123, 123, 251, 46, 123, 123, 4, 210, 39, 254, 70, 253, 247, 103, 126, 126, 0, 0, 1, 0, 25, 0, 0, 4, 180, 5, 200, 0, 27, 0, 113, 183, 23, 19, 7, 3, 8, 1, 1, 74, 75, 176, 42, 80, 88, 64, 36, 0, 8, 1, 0, 1, 8, 0, 126, 4, 1, 1, 1, 2, 93, 3, 1, 2, 2, 26, 75, 9, 7, 5, 3, 0, 0, 6, 93, 11, 10, 2, 6, 6, 27, 6, 76, 27, 64, 34, 0, 8, 1, 0, 1, 8, 0, 126, 3, 1, 2, 4, 1, 1, 8, 2, 1, 101, 9, 7, 5, 3, 0, 0, 6, 93, 11, 10, 2, 6, 6, 29, 6, 76, 89, 64, 20, 0, 0, 0, 27, 0, 27, 26, 25, 19, 17, 17, 17, 17, 19, 17, 17, 17, 12, 7, 29, 43, 51, 53, 51, 17, 35, 53, 33, 1, 51, 1, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 35, 1, 35, 1, 35, 17, 51, 21, 25, 86, 86, 1, 29, 1, 50, 2, 1, 61, 1, 13, 86, 86, 254, 192, 72, 2, 254, 221, 135, 254, 221, 2, 86, 123, 4, 210, 123, 252, 6, 3, 250, 123, 251, 46, 123, 123, 3, 237, 252, 90, 3, 204, 251, 237, 123, 0, 0, 0, 1, 0, 63, 0, 0, 4, 142, 5, 200, 0, 27, 0, 114, 75, 176, 42, 80, 88, 64, 38, 0, 6, 14, 1, 13, 0, 6, 13, 101, 9, 7, 5, 3, 3, 3, 4, 93, 8, 1, 4, 4, 26, 75, 12, 10, 2, 3, 0, 0, 1, 93, 11, 1, 1, 1, 27, 1, 76, 27, 64, 36, 8, 1, 4, 9, 7, 5, 3, 3, 6, 4, 3, 101, 0, 6, 14, 1, 13, 0, 6, 13, 101, 12, 10, 2, 3, 0, 0, 1, 93, 11, 1, 1, 1, 29, 1, 76, 89, 64, 26, 0, 0, 0, 27, 0, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 7, 29, 43, 1, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 114, 100, 254, 105, 110, 110, 1, 151, 100, 1, 233, 100, 1, 151, 110, 110, 254, 105, 100, 2, 191, 253, 188, 123, 123, 4, 210, 123, 123, 253, 238, 2, 18, 123, 123, 251, 46, 123, 123, 2, 68, 0, 0, 0, 2, 0, 62, 255, 219, 4, 144, 5, 237, 0, 15, 0, 31, 0, 77, 75, 176, 42, 80, 88, 64, 23, 5, 1, 2, 2, 0, 95, 4, 1, 0, 0, 31, 75, 0, 3, 3, 1, 95, 0, 1, 1, 32, 1, 76, 27, 64, 21, 4, 1, 0, 5, 1, 2, 3, 0, 2, 103, 0, 3, 3, 1, 95, 0, 1, 1, 34, 1, 76, 89, 64, 19, 17, 16, 1, 0, 25, 23, 16, 31, 17, 31, 9, 7, 0, 15, 1, 15, 6, 7, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 54, 17, 16, 39, 38, 2, 103, 243, 155, 155, 155, 155, 250, 214, 145, 187, 154, 155, 244, 161, 89, 90, 89, 88, 162, 162, 84, 95, 90, 91, 5, 237, 216, 216, 254, 169, 254, 164, 215, 216, 175, 225, 1, 122, 1, 87, 216, 217, 123, 172, 173, 254, 203, 254, 206, 174, 174, 150, 169, 1, 77, 1, 57, 171, 172, 0, 0, 0, 0, 1, 0, 62, 0, 0, 4, 143, 5, 200, 0, 19, 0, 135, 75, 176, 38, 80, 88, 64, 28, 10, 9, 5, 3, 3, 3, 4, 93, 0, 4, 4, 26, 75, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 1, 27, 1, 76, 27, 75, 176, 42, 80, 88, 64, 34, 5, 1, 3, 4, 9, 9, 3, 112, 10, 1, 9, 9, 4, 94, 0, 4, 4, 26, 75, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 1, 27, 1, 76, 27, 64, 32, 5, 1, 3, 4, 9, 9, 3, 112, 0, 4, 10, 1, 9, 0, 4, 9, 101, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 1, 29, 1, 76, 89, 89, 64, 18, 0, 0, 0, 19, 0, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11, 7, 29, 43, 1, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 114, 99, 254, 105, 111, 111, 4, 81, 111, 111, 254, 105, 99, 5, 64, 251, 59, 123, 123, 4, 210, 123, 123, 251, 46, 123, 123, 4, 197, 0, 0, 2, 0, 86, 0, 0, 4, 100, 5, 200, 0, 16, 0, 23, 0, 94, 75, 176, 42, 80, 88, 64, 32, 0, 6, 8, 1, 5, 0, 6, 5, 103, 7, 1, 3, 3, 4, 93, 0, 4, 4, 26, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 64, 30, 0, 4, 7, 1, 3, 6, 4, 3, 101, 0, 6, 8, 1, 5, 0, 6, 5, 103, 2, 1, 0, 0, 1, 93, 0, 1, 1, 29, 1, 76, 89, 64, 18, 0, 0, 23, 21, 19, 17, 0, 16, 0, 15, 33, 17, 17, 17, 17, 9, 7, 25, 43, 1, 17, 33, 21, 33, 53, 51, 17, 35, 53, 33, 32, 17, 20, 7, 6, 35, 39, 51, 32, 17, 16, 35, 35, 1, 224, 1, 29, 253, 89, 197, 197, 2, 149, 1, 121, 140, 140, 245, 119, 112, 1, 66, 232, 202, 2, 86, 254, 37, 123, 123, 4, 210, 123, 254, 151, 241, 140, 140, 124, 1, 111, 1, 12, 0, 0, 0, 1, 0, 123, 255, 219, 4, 103, 5, 237, 0, 27, 0, 93, 64, 14, 12, 1, 3, 1, 27, 1, 4, 2, 0, 1, 0, 4, 3, 74, 75, 176, 42, 80, 88, 64, 29, 0, 2, 3, 4, 3, 2, 4, 126, 0, 3, 3, 1, 95, 0, 1, 1, 31, 75, 0, 4, 4, 0, 95, 0, 0, 0, 32, 0, 76, 27, 64, 27, 0, 2, 3, 4, 3, 2, 4, 126, 0, 1, 0, 3, 2, 1, 3, 103, 0, 4, 4, 0, 95, 0, 0, 0, 34, 0, 76, 89, 183, 38, 34, 18, 38, 33, 5, 7, 25, 43, 37, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 17, 16, 23, 22, 51, 50, 55, 4, 103, 207, 181, 254, 223, 163, 164, 156, 156, 1, 34, 164, 217, 123, 29, 113, 111, 187, 104, 103, 114, 113, 200, 178, 186, 74, 111, 206, 206, 1, 117, 1, 113, 200, 200, 64, 254, 169, 231, 53, 176, 175, 254, 203, 254, 213, 168, 168, 135, 0, 0, 0, 0, 1, 0, 62, 0, 0, 4, 143, 5, 200, 0, 15, 0, 135, 75, 176, 10, 80, 88, 64, 32, 4, 1, 2, 1, 0, 1, 2, 112, 5, 1, 1, 1, 3, 93, 0, 3, 3, 26, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 27, 7, 76, 27, 75, 176, 42, 80, 88, 64, 33, 4, 1, 2, 1, 0, 1, 2, 0, 126, 5, 1, 1, 1, 3, 93, 0, 3, 3, 26, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 27, 7, 76, 27, 64, 31, 4, 1, 2, 1, 0, 1, 2, 0, 126, 0, 3, 5, 1, 1, 2, 3, 1, 101, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 29, 7, 76, 89, 89, 64, 16, 0, 0, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 9, 7, 27, 43, 33, 53, 33, 17, 33, 21, 35, 17, 33, 17, 35, 53, 33, 17, 33, 21, 1, 1, 1, 3, 254, 181, 123, 4, 81, 123, 254, 181, 1, 3, 123, 4, 210, 232, 1, 99, 254, 157, 232, 251, 46, 123, 0, 0, 1, 0, 32, 0, 0, 4, 204, 5, 200, 0, 25, 0, 147, 182, 24, 5, 2, 6, 1, 1, 74, 75, 176, 12, 80, 88, 64, 33, 0, 6, 1, 7, 7, 6, 112, 9, 8, 4, 2, 4, 1, 1, 0, 93, 3, 1, 0, 0, 26, 75, 0, 7, 7, 5, 96, 0, 5, 5, 27, 5, 76, 27, 75, 176, 42, 80, 88, 64, 34, 0, 6, 1, 7, 1, 6, 7, 126, 9, 8, 4, 2, 4, 1, 1, 0, 93, 3, 1, 0, 0, 26, 75, 0, 7, 7, 5, 96, 0, 5, 5, 27, 5, 76, 27, 64, 32, 0, 6, 1, 7, 1, 6, 7, 126, 3, 1, 0, 9, 8, 4, 2, 4, 1, 6, 0, 1, 101, 0, 7, 7, 5, 96, 0, 5, 5, 29, 5, 76, 89, 89, 64, 17, 0, 0, 0, 25, 0, 25, 17, 18, 19, 17, 17, 18, 17, 17, 10, 7, 28, 43, 19, 53, 33, 21, 35, 1, 1, 35, 53, 33, 21, 35, 1, 6, 6, 35, 35, 17, 51, 23, 50, 55, 54, 55, 55, 1, 32, 1, 181, 150, 1, 57, 1, 102, 199, 1, 181, 70, 254, 7, 129, 184, 199, 14, 123, 20, 62, 37, 49, 66, 40, 254, 106, 5, 77, 123, 123, 253, 66, 2, 190, 123, 123, 252, 35, 236, 132, 1, 88, 207, 42, 56, 132, 77, 3, 145, 0, 0, 0, 0, 3, 0, 40, 0, 0, 4, 165, 5, 200, 0, 25, 0, 32, 0, 39, 0, 126, 75, 176, 42, 80, 88, 64, 44, 9, 1, 3, 13, 1, 10, 11, 3, 10, 103, 12, 14, 2, 11, 8, 1, 4, 5, 11, 4, 103, 2, 1, 0, 0, 1, 93, 0, 1, 1, 26, 75, 7, 1, 5, 5, 6, 93, 0, 6, 6, 27, 6, 76, 27, 64, 42, 0, 1, 2, 1, 0, 3, 1, 0, 101, 9, 1, 3, 13, 1, 10, 11, 3, 10, 103, 12, 14, 2, 11, 8, 1, 4, 5, 11, 4, 103, 7, 1, 5, 5, 6, 93, 0, 6, 6, 29, 6, 76, 89, 64, 26, 26, 26, 39, 38, 34, 33, 26, 32, 26, 32, 28, 27, 25, 24, 17, 17, 17, 17, 20, 17, 17, 17, 16, 15, 7, 29, 43, 1, 35, 53, 33, 21, 35, 21, 50, 4, 21, 20, 4, 35, 21, 51, 21, 33, 53, 51, 53, 34, 36, 53, 52, 36, 51, 17, 17, 34, 6, 21, 20, 22, 33, 50, 54, 53, 52, 38, 35, 2, 11, 115, 1, 158, 115, 201, 1, 25, 254, 231, 201, 115, 254, 98, 115, 202, 254, 231, 1, 25, 202, 134, 152, 152, 1, 62, 132, 153, 153, 132, 5, 77, 123, 123, 168, 252, 197, 196, 253, 168, 123, 123, 168, 253, 196, 197, 252, 252, 249, 2, 140, 162, 164, 165, 161, 161, 165, 164, 162, 0, 1, 0, 49, 0, 0, 4, 155, 5, 200, 0, 27, 0, 105, 64, 9, 24, 17, 10, 3, 4, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 30, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 26, 75, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 27, 8, 76, 27, 64, 28, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 101, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 29, 8, 76, 89, 64, 22, 0, 0, 0, 27, 0, 27, 26, 25, 23, 22, 17, 18, 17, 17, 18, 17, 17, 18, 17, 13, 7, 29, 43, 51, 53, 51, 1, 1, 35, 53, 33, 21, 35, 1, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 33, 53, 51, 1, 1, 51, 21, 49, 111, 1, 94, 254, 150, 99, 1, 164, 100, 1, 32, 1, 33, 128, 1, 105, 105, 254, 159, 1, 104, 98, 254, 69, 124, 254, 226, 254, 226, 154, 123, 2, 95, 2, 115, 123, 123, 254, 12, 1, 244, 123, 123, 253, 157, 253, 145, 123, 123, 1, 240, 254, 16, 123, 0, 0, 0, 1, 0, 62, 254, 127, 4, 143, 5, 200, 0, 21, 0, 114, 75, 176, 42, 80, 88, 64, 41, 9, 7, 2, 3, 0, 0, 1, 93, 8, 1, 1, 1, 26, 75, 11, 10, 6, 3, 3, 3, 5, 93, 0, 5, 5, 27, 75, 11, 10, 6, 3, 3, 3, 4, 93, 0, 4, 4, 30, 4, 76, 27, 64, 39, 8, 1, 1, 9, 7, 2, 3, 0, 3, 1, 0, 101, 11, 10, 6, 3, 3, 3, 5, 93, 0, 5, 5, 29, 75, 11, 10, 6, 3, 3, 3, 4, 93, 0, 4, 4, 30, 4, 76, 89, 64, 20, 0, 0, 0, 21, 0, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12, 7, 29, 43, 37, 17, 35, 53, 33, 21, 35, 17, 51, 17, 35, 17, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 3, 91, 99, 1, 151, 111, 111, 186, 252, 105, 111, 111, 1, 151, 99, 131, 4, 202, 123, 123, 251, 46, 254, 4, 1, 129, 123, 4, 210, 123, 123, 251, 54, 0, 0, 1, 0, 41, 0, 0, 4, 125, 5, 200, 0, 31, 0, 114, 64, 10, 22, 1, 5, 2, 3, 1, 1, 5, 2, 74, 75, 176, 42, 80, 88, 64, 35, 0, 5, 0, 1, 0, 5, 1, 103, 8, 6, 4, 3, 2, 2, 3, 93, 7, 1, 3, 3, 26, 75, 9, 1, 0, 0, 10, 93, 11, 1, 10, 10, 27, 10, 76, 27, 64, 33, 7, 1, 3, 8, 6, 4, 3, 2, 5, 3, 2, 101, 0, 5, 0, 1, 0, 5, 1, 103, 9, 1, 0, 0, 10, 93, 11, 1, 10, 10, 29, 10, 76, 89, 64, 20, 0, 0, 0, 31, 0, 31, 30, 29, 17, 17, 19, 35, 17, 17, 19, 35, 17, 12, 7, 29, 43, 33, 53, 51, 17, 6, 6, 35, 34, 38, 53, 17, 35, 53, 33, 21, 35, 17, 20, 22, 51, 50, 54, 55, 17, 35, 53, 33, 21, 35, 17, 51, 21, 2, 169, 150, 80, 177, 96, 169, 168, 100, 1, 141, 100, 77, 114, 71, 151, 80, 100, 1, 162, 120, 120, 123, 1, 217, 45, 44, 183, 184, 1, 227, 123, 123, 254, 83, 148, 102, 44, 45, 2, 78, 123, 123, 251, 46, 123, 0, 0, 0, 1, 0, 62, 0, 0, 4, 143, 5, 200, 0, 27, 0, 102, 75, 176, 42, 80, 88, 64, 32, 11, 9, 7, 5, 3, 5, 1, 1, 2, 93, 10, 6, 2, 2, 2, 26, 75, 12, 8, 4, 3, 0, 0, 13, 93, 14, 1, 13, 13, 27, 13, 76, 27, 64, 30, 10, 6, 2, 2, 11, 9, 7, 5, 3, 5, 1, 0, 2, 1, 101, 12, 8, 4, 3, 0, 0, 13, 93, 14, 1, 13, 13, 29, 13, 76, 89, 64, 26, 0, 0, 0, 27, 0, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 7, 29, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 17, 35, 53, 33, 21, 35, 17, 51, 17, 35, 53, 33, 21, 35, 17, 51, 21, 62, 40, 40, 1, 4, 40, 242, 40, 1, 4, 40, 243, 40, 1, 4, 40, 40, 123, 4, 210, 123, 123, 251, 54, 4, 202, 123, 123, 251, 54, 4, 202, 123, 123, 251, 46, 123, 0, 0, 0, 0, 1, 0, 63, 254, 127, 4, 143, 5, 200, 0, 29, 0, 176, 75, 176, 38, 80, 88, 64, 45, 11, 9, 7, 5, 3, 5, 1, 1, 2, 93, 10, 6, 2, 2, 2, 26, 75, 12, 8, 4, 3, 0, 0, 14, 93, 15, 1, 14, 14, 27, 75, 12, 8, 4, 3, 0, 0, 13, 93, 0, 13, 13, 30, 13, 76, 27, 75, 176, 42, 80, 88, 64, 41, 11, 9, 7, 5, 3, 5, 1, 1, 2, 93, 10, 6, 2, 2, 2, 26, 75, 8, 1, 4, 4, 14, 93, 15, 1, 14, 14, 27, 75, 12, 1, 0, 0, 13, 93, 0, 13, 13, 30, 13, 76, 27, 64, 39, 10, 6, 2, 2, 11, 9, 7, 5, 3, 5, 1, 4, 2, 1, 101, 8, 1, 4, 4, 14, 93, 15, 1, 14, 14, 29, 75, 12, 1, 0, 0, 13, 93, 0, 13, 13, 30, 13, 76, 89, 89, 64, 28, 0, 0, 0, 29, 0, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 7, 29, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 17, 35, 53, 33, 21, 35, 17, 51, 17, 35, 53, 33, 21, 35, 17, 51, 17, 35, 17, 63, 40, 40, 1, 4, 40, 242, 40, 1, 4, 40, 242, 40, 1, 4, 40, 40, 186, 123, 4, 210, 123, 123, 251, 59, 4, 197, 123, 123, 251, 59, 4, 197, 123, 123, 251, 46, 254, 4, 1, 129, 0, 0, 0, 0, 2, 0, 20, 0, 0, 4, 163, 5, 200, 0, 16, 0, 25, 0, 143, 75, 176, 38, 80, 88, 64, 31, 0, 3, 0, 6, 0, 3, 6, 103, 0, 1, 1, 2, 93, 0, 2, 2, 26, 75, 5, 1, 0, 0, 4, 93, 7, 1, 4, 4, 27, 4, 76, 27, 75, 176, 42, 80, 88, 64, 37, 0, 0, 5, 4, 5, 0, 112, 0, 3, 0, 6, 5, 3, 6, 103, 0, 1, 1, 2, 93, 0, 2, 2, 26, 75, 0, 5, 5, 4, 93, 7, 1, 4, 4, 27, 4, 76, 27, 64, 35, 0, 0, 5, 4, 5, 0, 112, 0, 2, 0, 1, 3, 2, 1, 101, 0, 3, 0, 6, 5, 3, 6, 103, 0, 5, 5, 4, 93, 7, 1, 4, 4, 29, 4, 76, 89, 89, 64, 17, 0, 0, 25, 23, 19, 17, 0, 16, 0, 15, 33, 17, 17, 17, 8, 7, 24, 43, 51, 53, 51, 17, 33, 53, 33, 17, 51, 32, 23, 22, 21, 20, 7, 6, 33, 53, 51, 50, 54, 53, 52, 38, 35, 35, 202, 150, 254, 180, 2, 18, 70, 1, 22, 120, 169, 193, 131, 254, 199, 31, 204, 193, 177, 192, 59, 123, 4, 210, 123, 253, 133, 75, 108, 211, 247, 121, 83, 136, 136, 179, 150, 121, 0, 0, 3, 0, 57, 0, 0, 4, 149, 5, 200, 0, 16, 0, 28, 0, 37, 0, 183, 75, 176, 38, 80, 88, 64, 38, 0, 2, 0, 13, 4, 2, 13, 103, 9, 7, 5, 3, 1, 1, 0, 93, 8, 1, 0, 0, 26, 75, 12, 10, 6, 3, 4, 4, 3, 93, 14, 11, 2, 3, 3, 27, 3, 76, 27, 75, 176, 42, 80, 88, 64, 49, 0, 2, 0, 13, 12, 2, 13, 103, 9, 7, 5, 3, 1, 1, 0, 93, 8, 1, 0, 0, 26, 75, 0, 12, 12, 3, 93, 14, 11, 2, 3, 3, 27, 75, 10, 6, 2, 4, 4, 3, 93, 14, 11, 2, 3, 3, 27, 3, 76, 27, 64, 47, 8, 1, 0, 9, 7, 5, 3, 1, 2, 0, 1, 101, 0, 2, 0, 13, 12, 2, 13, 103, 0, 12, 12, 3, 93, 14, 11, 2, 3, 3, 29, 75, 10, 6, 2, 4, 4, 3, 93, 14, 11, 2, 3, 3, 29, 3, 76, 89, 89, 64, 26, 17, 17, 37, 35, 31, 29, 17, 28, 17, 28, 27, 26, 25, 24, 17, 17, 18, 17, 17, 36, 33, 17, 16, 15, 7, 29, 43, 19, 33, 21, 35, 17, 51, 50, 22, 21, 20, 4, 35, 35, 53, 51, 17, 35, 1, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 21, 37, 51, 50, 54, 53, 52, 38, 35, 35, 57, 1, 44, 70, 110, 176, 212, 254, 254, 240, 230, 50, 50, 3, 48, 60, 60, 1, 44, 60, 60, 252, 138, 50, 130, 128, 127, 130, 51, 5, 200, 123, 254, 25, 220, 187, 227, 236, 123, 4, 210, 250, 179, 123, 4, 210, 123, 123, 251, 46, 123, 136, 129, 198, 146, 138, 0, 0, 2, 0, 95, 0, 0, 4, 145, 5, 200, 0, 18, 0, 27, 0, 147, 75, 176, 38, 80, 88, 64, 32, 0, 4, 0, 7, 0, 4, 7, 101, 3, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 6, 1, 0, 0, 5, 93, 8, 1, 5, 5, 27, 5, 76, 27, 75, 176, 42, 80, 88, 64, 38, 0, 0, 6, 5, 6, 0, 112, 0, 4, 0, 7, 6, 4, 7, 101, 3, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 0, 6, 6, 5, 93, 8, 1, 5, 5, 27, 5, 76, 27, 64, 36, 0, 0, 6, 5, 6, 0, 112, 0, 2, 3, 1, 1, 4, 2, 1, 101, 0, 4, 0, 7, 6, 4, 7, 101, 0, 6, 6, 5, 93, 8, 1, 5, 5, 29, 5, 76, 89, 89, 64, 18, 0, 0, 27, 25, 21, 19, 0, 18, 0, 17, 33, 17, 17, 17, 17, 9, 7, 25, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 32, 23, 22, 21, 20, 7, 6, 33, 39, 51, 50, 54, 53, 52, 38, 35, 35, 95, 128, 128, 1, 199, 130, 171, 1, 33, 119, 170, 193, 132, 254, 205, 117, 132, 215, 192, 176, 202, 161, 123, 4, 210, 123, 123, 254, 0, 75, 108, 211, 247, 121, 83, 136, 136, 189, 140, 121, 0, 0, 1, 0, 71, 255, 219, 4, 90, 5, 237, 0, 31, 0, 130, 64, 14, 21, 1, 5, 7, 0, 1, 0, 2, 31, 1, 8, 0, 3, 74, 75, 176, 42, 80, 88, 64, 45, 0, 6, 5, 3, 5, 6, 3, 126, 0, 4, 0, 1, 2, 4, 1, 101, 0, 3, 0, 2, 0, 3, 2, 101, 0, 5, 5, 7, 95, 0, 7, 7, 31, 75, 0, 0, 0, 8, 95, 0, 8, 8, 32, 8, 76, 27, 64, 43, 0, 6, 5, 3, 5, 6, 3, 126, 0, 7, 0, 5, 6, 7, 5, 103, 0, 4, 0, 1, 2, 4, 1, 101, 0, 3, 0, 2, 0, 3, 2, 101, 0, 0, 0, 8, 95, 0, 8, 8, 34, 8, 76, 89, 64, 12, 36, 34, 19, 34, 17, 17, 17, 18, 33, 9, 7, 29, 43, 55, 22, 51, 50, 0, 17, 33, 21, 35, 17, 51, 21, 33, 2, 2, 39, 6, 7, 35, 7, 35, 17, 54, 51, 32, 0, 17, 16, 0, 33, 34, 39, 71, 173, 171, 205, 1, 20, 254, 70, 123, 123, 1, 186, 27, 247, 197, 82, 100, 1, 29, 123, 173, 161, 1, 58, 1, 120, 254, 144, 254, 187, 175, 175, 179, 85, 1, 86, 1, 18, 110, 1, 87, 110, 1, 24, 1, 18, 7, 4, 24, 249, 1, 87, 57, 254, 92, 254, 160, 254, 145, 254, 97, 57, 0, 0, 0, 2, 0, 35, 255, 219, 4, 155, 5, 237, 0, 26, 0, 38, 0, 136, 75, 176, 42, 80, 88, 64, 52, 0, 4, 0, 7, 0, 4, 7, 101, 0, 11, 11, 5, 95, 0, 5, 5, 31, 75, 3, 1, 1, 1, 2, 93, 0, 2, 2, 26, 75, 8, 1, 0, 0, 9, 93, 12, 1, 9, 9, 27, 75, 0, 10, 10, 6, 95, 0, 6, 6, 32, 6, 76, 27, 64, 48, 0, 5, 0, 11, 1, 5, 11, 103, 0, 2, 3, 1, 1, 4, 2, 1, 101, 0, 4, 0, 7, 0, 4, 7, 101, 8, 1, 0, 0, 9, 93, 12, 1, 9, 9, 29, 75, 0, 10, 10, 6, 95, 0, 6, 6, 34, 6, 76, 89, 64, 22, 0, 0, 37, 35, 31, 29, 0, 26, 0, 26, 17, 18, 36, 34, 17, 17, 17, 17, 17, 13, 7, 29, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 18, 18, 51, 50, 18, 17, 16, 2, 35, 34, 2, 17, 35, 17, 51, 21, 1, 16, 18, 51, 50, 18, 17, 16, 2, 35, 34, 2, 35, 50, 50, 1, 24, 50, 147, 24, 199, 159, 176, 209, 209, 176, 169, 213, 147, 50, 1, 28, 107, 88, 87, 108, 108, 87, 86, 109, 123, 4, 210, 123, 123, 253, 247, 1, 92, 1, 77, 254, 108, 254, 139, 254, 139, 254, 108, 1, 142, 1, 96, 253, 178, 123, 2, 238, 254, 209, 254, 151, 1, 104, 1, 38, 1, 39, 1, 103, 254, 156, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 166, 5, 200, 0, 32, 0, 41, 0, 105, 64, 11, 10, 1, 7, 9, 1, 74, 0, 1, 1, 1, 73, 75, 176, 42, 80, 88, 64, 33, 0, 9, 0, 7, 1, 9, 7, 101, 8, 1, 3, 3, 2, 93, 0, 2, 2, 26, 75, 6, 4, 2, 1, 1, 0, 93, 5, 1, 0, 0, 27, 0, 76, 27, 64, 31, 0, 2, 8, 1, 3, 9, 2, 3, 103, 0, 9, 0, 7, 1, 9, 7, 101, 6, 4, 2, 1, 1, 0, 93, 5, 1, 0, 0, 29, 0, 76, 89, 64, 14, 41, 39, 37, 17, 17, 17, 17, 17, 44, 17, 17, 10, 7, 29, 43, 37, 21, 33, 53, 51, 54, 55, 55, 54, 54, 55, 38, 38, 53, 52, 55, 54, 33, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 35, 6, 6, 7, 6, 1, 35, 34, 6, 21, 20, 22, 51, 51, 1, 105, 254, 151, 129, 35, 34, 129, 57, 114, 57, 152, 192, 142, 107, 1, 35, 1, 183, 130, 130, 254, 55, 130, 140, 71, 169, 99, 11, 1, 234, 110, 166, 166, 192, 193, 57, 123, 123, 123, 48, 54, 198, 87, 138, 35, 32, 224, 131, 193, 124, 93, 123, 251, 46, 123, 123, 2, 9, 86, 233, 163, 17, 4, 188, 132, 139, 173, 146, 0, 2, 0, 148, 255, 231, 4, 143, 4, 87, 0, 29, 0, 39, 0, 136, 64, 10, 19, 1, 2, 4, 30, 1, 5, 7, 2, 74, 75, 176, 42, 80, 88, 64, 49, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 7, 5, 1, 7, 103, 0, 2, 2, 4, 95, 0, 4, 4, 33, 75, 8, 1, 5, 5, 6, 93, 0, 6, 6, 27, 75, 8, 1, 5, 5, 0, 95, 0, 0, 0, 34, 0, 76, 27, 64, 49, 0, 3, 2, 1, 2, 3, 1, 126, 0, 1, 0, 7, 5, 1, 7, 103, 0, 2, 2, 4, 95, 0, 4, 4, 33, 75, 8, 1, 5, 5, 6, 93, 0, 6, 6, 29, 75, 8, 1, 5, 5, 0, 95, 0, 0, 0, 34, 0, 76, 89, 64, 12, 36, 34, 17, 20, 34, 18, 34, 38, 33, 9, 7, 29, 43, 37, 6, 35, 34, 39, 38, 53, 52, 55, 54, 33, 51, 53, 52, 35, 34, 7, 7, 35, 53, 54, 51, 50, 23, 22, 21, 17, 51, 21, 33, 3, 53, 35, 34, 7, 6, 21, 20, 51, 50, 3, 66, 173, 178, 153, 91, 91, 142, 142, 1, 61, 85, 204, 103, 154, 25, 123, 229, 238, 189, 75, 75, 136, 254, 199, 20, 53, 230, 97, 96, 186, 147, 119, 144, 86, 85, 147, 190, 86, 85, 168, 165, 58, 127, 216, 93, 65, 66, 161, 253, 72, 123, 1, 22, 253, 52, 52, 126, 178, 0, 0, 2, 0, 118, 255, 231, 4, 100, 6, 144, 0, 20, 0, 30, 0, 110, 182, 21, 5, 2, 5, 6, 1, 74, 75, 176, 25, 80, 88, 64, 36, 7, 1, 4, 3, 3, 4, 110, 0, 3, 0, 0, 1, 3, 0, 102, 0, 6, 6, 1, 95, 0, 1, 1, 28, 75, 0, 5, 5, 2, 95, 0, 2, 2, 34, 2, 76, 27, 64, 35, 7, 1, 4, 3, 4, 131, 0, 3, 0, 0, 1, 3, 0, 102, 0, 6, 6, 1, 95, 0, 1, 1, 28, 75, 0, 5, 5, 2, 95, 0, 2, 2, 34, 2, 76, 89, 64, 17, 0, 0, 30, 28, 25, 23, 0, 20, 0, 20, 35, 36, 35, 33, 8, 7, 24, 43, 1, 21, 33, 34, 6, 3, 54, 51, 50, 18, 21, 16, 0, 35, 32, 17, 16, 0, 33, 51, 53, 1, 21, 2, 33, 50, 54, 53, 16, 33, 34, 3, 239, 254, 247, 218, 185, 24, 152, 245, 186, 226, 254, 233, 228, 254, 13, 1, 21, 1, 50, 183, 253, 201, 1, 1, 56, 132, 155, 254, 255, 181, 6, 144, 249, 253, 254, 181, 239, 254, 218, 240, 254, 253, 254, 194, 2, 218, 1, 203, 1, 159, 101, 252, 54, 49, 253, 216, 226, 191, 1, 144, 0, 0, 0, 3, 0, 84, 0, 0, 4, 65, 4, 62, 0, 15, 0, 23, 0, 32, 0, 105, 181, 11, 1, 5, 6, 1, 74, 75, 176, 42, 80, 88, 64, 32, 0, 6, 0, 5, 0, 6, 5, 101, 7, 1, 1, 1, 2, 93, 0, 2, 2, 28, 75, 4, 1, 0, 0, 3, 93, 8, 1, 3, 3, 27, 3, 76, 27, 64, 32, 0, 6, 0, 5, 0, 6, 5, 101, 7, 1, 1, 1, 2, 93, 0, 2, 2, 28, 75, 4, 1, 0, 0, 3, 93, 8, 1, 3, 3, 29, 3, 76, 89, 64, 20, 0, 0, 32, 30, 26, 24, 23, 21, 18, 16, 0, 15, 0, 14, 33, 17, 17, 9, 7, 23, 43, 51, 53, 51, 17, 35, 53, 33, 50, 22, 21, 20, 7, 4, 21, 16, 33, 37, 51, 50, 54, 53, 52, 33, 35, 53, 51, 50, 54, 53, 52, 38, 35, 35, 84, 120, 120, 2, 80, 195, 174, 230, 1, 18, 254, 138, 254, 199, 174, 181, 125, 254, 218, 186, 192, 110, 139, 105, 133, 203, 123, 3, 72, 123, 116, 131, 195, 77, 73, 215, 254, 233, 123, 58, 130, 200, 115, 97, 82, 97, 61, 0, 0, 1, 0, 100, 0, 0, 4, 112, 4, 62, 0, 13, 0, 125, 75, 176, 10, 80, 88, 64, 30, 0, 5, 3, 0, 3, 5, 112, 6, 1, 3, 3, 4, 93, 0, 4, 4, 28, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 75, 176, 42, 80, 88, 64, 31, 0, 5, 3, 0, 3, 5, 0, 126, 6, 1, 3, 3, 4, 93, 0, 4, 4, 28, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 64, 31, 0, 5, 3, 0, 3, 5, 0, 126, 6, 1, 3, 3, 4, 93, 0, 4, 4, 28, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 29, 1, 76, 89, 89, 64, 10, 17, 17, 17, 17, 17, 17, 16, 7, 7, 27, 43, 37, 33, 21, 33, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 2, 7, 1, 16, 253, 77, 222, 222, 4, 12, 123, 254, 18, 123, 123, 123, 3, 72, 123, 254, 159, 230, 0, 0, 2, 0, 40, 254, 167, 4, 153, 4, 62, 0, 18, 0, 25, 0, 146, 75, 176, 16, 80, 88, 64, 39, 9, 3, 2, 1, 1, 2, 93, 0, 2, 2, 28, 75, 8, 4, 2, 0, 0, 6, 93, 0, 6, 6, 27, 75, 8, 4, 2, 0, 0, 5, 93, 10, 7, 2, 5, 5, 30, 5, 76, 27, 75, 176, 42, 80, 88, 64, 32, 10, 7, 2, 5, 0, 5, 81, 9, 3, 2, 1, 1, 2, 93, 0, 2, 2, 28, 75, 8, 4, 2, 0, 0, 6, 93, 0, 6, 6, 27, 6, 76, 27, 64, 32, 10, 7, 2, 5, 0, 5, 81, 9, 3, 2, 1, 1, 2, 93, 0, 2, 2, 28, 75, 8, 4, 2, 0, 0, 6, 93, 0, 6, 6, 29, 6, 76, 89, 89, 64, 20, 0, 0, 22, 21, 20, 19, 0, 18, 0, 18, 17, 17, 17, 17, 17, 20, 17, 11, 7, 27, 43, 19, 17, 51, 54, 18, 53, 53, 35, 53, 33, 21, 35, 17, 51, 17, 35, 17, 33, 17, 19, 33, 17, 33, 21, 22, 2, 40, 75, 176, 139, 80, 3, 59, 80, 80, 180, 252, 247, 99, 2, 61, 254, 201, 1, 122, 254, 167, 1, 225, 163, 1, 136, 245, 27, 123, 123, 252, 197, 254, 31, 1, 89, 254, 167, 1, 225, 3, 59, 27, 216, 254, 70, 0, 0, 0, 2, 0, 123, 255, 231, 4, 81, 4, 86, 0, 7, 0, 28, 0, 51, 64, 48, 15, 1, 3, 2, 16, 1, 4, 3, 2, 74, 0, 0, 0, 2, 3, 0, 2, 101, 0, 1, 1, 5, 95, 0, 5, 5, 33, 75, 0, 3, 3, 4, 95, 0, 4, 4, 34, 4, 76, 38, 35, 35, 19, 34, 16, 6, 7, 26, 43, 1, 33, 53, 16, 35, 34, 7, 6, 1, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 1, 80, 2, 47, 249, 154, 84, 59, 2, 244, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 2, 117, 46, 1, 56, 123, 86, 254, 240, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 0, 0, 0, 1, 0, 23, 0, 0, 4, 182, 4, 62, 0, 85, 0, 148, 182, 58, 5, 2, 12, 3, 1, 74, 75, 176, 42, 80, 88, 64, 50, 7, 1, 3, 14, 1, 12, 0, 3, 12, 101, 6, 1, 4, 4, 2, 95, 8, 5, 2, 2, 2, 28, 75, 9, 1, 1, 1, 2, 95, 8, 5, 2, 2, 2, 28, 75, 10, 1, 0, 0, 11, 93, 15, 13, 2, 11, 11, 27, 11, 76, 27, 64, 50, 7, 1, 3, 14, 1, 12, 0, 3, 12, 101, 6, 1, 4, 4, 2, 95, 8, 5, 2, 2, 2, 28, 75, 9, 1, 1, 1, 2, 95, 8, 5, 2, 2, 2, 28, 75, 10, 1, 0, 0, 11, 93, 15, 13, 2, 11, 11, 29, 11, 76, 89, 64, 26, 85, 84, 77, 76, 75, 74, 73, 72, 65, 64, 63, 62, 50, 48, 41, 17, 17, 17, 17, 25, 33, 44, 16, 16, 7, 29, 43, 55, 51, 55, 54, 54, 55, 46, 3, 39, 39, 38, 38, 35, 35, 53, 51, 50, 30, 2, 23, 23, 30, 3, 51, 17, 35, 53, 33, 21, 35, 17, 50, 62, 2, 55, 55, 62, 3, 51, 51, 21, 35, 34, 6, 7, 7, 14, 3, 7, 22, 22, 23, 23, 51, 21, 35, 46, 5, 39, 35, 17, 35, 17, 35, 14, 5, 7, 35, 23, 69, 110, 46, 84, 55, 29, 41, 33, 31, 18, 19, 28, 59, 35, 28, 20, 58, 79, 57, 42, 21, 22, 21, 27, 31, 45, 39, 80, 1, 77, 80, 38, 46, 32, 27, 20, 21, 22, 42, 57, 79, 58, 20, 28, 35, 59, 28, 19, 18, 31, 33, 42, 28, 51, 87, 47, 109, 70, 195, 10, 38, 48, 55, 53, 48, 18, 40, 173, 40, 18, 48, 53, 55, 48, 38, 10, 195, 123, 206, 86, 110, 23, 13, 34, 49, 67, 47, 49, 72, 59, 148, 30, 57, 84, 53, 55, 53, 77, 51, 25, 1, 106, 123, 123, 254, 150, 26, 52, 77, 51, 55, 54, 83, 57, 30, 148, 59, 72, 49, 47, 67, 49, 34, 13, 23, 108, 88, 206, 123, 23, 76, 92, 103, 101, 94, 37, 253, 242, 2, 14, 37, 94, 101, 103, 92, 76, 23, 0, 0, 0, 1, 0, 176, 255, 231, 4, 44, 4, 86, 0, 52, 0, 68, 64, 65, 32, 1, 3, 5, 40, 1, 1, 2, 1, 1, 0, 1, 0, 1, 6, 0, 4, 74, 0, 4, 3, 2, 3, 4, 2, 126, 0, 2, 0, 1, 0, 2, 1, 103, 0, 3, 3, 5, 95, 0, 5, 5, 33, 75, 0, 0, 0, 6, 95, 0, 6, 6, 34, 6, 76, 46, 34, 18, 40, 33, 55, 35, 7, 7, 27, 43, 55, 53, 22, 22, 51, 50, 54, 53, 52, 46, 4, 35, 35, 53, 51, 50, 62, 2, 53, 52, 46, 2, 35, 34, 7, 7, 35, 17, 54, 51, 50, 22, 21, 20, 6, 7, 22, 22, 21, 20, 14, 4, 35, 34, 38, 176, 85, 202, 121, 138, 134, 31, 54, 70, 78, 81, 37, 105, 105, 74, 118, 82, 44, 37, 63, 85, 47, 148, 93, 31, 123, 178, 226, 220, 209, 91, 97, 117, 110, 46, 77, 101, 110, 113, 50, 121, 196, 33, 149, 37, 39, 90, 97, 51, 70, 46, 25, 13, 2, 125, 12, 41, 76, 64, 51, 66, 38, 14, 38, 197, 1, 40, 62, 138, 123, 99, 127, 42, 39, 141, 97, 66, 99, 73, 49, 30, 12, 30, 0, 0, 0, 1, 0, 73, 0, 0, 4, 132, 4, 62, 0, 21, 0, 90, 182, 21, 10, 2, 1, 2, 1, 74, 75, 176, 42, 80, 88, 64, 27, 6, 4, 2, 2, 2, 3, 93, 5, 1, 3, 3, 28, 75, 9, 7, 2, 1, 1, 0, 93, 8, 1, 0, 0, 27, 0, 76, 27, 64, 27, 6, 4, 2, 2, 2, 3, 93, 5, 1, 3, 3, 28, 75, 9, 7, 2, 1, 1, 0, 93, 8, 1, 0, 0, 29, 0, 76, 89, 64, 14, 20, 19, 17, 17, 17, 18, 17, 17, 17, 17, 16, 10, 7, 29, 43, 33, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 1, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 117, 254, 212, 110, 110, 1, 133, 89, 1, 227, 1, 44, 110, 110, 254, 123, 89, 123, 3, 72, 123, 123, 253, 51, 3, 72, 123, 252, 184, 123, 123, 2, 205, 0, 2, 0, 73, 0, 0, 4, 132, 6, 43, 0, 9, 0, 31, 0, 177, 182, 31, 20, 2, 5, 6, 1, 74, 75, 176, 12, 80, 88, 64, 42, 2, 1, 0, 1, 1, 0, 110, 0, 1, 0, 3, 7, 1, 3, 104, 10, 8, 2, 6, 6, 7, 93, 9, 1, 7, 7, 28, 75, 13, 11, 2, 5, 5, 4, 93, 12, 1, 4, 4, 27, 4, 76, 27, 75, 176, 42, 80, 88, 64, 41, 2, 1, 0, 1, 0, 131, 0, 1, 0, 3, 7, 1, 3, 104, 10, 8, 2, 6, 6, 7, 93, 9, 1, 7, 7, 28, 75, 13, 11, 2, 5, 5, 4, 93, 12, 1, 4, 4, 27, 4, 76, 27, 64, 41, 2, 1, 0, 1, 0, 131, 0, 1, 0, 3, 7, 1, 3, 104, 10, 8, 2, 6, 6, 7, 93, 9, 1, 7, 7, 28, 75, 13, 11, 2, 5, 5, 4, 93, 12, 1, 4, 4, 29, 4, 76, 89, 89, 64, 22, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 17, 17, 17, 17, 17, 33, 17, 33, 16, 14, 7, 29, 43, 1, 51, 20, 51, 50, 53, 51, 16, 33, 32, 19, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 1, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 28, 160, 173, 172, 161, 254, 179, 254, 179, 89, 254, 212, 110, 110, 1, 133, 89, 1, 227, 1, 44, 110, 110, 254, 123, 89, 6, 43, 206, 206, 254, 216, 250, 253, 123, 3, 72, 123, 123, 253, 51, 3, 72, 123, 252, 184, 123, 123, 2, 205, 0, 1, 0, 125, 0, 0, 4, 74, 4, 62, 0, 57, 0, 142, 64, 10, 33, 1, 9, 4, 43, 1, 8, 0, 2, 74, 75, 176, 42, 80, 88, 64, 46, 0, 4, 0, 9, 0, 4, 9, 101, 3, 1, 1, 1, 2, 95, 5, 1, 2, 2, 28, 75, 0, 6, 6, 2, 95, 5, 1, 2, 2, 28, 75, 10, 7, 2, 0, 0, 8, 93, 12, 11, 2, 8, 8, 27, 8, 76, 27, 64, 46, 0, 4, 0, 9, 0, 4, 9, 101, 3, 1, 1, 1, 2, 95, 5, 1, 2, 2, 28, 75, 0, 6, 6, 2, 95, 5, 1, 2, 2, 28, 75, 10, 7, 2, 0, 0, 8, 93, 12, 11, 2, 8, 8, 29, 8, 76, 89, 64, 24, 0, 0, 0, 57, 0, 57, 56, 55, 54, 53, 42, 41, 40, 39, 17, 25, 33, 17, 17, 17, 17, 13, 7, 27, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 50, 62, 2, 55, 55, 62, 3, 51, 21, 34, 14, 2, 7, 7, 14, 3, 7, 30, 3, 23, 23, 51, 21, 33, 53, 46, 3, 39, 46, 3, 39, 35, 17, 51, 21, 125, 120, 120, 1, 141, 80, 34, 34, 48, 44, 49, 36, 32, 40, 71, 80, 99, 68, 40, 62, 54, 48, 27, 29, 20, 33, 34, 38, 25, 48, 74, 61, 51, 24, 97, 76, 254, 229, 10, 26, 28, 28, 12, 24, 34, 28, 27, 18, 138, 80, 123, 3, 72, 123, 123, 254, 150, 35, 62, 86, 51, 46, 57, 79, 48, 21, 148, 16, 34, 55, 39, 43, 30, 50, 43, 36, 15, 15, 55, 72, 85, 45, 182, 123, 122, 19, 50, 52, 50, 18, 37, 50, 38, 30, 17, 254, 152, 123, 0, 1, 0, 43, 0, 0, 4, 122, 4, 62, 0, 23, 0, 107, 75, 176, 42, 80, 88, 64, 38, 6, 4, 2, 1, 1, 5, 93, 0, 5, 5, 28, 75, 0, 3, 3, 2, 95, 9, 8, 2, 2, 2, 27, 75, 7, 1, 0, 0, 2, 95, 9, 8, 2, 2, 2, 27, 2, 76, 27, 64, 38, 6, 4, 2, 1, 1, 5, 93, 0, 5, 5, 28, 75, 0, 3, 3, 2, 95, 9, 8, 2, 2, 2, 29, 75, 7, 1, 0, 0, 2, 95, 9, 8, 2, 2, 2, 29, 2, 76, 89, 64, 17, 0, 0, 0, 23, 0, 23, 17, 17, 17, 20, 17, 20, 17, 17, 10, 7, 28, 43, 33, 53, 51, 17, 33, 21, 16, 7, 6, 35, 53, 54, 54, 55, 54, 19, 35, 53, 33, 21, 35, 17, 51, 21, 2, 197, 120, 254, 171, 97, 107, 241, 80, 83, 30, 70, 2, 130, 3, 200, 120, 120, 123, 3, 72, 19, 254, 29, 232, 229, 148, 5, 78, 98, 236, 1, 142, 123, 123, 252, 184, 123, 0, 0, 1, 0, 25, 0, 0, 4, 180, 4, 62, 0, 27, 0, 115, 183, 24, 19, 7, 3, 8, 1, 1, 74, 75, 176, 42, 80, 88, 64, 36, 0, 8, 1, 0, 1, 8, 0, 126, 4, 1, 1, 1, 2, 93, 3, 1, 2, 2, 28, 75, 9, 7, 5, 3, 0, 0, 6, 93, 11, 10, 2, 6, 6, 27, 6, 76, 27, 64, 36, 0, 8, 1, 0, 1, 8, 0, 126, 4, 1, 1, 1, 2, 93, 3, 1, 2, 2, 28, 75, 9, 7, 5, 3, 0, 0, 6, 93, 11, 10, 2, 6, 6, 29, 6, 76, 89, 64, 20, 0, 0, 0, 27, 0, 27, 26, 25, 19, 17, 17, 17, 17, 19, 17, 17, 17, 12, 7, 29, 43, 51, 53, 51, 17, 35, 53, 33, 1, 51, 1, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 35, 1, 35, 1, 39, 3, 51, 21, 25, 86, 86, 1, 29, 1, 50, 2, 1, 61, 1, 13, 86, 86, 254, 192, 72, 2, 254, 221, 135, 254, 239, 6, 6, 86, 123, 3, 72, 123, 253, 21, 2, 235, 123, 252, 184, 123, 123, 2, 193, 253, 82, 2, 184, 18, 253, 35, 123, 0, 0, 0, 1, 0, 73, 0, 0, 4, 132, 4, 62, 0, 27, 0, 116, 75, 176, 42, 80, 88, 64, 38, 0, 6, 14, 1, 13, 0, 6, 13, 101, 9, 7, 5, 3, 3, 3, 4, 93, 8, 1, 4, 4, 28, 75, 12, 10, 2, 3, 0, 0, 1, 93, 11, 1, 1, 1, 27, 1, 76, 27, 64, 38, 0, 6, 14, 1, 13, 0, 6, 13, 101, 9, 7, 5, 3, 3, 3, 4, 93, 8, 1, 4, 4, 28, 75, 12, 10, 2, 3, 0, 0, 1, 93, 11, 1, 1, 1, 29, 1, 76, 89, 64, 26, 0, 0, 0, 27, 0, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 7, 29, 43, 1, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 134, 99, 254, 96, 120, 120, 1, 160, 99, 1, 193, 99, 1, 160, 120, 120, 254, 96, 99, 1, 237, 254, 142, 123, 123, 3, 72, 123, 123, 254, 166, 1, 90, 123, 123, 252, 184, 123, 123, 1, 114, 0, 2, 0, 111, 255, 231, 4, 94, 4, 86, 0, 15, 0, 23, 0, 45, 64, 42, 5, 1, 2, 2, 0, 95, 4, 1, 0, 0, 33, 75, 0, 3, 3, 1, 95, 0, 1, 1, 34, 1, 76, 17, 16, 1, 0, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 6, 7, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 32, 17, 16, 33, 32, 17, 16, 2, 102, 235, 134, 135, 135, 135, 242, 205, 129, 161, 135, 135, 233, 254, 222, 1, 34, 1, 35, 4, 86, 151, 151, 254, 248, 254, 244, 150, 151, 125, 155, 1, 32, 1, 9, 151, 151, 123, 254, 70, 254, 66, 1, 190, 1, 186, 0, 1, 0, 73, 0, 0, 4, 131, 4, 62, 0, 19, 0, 137, 75, 176, 38, 80, 88, 64, 28, 10, 9, 5, 3, 3, 3, 4, 93, 0, 4, 4, 28, 75, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 1, 27, 1, 76, 27, 75, 176, 42, 80, 88, 64, 34, 5, 1, 3, 4, 9, 9, 3, 112, 10, 1, 9, 9, 4, 94, 0, 4, 4, 28, 75, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 1, 27, 1, 76, 27, 64, 34, 5, 1, 3, 4, 9, 9, 3, 112, 10, 1, 9, 9, 4, 94, 0, 4, 4, 28, 75, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 1, 29, 1, 76, 89, 89, 64, 18, 0, 0, 0, 19, 0, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11, 7, 29, 43, 1, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 134, 100, 254, 95, 120, 120, 4, 58, 120, 120, 254, 95, 100, 3, 182, 252, 197, 123, 123, 3, 72, 123, 123, 252, 184, 123, 123, 3, 59, 0, 0, 0, 0, 2, 0, 69, 254, 117, 4, 101, 4, 86, 0, 24, 0, 35, 0, 171, 64, 12, 35, 25, 10, 3, 7, 3, 24, 1, 6, 7, 2, 74, 75, 176, 12, 80, 88, 64, 44, 8, 1, 3, 3, 5, 95, 0, 5, 5, 33, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 28, 75, 0, 7, 7, 6, 95, 0, 6, 6, 34, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 30, 1, 76, 27, 75, 176, 14, 80, 88, 64, 34, 8, 1, 3, 3, 4, 95, 5, 1, 4, 4, 28, 75, 0, 7, 7, 6, 95, 0, 6, 6, 34, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 30, 1, 76, 27, 64, 44, 8, 1, 3, 3, 5, 95, 0, 5, 5, 33, 75, 8, 1, 3, 3, 4, 93, 0, 4, 4, 28, 75, 0, 7, 7, 6, 95, 0, 6, 6, 34, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 30, 1, 76, 89, 89, 64, 12, 36, 35, 38, 36, 17, 17, 17, 17, 16, 9, 7, 29, 43, 1, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 54, 55, 54, 51, 50, 23, 22, 21, 16, 7, 6, 35, 34, 39, 53, 22, 51, 50, 55, 54, 53, 16, 35, 34, 7, 1, 134, 247, 253, 200, 123, 123, 1, 65, 75, 71, 102, 118, 165, 102, 102, 135, 134, 235, 88, 143, 136, 76, 167, 73, 73, 214, 164, 147, 254, 240, 123, 123, 4, 210, 124, 222, 111, 55, 80, 143, 144, 235, 254, 226, 163, 164, 25, 146, 23, 107, 107, 252, 1, 117, 246, 0, 0, 1, 0, 110, 255, 231, 4, 86, 4, 86, 0, 27, 0, 54, 64, 51, 12, 1, 3, 1, 27, 1, 4, 2, 0, 1, 0, 4, 3, 74, 0, 2, 3, 4, 3, 2, 4, 126, 0, 3, 3, 1, 95, 0, 1, 1, 33, 75, 0, 4, 4, 0, 95, 0, 0, 0, 34, 0, 76, 38, 34, 18, 38, 33, 5, 7, 25, 43, 37, 6, 35, 32, 39, 38, 17, 16, 55, 54, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 22, 51, 50, 55, 4, 86, 162, 232, 254, 229, 162, 161, 158, 157, 1, 31, 213, 172, 124, 35, 121, 116, 176, 104, 96, 108, 116, 206, 168, 187, 46, 71, 158, 158, 1, 8, 1, 4, 147, 148, 54, 254, 202, 197, 44, 118, 118, 199, 220, 113, 113, 81, 0, 1, 0, 72, 0, 0, 4, 133, 4, 62, 0, 15, 0, 137, 75, 176, 12, 80, 88, 64, 32, 4, 1, 2, 1, 0, 1, 2, 112, 5, 1, 1, 1, 3, 93, 0, 3, 3, 28, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 27, 7, 76, 27, 75, 176, 42, 80, 88, 64, 33, 4, 1, 2, 1, 0, 1, 2, 0, 126, 5, 1, 1, 1, 3, 93, 0, 3, 3, 28, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 27, 7, 76, 27, 64, 33, 4, 1, 2, 1, 0, 1, 2, 0, 126, 5, 1, 1, 1, 3, 93, 0, 3, 3, 28, 75, 6, 1, 0, 0, 7, 93, 8, 1, 7, 7, 29, 7, 76, 89, 89, 64, 16, 0, 0, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 9, 7, 27, 43, 33, 53, 33, 17, 33, 21, 35, 17, 33, 17, 35, 53, 33, 17, 33, 21, 1, 1, 1, 3, 254, 191, 123, 4, 61, 123, 254, 191, 1, 3, 123, 3, 72, 220, 1, 87, 254, 169, 220, 252, 184, 123, 0, 0, 0, 0, 1, 0, 54, 254, 92, 4, 205, 4, 62, 0, 24, 0, 46, 64, 43, 22, 15, 2, 3, 1, 1, 74, 7, 6, 4, 3, 1, 1, 0, 93, 5, 1, 0, 0, 28, 75, 0, 3, 3, 2, 95, 0, 2, 2, 35, 2, 76, 18, 17, 17, 22, 17, 35, 17, 16, 8, 7, 28, 43, 1, 33, 21, 35, 1, 6, 6, 35, 35, 17, 51, 23, 22, 54, 55, 55, 1, 35, 53, 33, 21, 35, 1, 1, 35, 3, 52, 1, 153, 95, 254, 11, 64, 179, 183, 84, 124, 29, 79, 98, 62, 49, 254, 99, 97, 1, 203, 158, 1, 57, 1, 58, 162, 4, 62, 124, 251, 154, 143, 113, 1, 64, 196, 6, 73, 138, 113, 3, 172, 124, 124, 253, 60, 2, 196, 0, 0, 3, 0, 59, 254, 117, 4, 146, 6, 43, 0, 10, 0, 44, 0, 55, 0, 126, 75, 176, 42, 80, 88, 64, 45, 0, 8, 9, 1, 7, 6, 8, 7, 101, 13, 1, 0, 0, 6, 95, 10, 1, 6, 6, 28, 75, 12, 1, 1, 1, 5, 95, 11, 1, 5, 5, 27, 75, 4, 1, 2, 2, 3, 93, 0, 3, 3, 30, 3, 76, 27, 64, 45, 0, 8, 9, 1, 7, 6, 8, 7, 101, 13, 1, 0, 0, 6, 95, 10, 1, 6, 6, 28, 75, 12, 1, 1, 1, 5, 95, 11, 1, 5, 5, 29, 75, 4, 1, 2, 2, 3, 93, 0, 3, 3, 30, 3, 76, 89, 64, 22, 55, 54, 46, 45, 44, 43, 35, 34, 33, 32, 17, 17, 24, 17, 17, 17, 17, 24, 16, 14, 7, 29, 43, 1, 34, 14, 2, 21, 20, 30, 2, 51, 19, 51, 21, 33, 53, 51, 17, 46, 3, 53, 52, 62, 2, 55, 17, 35, 53, 33, 21, 35, 17, 30, 3, 21, 20, 14, 2, 7, 53, 50, 62, 2, 53, 52, 46, 2, 35, 2, 16, 66, 106, 74, 40, 40, 74, 106, 66, 173, 100, 254, 139, 100, 126, 179, 112, 52, 52, 112, 179, 126, 125, 1, 167, 125, 126, 179, 112, 52, 52, 112, 179, 126, 66, 106, 74, 40, 40, 74, 106, 66, 3, 195, 50, 103, 159, 108, 108, 159, 103, 50, 254, 117, 123, 123, 1, 16, 4, 97, 152, 192, 98, 98, 192, 152, 97, 4, 1, 114, 123, 123, 254, 142, 4, 97, 152, 192, 98, 98, 192, 152, 97, 4, 123, 50, 103, 159, 108, 108, 159, 103, 50, 0, 1, 0, 59, 0, 0, 4, 165, 4, 62, 0, 27, 0, 107, 64, 9, 24, 17, 10, 3, 4, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 30, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 28, 75, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 27, 8, 76, 27, 64, 30, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 28, 75, 10, 9, 7, 3, 0, 0, 8, 93, 12, 11, 2, 8, 8, 29, 8, 76, 89, 64, 22, 0, 0, 0, 27, 0, 27, 26, 25, 23, 22, 17, 18, 17, 17, 18, 17, 17, 18, 17, 13, 7, 29, 43, 51, 53, 51, 1, 1, 35, 53, 33, 21, 35, 1, 1, 35, 53, 33, 21, 35, 1, 1, 51, 21, 33, 53, 51, 3, 3, 51, 21, 59, 123, 1, 75, 254, 181, 123, 1, 182, 87, 1, 5, 1, 4, 103, 1, 105, 117, 254, 181, 1, 74, 118, 254, 67, 99, 253, 252, 100, 123, 1, 164, 1, 163, 124, 124, 254, 181, 1, 75, 124, 124, 254, 92, 254, 93, 123, 123, 1, 65, 254, 191, 123, 0, 0, 0, 1, 0, 73, 254, 167, 4, 140, 4, 62, 0, 22, 0, 194, 75, 176, 16, 80, 88, 64, 41, 9, 7, 2, 3, 0, 0, 1, 93, 8, 1, 1, 1, 28, 75, 11, 10, 6, 3, 3, 3, 5, 93, 0, 5, 5, 27, 75, 11, 10, 6, 3, 3, 3, 4, 93, 0, 4, 4, 30, 4, 76, 27, 75, 176, 38, 80, 88, 64, 33, 0, 4, 3, 4, 81, 9, 7, 2, 3, 0, 0, 1, 93, 8, 1, 1, 1, 28, 75, 11, 10, 6, 3, 3, 3, 5, 93, 0, 5, 5, 27, 5, 76, 27, 75, 176, 42, 80, 88, 64, 34, 6, 1, 3, 0, 4, 3, 4, 97, 9, 7, 2, 3, 0, 0, 1, 93, 8, 1, 1, 1, 28, 75, 11, 1, 10, 10, 5, 93, 0, 5, 5, 27, 5, 76, 27, 64, 34, 6, 1, 3, 0, 4, 3, 4, 97, 9, 7, 2, 3, 0, 0, 1, 93, 8, 1, 1, 1, 28, 75, 11, 1, 10, 10, 5, 93, 0, 5, 5, 29, 5, 76, 89, 89, 89, 64, 20, 0, 0, 0, 22, 0, 22, 21, 20, 17, 17, 17, 17, 18, 17, 17, 17, 17, 12, 7, 29, 43, 37, 17, 35, 53, 33, 21, 35, 3, 51, 21, 17, 35, 17, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 3, 89, 99, 1, 150, 110, 1, 111, 180, 252, 113, 110, 110, 1, 149, 98, 136, 3, 59, 123, 123, 252, 184, 123, 254, 167, 1, 89, 123, 3, 72, 123, 123, 252, 197, 0, 0, 0, 1, 0, 63, 0, 0, 4, 89, 4, 62, 0, 32, 0, 116, 64, 10, 12, 1, 2, 1, 25, 1, 9, 2, 2, 74, 75, 176, 42, 80, 88, 64, 35, 0, 2, 0, 9, 6, 2, 9, 103, 11, 10, 5, 3, 4, 1, 1, 0, 93, 4, 1, 0, 0, 28, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 27, 7, 76, 27, 64, 35, 0, 2, 0, 9, 6, 2, 9, 103, 11, 10, 5, 3, 4, 1, 1, 0, 93, 4, 1, 0, 0, 28, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 29, 7, 76, 89, 64, 20, 0, 0, 0, 32, 0, 32, 28, 26, 17, 17, 17, 17, 17, 18, 37, 17, 17, 12, 7, 29, 43, 19, 53, 33, 21, 35, 21, 20, 22, 23, 22, 51, 50, 55, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 6, 35, 34, 39, 38, 17, 53, 63, 1, 81, 80, 18, 35, 63, 107, 102, 150, 80, 1, 142, 120, 120, 254, 74, 120, 174, 120, 187, 103, 88, 3, 195, 123, 123, 161, 133, 73, 34, 63, 87, 1, 121, 123, 123, 252, 184, 123, 123, 1, 77, 80, 108, 92, 1, 8, 123, 0, 1, 0, 70, 0, 0, 4, 135, 4, 62, 0, 27, 0, 157, 75, 176, 38, 80, 88, 64, 32, 11, 9, 7, 5, 3, 5, 1, 1, 2, 93, 10, 6, 2, 2, 2, 28, 75, 12, 8, 4, 3, 0, 0, 13, 93, 14, 1, 13, 13, 27, 13, 76, 27, 75, 176, 42, 80, 88, 64, 38, 12, 1, 0, 4, 13, 4, 0, 112, 11, 9, 7, 5, 3, 5, 1, 1, 2, 93, 10, 6, 2, 2, 2, 28, 75, 8, 1, 4, 4, 13, 93, 14, 1, 13, 13, 27, 13, 76, 27, 64, 38, 12, 1, 0, 4, 13, 4, 0, 112, 11, 9, 7, 5, 3, 5, 1, 1, 2, 93, 10, 6, 2, 2, 2, 28, 75, 8, 1, 4, 4, 13, 93, 14, 1, 13, 13, 29, 13, 76, 89, 89, 64, 26, 0, 0, 0, 27, 0, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 7, 29, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 17, 35, 53, 51, 21, 35, 17, 51, 17, 35, 53, 33, 21, 35, 17, 51, 21, 70, 60, 60, 1, 14, 40, 230, 40, 249, 40, 230, 40, 1, 14, 60, 60, 123, 3, 72, 123, 123, 252, 197, 3, 59, 123, 123, 252, 197, 3, 59, 123, 123, 252, 184, 123, 0, 0, 1, 0, 70, 254, 167, 4, 135, 4, 62, 0, 29, 0, 218, 75, 176, 16, 80, 88, 64, 45, 11, 9, 7, 5, 3, 5, 1, 1, 2, 93, 10, 6, 2, 2, 2, 28, 75, 12, 8, 4, 3, 0, 0, 14, 93, 15, 1, 14, 14, 27, 75, 12, 8, 4, 3, 0, 0, 13, 93, 0, 13, 13, 30, 13, 76, 27, 75, 176, 38, 80, 88, 64, 37, 0, 13, 0, 13, 81, 11, 9, 7, 5, 3, 5, 1, 1, 2, 93, 10, 6, 2, 2, 2, 28, 75, 12, 8, 4, 3, 0, 0, 14, 93, 15, 1, 14, 14, 27, 14, 76, 27, 75, 176, 42, 80, 88, 64, 38, 12, 1, 0, 0, 13, 0, 13, 97, 11, 9, 7, 5, 3, 5, 1, 1, 2, 93, 10, 6, 2, 2, 2, 28, 75, 8, 1, 4, 4, 14, 93, 15, 1, 14, 14, 27, 14, 76, 27, 64, 38, 12, 1, 0, 0, 13, 0, 13, 97, 11, 9, 7, 5, 3, 5, 1, 1, 2, 93, 10, 6, 2, 2, 2, 28, 75, 8, 1, 4, 4, 14, 93, 15, 1, 14, 14, 29, 14, 76, 89, 89, 89, 64, 28, 0, 0, 0, 29, 0, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 7, 29, 43, 51, 53, 51, 17, 35, 53, 51, 21, 35, 17, 51, 17, 35, 53, 51, 21, 35, 17, 51, 17, 35, 53, 51, 21, 35, 17, 51, 17, 35, 17, 70, 40, 40, 250, 40, 232, 40, 249, 40, 232, 40, 250, 40, 76, 180, 123, 3, 72, 123, 123, 252, 197, 3, 59, 123, 123, 252, 197, 3, 59, 123, 123, 252, 184, 254, 44, 1, 89, 0, 2, 0, 40, 0, 0, 4, 120, 4, 62, 0, 14, 0, 22, 0, 93, 75, 176, 42, 80, 88, 64, 31, 0, 3, 0, 6, 0, 3, 6, 103, 0, 1, 1, 2, 93, 0, 2, 2, 28, 75, 5, 1, 0, 0, 4, 93, 7, 1, 4, 4, 27, 4, 76, 27, 64, 31, 0, 3, 0, 6, 0, 3, 6, 103, 0, 1, 1, 2, 93, 0, 2, 2, 28, 75, 5, 1, 0, 0, 4, 93, 7, 1, 4, 4, 29, 4, 76, 89, 64, 17, 0, 0, 22, 20, 17, 15, 0, 14, 0, 13, 33, 17, 17, 17, 8, 7, 24, 43, 51, 53, 51, 17, 33, 53, 33, 17, 51, 50, 22, 21, 20, 6, 33, 39, 51, 32, 53, 52, 38, 35, 35, 246, 120, 254, 186, 2, 11, 107, 247, 227, 246, 254, 255, 78, 91, 1, 24, 120, 156, 95, 123, 3, 72, 123, 254, 79, 152, 169, 170, 162, 123, 213, 122, 72, 0, 0, 0, 0, 3, 0, 50, 0, 0, 4, 165, 4, 62, 0, 14, 0, 22, 0, 34, 0, 123, 75, 176, 42, 80, 88, 64, 38, 0, 3, 0, 6, 0, 3, 6, 103, 10, 8, 2, 1, 1, 2, 93, 9, 1, 2, 2, 28, 75, 11, 7, 5, 3, 0, 0, 4, 93, 14, 12, 13, 3, 4, 4, 27, 4, 76, 27, 64, 38, 0, 3, 0, 6, 0, 3, 6, 103, 10, 8, 2, 1, 1, 2, 93, 9, 1, 2, 2, 28, 75, 11, 7, 5, 3, 0, 0, 4, 93, 14, 12, 13, 3, 4, 4, 29, 4, 76, 89, 64, 33, 23, 23, 0, 0, 23, 34, 23, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 22, 20, 17, 15, 0, 14, 0, 13, 33, 17, 17, 17, 15, 7, 24, 43, 51, 53, 51, 17, 35, 53, 51, 17, 51, 50, 22, 21, 20, 6, 35, 39, 51, 50, 53, 52, 38, 35, 35, 1, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 21, 50, 70, 70, 230, 87, 197, 227, 246, 207, 38, 71, 240, 100, 136, 75, 2, 57, 70, 70, 1, 64, 70, 70, 123, 3, 72, 123, 254, 79, 152, 164, 175, 162, 123, 218, 117, 72, 253, 238, 123, 3, 72, 123, 123, 252, 184, 123, 0, 0, 2, 0, 100, 0, 0, 4, 75, 4, 62, 0, 14, 0, 22, 0, 93, 75, 176, 42, 80, 88, 64, 31, 0, 3, 0, 6, 0, 3, 6, 103, 0, 1, 1, 2, 93, 0, 2, 2, 28, 75, 5, 1, 0, 0, 4, 93, 7, 1, 4, 4, 27, 4, 76, 27, 64, 31, 0, 3, 0, 6, 0, 3, 6, 103, 0, 1, 1, 2, 93, 0, 2, 2, 28, 75, 5, 1, 0, 0, 4, 93, 7, 1, 4, 4, 29, 4, 76, 89, 64, 17, 0, 0, 22, 20, 17, 15, 0, 14, 0, 13, 33, 17, 17, 17, 8, 7, 24, 43, 51, 53, 51, 17, 35, 53, 33, 17, 51, 32, 22, 21, 20, 4, 33, 39, 51, 32, 53, 52, 38, 35, 35, 100, 160, 160, 1, 101, 117, 1, 32, 237, 254, 248, 254, 222, 88, 101, 1, 75, 138, 189, 105, 123, 3, 72, 123, 254, 106, 152, 170, 196, 162, 123, 235, 127, 72, 0, 0, 0, 1, 0, 145, 255, 231, 4, 63, 4, 86, 0, 24, 0, 64, 64, 61, 14, 1, 3, 5, 0, 1, 0, 1, 24, 1, 6, 0, 3, 74, 0, 4, 3, 2, 3, 4, 2, 126, 0, 2, 0, 1, 0, 2, 1, 101, 0, 3, 3, 5, 95, 0, 5, 5, 33, 75, 0, 0, 0, 6, 95, 0, 6, 6, 34, 6, 76, 36, 34, 18, 33, 17, 17, 33, 7, 7, 27, 43, 55, 22, 51, 32, 19, 33, 53, 33, 2, 33, 34, 7, 7, 35, 17, 54, 51, 32, 0, 17, 16, 0, 33, 34, 39, 145, 165, 193, 1, 95, 25, 254, 37, 1, 219, 20, 254, 172, 98, 106, 32, 123, 175, 183, 1, 24, 1, 33, 254, 224, 254, 243, 202, 183, 178, 72, 1, 141, 123, 1, 105, 19, 206, 1, 50, 42, 254, 226, 254, 235, 254, 235, 254, 217, 67, 0, 0, 0, 0, 2, 0, 45, 255, 229, 4, 150, 4, 89, 0, 26, 0, 38, 0, 140, 75, 176, 42, 80, 88, 64, 52, 0, 4, 0, 7, 0, 4, 7, 101, 0, 11, 11, 5, 95, 0, 5, 5, 33, 75, 3, 1, 1, 1, 2, 93, 0, 2, 2, 28, 75, 8, 1, 0, 0, 9, 93, 12, 1, 9, 9, 27, 75, 0, 10, 10, 6, 95, 0, 6, 6, 34, 6, 76, 27, 64, 52, 0, 4, 0, 7, 0, 4, 7, 101, 0, 11, 11, 5, 95, 0, 5, 5, 33, 75, 3, 1, 1, 1, 2, 93, 0, 2, 2, 28, 75, 8, 1, 0, 0, 9, 93, 12, 1, 9, 9, 29, 75, 0, 10, 10, 6, 95, 0, 6, 6, 34, 6, 76, 89, 64, 22, 0, 0, 37, 35, 31, 29, 0, 26, 0, 26, 17, 18, 36, 34, 17, 17, 17, 17, 17, 13, 7, 29, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 54, 54, 51, 50, 18, 17, 16, 2, 35, 34, 2, 53, 35, 17, 51, 21, 1, 20, 22, 51, 50, 54, 53, 52, 38, 35, 34, 6, 45, 50, 50, 1, 24, 50, 142, 24, 199, 154, 171, 209, 209, 171, 164, 213, 142, 50, 1, 23, 107, 83, 82, 108, 108, 82, 81, 109, 123, 3, 72, 123, 123, 254, 177, 241, 244, 254, 216, 254, 238, 254, 238, 254, 216, 1, 36, 240, 254, 130, 123, 2, 38, 222, 232, 231, 216, 216, 231, 228, 0, 0, 2, 0, 78, 0, 0, 4, 77, 4, 62, 0, 10, 0, 45, 0, 107, 64, 11, 19, 1, 8, 1, 1, 74, 43, 1, 2, 1, 73, 75, 176, 42, 80, 88, 64, 33, 0, 1, 0, 8, 2, 1, 8, 101, 4, 1, 0, 0, 3, 93, 0, 3, 3, 28, 75, 7, 5, 2, 2, 2, 6, 93, 9, 1, 6, 6, 27, 6, 76, 27, 64, 33, 0, 1, 0, 8, 2, 1, 8, 101, 4, 1, 0, 0, 3, 93, 0, 3, 3, 28, 75, 7, 5, 2, 2, 2, 6, 93, 9, 1, 6, 6, 29, 6, 76, 89, 64, 14, 45, 44, 17, 17, 17, 17, 17, 62, 17, 38, 32, 10, 7, 29, 43, 1, 35, 34, 6, 21, 20, 30, 2, 51, 51, 1, 51, 54, 54, 55, 55, 54, 54, 55, 38, 53, 52, 62, 4, 51, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 35, 6, 6, 7, 7, 21, 33, 3, 56, 179, 118, 117, 31, 61, 92, 62, 168, 253, 22, 109, 17, 37, 23, 38, 28, 77, 41, 248, 36, 64, 89, 107, 120, 64, 1, 165, 80, 80, 254, 155, 80, 211, 35, 73, 38, 66, 254, 189, 3, 195, 95, 86, 45, 76, 55, 30, 254, 59, 28, 68, 42, 70, 52, 86, 23, 68, 219, 67, 98, 68, 42, 24, 8, 123, 252, 184, 123, 123, 1, 73, 35, 113, 66, 115, 123, 0, 0, 3, 0, 123, 255, 231, 4, 81, 6, 68, 0, 3, 0, 24, 0, 32, 0, 63, 64, 60, 11, 1, 3, 2, 12, 1, 4, 3, 2, 74, 0, 1, 0, 1, 131, 0, 0, 5, 0, 131, 0, 6, 0, 2, 3, 6, 2, 101, 0, 7, 7, 5, 95, 0, 5, 5, 33, 75, 0, 3, 3, 4, 95, 0, 4, 4, 34, 4, 76, 34, 18, 38, 35, 35, 17, 17, 16, 8, 7, 28, 43, 1, 35, 1, 51, 1, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 3, 4, 123, 254, 191, 228, 2, 37, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 5, 3, 1, 65, 251, 182, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 0, 0, 0, 4, 0, 123, 255, 231, 4, 81, 5, 200, 0, 3, 0, 7, 0, 28, 0, 36, 0, 140, 64, 10, 15, 1, 5, 4, 16, 1, 6, 5, 2, 74, 75, 176, 42, 80, 88, 64, 43, 0, 8, 0, 4, 5, 8, 4, 101, 11, 3, 10, 3, 1, 1, 0, 93, 2, 1, 0, 0, 26, 75, 0, 9, 9, 7, 95, 0, 7, 7, 33, 75, 0, 5, 5, 6, 95, 0, 6, 6, 34, 6, 76, 27, 64, 41, 2, 1, 0, 11, 3, 10, 3, 1, 7, 0, 1, 101, 0, 8, 0, 4, 5, 8, 4, 101, 0, 9, 9, 7, 95, 0, 7, 7, 33, 75, 0, 5, 5, 6, 95, 0, 6, 6, 34, 6, 76, 89, 64, 30, 4, 4, 0, 0, 34, 32, 30, 29, 27, 25, 19, 17, 14, 12, 9, 8, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 12, 7, 21, 43, 1, 53, 51, 21, 33, 53, 51, 21, 19, 33, 22, 23, 22, 33, 50, 55, 21, 6, 35, 32, 39, 38, 17, 52, 55, 54, 51, 32, 17, 37, 33, 53, 16, 35, 34, 7, 6, 1, 59, 197, 1, 16, 197, 124, 252, 253, 14, 27, 91, 1, 5, 161, 188, 175, 200, 254, 253, 160, 159, 148, 147, 242, 1, 189, 252, 255, 2, 47, 249, 154, 84, 59, 5, 3, 197, 197, 197, 197, 252, 247, 135, 60, 205, 105, 149, 87, 159, 159, 1, 2, 251, 154, 154, 253, 225, 62, 46, 1, 56, 123, 86, 0, 0, 0, 0, 1, 0, 47, 254, 117, 4, 32, 6, 43, 0, 42, 0, 206, 64, 15, 36, 12, 2, 10, 9, 25, 1, 8, 11, 24, 1, 7, 8, 3, 74, 75, 176, 40, 80, 88, 64, 50, 0, 3, 0, 2, 1, 3, 2, 101, 4, 1, 1, 5, 1, 0, 6, 1, 0, 101, 0, 9, 9, 6, 95, 0, 6, 6, 28, 75, 12, 1, 10, 10, 11, 93, 0, 11, 11, 27, 75, 0, 8, 8, 7, 95, 0, 7, 7, 30, 7, 76, 27, 75, 176, 42, 80, 88, 64, 48, 0, 3, 0, 2, 1, 3, 2, 101, 4, 1, 1, 5, 1, 0, 6, 1, 0, 101, 0, 6, 0, 9, 10, 6, 9, 103, 12, 1, 10, 10, 11, 93, 0, 11, 11, 27, 75, 0, 8, 8, 7, 95, 0, 7, 7, 30, 7, 76, 27, 64, 48, 0, 3, 0, 2, 1, 3, 2, 101, 4, 1, 1, 5, 1, 0, 6, 1, 0, 101, 0, 6, 0, 9, 10, 6, 9, 103, 12, 1, 10, 10, 11, 93, 0, 11, 11, 29, 75, 0, 8, 8, 7, 95, 0, 7, 7, 30, 7, 76, 89, 89, 64, 20, 42, 41, 40, 39, 38, 37, 35, 33, 35, 36, 36, 17, 17, 17, 17, 17, 16, 13, 7, 29, 43, 19, 35, 53, 51, 53, 35, 53, 33, 17, 33, 21, 33, 17, 54, 55, 54, 51, 32, 17, 17, 20, 6, 35, 34, 39, 53, 22, 51, 50, 55, 54, 55, 17, 16, 35, 34, 3, 17, 51, 21, 33, 53, 51, 205, 158, 158, 123, 1, 65, 1, 54, 254, 202, 69, 68, 96, 119, 1, 45, 181, 144, 68, 76, 62, 63, 80, 33, 33, 1, 163, 150, 143, 111, 254, 80, 123, 4, 164, 123, 145, 123, 254, 244, 123, 254, 151, 105, 53, 76, 254, 124, 253, 27, 145, 182, 20, 130, 27, 50, 48, 129, 2, 189, 1, 1, 254, 254, 253, 236, 123, 123, 0, 0, 2, 0, 100, 0, 0, 4, 112, 6, 68, 0, 3, 0, 17, 0, 172, 75, 176, 10, 80, 88, 64, 41, 0, 0, 1, 0, 131, 9, 1, 1, 6, 1, 131, 0, 7, 5, 2, 5, 7, 112, 8, 1, 5, 5, 6, 93, 0, 6, 6, 28, 75, 4, 1, 2, 2, 3, 93, 0, 3, 3, 27, 3, 76, 27, 75, 176, 42, 80, 88, 64, 42, 0, 0, 1, 0, 131, 9, 1, 1, 6, 1, 131, 0, 7, 5, 2, 5, 7, 2, 126, 8, 1, 5, 5, 6, 93, 0, 6, 6, 28, 75, 4, 1, 2, 2, 3, 93, 0, 3, 3, 27, 3, 76, 27, 64, 42, 0, 0, 1, 0, 131, 9, 1, 1, 6, 1, 131, 0, 7, 5, 2, 5, 7, 2, 126, 8, 1, 5, 5, 6, 93, 0, 6, 6, 28, 75, 4, 1, 2, 2, 3, 93, 0, 3, 3, 29, 3, 76, 89, 89, 64, 24, 0, 0, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 0, 3, 0, 3, 17, 10, 7, 21, 43, 1, 19, 51, 1, 3, 33, 21, 33, 53, 51, 17, 35, 53, 33, 17, 35, 53, 33, 2, 7, 216, 228, 254, 191, 123, 1, 16, 253, 77, 222, 222, 4, 12, 123, 254, 18, 5, 3, 1, 65, 254, 191, 251, 120, 123, 123, 3, 72, 123, 254, 159, 230, 0, 1, 0, 140, 255, 231, 4, 48, 4, 86, 0, 24, 0, 64, 64, 61, 11, 1, 3, 1, 0, 1, 6, 5, 1, 1, 0, 6, 3, 74, 0, 2, 3, 4, 3, 2, 4, 126, 0, 4, 0, 5, 6, 4, 5, 101, 0, 3, 3, 1, 95, 0, 1, 1, 33, 75, 0, 6, 6, 0, 95, 0, 0, 0, 34, 0, 76, 33, 17, 17, 34, 18, 36, 34, 7, 7, 27, 43, 37, 21, 6, 35, 32, 0, 17, 16, 0, 33, 50, 23, 17, 35, 39, 38, 35, 32, 3, 33, 21, 33, 18, 33, 50, 4, 48, 183, 192, 254, 243, 254, 224, 1, 33, 1, 24, 173, 175, 123, 32, 106, 88, 254, 172, 20, 1, 209, 254, 47, 25, 1, 95, 183, 178, 136, 67, 1, 39, 1, 21, 1, 21, 1, 30, 42, 254, 226, 186, 19, 254, 151, 123, 254, 115, 0, 0, 0, 0, 1, 0, 173, 255, 231, 4, 64, 4, 87, 0, 41, 0, 58, 64, 55, 20, 1, 4, 2, 0, 1, 5, 1, 2, 74, 0, 3, 4, 0, 4, 3, 0, 126, 0, 0, 1, 4, 0, 1, 124, 0, 4, 4, 2, 95, 0, 2, 2, 33, 75, 0, 1, 1, 5, 95, 0, 5, 5, 34, 5, 76, 45, 34, 18, 43, 34, 17, 6, 7, 26, 43, 55, 17, 51, 23, 22, 51, 50, 53, 52, 39, 38, 39, 39, 38, 39, 38, 53, 16, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 21, 20, 23, 23, 22, 23, 22, 21, 20, 7, 6, 35, 34, 173, 123, 25, 196, 137, 238, 40, 40, 103, 204, 171, 78, 77, 1, 176, 221, 181, 123, 25, 109, 146, 110, 61, 72, 206, 202, 168, 73, 72, 123, 123, 220, 226, 61, 1, 41, 183, 76, 168, 66, 36, 37, 27, 54, 45, 73, 71, 118, 1, 61, 72, 254, 226, 181, 53, 35, 41, 85, 112, 54, 53, 44, 68, 67, 115, 157, 90, 91, 0, 0, 0, 2, 0, 148, 0, 0, 4, 81, 6, 43, 0, 9, 0, 13, 0, 99, 75, 176, 42, 80, 88, 64, 32, 0, 5, 8, 1, 6, 2, 5, 6, 101, 0, 1, 1, 2, 93, 0, 2, 2, 28, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 27, 4, 76, 27, 64, 32, 0, 5, 8, 1, 6, 2, 5, 6, 101, 0, 1, 1, 2, 93, 0, 2, 2, 28, 75, 3, 1, 0, 0, 4, 93, 7, 1, 4, 4, 29, 4, 76, 89, 64, 21, 10, 10, 0, 0, 10, 13, 10, 13, 12, 11, 0, 9, 0, 9, 17, 17, 17, 17, 9, 7, 24, 43, 51, 53, 33, 17, 33, 53, 33, 17, 33, 21, 1, 53, 51, 21, 148, 1, 134, 254, 122, 2, 75, 1, 114, 253, 191, 222, 123, 3, 71, 124, 252, 61, 123, 5, 52, 247, 247, 0, 3, 0, 148, 0, 0, 4, 81, 5, 210, 0, 3, 0, 7, 0, 17, 0, 118, 75, 176, 42, 80, 88, 64, 37, 10, 3, 9, 3, 1, 1, 0, 93, 2, 1, 0, 0, 26, 75, 0, 5, 5, 6, 93, 0, 6, 6, 28, 75, 7, 1, 4, 4, 8, 93, 11, 1, 8, 8, 27, 8, 76, 27, 64, 35, 2, 1, 0, 10, 3, 9, 3, 1, 6, 0, 1, 101, 0, 5, 5, 6, 93, 0, 6, 6, 28, 75, 7, 1, 4, 4, 8, 93, 11, 1, 8, 8, 29, 8, 76, 89, 64, 32, 8, 8, 4, 4, 0, 0, 8, 17, 8, 17, 16, 15, 14, 13, 12, 11, 10, 9, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 12, 7, 21, 43, 1, 53, 51, 21, 33, 53, 51, 21, 1, 53, 33, 17, 33, 53, 33, 17, 33, 21, 1, 37, 197, 1, 16, 197, 252, 213, 1, 134, 254, 122, 2, 75, 1, 114, 5, 13, 197, 197, 197, 197, 250, 243, 123, 3, 71, 124, 252, 61, 123, 0, 0, 0, 0, 2, 0, 159, 254, 92, 3, 147, 6, 43, 0, 19, 0, 23, 0, 62, 64, 59, 0, 1, 4, 1, 1, 74, 0, 0, 2, 1, 2, 0, 1, 126, 0, 5, 7, 1, 6, 3, 5, 6, 101, 0, 2, 2, 3, 93, 0, 3, 3, 28, 75, 0, 1, 1, 4, 95, 0, 4, 4, 35, 4, 76, 20, 20, 20, 23, 20, 23, 18, 36, 17, 20, 34, 17, 8, 7, 26, 43, 19, 17, 51, 23, 22, 51, 50, 55, 54, 53, 17, 33, 53, 33, 17, 20, 7, 6, 35, 34, 1, 53, 51, 21, 159, 123, 31, 68, 79, 132, 56, 57, 254, 68, 2, 130, 113, 113, 201, 139, 1, 100, 222, 254, 168, 1, 63, 218, 53, 96, 96, 231, 3, 67, 124, 252, 4, 230, 128, 128, 6, 216, 247, 247, 0, 0, 0, 2, 0, 14, 0, 0, 4, 165, 4, 62, 0, 25, 0, 34, 0, 99, 75, 176, 42, 80, 88, 64, 33, 0, 3, 0, 8, 0, 3, 8, 103, 5, 1, 1, 1, 2, 93, 0, 2, 2, 28, 75, 7, 1, 0, 0, 4, 95, 9, 6, 2, 4, 4, 27, 4, 76, 27, 64, 33, 0, 3, 0, 8, 0, 3, 8, 103, 5, 1, 1, 1, 2, 93, 0, 2, 2, 28, 75, 7, 1, 0, 0, 4, 95, 9, 6, 2, 4, 4, 29, 4, 76, 89, 64, 19, 0, 0, 34, 32, 28, 26, 0, 25, 0, 25, 17, 36, 33, 17, 19, 33, 10, 7, 26, 43, 51, 53, 51, 50, 54, 55, 17, 35, 53, 33, 17, 51, 50, 22, 21, 20, 6, 35, 35, 17, 35, 17, 2, 6, 7, 6, 37, 51, 50, 54, 53, 52, 38, 35, 35, 14, 22, 89, 52, 1, 100, 2, 152, 55, 182, 210, 225, 176, 226, 204, 2, 40, 73, 73, 2, 60, 51, 89, 123, 105, 105, 53, 123, 101, 187, 2, 40, 123, 254, 98, 157, 157, 164, 194, 3, 195, 254, 249, 254, 147, 232, 51, 52, 131, 97, 125, 110, 86, 0, 0, 2, 0, 17, 0, 0, 4, 164, 4, 62, 0, 30, 0, 39, 0, 120, 75, 176, 42, 80, 88, 64, 39, 11, 1, 7, 14, 1, 0, 1, 7, 0, 103, 10, 8, 6, 3, 4, 4, 5, 93, 9, 1, 5, 5, 28, 75, 13, 3, 2, 1, 1, 2, 93, 15, 12, 2, 2, 2, 27, 2, 76, 27, 64, 39, 11, 1, 7, 14, 1, 0, 1, 7, 0, 103, 10, 8, 6, 3, 4, 4, 5, 93, 9, 1, 5, 5, 28, 75, 13, 3, 2, 1, 1, 2, 93, 15, 12, 2, 2, 2, 29, 2, 76, 89, 64, 28, 0, 0, 39, 37, 33, 31, 0, 30, 0, 29, 25, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 7, 29, 43, 33, 17, 33, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 33, 17, 35, 53, 33, 21, 35, 17, 51, 50, 22, 21, 20, 6, 35, 39, 51, 50, 54, 53, 52, 38, 35, 35, 2, 49, 254, 248, 100, 254, 132, 100, 100, 1, 74, 50, 1, 8, 50, 1, 74, 100, 55, 182, 210, 225, 176, 46, 51, 89, 123, 105, 105, 53, 2, 37, 254, 86, 123, 123, 3, 72, 123, 123, 254, 221, 1, 35, 123, 123, 254, 221, 157, 157, 164, 194, 131, 97, 125, 110, 86, 0, 0, 0, 0, 1, 0, 34, 0, 0, 4, 142, 6, 43, 0, 35, 0, 178, 182, 23, 4, 2, 1, 0, 1, 74, 75, 176, 40, 80, 88, 64, 43, 0, 7, 0, 6, 5, 7, 6, 101, 8, 1, 5, 9, 1, 4, 10, 5, 4, 101, 0, 0, 0, 10, 95, 0, 10, 10, 28, 75, 13, 11, 3, 3, 1, 1, 2, 93, 12, 1, 2, 2, 27, 2, 76, 27, 75, 176, 42, 80, 88, 64, 41, 0, 7, 0, 6, 5, 7, 6, 101, 8, 1, 5, 9, 1, 4, 10, 5, 4, 101, 0, 10, 0, 0, 1, 10, 0, 103, 13, 11, 3, 3, 1, 1, 2, 93, 12, 1, 2, 2, 27, 2, 76, 27, 64, 41, 0, 7, 0, 6, 5, 7, 6, 101, 8, 1, 5, 9, 1, 4, 10, 5, 4, 101, 0, 10, 0, 0, 1, 10, 0, 103, 13, 11, 3, 3, 1, 1, 2, 93, 12, 1, 2, 2, 29, 2, 76, 89, 89, 64, 22, 35, 34, 33, 32, 31, 30, 28, 26, 22, 21, 17, 17, 17, 17, 17, 17, 17, 18, 33, 14, 7, 29, 43, 1, 16, 35, 34, 3, 17, 51, 21, 33, 53, 51, 17, 35, 53, 51, 53, 35, 53, 33, 17, 33, 21, 33, 17, 54, 55, 54, 51, 32, 17, 17, 51, 21, 33, 53, 51, 3, 78, 163, 150, 143, 111, 254, 80, 123, 158, 158, 123, 1, 65, 1, 54, 254, 202, 69, 68, 96, 119, 1, 45, 123, 254, 65, 127, 2, 144, 1, 1, 254, 254, 253, 236, 123, 123, 4, 41, 123, 145, 123, 254, 244, 123, 254, 151, 105, 53, 76, 254, 124, 253, 218, 123, 123, 0, 0, 0, 0, 2, 0, 125, 0, 0, 4, 74, 6, 68, 0, 57, 0, 61, 0, 172, 64, 10, 33, 1, 9, 4, 43, 1, 8, 0, 2, 74, 75, 176, 42, 80, 88, 64, 57, 0, 12, 13, 12, 131, 15, 1, 13, 2, 13, 131, 0, 4, 0, 9, 0, 4, 9, 101, 3, 1, 1, 1, 2, 95, 5, 1, 2, 2, 28, 75, 0, 6, 6, 2, 95, 5, 1, 2, 2, 28, 75, 10, 7, 2, 0, 0, 8, 93, 14, 11, 2, 8, 8, 27, 8, 76, 27, 64, 57, 0, 12, 13, 12, 131, 15, 1, 13, 2, 13, 131, 0, 4, 0, 9, 0, 4, 9, 101, 3, 1, 1, 1, 2, 95, 5, 1, 2, 2, 28, 75, 0, 6, 6, 2, 95, 5, 1, 2, 2, 28, 75, 10, 7, 2, 0, 0, 8, 93, 14, 11, 2, 8, 8, 29, 8, 76, 89, 64, 32, 58, 58, 0, 0, 58, 61, 58, 61, 60, 59, 0, 57, 0, 57, 56, 55, 54, 53, 42, 41, 40, 39, 17, 25, 33, 17, 17, 17, 17, 16, 7, 27, 43, 51, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 50, 62, 2, 55, 55, 62, 3, 51, 21, 34, 14, 2, 7, 7, 14, 3, 7, 30, 3, 23, 23, 51, 21, 33, 53, 46, 3, 39, 46, 3, 39, 35, 17, 51, 21, 17, 19, 51, 1, 125, 120, 120, 1, 141, 80, 34, 34, 48, 44, 49, 36, 32, 40, 71, 81, 98, 68, 40, 62, 54, 48, 27, 29, 20, 33, 34, 38, 25, 48, 74, 61, 51, 24, 97, 76, 254, 229, 10, 26, 28, 28, 12, 24, 34, 28, 27, 18, 138, 80, 216, 228, 254, 191, 123, 3, 72, 123, 123, 254, 150, 35, 62, 86, 51, 46, 58, 78, 48, 21, 148, 15, 35, 55, 39, 43, 30, 50, 43, 36, 15, 15, 55, 72, 85, 45, 182, 123, 122, 19, 50, 52, 50, 18, 37, 50, 38, 30, 17, 254, 152, 123, 5, 3, 1, 65, 254, 191, 0, 0, 0, 2, 0, 70, 0, 0, 4, 135, 6, 68, 0, 27, 0, 31, 0, 125, 64, 9, 27, 14, 13, 0, 4, 0, 3, 1, 74, 75, 176, 42, 80, 88, 64, 39, 0, 13, 12, 13, 131, 0, 12, 4, 12, 131, 8, 6, 5, 3, 3, 3, 4, 93, 7, 1, 4, 4, 28, 75, 11, 9, 2, 3, 0, 0, 1, 93, 10, 1, 1, 1, 27, 1, 76, 27, 64, 39, 0, 13, 12, 13, 131, 0, 12, 4, 12, 131, 8, 6, 5, 3, 3, 3, 4, 93, 7, 1, 4, 4, 28, 75, 11, 9, 2, 3, 0, 0, 1, 93, 10, 1, 1, 1, 29, 1, 76, 89, 64, 22, 31, 30, 29, 28, 26, 25, 24, 23, 22, 21, 17, 17, 19, 17, 17, 17, 17, 17, 17, 14, 7, 29, 43, 37, 21, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 1, 53, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 3, 35, 1, 51, 1, 114, 90, 254, 122, 110, 110, 1, 134, 90, 1, 233, 90, 1, 134, 110, 110, 254, 122, 90, 122, 123, 254, 191, 228, 176, 53, 123, 123, 3, 72, 123, 123, 253, 160, 2, 46, 50, 123, 123, 252, 184, 123, 123, 2, 100, 2, 36, 1, 65, 0, 0, 2, 0, 54, 254, 92, 4, 205, 6, 43, 0, 24, 0, 34, 0, 119, 182, 22, 15, 2, 3, 1, 1, 74, 75, 176, 12, 80, 88, 64, 40, 10, 1, 8, 9, 9, 8, 110, 0, 9, 0, 11, 0, 9, 11, 104, 7, 6, 4, 3, 1, 1, 0, 93, 5, 1, 0, 0, 28, 75, 0, 3, 3, 2, 95, 0, 2, 2, 35, 2, 76, 27, 64, 39, 10, 1, 8, 9, 8, 131, 0, 9, 0, 11, 0, 9, 11, 104, 7, 6, 4, 3, 1, 1, 0, 93, 5, 1, 0, 0, 28, 75, 0, 3, 3, 2, 95, 0, 2, 2, 35, 2, 76, 89, 64, 18, 34, 32, 31, 30, 29, 27, 17, 18, 17, 17, 22, 17, 35, 17, 16, 12, 7, 29, 43, 1, 33, 21, 35, 1, 6, 6, 35, 35, 17, 51, 23, 22, 54, 55, 55, 1, 35, 53, 33, 21, 35, 1, 1, 35, 1, 51, 20, 51, 50, 53, 51, 16, 33, 32, 3, 52, 1, 153, 95, 254, 11, 64, 179, 183, 84, 124, 29, 79, 98, 62, 49, 254, 99, 97, 1, 203, 158, 1, 57, 1, 58, 162, 254, 25, 160, 173, 172, 161, 254, 179, 254, 179, 4, 62, 124, 251, 154, 143, 113, 1, 64, 196, 6, 73, 138, 113, 3, 172, 124, 124, 253, 60, 2, 196, 2, 105, 206, 206, 254, 216, 0, 1, 0, 73, 254, 167, 4, 132, 4, 62, 0, 23, 0, 202, 75, 176, 16, 80, 88, 64, 34, 10, 8, 2, 3, 0, 0, 1, 93, 9, 1, 1, 1, 28, 75, 12, 11, 7, 3, 3, 3, 4, 93, 6, 1, 4, 4, 27, 75, 0, 5, 5, 30, 5, 76, 27, 75, 176, 38, 80, 88, 64, 34, 0, 5, 4, 5, 132, 10, 8, 2, 3, 0, 0, 1, 93, 9, 1, 1, 1, 28, 75, 12, 11, 7, 3, 3, 3, 4, 93, 6, 1, 4, 4, 27, 4, 76, 27, 75, 176, 42, 80, 88, 64, 40, 7, 1, 3, 11, 4, 11, 3, 112, 0, 5, 4, 5, 132, 10, 8, 2, 3, 0, 0, 1, 93, 9, 1, 1, 1, 28, 75, 12, 1, 11, 11, 4, 93, 6, 1, 4, 4, 27, 4, 76, 27, 64, 40, 7, 1, 3, 11, 4, 11, 3, 112, 0, 5, 4, 5, 132, 10, 8, 2, 3, 0, 0, 1, 93, 9, 1, 1, 1, 28, 75, 12, 1, 11, 11, 4, 93, 6, 1, 4, 4, 29, 4, 76, 89, 89, 89, 64, 22, 0, 0, 0, 23, 0, 23, 22, 21, 20, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13, 7, 29, 43, 37, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 17, 35, 17, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 3, 81, 100, 1, 151, 110, 110, 254, 61, 180, 254, 60, 110, 110, 1, 151, 100, 136, 3, 59, 123, 123, 252, 184, 123, 254, 167, 1, 89, 123, 3, 72, 123, 123, 252, 197, 0, 1, 0, 100, 0, 0, 4, 112, 6, 202, 0, 13, 0, 116, 75, 176, 10, 80, 88, 64, 29, 0, 5, 4, 4, 5, 110, 6, 1, 3, 3, 4, 93, 0, 4, 4, 26, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 75, 176, 42, 80, 88, 64, 28, 0, 5, 4, 5, 131, 6, 1, 3, 3, 4, 93, 0, 4, 4, 26, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 64, 26, 0, 5, 4, 5, 131, 0, 4, 6, 1, 3, 0, 4, 3, 102, 2, 1, 0, 0, 1, 93, 0, 1, 1, 29, 1, 76, 89, 89, 64, 10, 17, 17, 17, 17, 17, 17, 16, 7, 7, 27, 43, 37, 33, 21, 33, 53, 51, 17, 35, 53, 33, 17, 51, 17, 33, 2, 7, 1, 16, 253, 77, 222, 222, 3, 125, 143, 253, 151, 123, 123, 123, 4, 210, 123, 1, 2, 254, 131, 0, 0, 1, 0, 100, 0, 0, 4, 112, 5, 36, 0, 13, 0, 118, 75, 176, 11, 80, 88, 64, 29, 0, 5, 4, 4, 5, 110, 6, 1, 3, 3, 4, 93, 0, 4, 4, 28, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 75, 176, 42, 80, 88, 64, 28, 0, 5, 4, 5, 131, 6, 1, 3, 3, 4, 93, 0, 4, 4, 28, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 27, 1, 76, 27, 64, 28, 0, 5, 4, 5, 131, 6, 1, 3, 3, 4, 93, 0, 4, 4, 28, 75, 2, 1, 0, 0, 1, 93, 0, 1, 1, 29, 1, 76, 89, 89, 64, 10, 17, 17, 17, 17, 17, 17, 16, 7, 7, 27, 43, 37, 33, 21, 33, 53, 51, 17, 35, 53, 33, 53, 51, 17, 33, 2, 7, 1, 16, 253, 77, 222, 222, 3, 125, 143, 253, 151, 123, 123, 123, 3, 72, 123, 230, 254, 159, 0, 2, 0, 23, 0, 0, 4, 183, 7, 143, 0, 23, 0, 27, 0, 122, 183, 21, 11, 7, 3, 7, 3, 1, 74, 75, 176, 42, 80, 88, 64, 40, 0, 10, 9, 10, 131, 0, 9, 1, 9, 131, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 11, 8, 2, 7, 7, 57, 7, 76, 27, 64, 38, 0, 10, 9, 10, 131, 0, 9, 1, 9, 131, 0, 3, 0, 7, 0, 3, 7, 126, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 102, 11, 8, 2, 7, 7, 60, 7, 76, 89, 64, 21, 0, 0, 27, 26, 25, 24, 0, 23, 0, 23, 17, 17, 17, 19, 19, 17, 17, 17, 12, 9, 28, 43, 51, 3, 35, 53, 33, 21, 35, 19, 51, 19, 55, 19, 51, 19, 35, 53, 33, 21, 35, 3, 35, 3, 35, 3, 1, 35, 1, 51, 242, 170, 49, 1, 48, 100, 136, 10, 184, 149, 184, 9, 134, 100, 1, 18, 50, 170, 178, 186, 8, 184, 1, 67, 123, 254, 191, 228, 5, 77, 123, 123, 251, 198, 3, 204, 1, 252, 57, 4, 52, 123, 123, 250, 179, 3, 206, 252, 50, 6, 78, 1, 65, 0, 0, 2, 0, 23, 0, 0, 4, 183, 6, 68, 0, 23, 0, 27, 0, 176, 183, 21, 11, 7, 3, 7, 3, 1, 74, 75, 176, 40, 80, 88, 64, 43, 0, 9, 10, 1, 10, 9, 1, 126, 0, 3, 0, 7, 0, 3, 7, 126, 0, 10, 10, 58, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 11, 8, 2, 7, 7, 57, 7, 76, 27, 75, 176, 42, 80, 88, 64, 40, 0, 10, 9, 10, 131, 0, 9, 1, 9, 131, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 11, 8, 2, 7, 7, 57, 7, 76, 27, 64, 40, 0, 10, 9, 10, 131, 0, 9, 1, 9, 131, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 11, 8, 2, 7, 7, 60, 7, 76, 89, 89, 64, 21, 0, 0, 27, 26, 25, 24, 0, 23, 0, 23, 17, 17, 17, 19, 19, 17, 17, 17, 12, 9, 28, 43, 51, 3, 35, 53, 33, 21, 35, 19, 51, 19, 51, 19, 51, 19, 35, 53, 33, 21, 35, 3, 35, 3, 35, 3, 1, 35, 1, 51, 242, 170, 49, 1, 55, 86, 129, 2, 177, 167, 178, 2, 130, 98, 1, 16, 49, 170, 193, 179, 2, 182, 1, 75, 123, 254, 191, 228, 3, 194, 124, 124, 253, 44, 2, 173, 253, 80, 2, 215, 124, 124, 252, 62, 2, 191, 253, 65, 5, 3, 1, 65, 0, 2, 0, 23, 0, 0, 4, 183, 7, 143, 0, 23, 0, 27, 0, 128, 183, 21, 11, 7, 3, 7, 3, 1, 74, 75, 176, 42, 80, 88, 64, 41, 0, 9, 10, 9, 131, 12, 1, 10, 1, 10, 131, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 11, 8, 2, 7, 7, 57, 7, 76, 27, 64, 39, 0, 9, 10, 9, 131, 12, 1, 10, 1, 10, 131, 0, 3, 0, 7, 0, 3, 7, 126, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 102, 11, 8, 2, 7, 7, 60, 7, 76, 89, 64, 25, 24, 24, 0, 0, 24, 27, 24, 27, 26, 25, 0, 23, 0, 23, 17, 17, 17, 19, 19, 17, 17, 17, 13, 9, 28, 43, 51, 3, 35, 53, 33, 21, 35, 19, 51, 19, 55, 19, 51, 19, 35, 53, 33, 21, 35, 3, 35, 3, 35, 3, 19, 19, 51, 1, 242, 170, 49, 1, 48, 100, 136, 10, 184, 149, 184, 9, 134, 100, 1, 18, 50, 170, 178, 186, 8, 184, 75, 216, 228, 254, 191, 5, 77, 123, 123, 251, 198, 3, 204, 1, 252, 57, 4, 52, 123, 123, 250, 179, 3, 206, 252, 50, 6, 78, 1, 65, 254, 191, 0, 0, 0, 2, 0, 23, 0, 0, 4, 183, 6, 68, 0, 23, 0, 27, 0, 183, 183, 21, 11, 7, 3, 7, 3, 1, 74, 75, 176, 40, 80, 88, 64, 44, 12, 1, 10, 9, 1, 9, 10, 1, 126, 0, 3, 0, 7, 0, 3, 7, 126, 0, 9, 9, 58, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 11, 8, 2, 7, 7, 57, 7, 76, 27, 75, 176, 42, 80, 88, 64, 41, 0, 9, 10, 9, 131, 12, 1, 10, 1, 10, 131, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 11, 8, 2, 7, 7, 57, 7, 76, 27, 64, 41, 0, 9, 10, 9, 131, 12, 1, 10, 1, 10, 131, 0, 3, 0, 7, 0, 3, 7, 126, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 11, 8, 2, 7, 7, 60, 7, 76, 89, 89, 64, 25, 24, 24, 0, 0, 24, 27, 24, 27, 26, 25, 0, 23, 0, 23, 17, 17, 17, 19, 19, 17, 17, 17, 13, 9, 28, 43, 51, 3, 35, 53, 33, 21, 35, 19, 51, 19, 51, 19, 51, 19, 35, 53, 33, 21, 35, 3, 35, 3, 35, 3, 19, 19, 51, 1, 242, 170, 49, 1, 55, 86, 129, 2, 177, 167, 178, 2, 130, 98, 1, 16, 49, 170, 193, 179, 2, 182, 85, 216, 228, 254, 191, 3, 194, 124, 124, 253, 44, 2, 173, 253, 80, 2, 215, 124, 124, 252, 62, 2, 191, 253, 65, 5, 3, 1, 65, 254, 191, 0, 3, 0, 23, 0, 0, 4, 183, 7, 39, 0, 23, 0, 27, 0, 31, 0, 138, 183, 21, 11, 7, 3, 7, 3, 1, 74, 75, 176, 42, 80, 88, 64, 42, 0, 3, 0, 7, 0, 3, 7, 126, 11, 1, 9, 15, 12, 14, 3, 10, 1, 9, 10, 101, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 56, 75, 13, 8, 2, 7, 7, 57, 7, 76, 27, 64, 40, 0, 3, 0, 7, 0, 3, 7, 126, 11, 1, 9, 15, 12, 14, 3, 10, 1, 9, 10, 101, 5, 1, 1, 6, 4, 2, 3, 0, 3, 1, 0, 101, 13, 8, 2, 7, 7, 60, 7, 76, 89, 64, 33, 28, 28, 24, 24, 0, 0, 28, 31, 28, 31, 30, 29, 24, 27, 24, 27, 26, 25, 0, 23, 0, 23, 17, 17, 17, 19, 19, 17, 17, 17, 16, 9, 28, 43, 51, 3, 35, 53, 33, 21, 35, 19, 51, 19, 55, 19, 51, 19, 35, 53, 33, 21, 35, 3, 35, 3, 35, 3, 3, 53, 51, 21, 33, 53, 51, 21, 242, 170, 49, 1, 48, 100, 136, 10, 184, 149, 184, 9, 134, 100, 1, 18, 50, 170, 178, 186, 8, 184, 132, 197, 1, 16, 197, 5, 77, 123, 123, 251, 198, 3, 204, 1, 252, 57, 4, 52, 123, 123, 250, 179, 3, 206, 252, 50, 6, 98, 197, 197, 197, 197, 0, 0, 0, 3, 0, 23, 0, 0, 4, 183, 5, 210, 0, 23, 0, 27, 0, 31, 0, 142, 183, 21, 11, 7, 3, 7, 3, 1, 74, 75, 176, 42, 80, 88, 64, 44, 0, 3, 0, 7, 0, 3, 7, 126, 15, 12, 14, 3, 10, 10, 9, 93, 11, 1, 9, 9, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 13, 8, 2, 7, 7, 57, 7, 76, 27, 64, 42, 0, 3, 0, 7, 0, 3, 7, 126, 11, 1, 9, 15, 12, 14, 3, 10, 1, 9, 10, 101, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 59, 75, 13, 8, 2, 7, 7, 60, 7, 76, 89, 64, 33, 28, 28, 24, 24, 0, 0, 28, 31, 28, 31, 30, 29, 24, 27, 24, 27, 26, 25, 0, 23, 0, 23, 17, 17, 17, 19, 19, 17, 17, 17, 16, 9, 28, 43, 51, 3, 35, 53, 33, 21, 35, 19, 51, 19, 51, 19, 51, 19, 35, 53, 33, 21, 35, 3, 35, 3, 35, 3, 3, 53, 51, 21, 33, 53, 51, 21, 242, 170, 49, 1, 55, 86, 129, 2, 177, 167, 178, 2, 130, 98, 1, 16, 49, 170, 193, 179, 2, 182, 126, 197, 1, 16, 197, 3, 194, 124, 124, 253, 44, 2, 173, 253, 80, 2, 215, 124, 124, 252, 62, 2, 191, 253, 65, 5, 13, 197, 197, 197, 197, 0, 0, 0, 0, 2, 0, 27, 0, 0, 4, 177, 7, 143, 0, 21, 0, 25, 0, 116, 183, 18, 10, 3, 3, 0, 1, 1, 74, 75, 176, 42, 80, 88, 64, 37, 0, 10, 9, 10, 131, 0, 9, 2, 9, 131, 6, 4, 3, 3, 1, 1, 2, 93, 5, 1, 2, 2, 56, 75, 7, 1, 0, 0, 8, 93, 11, 1, 8, 8, 57, 8, 76, 27, 64, 35, 0, 10, 9, 10, 131, 0, 9, 2, 9, 131, 5, 1, 2, 6, 4, 3, 3, 1, 0, 2, 1, 102, 7, 1, 0, 0, 8, 93, 11, 1, 8, 8, 60, 8, 76, 89, 64, 21, 0, 0, 25, 24, 23, 22, 0, 21, 0, 21, 18, 17, 17, 19, 17, 17, 18, 17, 12, 9, 28, 43, 33, 53, 51, 17, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 17, 51, 21, 3, 35, 1, 51, 1, 38, 222, 254, 109, 86, 1, 207, 149, 1, 59, 2, 1, 59, 148, 1, 120, 86, 254, 110, 222, 165, 123, 254, 191, 228, 123, 2, 25, 2, 185, 123, 123, 253, 224, 2, 32, 123, 123, 253, 72, 253, 230, 123, 6, 78, 1, 65, 0, 0, 0, 2, 0, 55, 254, 117, 4, 149, 6, 68, 0, 22, 0, 26, 0, 181, 181, 7, 1, 9, 0, 1, 74, 75, 176, 40, 80, 88, 64, 45, 0, 10, 11, 1, 11, 10, 1, 126, 0, 11, 11, 58, 75, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 12, 1, 9, 9, 57, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 27, 75, 176, 42, 80, 88, 64, 42, 0, 11, 10, 11, 131, 0, 10, 1, 10, 131, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 12, 1, 9, 9, 57, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 27, 64, 42, 0, 11, 10, 11, 131, 0, 10, 1, 10, 131, 5, 3, 2, 3, 0, 0, 1, 93, 4, 1, 1, 1, 59, 75, 12, 1, 9, 9, 60, 75, 8, 1, 6, 6, 7, 93, 0, 7, 7, 61, 7, 76, 89, 89, 64, 22, 0, 0, 26, 25, 24, 23, 0, 22, 0, 22, 17, 17, 18, 17, 17, 19, 17, 17, 17, 13, 9, 29, 43, 33, 1, 35, 53, 33, 21, 35, 1, 51, 1, 35, 53, 33, 21, 35, 1, 3, 51, 21, 33, 53, 51, 19, 19, 35, 1, 51, 2, 2, 254, 127, 74, 1, 191, 160, 1, 55, 2, 1, 55, 160, 1, 111, 74, 254, 127, 108, 148, 254, 33, 198, 108, 196, 123, 254, 191, 228, 3, 194, 124, 124, 252, 246, 3, 10, 124, 124, 252, 62, 254, 241, 124, 124, 1, 15, 5, 3, 1, 65, 0, 1, 0, 120, 2, 31, 4, 85, 2, 179, 0, 3, 0, 30, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 19, 53, 33, 21, 120, 3, 221, 2, 31, 148, 148, 0, 0, 1, 0, 20, 2, 31, 4, 185, 2, 179, 0, 3, 0, 30, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 19, 53, 33, 21, 20, 4, 165, 2, 31, 148, 148, 0, 0, 1, 0, 0, 2, 31, 4, 205, 2, 179, 0, 3, 0, 30, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 17, 53, 33, 21, 4, 205, 2, 31, 148, 148, 0, 0, 0, 2, 0, 0, 254, 80, 4, 205, 0, 0, 0, 3, 0, 7, 0, 55, 177, 6, 100, 68, 64, 44, 0, 0, 4, 1, 1, 2, 0, 1, 101, 0, 2, 3, 3, 2, 85, 0, 2, 2, 3, 93, 5, 1, 3, 2, 3, 77, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 9, 21, 43, 177, 6, 0, 68, 21, 53, 33, 21, 1, 53, 33, 21, 4, 205, 251, 51, 4, 205, 136, 136, 136, 254, 216, 136, 136, 0, 1, 1, 158, 3, 105, 2, 238, 6, 68, 0, 10, 0, 34, 64, 31, 6, 1, 2, 1, 1, 74, 3, 1, 2, 0, 0, 2, 0, 98, 0, 1, 1, 64, 1, 76, 0, 0, 0, 10, 0, 10, 18, 17, 4, 9, 22, 43, 1, 17, 33, 53, 16, 33, 21, 6, 7, 6, 7, 2, 238, 254, 176, 1, 80, 120, 22, 20, 6, 4, 185, 254, 176, 220, 1, 255, 99, 12, 55, 48, 181, 0, 0, 0, 0, 1, 1, 190, 3, 105, 3, 14, 6, 68, 0, 10, 0, 71, 181, 6, 1, 1, 2, 1, 74, 75, 176, 40, 80, 88, 64, 17, 0, 1, 2, 1, 132, 3, 1, 2, 2, 0, 93, 0, 0, 0, 58, 2, 76, 27, 64, 22, 0, 1, 2, 1, 132, 0, 0, 2, 2, 0, 85, 0, 0, 0, 2, 93, 3, 1, 2, 0, 2, 77, 89, 64, 11, 0, 0, 0, 10, 0, 10, 18, 17, 4, 9, 22, 43, 1, 17, 33, 21, 16, 33, 53, 54, 55, 54, 55, 1, 190, 1, 80, 254, 176, 120, 22, 20, 6, 4, 244, 1, 80, 220, 254, 1, 99, 12, 55, 48, 181, 0, 0, 0, 1, 1, 191, 254, 117, 3, 15, 1, 80, 0, 10, 0, 66, 181, 6, 1, 1, 2, 1, 74, 75, 176, 42, 80, 88, 64, 17, 0, 0, 0, 2, 93, 3, 1, 2, 2, 57, 75, 0, 1, 1, 61, 1, 76, 27, 64, 17, 0, 0, 0, 2, 93, 3, 1, 2, 2, 60, 75, 0, 1, 1, 61, 1, 76, 89, 64, 11, 0, 0, 0, 10, 0, 10, 18, 17, 4, 9, 22, 43, 33, 17, 33, 21, 16, 33, 53, 54, 55, 54, 55, 1, 191, 1, 80, 254, 176, 120, 22, 20, 6, 1, 80, 220, 254, 1, 99, 12, 55, 48, 181, 0, 0, 1, 1, 190, 3, 105, 3, 14, 6, 68, 0, 10, 0, 71, 181, 4, 1, 0, 2, 1, 74, 75, 176, 40, 80, 88, 64, 17, 0, 0, 2, 0, 132, 3, 1, 2, 2, 1, 93, 0, 1, 1, 58, 2, 76, 27, 64, 22, 0, 0, 2, 0, 132, 0, 1, 2, 2, 1, 85, 0, 1, 1, 2, 93, 3, 1, 2, 1, 2, 77, 89, 64, 11, 0, 0, 0, 10, 0, 10, 18, 21, 4, 9, 22, 43, 1, 22, 23, 22, 23, 21, 32, 17, 53, 33, 17, 2, 102, 6, 20, 22, 120, 254, 176, 1, 80, 4, 244, 181, 48, 55, 12, 99, 1, 255, 220, 254, 176, 0, 0, 0, 2, 0, 180, 3, 105, 4, 15, 6, 68, 0, 10, 0, 21, 0, 49, 64, 46, 17, 6, 2, 2, 1, 1, 74, 7, 5, 6, 3, 2, 3, 1, 0, 2, 0, 98, 4, 1, 1, 1, 64, 1, 76, 11, 11, 0, 0, 11, 21, 11, 21, 16, 15, 13, 12, 0, 10, 0, 10, 18, 17, 8, 9, 22, 43, 1, 17, 33, 53, 16, 33, 21, 6, 7, 6, 7, 33, 17, 33, 53, 16, 33, 21, 6, 7, 6, 7, 2, 4, 254, 176, 1, 80, 120, 22, 20, 6, 2, 179, 254, 176, 1, 80, 120, 22, 20, 6, 4, 185, 254, 176, 220, 1, 255, 99, 12, 55, 48, 181, 254, 176, 220, 1, 255, 99, 12, 55, 48, 181, 0, 0, 0, 0, 2, 0, 190, 3, 105, 4, 25, 6, 68, 0, 10, 0, 21, 0, 91, 182, 17, 6, 2, 1, 2, 1, 74, 75, 176, 40, 80, 88, 64, 21, 4, 1, 1, 2, 1, 132, 7, 5, 6, 3, 2, 2, 0, 93, 3, 1, 0, 0, 58, 2, 76, 27, 64, 27, 4, 1, 1, 2, 1, 132, 3, 1, 0, 2, 2, 0, 85, 3, 1, 0, 0, 2, 93, 7, 5, 6, 3, 2, 0, 2, 77, 89, 64, 21, 11, 11, 0, 0, 11, 21, 11, 21, 16, 15, 13, 12, 0, 10, 0, 10, 18, 17, 8, 9, 22, 43, 19, 17, 33, 21, 16, 33, 53, 54, 55, 54, 55, 33, 17, 33, 21, 16, 33, 53, 54, 55, 54, 55, 190, 1, 80, 254, 176, 120, 22, 20, 6, 1, 99, 1, 80, 254, 176, 120, 22, 20, 6, 4, 244, 1, 80, 220, 254, 1, 99, 12, 55, 48, 181, 1, 80, 220, 254, 1, 99, 12, 55, 48, 181, 0, 0, 0, 2, 0, 190, 254, 117, 4, 25, 1, 80, 0, 10, 0, 21, 0, 85, 182, 17, 6, 2, 1, 2, 1, 74, 75, 176, 42, 80, 88, 64, 21, 3, 1, 0, 0, 2, 93, 7, 5, 6, 3, 2, 2, 57, 75, 4, 1, 1, 1, 61, 1, 76, 27, 64, 21, 3, 1, 0, 0, 2, 93, 7, 5, 6, 3, 2, 2, 60, 75, 4, 1, 1, 1, 61, 1, 76, 89, 64, 21, 11, 11, 0, 0, 11, 21, 11, 21, 16, 15, 13, 12, 0, 10, 0, 10, 18, 17, 8, 9, 22, 43, 51, 17, 33, 21, 16, 33, 53, 54, 55, 54, 55, 33, 17, 33, 21, 16, 33, 53, 54, 55, 54, 55, 190, 1, 80, 254, 176, 120, 22, 20, 6, 1, 99, 1, 80, 254, 176, 120, 22, 20, 6, 1, 80, 220, 254, 1, 99, 12, 55, 48, 181, 1, 80, 220, 254, 1, 99, 12, 55, 48, 181, 0, 0, 0, 1, 0, 170, 254, 216, 4, 34, 5, 200, 0, 11, 0, 80, 75, 176, 42, 80, 88, 64, 22, 6, 1, 5, 0, 5, 132, 3, 1, 1, 4, 1, 0, 5, 1, 0, 102, 0, 2, 2, 56, 2, 76, 27, 64, 30, 0, 2, 1, 2, 131, 6, 1, 5, 0, 5, 132, 3, 1, 1, 0, 0, 1, 85, 3, 1, 1, 1, 0, 94, 4, 1, 0, 1, 0, 78, 89, 64, 14, 0, 0, 0, 11, 0, 11, 17, 17, 17, 17, 17, 7, 9, 25, 43, 1, 19, 5, 53, 5, 3, 51, 3, 37, 21, 37, 19, 2, 3, 25, 254, 142, 1, 114, 25, 198, 25, 1, 114, 254, 142, 25, 254, 216, 4, 99, 13, 148, 12, 2, 18, 253, 238, 12, 148, 13, 251, 157, 0, 0, 0, 0, 1, 0, 170, 254, 216, 4, 34, 5, 200, 0, 19, 0, 104, 75, 176, 42, 80, 88, 64, 32, 10, 1, 9, 0, 9, 132, 5, 1, 3, 6, 1, 2, 1, 3, 2, 102, 7, 1, 1, 8, 1, 0, 9, 1, 0, 101, 0, 4, 4, 56, 4, 76, 27, 64, 40, 0, 4, 3, 4, 131, 10, 1, 9, 0, 9, 132, 5, 1, 3, 6, 1, 2, 1, 3, 2, 102, 7, 1, 1, 0, 0, 1, 85, 7, 1, 1, 1, 0, 93, 8, 1, 0, 1, 0, 77, 89, 64, 18, 0, 0, 0, 19, 0, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11, 9, 29, 43, 1, 19, 5, 53, 5, 17, 5, 53, 5, 3, 51, 3, 37, 21, 37, 17, 37, 21, 37, 19, 2, 3, 25, 254, 142, 1, 114, 254, 142, 1, 114, 25, 198, 25, 1, 114, 254, 142, 1, 114, 254, 142, 25, 254, 216, 2, 18, 12, 148, 12, 1, 213, 13, 148, 12, 2, 18, 253, 238, 12, 148, 13, 254, 43, 12, 148, 12, 253, 238, 0, 0, 1, 1, 62, 2, 6, 3, 142, 4, 86, 0, 15, 0, 26, 64, 23, 0, 1, 1, 0, 95, 2, 1, 0, 0, 65, 1, 76, 1, 0, 9, 7, 0, 15, 1, 15, 3, 9, 20, 43, 1, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 2, 102, 123, 86, 87, 87, 86, 125, 109, 80, 105, 87, 87, 4, 86, 87, 86, 122, 125, 86, 86, 70, 91, 135, 123, 86, 87, 0, 0, 3, 0, 81, 0, 0, 4, 123, 0, 247, 0, 3, 0, 7, 0, 11, 0, 76, 75, 176, 42, 80, 88, 64, 18, 4, 2, 2, 0, 0, 1, 93, 8, 5, 7, 3, 6, 5, 1, 1, 57, 1, 76, 27, 64, 18, 4, 2, 2, 0, 0, 1, 93, 8, 5, 7, 3, 6, 5, 1, 1, 60, 1, 76, 89, 64, 26, 8, 8, 4, 4, 0, 0, 8, 11, 8, 11, 10, 9, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 9, 9, 21, 43, 51, 53, 51, 21, 51, 53, 51, 21, 51, 53, 51, 21, 81, 247, 163, 246, 163, 247, 247, 247, 247, 247, 247, 247, 0, 0, 0, 7, 0, 12, 0, 0, 4, 193, 5, 200, 0, 15, 0, 23, 0, 27, 0, 43, 0, 51, 0, 67, 0, 75, 0, 171, 75, 176, 42, 80, 88, 64, 50, 0, 3, 0, 1, 6, 3, 1, 103, 19, 10, 17, 3, 6, 20, 12, 18, 3, 8, 9, 6, 8, 104, 15, 1, 2, 2, 0, 95, 4, 14, 2, 0, 0, 56, 75, 13, 1, 9, 9, 5, 95, 11, 7, 16, 3, 5, 5, 57, 5, 76, 27, 64, 48, 4, 14, 2, 0, 15, 1, 2, 3, 0, 2, 103, 0, 3, 0, 1, 6, 3, 1, 103, 19, 10, 17, 3, 6, 20, 12, 18, 3, 8, 9, 6, 8, 104, 13, 1, 9, 9, 5, 95, 11, 7, 16, 3, 5, 5, 60, 5, 76, 89, 64, 59, 69, 68, 53, 52, 45, 44, 29, 28, 24, 24, 17, 16, 1, 0, 73, 71, 68, 75, 69, 75, 61, 59, 52, 67, 53, 67, 49, 47, 44, 51, 45, 51, 37, 35, 28, 43, 29, 43, 24, 27, 24, 27, 26, 25, 21, 19, 16, 23, 17, 23, 9, 7, 0, 15, 1, 15, 21, 9, 20, 43, 19, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 21, 20, 51, 50, 53, 52, 1, 1, 51, 1, 1, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 21, 20, 51, 50, 53, 52, 37, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 23, 34, 21, 20, 51, 50, 53, 52, 196, 83, 50, 51, 51, 50, 85, 73, 48, 61, 51, 50, 83, 88, 91, 86, 254, 255, 2, 105, 103, 253, 149, 1, 193, 83, 50, 51, 51, 50, 85, 73, 48, 61, 51, 50, 83, 89, 91, 86, 1, 111, 82, 51, 51, 51, 50, 85, 73, 48, 61, 51, 51, 82, 89, 91, 86, 5, 196, 85, 84, 138, 142, 84, 84, 68, 87, 154, 138, 85, 85, 93, 215, 216, 216, 215, 250, 153, 5, 200, 250, 56, 2, 105, 85, 84, 139, 141, 84, 84, 68, 87, 154, 139, 84, 85, 93, 215, 216, 217, 214, 93, 85, 84, 139, 141, 84, 84, 68, 87, 154, 139, 84, 85, 93, 214, 217, 216, 215, 0, 1, 1, 160, 3, 219, 3, 67, 6, 43, 0, 3, 0, 25, 64, 22, 2, 1, 1, 0, 1, 132, 0, 0, 0, 58, 0, 76, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 1, 19, 51, 1, 1, 160, 197, 222, 254, 216, 3, 219, 2, 80, 253, 176, 0, 0, 2, 0, 193, 3, 219, 4, 32, 6, 43, 0, 3, 0, 7, 0, 36, 64, 33, 5, 3, 4, 3, 1, 0, 1, 132, 2, 1, 0, 0, 58, 0, 76, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 9, 21, 43, 19, 19, 51, 1, 33, 19, 51, 1, 193, 197, 222, 254, 216, 1, 65, 197, 222, 254, 216, 3, 219, 2, 80, 253, 176, 2, 80, 253, 176, 0, 0, 0, 0, 1, 0, 234, 0, 99, 3, 178, 3, 219, 0, 5, 0, 6, 179, 5, 3, 1, 48, 43, 9, 2, 7, 1, 1, 3, 178, 254, 74, 1, 182, 86, 253, 142, 2, 114, 3, 133, 254, 154, 254, 154, 86, 1, 188, 1, 188, 0, 0, 1, 1, 27, 0, 99, 3, 227, 3, 219, 0, 5, 0, 6, 179, 5, 3, 1, 48, 43, 37, 1, 1, 55, 1, 1, 1, 27, 1, 182, 254, 74, 86, 2, 114, 253, 142, 185, 1, 102, 1, 102, 86, 254, 68, 254, 68, 0, 0, 4, 1, 13, 0, 0, 3, 192, 5, 200, 0, 5, 0, 9, 0, 15, 0, 19, 0, 104, 75, 176, 42, 80, 88, 64, 29, 10, 5, 8, 3, 1, 1, 0, 93, 4, 1, 0, 0, 56, 75, 6, 1, 2, 2, 3, 93, 11, 7, 9, 3, 3, 3, 57, 3, 76, 27, 64, 27, 4, 1, 0, 10, 5, 8, 3, 1, 2, 0, 1, 101, 6, 1, 2, 2, 3, 93, 11, 7, 9, 3, 3, 3, 60, 3, 76, 89, 64, 34, 16, 16, 10, 10, 6, 6, 0, 0, 16, 19, 16, 19, 18, 17, 10, 15, 10, 15, 13, 12, 6, 9, 6, 9, 8, 7, 0, 5, 0, 5, 18, 12, 9, 21, 43, 1, 3, 17, 51, 17, 3, 3, 53, 51, 21, 19, 3, 17, 51, 17, 3, 3, 53, 51, 21, 1, 62, 24, 197, 25, 197, 247, 246, 24, 197, 24, 198, 247, 1, 163, 2, 253, 1, 40, 254, 216, 253, 3, 254, 93, 222, 222, 1, 163, 2, 253, 1, 40, 254, 216, 253, 3, 254, 93, 222, 222, 0, 0, 0, 0, 1, 0, 0, 5, 176, 4, 205, 6, 68, 0, 3, 0, 32, 177, 6, 100, 68, 64, 21, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 0, 1, 0, 1, 77, 17, 16, 2, 9, 22, 43, 177, 6, 0, 68, 17, 33, 21, 33, 4, 205, 251, 51, 6, 68, 148, 0, 0, 0, 0, 1, 0, 155, 255, 219, 4, 49, 5, 237, 0, 3, 0, 46, 75, 176, 27, 80, 88, 64, 12, 0, 0, 0, 56, 75, 2, 1, 1, 1, 57, 1, 76, 27, 64, 10, 0, 0, 1, 0, 131, 2, 1, 1, 1, 116, 89, 64, 10, 0, 0, 0, 3, 0, 3, 17, 3, 9, 21, 43, 23, 1, 51, 1, 155, 3, 9, 141, 252, 244, 37, 6, 18, 249, 238, 0, 0, 1, 1, 1, 2, 216, 3, 205, 5, 238, 0, 15, 0, 186, 182, 14, 3, 2, 2, 3, 1, 74, 75, 176, 10, 80, 88, 64, 25, 0, 3, 3, 0, 95, 1, 1, 0, 0, 72, 75, 5, 4, 2, 2, 2, 0, 95, 1, 1, 0, 0, 72, 2, 76, 27, 75, 176, 25, 80, 88, 64, 25, 0, 3, 3, 0, 95, 1, 1, 0, 0, 78, 75, 5, 4, 2, 2, 2, 0, 95, 1, 1, 0, 0, 78, 2, 76, 27, 75, 176, 27, 80, 88, 64, 25, 0, 3, 3, 0, 95, 1, 1, 0, 0, 72, 75, 5, 4, 2, 2, 2, 0, 95, 1, 1, 0, 0, 72, 2, 76, 27, 75, 176, 42, 80, 88, 64, 23, 0, 3, 3, 1, 95, 0, 1, 1, 78, 75, 5, 4, 2, 2, 2, 0, 93, 0, 0, 0, 72, 2, 76, 27, 64, 26, 0, 0, 3, 2, 0, 85, 0, 1, 0, 3, 2, 1, 3, 103, 0, 0, 0, 2, 93, 5, 4, 2, 2, 0, 2, 77, 89, 89, 89, 89, 64, 13, 0, 0, 0, 15, 0, 15, 34, 18, 34, 17, 6, 10, 24, 43, 1, 17, 51, 21, 54, 51, 50, 17, 17, 35, 17, 52, 35, 34, 7, 17, 1, 1, 173, 127, 162, 254, 173, 133, 116, 121, 2, 216, 3, 3, 154, 173, 254, 234, 254, 0, 1, 215, 175, 160, 254, 26, 0, 0, 0, 1, 0, 70, 0, 0, 4, 116, 5, 200, 0, 31, 1, 151, 75, 176, 12, 80, 88, 64, 11, 24, 1, 13, 3, 31, 27, 2, 0, 13, 2, 74, 27, 75, 176, 14, 80, 88, 183, 31, 27, 24, 3, 0, 3, 1, 74, 27, 64, 11, 24, 1, 13, 3, 31, 27, 2, 0, 13, 2, 74, 89, 89, 75, 176, 12, 80, 88, 64, 48, 0, 9, 7, 11, 7, 9, 112, 0, 3, 13, 11, 3, 85, 12, 1, 11, 0, 13, 0, 11, 13, 103, 10, 1, 7, 7, 8, 93, 0, 8, 8, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 75, 176, 14, 80, 88, 64, 43, 0, 9, 7, 11, 7, 9, 112, 12, 1, 11, 13, 1, 3, 0, 11, 3, 103, 10, 1, 7, 7, 8, 93, 0, 8, 8, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 75, 176, 25, 80, 88, 64, 48, 0, 9, 7, 11, 7, 9, 112, 0, 3, 13, 11, 3, 85, 12, 1, 11, 0, 13, 0, 11, 13, 103, 10, 1, 7, 7, 8, 93, 0, 8, 8, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 75, 176, 27, 80, 88, 64, 49, 0, 9, 7, 11, 7, 9, 11, 126, 0, 3, 13, 11, 3, 85, 12, 1, 11, 0, 13, 0, 11, 13, 103, 10, 1, 7, 7, 8, 93, 0, 8, 8, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 75, 176, 42, 80, 88, 64, 50, 0, 9, 7, 12, 7, 9, 12, 126, 0, 11, 0, 3, 13, 11, 3, 101, 0, 12, 0, 13, 0, 12, 13, 103, 10, 1, 7, 7, 8, 93, 0, 8, 8, 56, 75, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 57, 1, 76, 27, 64, 48, 0, 9, 7, 12, 7, 9, 12, 126, 0, 8, 10, 1, 7, 9, 8, 7, 101, 0, 11, 0, 3, 13, 11, 3, 101, 0, 12, 0, 13, 0, 12, 13, 103, 6, 4, 2, 3, 0, 0, 1, 93, 5, 1, 1, 1, 60, 1, 76, 89, 89, 89, 89, 89, 64, 22, 30, 28, 26, 25, 23, 22, 21, 20, 19, 18, 17, 17, 17, 17, 17, 17, 17, 17, 16, 14, 9, 29, 43, 37, 51, 21, 33, 53, 51, 17, 33, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 53, 37, 17, 33, 21, 54, 51, 21, 38, 35, 34, 7, 3, 39, 60, 254, 214, 50, 254, 222, 50, 254, 203, 71, 71, 3, 118, 123, 254, 8, 1, 222, 140, 193, 24, 14, 164, 131, 123, 123, 123, 2, 74, 253, 182, 123, 123, 4, 210, 123, 224, 100, 1, 254, 19, 177, 196, 200, 2, 173, 0, 0, 0, 0, 1, 0, 213, 0, 0, 4, 5, 5, 237, 0, 37, 0, 204, 64, 15, 22, 1, 8, 7, 23, 1, 6, 8, 2, 74, 6, 1, 0, 1, 73, 75, 176, 25, 80, 88, 64, 48, 0, 1, 3, 0, 0, 1, 112, 9, 1, 6, 10, 1, 5, 4, 6, 5, 101, 11, 1, 4, 12, 1, 3, 1, 4, 3, 101, 0, 8, 8, 7, 95, 0, 7, 7, 62, 75, 0, 0, 0, 2, 94, 0, 2, 2, 57, 2, 76, 27, 75, 176, 42, 80, 88, 64, 49, 0, 1, 3, 0, 3, 1, 0, 126, 9, 1, 6, 10, 1, 5, 4, 6, 5, 101, 11, 1, 4, 12, 1, 3, 1, 4, 3, 101, 0, 8, 8, 7, 95, 0, 7, 7, 62, 75, 0, 0, 0, 2, 94, 0, 2, 2, 57, 2, 76, 27, 64, 47, 0, 1, 3, 0, 3, 1, 0, 126, 0, 7, 0, 8, 6, 7, 8, 103, 9, 1, 6, 10, 1, 5, 4, 6, 5, 101, 11, 1, 4, 12, 1, 3, 1, 4, 3, 101, 0, 0, 0, 2, 94, 0, 2, 2, 60, 2, 76, 89, 89, 64, 20, 35, 34, 33, 32, 31, 30, 29, 28, 35, 35, 17, 17, 17, 20, 17, 17, 16, 13, 9, 29, 43, 37, 33, 53, 51, 17, 33, 53, 54, 53, 53, 35, 53, 51, 53, 35, 53, 51, 53, 52, 54, 51, 50, 23, 21, 38, 35, 34, 21, 21, 51, 21, 35, 21, 51, 21, 35, 20, 6, 1, 183, 1, 211, 123, 252, 208, 199, 173, 173, 173, 173, 198, 190, 95, 119, 134, 84, 202, 213, 213, 213, 213, 51, 173, 100, 254, 239, 173, 76, 233, 92, 123, 149, 123, 110, 215, 223, 29, 168, 49, 212, 188, 123, 149, 123, 137, 157, 0, 3, 0, 25, 255, 237, 4, 200, 5, 201, 0, 9, 0, 18, 0, 69, 1, 37, 75, 176, 27, 80, 88, 64, 23, 32, 1, 1, 3, 33, 1, 6, 10, 63, 48, 2, 12, 5, 47, 1, 2, 12, 4, 74, 64, 1, 2, 71, 27, 64, 23, 32, 1, 1, 9, 33, 1, 6, 10, 63, 48, 2, 12, 5, 47, 1, 2, 12, 64, 1, 11, 2, 5, 74, 89, 75, 176, 27, 80, 88, 64, 52, 0, 3, 0, 1, 7, 3, 1, 103, 9, 1, 7, 0, 10, 6, 7, 10, 103, 8, 1, 6, 13, 1, 5, 12, 6, 5, 101, 0, 4, 4, 0, 93, 0, 0, 0, 56, 75, 14, 1, 12, 12, 2, 96, 15, 11, 16, 3, 2, 2, 57, 2, 76, 27, 75, 176, 42, 80, 88, 64, 63, 0, 7, 1, 10, 1, 7, 10, 126, 0, 3, 0, 1, 7, 3, 1, 103, 0, 9, 0, 10, 6, 9, 10, 103, 8, 1, 6, 13, 1, 5, 12, 6, 5, 101, 0, 4, 4, 0, 93, 0, 0, 0, 56, 75, 16, 1, 2, 2, 57, 75, 14, 1, 12, 12, 11, 96, 15, 1, 11, 11, 66, 11, 76, 27, 64, 61, 0, 7, 1, 10, 1, 7, 10, 126, 0, 0, 0, 4, 3, 0, 4, 103, 0, 3, 0, 1, 7, 3, 1, 103, 0, 9, 0, 10, 6, 9, 10, 103, 8, 1, 6, 13, 1, 5, 12, 6, 5, 101, 16, 1, 2, 2, 60, 75, 14, 1, 12, 12, 11, 96, 15, 1, 11, 11, 66, 11, 76, 89, 89, 64, 37, 0, 0, 67, 65, 61, 60, 57, 56, 51, 49, 46, 44, 36, 34, 31, 29, 26, 25, 24, 23, 22, 21, 20, 19, 18, 15, 12, 10, 0, 9, 0, 9, 35, 33, 17, 9, 22, 43, 51, 17, 37, 32, 17, 20, 6, 35, 35, 17, 17, 51, 50, 54, 53, 52, 43, 2, 1, 35, 53, 51, 53, 51, 21, 51, 38, 53, 52, 51, 50, 23, 21, 38, 35, 34, 21, 20, 31, 2, 22, 21, 20, 35, 34, 39, 53, 22, 51, 50, 53, 52, 47, 2, 35, 21, 20, 22, 51, 50, 55, 21, 6, 35, 34, 38, 53, 25, 1, 0, 1, 187, 254, 229, 31, 40, 160, 125, 197, 97, 31, 1, 90, 173, 173, 160, 148, 9, 237, 51, 47, 50, 46, 98, 54, 34, 42, 98, 229, 50, 51, 50, 51, 88, 69, 38, 60, 200, 30, 45, 9, 19, 48, 34, 104, 77, 5, 200, 1, 254, 184, 184, 204, 253, 3, 3, 145, 92, 117, 210, 252, 99, 124, 234, 234, 35, 25, 193, 17, 129, 22, 85, 42, 55, 34, 42, 99, 92, 230, 20, 126, 22, 79, 52, 70, 38, 63, 180, 73, 49, 2, 113, 13, 120, 161, 0, 1, 0, 6, 255, 219, 4, 103, 5, 237, 0, 60, 0, 151, 64, 23, 9, 1, 3, 1, 60, 1, 6, 5, 39, 1, 8, 7, 40, 1, 9, 8, 4, 74, 1, 1, 5, 1, 73, 75, 176, 42, 80, 88, 64, 48, 0, 2, 3, 0, 3, 2, 0, 126, 4, 1, 0, 0, 5, 6, 0, 5, 101, 11, 1, 6, 10, 1, 7, 8, 6, 7, 102, 0, 3, 3, 1, 95, 0, 1, 1, 62, 75, 0, 8, 8, 9, 95, 0, 9, 9, 63, 9, 76, 27, 64, 46, 0, 2, 3, 0, 3, 2, 0, 126, 0, 1, 0, 3, 2, 1, 3, 103, 4, 1, 0, 0, 5, 6, 0, 5, 101, 11, 1, 6, 10, 1, 7, 8, 6, 7, 102, 0, 8, 8, 9, 95, 0, 9, 9, 66, 9, 76, 89, 64, 18, 51, 50, 49, 48, 43, 41, 35, 17, 25, 17, 19, 34, 18, 35, 18, 12, 9, 29, 43, 19, 35, 55, 51, 54, 55, 18, 33, 50, 23, 17, 35, 39, 38, 35, 34, 7, 6, 7, 33, 7, 33, 6, 21, 6, 7, 6, 23, 22, 21, 23, 33, 7, 33, 22, 23, 22, 51, 50, 55, 21, 6, 35, 34, 39, 38, 39, 38, 39, 35, 55, 51, 39, 39, 52, 55, 54, 53, 38, 55, 55, 127, 121, 51, 86, 39, 48, 155, 1, 84, 164, 217, 123, 29, 113, 112, 193, 98, 49, 30, 2, 156, 51, 253, 133, 4, 1, 1, 1, 1, 1, 2, 2, 44, 51, 254, 20, 26, 38, 106, 241, 180, 185, 207, 180, 239, 153, 106, 56, 21, 26, 133, 51, 68, 2, 2, 2, 1, 1, 2, 1, 3, 89, 124, 169, 86, 1, 25, 64, 254, 231, 169, 53, 172, 85, 156, 124, 55, 17, 24, 4, 14, 4, 5, 1, 73, 123, 138, 79, 221, 135, 160, 111, 141, 98, 155, 59, 121, 123, 88, 11, 1, 8, 4, 19, 6, 18, 25, 0, 0, 0, 0, 4, 0, 43, 0, 0, 4, 166, 5, 200, 0, 3, 0, 23, 0, 35, 0, 45, 0, 94, 64, 91, 13, 1, 4, 0, 23, 14, 2, 5, 4, 2, 74, 3, 1, 0, 0, 4, 5, 0, 4, 103, 0, 5, 0, 2, 7, 5, 2, 103, 0, 7, 0, 9, 8, 7, 9, 103, 12, 1, 8, 1, 1, 8, 87, 12, 1, 8, 8, 1, 95, 11, 6, 10, 3, 1, 8, 1, 79, 37, 36, 25, 24, 0, 0, 42, 40, 36, 45, 37, 45, 31, 29, 24, 35, 25, 35, 22, 20, 17, 15, 12, 10, 7, 5, 0, 3, 0, 3, 17, 13, 11, 21, 43, 51, 1, 51, 1, 1, 6, 35, 34, 53, 52, 0, 51, 50, 23, 7, 38, 35, 34, 6, 21, 20, 51, 50, 55, 19, 34, 38, 53, 52, 18, 51, 50, 22, 21, 20, 2, 39, 50, 54, 53, 52, 35, 34, 6, 21, 20, 43, 3, 220, 133, 252, 37, 1, 90, 137, 114, 223, 1, 2, 167, 64, 89, 22, 82, 60, 104, 153, 118, 101, 123, 229, 107, 124, 243, 167, 109, 125, 243, 137, 91, 133, 109, 89, 134, 5, 200, 250, 56, 3, 86, 58, 225, 180, 1, 23, 25, 111, 36, 202, 138, 130, 71, 252, 43, 118, 101, 190, 1, 20, 117, 101, 192, 254, 237, 102, 201, 136, 144, 201, 134, 146, 0, 0, 2, 0, 40, 255, 231, 4, 162, 6, 80, 0, 9, 0, 44, 0, 52, 64, 49, 31, 29, 22, 21, 4, 1, 3, 1, 74, 0, 3, 0, 1, 0, 3, 1, 126, 0, 4, 0, 0, 3, 4, 0, 103, 0, 1, 2, 2, 1, 87, 0, 1, 1, 2, 95, 0, 2, 1, 2, 79, 35, 24, 36, 42, 37, 5, 11, 25, 43, 1, 54, 55, 54, 53, 52, 35, 34, 2, 3, 3, 6, 7, 6, 7, 6, 21, 20, 51, 50, 54, 55, 23, 2, 33, 34, 53, 52, 55, 55, 6, 7, 7, 53, 54, 55, 55, 18, 33, 50, 22, 21, 20, 3, 6, 2, 75, 202, 94, 129, 86, 101, 138, 61, 70, 10, 5, 13, 4, 22, 101, 81, 174, 68, 114, 204, 254, 196, 213, 33, 3, 204, 92, 7, 99, 231, 48, 148, 1, 120, 109, 135, 239, 147, 2, 218, 137, 164, 226, 151, 85, 254, 252, 254, 204, 254, 162, 51, 26, 65, 20, 104, 52, 115, 216, 184, 41, 253, 242, 248, 92, 164, 19, 58, 7, 1, 123, 5, 70, 245, 2, 229, 140, 114, 204, 254, 235, 171, 0, 4, 0, 60, 0, 0, 4, 175, 5, 200, 0, 7, 0, 15, 0, 19, 0, 29, 0, 76, 64, 73, 22, 1, 0, 8, 27, 1, 1, 2, 2, 74, 9, 1, 8, 0, 8, 131, 0, 0, 0, 3, 2, 0, 3, 103, 0, 2, 0, 1, 4, 2, 1, 103, 0, 4, 5, 5, 4, 85, 0, 4, 4, 5, 93, 7, 6, 10, 3, 5, 4, 5, 77, 16, 16, 29, 28, 26, 25, 24, 23, 21, 20, 16, 19, 16, 19, 18, 34, 34, 34, 33, 11, 11, 25, 43, 1, 16, 51, 50, 17, 16, 35, 34, 19, 16, 51, 50, 17, 16, 35, 34, 3, 53, 33, 21, 33, 35, 1, 17, 35, 17, 51, 1, 17, 51, 2, 243, 222, 222, 222, 222, 135, 87, 86, 86, 87, 148, 1, 201, 253, 215, 148, 254, 198, 124, 148, 1, 58, 124, 2, 186, 1, 132, 254, 117, 254, 117, 1, 143, 254, 224, 1, 28, 1, 28, 252, 49, 148, 148, 4, 96, 251, 160, 5, 200, 251, 164, 4, 92, 0, 2, 0, 43, 2, 228, 4, 172, 5, 200, 0, 15, 0, 38, 0, 178, 64, 15, 32, 1, 2, 1, 23, 1, 15, 2, 2, 74, 36, 1, 2, 1, 73, 75, 176, 26, 80, 88, 64, 54, 4, 1, 2, 1, 15, 1, 2, 112, 0, 15, 0, 1, 15, 0, 124, 11, 10, 2, 3, 12, 9, 5, 3, 1, 2, 3, 1, 101, 13, 8, 6, 3, 0, 7, 7, 0, 85, 13, 8, 6, 3, 0, 0, 7, 93, 18, 16, 14, 17, 4, 7, 0, 7, 77, 27, 64, 55, 4, 1, 2, 1, 15, 1, 2, 15, 126, 0, 15, 0, 1, 15, 0, 124, 11, 10, 2, 3, 12, 9, 5, 3, 1, 2, 3, 1, 101, 13, 8, 6, 3, 0, 7, 7, 0, 85, 13, 8, 6, 3, 0, 0, 7, 93, 18, 16, 14, 17, 4, 7, 0, 7, 77, 89, 64, 38, 16, 16, 0, 0, 16, 38, 16, 38, 35, 34, 31, 30, 29, 28, 27, 26, 25, 24, 22, 21, 20, 19, 18, 17, 0, 15, 0, 15, 17, 17, 17, 17, 17, 17, 17, 19, 11, 27, 43, 19, 53, 51, 17, 35, 21, 35, 53, 33, 21, 35, 53, 35, 17, 51, 21, 51, 53, 51, 17, 35, 53, 51, 19, 19, 51, 21, 35, 17, 51, 21, 35, 17, 35, 3, 35, 3, 35, 17, 142, 77, 87, 89, 1, 207, 89, 87, 77, 148, 58, 58, 212, 122, 106, 201, 58, 58, 163, 1, 116, 87, 115, 2, 2, 228, 93, 2, 43, 99, 191, 191, 99, 253, 213, 93, 93, 2, 43, 92, 254, 69, 1, 187, 92, 253, 213, 93, 2, 67, 254, 69, 1, 157, 253, 219, 0, 0, 0, 0, 1, 0, 49, 0, 0, 4, 160, 5, 237, 0, 31, 0, 46, 64, 43, 20, 0, 2, 1, 5, 1, 74, 0, 2, 0, 5, 1, 2, 5, 103, 3, 1, 1, 0, 0, 1, 85, 3, 1, 1, 1, 0, 93, 4, 1, 0, 1, 0, 77, 38, 17, 21, 37, 17, 17, 6, 11, 26, 43, 37, 21, 33, 53, 33, 38, 2, 53, 16, 0, 33, 32, 0, 17, 20, 2, 7, 33, 21, 33, 53, 54, 18, 53, 16, 2, 35, 34, 2, 17, 20, 18, 2, 12, 254, 37, 1, 55, 155, 144, 1, 36, 1, 8, 1, 7, 1, 36, 145, 155, 1, 56, 254, 37, 141, 112, 173, 172, 173, 173, 112, 148, 148, 136, 176, 1, 100, 192, 1, 56, 1, 89, 254, 167, 254, 200, 192, 254, 156, 176, 136, 148, 160, 1, 42, 213, 1, 29, 1, 34, 254, 222, 254, 227, 214, 254, 215, 0, 0, 0, 0, 2, 0, 97, 255, 231, 4, 109, 3, 139, 0, 31, 0, 48, 0, 64, 64, 61, 47, 35, 2, 5, 6, 24, 1, 0, 3, 2, 74, 0, 0, 3, 4, 3, 0, 4, 126, 0, 2, 0, 6, 5, 2, 6, 103, 0, 5, 0, 3, 0, 5, 3, 101, 0, 4, 1, 1, 4, 87, 0, 4, 4, 1, 95, 0, 1, 4, 1, 79, 39, 17, 39, 36, 40, 35, 16, 7, 11, 27, 43, 37, 51, 6, 7, 6, 35, 34, 38, 39, 38, 53, 52, 55, 54, 54, 51, 50, 22, 23, 22, 21, 21, 33, 34, 21, 21, 20, 23, 22, 22, 51, 50, 1, 33, 50, 53, 53, 52, 39, 38, 38, 35, 34, 6, 7, 6, 21, 21, 20, 3, 180, 77, 70, 70, 126, 144, 114, 206, 73, 125, 125, 73, 206, 114, 114, 206, 74, 124, 252, 191, 13, 21, 43, 179, 87, 193, 254, 2, 2, 118, 14, 21, 44, 178, 86, 86, 178, 43, 21, 155, 75, 37, 68, 86, 77, 131, 172, 172, 132, 77, 85, 85, 77, 132, 172, 13, 13, 228, 32, 26, 53, 73, 1, 195, 13, 229, 31, 26, 53, 74, 74, 53, 26, 31, 229, 13, 0, 0, 0, 5, 0, 60, 255, 224, 4, 90, 5, 237, 0, 3, 0, 9, 0, 29, 0, 37, 0, 48, 0, 174, 64, 16, 7, 6, 5, 3, 3, 0, 20, 1, 6, 5, 2, 74, 8, 1, 0, 72, 75, 176, 27, 80, 88, 64, 35, 8, 1, 2, 3, 5, 3, 2, 5, 126, 0, 3, 0, 5, 6, 3, 5, 104, 0, 0, 0, 56, 75, 0, 6, 6, 1, 95, 4, 7, 2, 1, 1, 63, 1, 76, 27, 75, 176, 38, 80, 88, 64, 35, 0, 0, 3, 0, 131, 8, 1, 2, 3, 5, 3, 2, 5, 126, 0, 3, 0, 5, 6, 3, 5, 104, 0, 6, 6, 1, 95, 4, 7, 2, 1, 1, 63, 1, 76, 27, 64, 39, 0, 0, 3, 0, 131, 8, 1, 2, 3, 5, 3, 2, 5, 126, 7, 1, 1, 4, 1, 132, 0, 3, 0, 5, 6, 3, 5, 104, 0, 6, 6, 4, 95, 0, 4, 4, 66, 4, 76, 89, 89, 64, 24, 4, 4, 0, 0, 44, 42, 35, 33, 26, 24, 16, 14, 4, 9, 4, 9, 0, 3, 0, 3, 17, 9, 9, 21, 43, 23, 1, 51, 1, 19, 17, 7, 53, 37, 17, 1, 38, 53, 52, 54, 51, 50, 22, 21, 20, 7, 22, 21, 20, 6, 35, 34, 38, 53, 52, 37, 54, 53, 52, 35, 34, 21, 20, 23, 6, 21, 20, 22, 51, 50, 54, 53, 52, 39, 86, 3, 6, 114, 252, 250, 30, 170, 1, 42, 1, 116, 112, 133, 108, 101, 122, 136, 168, 152, 121, 118, 146, 1, 45, 92, 122, 117, 64, 94, 84, 66, 62, 80, 126, 32, 6, 13, 249, 243, 2, 253, 2, 142, 43, 98, 75, 252, 240, 254, 192, 76, 98, 88, 108, 92, 77, 105, 91, 85, 132, 98, 122, 114, 93, 136, 132, 65, 77, 100, 92, 69, 170, 76, 84, 62, 79, 66, 50, 70, 73, 0, 0, 0, 5, 0, 40, 255, 224, 4, 155, 5, 237, 0, 3, 0, 23, 0, 31, 0, 42, 0, 73, 1, 152, 75, 176, 28, 80, 88, 64, 26, 44, 1, 11, 0, 43, 1, 10, 11, 50, 1, 9, 10, 58, 1, 2, 9, 57, 1, 4, 2, 14, 1, 5, 4, 6, 74, 27, 75, 176, 31, 80, 88, 64, 26, 44, 1, 11, 0, 43, 1, 10, 11, 50, 1, 9, 10, 58, 1, 8, 9, 57, 1, 4, 2, 14, 1, 5, 4, 6, 74, 27, 64, 26, 44, 1, 11, 0, 43, 1, 10, 11, 50, 1, 9, 10, 58, 1, 8, 9, 57, 1, 7, 2, 14, 1, 5, 4, 6, 74, 89, 89, 75, 176, 28, 80, 88, 64, 42, 0, 10, 0, 9, 2, 10, 9, 103, 8, 1, 2, 7, 1, 4, 5, 2, 4, 104, 0, 11, 11, 0, 95, 6, 1, 0, 0, 62, 75, 0, 5, 5, 1, 95, 3, 12, 2, 1, 1, 63, 1, 76, 27, 75, 176, 31, 80, 88, 64, 47, 0, 10, 0, 9, 8, 10, 9, 103, 0, 8, 2, 4, 8, 87, 0, 2, 7, 1, 4, 5, 2, 4, 104, 0, 11, 11, 0, 95, 6, 1, 0, 0, 62, 75, 0, 5, 5, 1, 95, 3, 12, 2, 1, 1, 63, 1, 76, 27, 75, 176, 38, 80, 88, 64, 48, 0, 10, 0, 9, 8, 10, 9, 103, 0, 8, 0, 7, 4, 8, 7, 103, 0, 2, 0, 4, 5, 2, 4, 104, 0, 11, 11, 0, 95, 6, 1, 0, 0, 62, 75, 0, 5, 5, 1, 95, 3, 12, 2, 1, 1, 63, 1, 76, 27, 75, 176, 42, 80, 88, 64, 52, 12, 1, 1, 3, 1, 132, 0, 10, 0, 9, 8, 10, 9, 103, 0, 8, 0, 7, 4, 8, 7, 103, 0, 2, 0, 4, 5, 2, 4, 104, 0, 11, 11, 0, 95, 6, 1, 0, 0, 62, 75, 0, 5, 5, 3, 95, 0, 3, 3, 66, 3, 76, 27, 64, 50, 12, 1, 1, 3, 1, 132, 6, 1, 0, 0, 11, 10, 0, 11, 103, 0, 10, 0, 9, 8, 10, 9, 103, 0, 8, 0, 7, 4, 8, 7, 103, 0, 2, 0, 4, 5, 2, 4, 104, 0, 5, 5, 3, 95, 0, 3, 3, 66, 3, 76, 89, 89, 89, 89, 64, 30, 0, 0, 73, 71, 69, 67, 66, 64, 61, 59, 56, 54, 47, 45, 38, 36, 29, 27, 20, 18, 10, 8, 0, 3, 0, 3, 17, 13, 9, 21, 43, 23, 1, 51, 1, 1, 38, 53, 52, 54, 51, 50, 22, 21, 20, 7, 22, 21, 20, 6, 35, 34, 38, 53, 52, 37, 54, 53, 52, 35, 34, 21, 20, 23, 6, 21, 20, 22, 51, 50, 54, 53, 52, 39, 1, 53, 54, 51, 50, 21, 20, 7, 22, 21, 20, 6, 35, 34, 39, 53, 22, 51, 50, 54, 53, 52, 35, 35, 53, 51, 50, 53, 52, 35, 34, 146, 3, 6, 114, 252, 250, 2, 23, 112, 133, 108, 101, 122, 136, 168, 152, 121, 118, 146, 1, 45, 92, 122, 117, 64, 94, 84, 66, 62, 80, 126, 252, 142, 95, 99, 243, 164, 189, 149, 129, 92, 102, 111, 69, 70, 88, 224, 44, 38, 210, 134, 80, 32, 6, 13, 249, 243, 1, 189, 76, 98, 88, 108, 92, 77, 105, 91, 85, 132, 98, 122, 114, 93, 136, 132, 65, 77, 100, 92, 69, 170, 76, 84, 62, 79, 66, 50, 70, 73, 4, 39, 97, 32, 180, 135, 56, 43, 162, 105, 122, 25, 105, 43, 77, 63, 156, 80, 143, 111, 0, 0, 0, 0, 5, 0, 60, 255, 224, 4, 155, 5, 237, 0, 3, 0, 23, 0, 31, 0, 42, 0, 64, 0, 214, 64, 15, 52, 44, 2, 6, 7, 43, 1, 11, 2, 14, 1, 5, 4, 3, 74, 75, 176, 27, 80, 88, 64, 48, 0, 10, 0, 7, 6, 10, 7, 103, 0, 6, 0, 11, 4, 6, 11, 103, 0, 2, 0, 4, 5, 2, 4, 104, 0, 9, 9, 0, 93, 8, 1, 0, 0, 56, 75, 0, 5, 5, 1, 95, 3, 12, 2, 1, 1, 63, 1, 76, 27, 75, 176, 38, 80, 88, 64, 46, 8, 1, 0, 0, 9, 10, 0, 9, 101, 0, 10, 0, 7, 6, 10, 7, 103, 0, 6, 0, 11, 4, 6, 11, 103, 0, 2, 0, 4, 5, 2, 4, 104, 0, 5, 5, 1, 95, 3, 12, 2, 1, 1, 63, 1, 76, 27, 64, 50, 12, 1, 1, 3, 1, 132, 8, 1, 0, 0, 9, 10, 0, 9, 101, 0, 10, 0, 7, 6, 10, 7, 103, 0, 6, 0, 11, 4, 6, 11, 103, 0, 2, 0, 4, 5, 2, 4, 104, 0, 5, 5, 3, 95, 0, 3, 3, 66, 3, 76, 89, 89, 64, 30, 0, 0, 64, 62, 58, 57, 56, 55, 54, 53, 51, 49, 47, 45, 38, 36, 29, 27, 20, 18, 10, 8, 0, 3, 0, 3, 17, 13, 9, 21, 43, 23, 1, 51, 1, 1, 38, 53, 52, 54, 51, 50, 22, 21, 20, 7, 22, 21, 20, 6, 35, 34, 38, 53, 52, 37, 54, 53, 52, 35, 34, 21, 20, 23, 6, 21, 20, 22, 51, 50, 54, 53, 52, 39, 1, 53, 22, 51, 50, 53, 52, 35, 34, 7, 17, 33, 21, 33, 21, 50, 22, 21, 20, 6, 35, 34, 146, 3, 6, 114, 252, 250, 2, 23, 112, 133, 108, 101, 122, 136, 168, 152, 121, 118, 146, 1, 45, 92, 122, 117, 64, 94, 84, 66, 62, 80, 126, 252, 152, 87, 67, 153, 237, 27, 29, 1, 156, 254, 201, 152, 175, 156, 136, 61, 32, 6, 13, 249, 243, 1, 189, 76, 98, 88, 108, 92, 77, 105, 91, 85, 132, 98, 122, 114, 93, 136, 132, 65, 77, 100, 92, 69, 170, 76, 84, 62, 79, 66, 50, 70, 73, 1, 171, 101, 33, 154, 169, 4, 1, 122, 105, 183, 137, 118, 112, 129, 0, 0, 0, 0, 5, 0, 52, 255, 224, 4, 125, 5, 237, 0, 3, 0, 23, 0, 31, 0, 42, 0, 52, 0, 187, 64, 11, 14, 1, 5, 4, 1, 74, 50, 1, 6, 1, 73, 75, 176, 27, 80, 88, 64, 41, 10, 1, 8, 2, 4, 2, 8, 4, 126, 0, 2, 0, 4, 5, 2, 4, 104, 0, 6, 6, 0, 93, 7, 1, 0, 0, 56, 75, 0, 5, 5, 1, 95, 3, 9, 2, 1, 1, 63, 1, 76, 27, 75, 176, 38, 80, 88, 64, 39, 10, 1, 8, 2, 4, 2, 8, 4, 126, 7, 1, 0, 0, 6, 2, 0, 6, 101, 0, 2, 0, 4, 5, 2, 4, 104, 0, 5, 5, 1, 95, 3, 9, 2, 1, 1, 63, 1, 76, 27, 64, 43, 10, 1, 8, 2, 4, 2, 8, 4, 126, 9, 1, 1, 3, 1, 132, 7, 1, 0, 0, 6, 2, 0, 6, 101, 0, 2, 0, 4, 5, 2, 4, 104, 0, 5, 5, 3, 95, 0, 3, 3, 66, 3, 76, 89, 89, 64, 28, 43, 43, 0, 0, 43, 52, 43, 52, 49, 48, 47, 46, 38, 36, 29, 27, 20, 18, 10, 8, 0, 3, 0, 3, 17, 11, 9, 21, 43, 23, 1, 51, 1, 1, 38, 53, 52, 54, 51, 50, 22, 21, 20, 7, 22, 21, 20, 6, 35, 34, 38, 53, 52, 37, 54, 53, 52, 35, 34, 21, 20, 23, 6, 21, 20, 22, 51, 50, 54, 53, 52, 39, 1, 54, 55, 19, 33, 53, 33, 21, 0, 7, 52, 3, 6, 114, 252, 250, 2, 87, 112, 133, 108, 101, 122, 136, 168, 152, 121, 118, 146, 1, 45, 92, 122, 117, 64, 94, 84, 66, 62, 80, 126, 252, 239, 19, 144, 194, 254, 108, 2, 3, 254, 208, 20, 32, 6, 13, 249, 243, 1, 189, 76, 98, 88, 108, 92, 77, 105, 91, 85, 132, 98, 122, 114, 93, 136, 132, 65, 77, 100, 92, 69, 170, 76, 84, 62, 79, 66, 50, 70, 73, 1, 171, 135, 222, 1, 42, 110, 110, 254, 97, 240, 0, 0, 0, 0, 1, 0, 84, 1, 65, 4, 121, 3, 145, 0, 13, 0, 82, 182, 7, 6, 2, 0, 3, 1, 74, 75, 176, 12, 80, 88, 64, 28, 0, 2, 3, 3, 2, 110, 0, 1, 0, 0, 1, 111, 0, 3, 0, 0, 3, 85, 0, 3, 3, 0, 94, 0, 0, 3, 0, 78, 27, 64, 26, 0, 2, 3, 2, 131, 0, 1, 0, 1, 132, 0, 3, 0, 0, 3, 85, 0, 3, 3, 0, 94, 0, 0, 3, 0, 78, 89, 182, 18, 21, 18, 16, 4, 11, 24, 43, 1, 33, 22, 23, 35, 38, 39, 53, 54, 55, 51, 6, 7, 33, 4, 121, 252, 231, 103, 32, 103, 121, 179, 178, 122, 103, 32, 103, 3, 25, 2, 31, 80, 142, 201, 70, 50, 69, 202, 142, 80, 0, 0, 0, 0, 1, 1, 63, 254, 216, 3, 143, 5, 200, 0, 13, 0, 34, 64, 31, 11, 10, 8, 5, 3, 2, 6, 0, 1, 1, 74, 2, 1, 1, 0, 1, 131, 0, 0, 0, 116, 0, 0, 0, 13, 0, 13, 22, 3, 11, 21, 43, 1, 22, 23, 21, 38, 39, 17, 35, 17, 6, 7, 53, 54, 55, 2, 128, 63, 208, 133, 89, 148, 89, 133, 208, 63, 5, 200, 185, 111, 102, 39, 98, 250, 21, 5, 235, 98, 39, 102, 111, 185, 0, 0, 0, 0, 1, 0, 84, 1, 65, 4, 121, 3, 145, 0, 13, 0, 82, 182, 7, 6, 2, 3, 0, 1, 74, 75, 176, 12, 80, 88, 64, 28, 0, 1, 0, 0, 1, 110, 0, 2, 3, 3, 2, 111, 0, 0, 3, 3, 0, 85, 0, 0, 0, 3, 94, 0, 3, 0, 3, 78, 27, 64, 26, 0, 1, 0, 1, 131, 0, 2, 3, 2, 132, 0, 0, 3, 3, 0, 85, 0, 0, 0, 3, 94, 0, 3, 0, 3, 78, 89, 182, 18, 21, 18, 16, 4, 11, 24, 43, 19, 33, 38, 39, 51, 22, 23, 21, 6, 7, 35, 54, 55, 33, 84, 3, 25, 103, 32, 103, 122, 178, 179, 121, 103, 32, 103, 252, 231, 2, 179, 80, 142, 202, 69, 50, 70, 201, 142, 80, 0, 1, 1, 63, 254, 216, 3, 143, 5, 200, 0, 13, 0, 34, 64, 31, 12, 10, 9, 4, 3, 1, 6, 0, 1, 1, 74, 2, 1, 1, 0, 1, 131, 0, 0, 0, 116, 0, 0, 0, 13, 0, 13, 22, 3, 11, 21, 43, 1, 17, 54, 55, 21, 6, 7, 35, 38, 39, 53, 22, 23, 17, 2, 177, 89, 133, 209, 62, 50, 62, 209, 133, 89, 5, 200, 250, 21, 97, 40, 102, 112, 184, 184, 112, 102, 40, 97, 5, 235, 0, 0, 0, 0, 1, 0, 84, 1, 40, 4, 121, 3, 120, 0, 23, 0, 92, 64, 9, 19, 18, 7, 6, 4, 0, 3, 1, 74, 75, 176, 12, 80, 88, 64, 30, 4, 1, 2, 3, 3, 2, 110, 5, 1, 1, 0, 0, 1, 111, 0, 3, 0, 0, 3, 85, 0, 3, 3, 0, 94, 0, 0, 3, 0, 78, 27, 64, 28, 4, 1, 2, 3, 2, 131, 5, 1, 1, 0, 1, 132, 0, 3, 0, 0, 3, 85, 0, 3, 3, 0, 94, 0, 0, 3, 0, 78, 89, 64, 9, 21, 18, 18, 21, 18, 16, 6, 11, 26, 43, 1, 33, 22, 23, 35, 38, 39, 53, 54, 55, 51, 6, 7, 33, 38, 39, 51, 22, 23, 21, 6, 7, 35, 54, 3, 109, 253, 243, 103, 32, 103, 121, 179, 178, 122, 103, 32, 103, 2, 13, 103, 32, 103, 122, 178, 179, 121, 103, 32, 2, 6, 80, 142, 201, 71, 49, 69, 202, 142, 80, 80, 142, 202, 69, 49, 71, 201, 142, 0, 0, 0, 1, 1, 63, 254, 216, 3, 143, 5, 200, 0, 23, 0, 40, 64, 37, 21, 20, 18, 17, 15, 14, 9, 8, 6, 5, 3, 2, 12, 1, 0, 1, 74, 0, 0, 1, 0, 131, 2, 1, 1, 1, 116, 0, 0, 0, 23, 0, 23, 27, 3, 11, 21, 43, 1, 38, 39, 53, 22, 23, 17, 6, 7, 53, 54, 55, 51, 22, 23, 21, 38, 39, 17, 54, 55, 21, 6, 7, 2, 78, 62, 209, 133, 89, 89, 133, 208, 63, 50, 63, 208, 133, 89, 89, 133, 209, 62, 254, 216, 184, 112, 102, 40, 97, 4, 230, 98, 39, 102, 111, 185, 185, 111, 102, 39, 98, 251, 26, 97, 40, 102, 112, 184, 0, 0, 2, 1, 63, 254, 93, 3, 143, 6, 68, 0, 23, 0, 27, 0, 66, 64, 63, 21, 20, 18, 17, 15, 14, 9, 8, 6, 5, 3, 2, 12, 1, 0, 1, 74, 0, 0, 1, 0, 131, 4, 1, 1, 2, 1, 131, 0, 2, 3, 3, 2, 85, 0, 2, 2, 3, 93, 5, 1, 3, 2, 3, 77, 24, 24, 0, 0, 24, 27, 24, 27, 26, 25, 0, 23, 0, 23, 27, 6, 11, 21, 43, 5, 38, 39, 53, 22, 23, 17, 6, 7, 53, 54, 55, 51, 22, 23, 21, 38, 39, 17, 54, 55, 21, 6, 7, 5, 53, 33, 21, 2, 78, 62, 209, 132, 90, 89, 133, 209, 62, 50, 62, 209, 133, 89, 90, 132, 209, 62, 254, 191, 2, 80, 173, 184, 112, 103, 40, 97, 4, 229, 97, 40, 103, 111, 185, 185, 111, 103, 40, 97, 251, 27, 97, 40, 103, 112, 184, 246, 148, 148, 0, 0, 0, 0, 2, 0, 169, 255, 231, 4, 41, 6, 68, 0, 21, 0, 32, 0, 50, 64, 47, 16, 1, 4, 2, 1, 74, 0, 0, 0, 3, 2, 0, 3, 103, 0, 2, 0, 4, 5, 2, 4, 103, 0, 5, 1, 1, 5, 87, 0, 5, 5, 1, 95, 0, 1, 5, 1, 79, 36, 34, 36, 36, 36, 33, 6, 11, 26, 43, 19, 18, 33, 50, 18, 17, 16, 0, 33, 34, 38, 53, 16, 0, 51, 50, 23, 53, 52, 2, 35, 34, 1, 38, 35, 34, 2, 21, 20, 22, 51, 50, 18, 213, 147, 1, 11, 208, 230, 254, 173, 255, 0, 136, 165, 1, 89, 207, 84, 107, 197, 148, 195, 2, 28, 98, 106, 132, 221, 99, 81, 137, 215, 5, 18, 1, 50, 254, 147, 254, 183, 254, 110, 253, 235, 190, 156, 1, 6, 1, 181, 69, 30, 195, 1, 3, 253, 107, 103, 254, 211, 180, 121, 148, 1, 114, 0, 0, 0, 2, 0, 29, 0, 0, 4, 177, 5, 200, 0, 5, 0, 8, 0, 49, 64, 46, 8, 1, 2, 0, 1, 74, 4, 1, 2, 2, 1, 73, 0, 0, 2, 0, 131, 0, 2, 1, 1, 2, 85, 0, 2, 2, 1, 93, 3, 1, 1, 2, 1, 77, 0, 0, 7, 6, 0, 5, 0, 5, 18, 4, 11, 21, 43, 51, 53, 1, 51, 1, 21, 37, 33, 1, 29, 1, 231, 196, 1, 233, 252, 22, 3, 24, 254, 115, 173, 5, 27, 250, 229, 173, 173, 4, 48, 0, 0, 1, 0, 62, 254, 216, 4, 144, 5, 200, 0, 19, 0, 55, 64, 52, 0, 4, 10, 9, 5, 3, 3, 0, 4, 3, 101, 8, 6, 2, 3, 0, 1, 1, 0, 85, 8, 6, 2, 3, 0, 0, 1, 93, 7, 1, 1, 0, 1, 77, 0, 0, 0, 19, 0, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11, 11, 29, 43, 1, 17, 51, 21, 33, 53, 51, 17, 35, 53, 33, 21, 35, 17, 51, 21, 33, 53, 51, 17, 1, 114, 99, 254, 105, 111, 111, 4, 82, 111, 111, 254, 104, 99, 5, 77, 250, 6, 123, 123, 5, 250, 123, 123, 250, 6, 123, 123, 5, 250, 0, 0, 1, 0, 50, 254, 215, 4, 155, 5, 200, 0, 15, 0, 116, 64, 15, 11, 3, 2, 5, 2, 1, 74, 4, 1, 3, 2, 1, 4, 2, 73, 75, 176, 11, 80, 88, 64, 37, 0, 2, 3, 5, 3, 2, 112, 0, 5, 4, 4, 5, 110, 0, 1, 0, 3, 2, 1, 3, 101, 0, 4, 0, 0, 4, 85, 0, 4, 4, 0, 94, 0, 0, 4, 0, 78, 27, 64, 39, 0, 2, 3, 5, 3, 2, 5, 126, 0, 5, 4, 3, 5, 4, 124, 0, 1, 0, 3, 2, 1, 3, 101, 0, 4, 0, 0, 4, 85, 0, 4, 4, 0, 94, 0, 0, 4, 0, 78, 89, 64, 9, 17, 18, 17, 17, 20, 16, 6, 11, 26, 43, 1, 33, 53, 1, 1, 53, 33, 17, 35, 53, 33, 1, 1, 33, 53, 51, 4, 155, 251, 151, 2, 116, 253, 181, 4, 18, 123, 253, 122, 2, 27, 253, 89, 3, 63, 124, 254, 215, 136, 2, 177, 3, 61, 123, 254, 152, 237, 252, 244, 253, 30, 247, 0, 0, 0, 1, 0, 99, 2, 31, 4, 106, 2, 179, 0, 3, 0, 30, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 11, 21, 43, 19, 53, 33, 21, 99, 4, 7, 2, 31, 148, 148, 0, 0, 1, 0, 155, 255, 219, 4, 49, 5, 237, 0, 3, 0, 23, 64, 20, 0, 0, 1, 0, 131, 2, 1, 1, 1, 116, 0, 0, 0, 3, 0, 3, 17, 3, 11, 21, 43, 23, 1, 51, 1, 155, 3, 9, 141, 252, 244, 37, 6, 18, 249, 238, 0, 1, 1, 62, 1, 64, 3, 142, 3, 144, 0, 15, 0, 24, 64, 21, 2, 1, 0, 1, 0, 131, 0, 1, 1, 116, 1, 0, 9, 7, 0, 15, 1, 15, 3, 11, 20, 43, 1, 50, 23, 22, 21, 20, 7, 6, 35, 34, 39, 38, 53, 52, 55, 54, 2, 102, 123, 86, 87, 87, 86, 125, 109, 80, 105, 87, 87, 3, 144, 87, 86, 122, 125, 86, 86, 70, 91, 135, 123, 86, 87, 0, 0, 0, 0, 1, 0, 0, 254, 216, 4, 205, 6, 80, 0, 8, 0, 26, 64, 23, 8, 3, 2, 1, 4, 1, 0, 1, 74, 0, 0, 1, 0, 131, 0, 1, 1, 116, 17, 20, 2, 11, 22, 43, 19, 39, 37, 1, 1, 51, 1, 35, 1, 63, 63, 1, 19, 1, 39, 1, 249, 154, 253, 186, 121, 254, 185, 1, 68, 106, 163, 253, 136, 6, 119, 248, 136, 2, 188, 0, 0, 3, 0, 34, 0, 111, 4, 172, 3, 170, 0, 22, 0, 32, 0, 44, 0, 58, 64, 55, 12, 1, 6, 4, 1, 74, 0, 7, 4, 1, 7, 87, 2, 1, 1, 0, 4, 6, 1, 4, 103, 0, 6, 5, 0, 6, 87, 0, 5, 0, 0, 5, 87, 0, 5, 5, 0, 95, 3, 1, 0, 5, 0, 79, 36, 35, 35, 36, 36, 36, 36, 33, 8, 11, 28, 43, 1, 2, 35, 34, 38, 53, 52, 54, 51, 50, 31, 2, 18, 51, 50, 22, 21, 20, 6, 35, 34, 47, 2, 38, 35, 34, 21, 20, 22, 51, 50, 1, 23, 22, 51, 50, 54, 53, 52, 38, 35, 34, 6, 2, 95, 130, 177, 109, 157, 161, 118, 140, 106, 44, 22, 120, 184, 113, 154, 162, 118, 162, 125, 102, 22, 101, 97, 125, 70, 52, 90, 1, 52, 18, 100, 98, 58, 71, 69, 57, 45, 121, 1, 146, 254, 221, 233, 160, 182, 252, 178, 75, 39, 1, 36, 229, 166, 183, 249, 246, 170, 41, 187, 243, 111, 145, 1, 9, 35, 195, 134, 111, 115, 138, 149, 0, 0, 1, 0, 123, 0, 0, 4, 160, 4, 62, 0, 5, 0, 36, 64, 33, 0, 0, 1, 0, 131, 0, 1, 2, 2, 1, 85, 0, 1, 1, 2, 93, 3, 1, 2, 1, 2, 77, 0, 0, 0, 5, 0, 5, 17, 17, 4, 11, 22, 43, 51, 17, 51, 17, 33, 21, 123, 148, 3, 145, 4, 62, 252, 86, 148, 0, 0, 0, 0, 1, 0, 84, 0, 0, 4, 121, 5, 200, 0, 17, 0, 32, 64, 29, 2, 1, 0, 3, 0, 132, 0, 1, 3, 3, 1, 87, 0, 1, 1, 3, 95, 0, 3, 1, 3, 79, 35, 19, 35, 16, 4, 11, 24, 43, 51, 35, 17, 52, 0, 51, 50, 0, 21, 17, 35, 17, 52, 38, 35, 34, 6, 21, 232, 148, 1, 61, 213, 214, 1, 61, 148, 232, 151, 151, 231, 3, 199, 206, 1, 51, 254, 205, 206, 252, 57, 3, 199, 144, 221, 221, 144, 0, 0, 0, 0, 1, 0, 234, 254, 216, 3, 226, 7, 133, 0, 38, 0, 111, 64, 10, 37, 1, 5, 0, 17, 1, 3, 2, 2, 74, 75, 176, 24, 80, 88, 64, 37, 0, 5, 0, 2, 0, 5, 112, 0, 2, 3, 3, 2, 110, 0, 4, 0, 0, 5, 4, 0, 103, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 96, 0, 1, 3, 1, 80, 27, 64, 39, 0, 5, 0, 2, 0, 5, 2, 126, 0, 2, 3, 0, 2, 3, 124, 0, 4, 0, 0, 5, 4, 0, 103, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 96, 0, 1, 3, 1, 80, 89, 64, 9, 36, 38, 51, 36, 37, 48, 6, 11, 26, 43, 1, 38, 35, 34, 17, 19, 17, 16, 2, 35, 34, 38, 53, 52, 54, 51, 50, 21, 20, 7, 22, 51, 50, 17, 39, 3, 17, 16, 18, 51, 50, 22, 21, 20, 6, 35, 34, 53, 52, 3, 48, 8, 4, 101, 9, 149, 173, 65, 91, 59, 37, 88, 4, 10, 5, 97, 3, 8, 151, 175, 65, 88, 59, 40, 84, 7, 12, 1, 254, 148, 254, 48, 254, 179, 253, 225, 254, 115, 73, 52, 40, 62, 83, 7, 16, 2, 1, 80, 117, 1, 120, 1, 77, 2, 29, 1, 143, 72, 53, 43, 62, 83, 8, 0, 2, 0, 84, 0, 219, 4, 121, 3, 216, 0, 21, 0, 43, 0, 107, 64, 104, 0, 8, 6, 10, 6, 8, 10, 126, 13, 1, 11, 7, 9, 7, 11, 9, 126, 0, 2, 0, 4, 0, 2, 4, 126, 12, 1, 5, 1, 3, 1, 5, 3, 126, 0, 6, 0, 10, 7, 6, 10, 103, 0, 7, 0, 9, 0, 7, 9, 103, 0, 0, 0, 4, 1, 0, 4, 103, 0, 1, 5, 3, 1, 87, 0, 1, 1, 3, 95, 0, 3, 1, 3, 79, 22, 22, 0, 0, 22, 43, 22, 43, 42, 40, 37, 35, 33, 32, 31, 29, 26, 24, 0, 21, 0, 21, 35, 34, 17, 35, 34, 14, 11, 25, 43, 55, 52, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 20, 6, 35, 34, 39, 39, 38, 35, 34, 7, 3, 52, 54, 51, 50, 23, 23, 22, 51, 50, 55, 51, 20, 6, 35, 34, 39, 39, 38, 35, 34, 7, 84, 151, 121, 94, 116, 147, 112, 61, 115, 8, 136, 151, 121, 95, 115, 147, 112, 61, 115, 8, 136, 151, 121, 95, 115, 147, 112, 61, 115, 8, 136, 151, 121, 94, 116, 147, 112, 61, 115, 8, 253, 146, 183, 65, 82, 63, 177, 147, 183, 65, 82, 64, 177, 1, 145, 146, 184, 65, 83, 63, 177, 146, 184, 66, 82, 63, 177, 0, 0, 0, 1, 0, 84, 0, 160, 4, 121, 4, 25, 0, 19, 0, 114, 75, 176, 13, 80, 88, 64, 42, 0, 1, 0, 0, 1, 110, 0, 6, 5, 5, 6, 111, 2, 1, 0, 10, 9, 2, 3, 4, 0, 3, 102, 8, 1, 4, 5, 5, 4, 85, 8, 1, 4, 4, 5, 93, 7, 1, 5, 4, 5, 77, 27, 64, 40, 0, 1, 0, 1, 131, 0, 6, 5, 6, 132, 2, 1, 0, 10, 9, 2, 3, 4, 0, 3, 102, 8, 1, 4, 5, 5, 4, 85, 8, 1, 4, 4, 5, 93, 7, 1, 5, 4, 5, 77, 89, 64, 18, 0, 0, 0, 19, 0, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11, 11, 29, 43, 19, 53, 33, 55, 51, 7, 33, 21, 33, 7, 33, 21, 33, 7, 35, 55, 33, 53, 33, 55, 84, 2, 103, 141, 178, 137, 1, 8, 254, 146, 138, 1, 248, 253, 159, 139, 181, 138, 254, 242, 1, 120, 138, 2, 191, 148, 198, 198, 148, 197, 148, 198, 198, 148, 197, 0, 0, 3, 0, 84, 0, 197, 4, 121, 4, 12, 0, 3, 0, 7, 0, 11, 0, 64, 64, 61, 0, 4, 8, 1, 5, 2, 4, 5, 101, 0, 2, 7, 1, 3, 0, 2, 3, 101, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 6, 1, 1, 0, 1, 77, 8, 8, 4, 4, 0, 0, 8, 11, 8, 11, 10, 9, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 9, 11, 21, 43, 55, 53, 33, 21, 1, 53, 33, 21, 1, 53, 33, 21, 84, 4, 37, 251, 219, 4, 37, 251, 219, 4, 37, 197, 149, 149, 1, 90, 148, 148, 1, 89, 148, 148, 0, 2, 0, 84, 0, 0, 4, 121, 5, 77, 0, 3, 0, 9, 0, 39, 64, 36, 9, 8, 7, 6, 5, 4, 6, 0, 72, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 11, 21, 43, 51, 53, 33, 21, 17, 1, 1, 21, 1, 1, 84, 4, 37, 251, 219, 4, 37, 253, 38, 2, 218, 148, 148, 1, 40, 2, 19, 2, 18, 165, 254, 147, 254, 147, 0, 0, 0, 0, 2, 0, 84, 0, 0, 4, 121, 5, 77, 0, 3, 0, 9, 0, 39, 64, 36, 9, 8, 7, 6, 5, 4, 6, 0, 72, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 11, 21, 43, 51, 53, 33, 21, 9, 2, 53, 1, 1, 84, 4, 37, 251, 219, 4, 37, 251, 219, 2, 218, 253, 38, 148, 148, 5, 77, 253, 238, 253, 237, 166, 1, 109, 1, 109, 0, 0, 0, 2, 0, 134, 0, 0, 4, 72, 4, 160, 0, 4, 0, 9, 0, 40, 64, 37, 8, 7, 6, 4, 3, 2, 6, 1, 72, 2, 1, 1, 0, 0, 1, 85, 2, 1, 1, 1, 0, 93, 0, 0, 1, 0, 77, 5, 5, 5, 9, 5, 9, 16, 3, 11, 21, 43, 33, 33, 17, 1, 1, 3, 17, 1, 1, 17, 4, 72, 252, 62, 1, 225, 1, 225, 148, 254, 179, 254, 179, 2, 191, 1, 225, 254, 31, 253, 213, 1, 239, 1, 77, 254, 179, 254, 17, 0, 0, 1, 0, 84, 0, 198, 4, 121, 2, 179, 0, 5, 0, 30, 64, 27, 0, 2, 1, 2, 132, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 0, 1, 0, 1, 77, 17, 17, 16, 3, 11, 23, 43, 19, 33, 21, 33, 17, 35, 84, 4, 37, 252, 111, 148, 2, 179, 148, 254, 167, 0, 0, 0, 0, 1, 2, 3, 254, 80, 3, 226, 6, 80, 0, 20, 0, 82, 181, 13, 1, 2, 3, 1, 74, 75, 176, 24, 80, 88, 64, 27, 0, 2, 3, 0, 3, 2, 112, 0, 0, 0, 130, 0, 1, 3, 3, 1, 87, 0, 1, 1, 3, 95, 0, 3, 1, 3, 79, 27, 64, 28, 0, 2, 3, 0, 3, 2, 0, 126, 0, 0, 0, 130, 0, 1, 3, 3, 1, 87, 0, 1, 1, 3, 95, 0, 3, 1, 3, 79, 89, 182, 51, 36, 35, 16, 4, 11, 24, 43, 1, 35, 17, 16, 18, 51, 50, 22, 21, 20, 6, 35, 34, 53, 52, 55, 38, 35, 34, 17, 19, 2, 200, 197, 151, 175, 65, 88, 59, 40, 84, 5, 8, 4, 101, 9, 254, 80, 4, 164, 1, 205, 1, 143, 72, 54, 42, 62, 83, 8, 17, 2, 254, 147, 254, 128, 0, 1, 0, 234, 254, 80, 2, 201, 7, 143, 0, 20, 0, 80, 181, 13, 1, 3, 2, 1, 74, 75, 176, 23, 80, 88, 64, 27, 0, 0, 2, 0, 131, 0, 2, 3, 3, 2, 110, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 96, 0, 1, 3, 1, 80, 27, 64, 26, 0, 0, 2, 0, 131, 0, 2, 3, 2, 131, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 96, 0, 1, 3, 1, 80, 89, 182, 51, 36, 35, 16, 4, 11, 24, 43, 1, 51, 17, 16, 2, 35, 34, 38, 53, 52, 54, 51, 50, 21, 20, 7, 22, 51, 50, 17, 3, 2, 3, 198, 152, 174, 65, 88, 58, 40, 84, 4, 8, 4, 100, 9, 7, 143, 250, 29, 254, 51, 254, 113, 72, 54, 43, 62, 84, 8, 17, 1, 1, 108, 1, 128, 0, 0, 0, 1, 0, 0, 2, 166, 4, 205, 3, 58, 0, 3, 0, 30, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 11, 21, 43, 17, 53, 33, 21, 4, 205, 2, 166, 148, 148, 0, 0, 0, 1, 2, 29, 254, 80, 2, 177, 7, 143, 0, 3, 0, 17, 64, 14, 0, 0, 1, 0, 131, 0, 1, 1, 116, 17, 16, 2, 11, 22, 43, 1, 51, 17, 35, 2, 29, 148, 148, 7, 143, 246, 193, 0, 0, 1, 2, 29, 254, 80, 4, 205, 3, 58, 0, 5, 0, 30, 64, 27, 0, 2, 1, 2, 132, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 0, 1, 0, 1, 77, 17, 17, 16, 3, 11, 23, 43, 1, 33, 21, 33, 17, 35, 2, 29, 2, 176, 253, 228, 148, 3, 58, 148, 251, 170, 0, 0, 0, 1, 0, 0, 254, 80, 2, 177, 3, 58, 0, 5, 0, 36, 64, 33, 0, 1, 2, 1, 132, 0, 0, 2, 2, 0, 85, 0, 0, 0, 2, 93, 3, 1, 2, 0, 2, 77, 0, 0, 0, 5, 0, 5, 17, 17, 4, 11, 22, 43, 17, 53, 33, 17, 35, 17, 2, 177, 148, 2, 166, 148, 251, 22, 4, 86, 0, 0, 0, 1, 2, 29, 2, 166, 4, 205, 7, 143, 0, 5, 0, 30, 64, 27, 0, 0, 1, 0, 131, 0, 1, 2, 2, 1, 85, 0, 1, 1, 2, 93, 0, 2, 1, 2, 77, 17, 17, 16, 3, 11, 23, 43, 1, 51, 17, 33, 21, 33, 2, 29, 148, 2, 28, 253, 80, 7, 143, 251, 171, 148, 0, 0, 0, 1, 0, 0, 2, 166, 2, 177, 7, 143, 0, 5, 0, 36, 64, 33, 0, 1, 0, 1, 131, 0, 0, 2, 2, 0, 85, 0, 0, 0, 2, 93, 3, 1, 2, 0, 2, 77, 0, 0, 0, 5, 0, 5, 17, 17, 4, 11, 22, 43, 17, 53, 33, 17, 51, 17, 2, 29, 148, 2, 166, 148, 4, 85, 251, 23, 0, 0, 0, 1, 2, 29, 254, 80, 4, 205, 7, 143, 0, 7, 0, 36, 64, 33, 0, 0, 1, 0, 131, 0, 3, 2, 3, 132, 0, 1, 2, 2, 1, 85, 0, 1, 1, 2, 93, 0, 2, 1, 2, 77, 17, 17, 17, 16, 4, 11, 24, 43, 1, 51, 17, 33, 21, 33, 17, 35, 2, 29, 148, 2, 28, 253, 228, 148, 7, 143, 251, 171, 148, 251, 170, 0, 0, 0, 0, 1, 0, 0, 254, 80, 2, 177, 7, 143, 0, 7, 0, 42, 64, 39, 0, 1, 0, 1, 131, 0, 2, 3, 2, 132, 0, 0, 3, 3, 0, 85, 0, 0, 0, 3, 93, 4, 1, 3, 0, 3, 77, 0, 0, 0, 7, 0, 7, 17, 17, 17, 5, 11, 23, 43, 17, 53, 33, 17, 51, 17, 35, 17, 2, 29, 148, 148, 2, 166, 148, 4, 85, 246, 193, 4, 86, 0, 0, 0, 0, 1, 0, 0, 254, 80, 4, 205, 3, 58, 0, 7, 0, 39, 64, 36, 0, 1, 0, 1, 132, 4, 1, 3, 0, 0, 3, 85, 4, 1, 3, 3, 0, 93, 2, 1, 0, 3, 0, 77, 0, 0, 0, 7, 0, 7, 17, 17, 17, 5, 11, 23, 43, 1, 21, 33, 17, 35, 17, 33, 53, 4, 205, 253, 227, 148, 253, 228, 3, 58, 148, 251, 170, 4, 86, 148, 0, 1, 0, 0, 2, 166, 4, 205, 7, 143, 0, 7, 0, 39, 64, 36, 0, 1, 0, 1, 131, 2, 1, 0, 3, 3, 0, 85, 2, 1, 0, 0, 3, 93, 4, 1, 3, 0, 3, 77, 0, 0, 0, 7, 0, 7, 17, 17, 17, 5, 11, 23, 43, 17, 53, 33, 17, 51, 17, 33, 21, 2, 29, 148, 2, 28, 2, 166, 148, 4, 85, 251, 171, 148, 0, 0, 0, 1, 0, 0, 254, 80, 4, 205, 7, 143, 0, 11, 0, 47, 64, 44, 0, 1, 0, 1, 131, 0, 4, 3, 4, 132, 2, 1, 0, 3, 3, 0, 85, 2, 1, 0, 0, 3, 93, 6, 5, 2, 3, 0, 3, 77, 0, 0, 0, 11, 0, 11, 17, 17, 17, 17, 17, 7, 11, 25, 43, 17, 53, 33, 17, 51, 17, 33, 21, 33, 17, 35, 17, 2, 29, 148, 2, 28, 253, 228, 148, 2, 166, 148, 4, 85, 251, 171, 148, 251, 170, 4, 86, 0, 0, 0, 0, 2, 0, 0, 2, 18, 4, 205, 3, 206, 0, 3, 0, 7, 0, 47, 64, 44, 0, 0, 4, 1, 1, 2, 0, 1, 101, 0, 2, 3, 3, 2, 85, 0, 2, 2, 3, 93, 5, 1, 3, 2, 3, 77, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 11, 21, 43, 17, 53, 33, 21, 1, 53, 33, 21, 4, 205, 251, 51, 4, 205, 3, 58, 148, 148, 254, 216, 148, 148, 0, 0, 0, 0, 2, 1, 137, 254, 80, 3, 69, 7, 143, 0, 3, 0, 7, 0, 34, 64, 31, 2, 1, 0, 1, 0, 131, 5, 3, 4, 3, 1, 1, 116, 4, 4, 0, 0, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 6, 11, 21, 43, 1, 17, 51, 17, 51, 17, 51, 17, 1, 137, 148, 148, 148, 254, 80, 9, 63, 246, 193, 9, 63, 246, 193, 0, 0, 0, 0, 1, 2, 29, 254, 80, 4, 205, 3, 206, 0, 9, 0, 46, 64, 43, 5, 1, 4, 3, 4, 132, 0, 0, 0, 1, 2, 0, 1, 101, 0, 2, 3, 3, 2, 85, 0, 2, 2, 3, 93, 0, 3, 2, 3, 77, 0, 0, 0, 9, 0, 9, 17, 17, 17, 17, 6, 11, 24, 43, 1, 17, 33, 21, 33, 21, 33, 21, 33, 17, 2, 29, 2, 176, 253, 228, 2, 28, 253, 228, 254, 80, 5, 126, 148, 148, 148, 252, 62, 0, 0, 0, 0, 1, 1, 137, 254, 80, 4, 205, 3, 58, 0, 9, 0, 40, 64, 37, 5, 4, 2, 2, 1, 2, 132, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 3, 1, 1, 0, 1, 77, 0, 0, 0, 9, 0, 9, 17, 17, 17, 17, 6, 11, 24, 43, 1, 17, 33, 21, 33, 17, 35, 17, 35, 17, 1, 137, 3, 68, 254, 120, 148, 148, 254, 80, 4, 234, 148, 251, 170, 4, 86, 251, 170, 0, 0, 2, 1, 137, 254, 80, 4, 205, 3, 206, 0, 5, 0, 11, 0, 51, 64, 48, 4, 1, 1, 3, 1, 132, 6, 1, 2, 0, 0, 5, 2, 0, 101, 0, 5, 3, 3, 5, 85, 0, 5, 5, 3, 93, 0, 3, 5, 3, 77, 0, 0, 11, 10, 9, 8, 7, 6, 0, 5, 0, 5, 17, 17, 7, 11, 22, 43, 1, 21, 33, 17, 35, 17, 1, 33, 17, 35, 17, 33, 4, 205, 253, 80, 148, 3, 68, 254, 120, 148, 2, 28, 3, 206, 148, 251, 22, 5, 126, 254, 68, 252, 62, 4, 86, 0, 1, 0, 0, 254, 80, 2, 177, 3, 206, 0, 9, 0, 46, 64, 43, 0, 1, 2, 1, 132, 0, 0, 5, 1, 4, 3, 0, 4, 101, 0, 3, 2, 2, 3, 85, 0, 3, 3, 2, 93, 0, 2, 3, 2, 77, 0, 0, 0, 9, 0, 9, 17, 17, 17, 17, 6, 11, 24, 43, 17, 53, 33, 17, 35, 17, 33, 53, 33, 53, 2, 177, 148, 253, 227, 2, 29, 3, 58, 148, 250, 130, 3, 194, 148, 148, 0, 0, 0, 1, 0, 0, 254, 80, 3, 69, 3, 58, 0, 9, 0, 40, 64, 37, 5, 4, 2, 2, 0, 2, 132, 0, 1, 0, 0, 1, 85, 0, 1, 1, 0, 93, 3, 1, 0, 1, 0, 77, 0, 0, 0, 9, 0, 9, 17, 17, 17, 17, 6, 11, 24, 43, 1, 17, 33, 53, 33, 17, 35, 17, 35, 17, 1, 137, 254, 119, 3, 69, 148, 148, 254, 80, 4, 86, 148, 251, 22, 4, 86, 251, 170, 0, 0, 2, 0, 0, 254, 80, 3, 69, 3, 206, 0, 5, 0, 11, 0, 56, 64, 53, 4, 1, 1, 2, 1, 132, 0, 3, 7, 1, 5, 0, 3, 5, 101, 0, 0, 2, 2, 0, 85, 0, 0, 0, 2, 93, 6, 1, 2, 0, 2, 77, 6, 6, 0, 0, 6, 11, 6, 11, 10, 9, 8, 7, 0, 5, 0, 5, 17, 17, 8, 11, 22, 43, 17, 53, 33, 17, 35, 17, 1, 53, 33, 17, 35, 17, 2, 29, 148, 254, 119, 3, 69, 148, 2, 18, 148, 251, 170, 3, 194, 1, 40, 148, 250, 130, 4, 234, 0, 0, 0, 1, 2, 29, 2, 18, 4, 205, 7, 143, 0, 9, 0, 40, 64, 37, 0, 0, 1, 0, 131, 0, 1, 0, 2, 3, 1, 2, 101, 0, 3, 4, 4, 3, 85, 0, 3, 3, 4, 93, 0, 4, 3, 4, 77, 17, 17, 17, 17, 16, 5, 11, 25, 43, 1, 51, 17, 33, 21, 33, 21, 33, 21, 33, 2, 29, 148, 2, 28, 253, 228, 2, 28, 253, 80, 7, 143, 252, 63, 148, 148, 148, 0, 0, 0, 1, 1, 137, 2, 166, 4, 205, 7, 143, 0, 9, 0, 35, 64, 32, 2, 1, 0, 1, 0, 131, 3, 1, 1, 4, 4, 1, 85, 3, 1, 1, 1, 4, 93, 0, 4, 1, 4, 77, 17, 17, 17, 17, 16, 5, 11, 25, 43, 1, 51, 17, 51, 17, 51, 17, 33, 21, 33, 1, 137, 148, 148, 148, 1, 136, 252, 188, 7, 143, 251, 171, 4, 85, 251, 171, 148, 0, 0, 0, 0, 2, 1, 137, 2, 18, 4, 205, 7, 143, 0, 5, 0, 11, 0, 42, 64, 39, 4, 1, 1, 2, 1, 131, 0, 2, 0, 0, 5, 2, 0, 101, 0, 5, 3, 3, 5, 85, 0, 5, 5, 3, 93, 0, 3, 5, 3, 77, 17, 17, 17, 17, 17, 16, 6, 11, 26, 43, 1, 33, 17, 51, 17, 33, 17, 33, 17, 51, 17, 33, 4, 205, 253, 228, 148, 1, 136, 252, 188, 148, 2, 176, 3, 58, 4, 85, 252, 63, 254, 68, 5, 125, 251, 23, 0, 0, 0, 1, 0, 0, 2, 18, 2, 177, 7, 143, 0, 9, 0, 46, 64, 43, 0, 1, 0, 1, 131, 0, 0, 5, 1, 4, 3, 0, 4, 101, 0, 3, 2, 2, 3, 85, 0, 3, 3, 2, 93, 0, 2, 3, 2, 77, 0, 0, 0, 9, 0, 9, 17, 17, 17, 17, 6, 11, 24, 43, 17, 53, 33, 17, 51, 17, 33, 53, 33, 53, 2, 29, 148, 253, 79, 2, 29, 3, 58, 148, 3, 193, 250, 131, 148, 148, 0, 0, 0, 1, 0, 0, 2, 166, 3, 69, 7, 143, 0, 9, 0, 35, 64, 32, 2, 1, 0, 1, 0, 131, 4, 1, 1, 3, 3, 1, 85, 4, 1, 1, 1, 3, 93, 0, 3, 1, 3, 77, 17, 17, 17, 17, 16, 5, 11, 25, 43, 1, 51, 17, 51, 17, 51, 17, 33, 53, 33, 1, 137, 148, 148, 148, 252, 187, 1, 137, 7, 143, 251, 171, 4, 85, 251, 23, 148, 0, 0, 0, 0, 2, 0, 0, 2, 18, 3, 69, 7, 143, 0, 5, 0, 11, 0, 56, 64, 53, 4, 1, 1, 0, 1, 131, 0, 0, 6, 1, 2, 3, 0, 2, 101, 0, 3, 5, 5, 3, 85, 0, 3, 3, 5, 93, 7, 1, 5, 3, 5, 77, 6, 6, 0, 0, 6, 11, 6, 11, 10, 9, 8, 7, 0, 5, 0, 5, 17, 17, 8, 11, 22, 43, 17, 53, 33, 17, 51, 17, 1, 53, 33, 17, 51, 17, 1, 137, 148, 253, 227, 2, 177, 148, 3, 58, 148, 3, 193, 251, 171, 254, 216, 148, 4, 233, 250, 131, 0, 0, 0, 1, 2, 29, 254, 80, 4, 205, 7, 143, 0, 11, 0, 46, 64, 43, 0, 0, 1, 0, 131, 0, 5, 4, 5, 132, 0, 1, 0, 2, 3, 1, 2, 101, 0, 3, 4, 4, 3, 85, 0, 3, 3, 4, 93, 0, 4, 3, 4, 77, 17, 17, 17, 17, 17, 16, 6, 11, 26, 43, 1, 51, 17, 33, 21, 33, 21, 33, 21, 33, 17, 35, 2, 29, 148, 2, 28, 253, 228, 2, 28, 253, 228, 148, 7, 143, 252, 63, 148, 148, 148, 252, 62, 0, 0, 0, 0, 2, 1, 137, 254, 80, 4, 205, 7, 143, 0, 3, 0, 11, 0, 55, 64, 52, 2, 1, 0, 3, 0, 131, 7, 5, 6, 3, 1, 4, 1, 132, 0, 3, 4, 4, 3, 85, 0, 3, 3, 4, 93, 0, 4, 3, 4, 77, 4, 4, 0, 0, 4, 11, 4, 11, 10, 9, 8, 7, 6, 5, 0, 3, 0, 3, 17, 8, 11, 21, 43, 1, 17, 51, 17, 51, 17, 51, 17, 33, 21, 33, 17, 1, 137, 148, 148, 148, 1, 136, 254, 120, 254, 80, 9, 63, 246, 193, 9, 63, 251, 171, 148, 251, 170, 0, 0, 0, 0, 3, 1, 137, 254, 80, 4, 205, 7, 143, 0, 3, 0, 9, 0, 15, 0, 50, 64, 47, 3, 1, 0, 4, 0, 131, 6, 1, 1, 5, 1, 132, 0, 4, 0, 2, 7, 4, 2, 101, 0, 7, 5, 5, 7, 85, 0, 7, 7, 5, 93, 0, 5, 7, 5, 77, 17, 17, 17, 17, 17, 17, 17, 16, 8, 11, 28, 43, 1, 51, 17, 35, 1, 33, 17, 51, 17, 33, 17, 33, 17, 35, 17, 33, 1, 137, 148, 148, 3, 68, 253, 228, 148, 1, 136, 254, 120, 148, 2, 28, 7, 143, 246, 193, 4, 234, 4, 85, 252, 63, 254, 68, 252, 62, 4, 86, 0, 1, 0, 0, 254, 80, 2, 177, 7, 143, 0, 11, 0, 52, 64, 49, 0, 1, 0, 1, 131, 0, 2, 3, 2, 132, 0, 0, 6, 1, 5, 4, 0, 5, 101, 0, 4, 3, 3, 4, 85, 0, 4, 4, 3, 93, 0, 3, 4, 3, 77, 0, 0, 0, 11, 0, 11, 17, 17, 17, 17, 17, 7, 11, 25, 43, 17, 53, 33, 17, 51, 17, 35, 17, 33, 53, 33, 53, 2, 29, 148, 148, 253, 227, 2, 29, 3, 58, 148, 3, 193, 246, 193, 3, 194, 148, 148, 0, 0, 0, 0, 2, 0, 0, 254, 80, 3, 69, 7, 143, 0, 7, 0, 11, 0, 53, 64, 50, 4, 1, 2, 1, 2, 131, 7, 5, 6, 3, 3, 0, 3, 132, 0, 1, 0, 0, 1, 85, 0, 1, 1, 0, 93, 0, 0, 1, 0, 77, 8, 8, 0, 0, 8, 11, 8, 11, 10, 9, 0, 7, 0, 7, 17, 17, 17, 8, 11, 23, 43, 1, 17, 33, 53, 33, 17, 51, 17, 51, 17, 51, 17, 1, 137, 254, 119, 1, 137, 148, 148, 148, 254, 80, 4, 86, 148, 4, 85, 246, 193, 9, 63, 246, 193, 0, 0, 3, 0, 0, 254, 80, 3, 69, 7, 143, 0, 5, 0, 11, 0, 15, 0, 66, 64, 63, 6, 1, 4, 3, 4, 131, 7, 1, 1, 2, 1, 132, 0, 3, 9, 1, 5, 0, 3, 5, 101, 0, 0, 2, 2, 0, 85, 0, 0, 0, 2, 93, 8, 1, 2, 0, 2, 77, 6, 6, 0, 0, 15, 14, 13, 12, 6, 11, 6, 11, 10, 9, 8, 7, 0, 5, 0, 5, 17, 17, 10, 11, 22, 43, 17, 53, 33, 17, 35, 17, 1, 53, 33, 17, 51, 17, 19, 51, 17, 35, 2, 29, 148, 254, 119, 1, 137, 148, 148, 148, 148, 2, 18, 148, 251, 170, 3, 194, 1, 40, 148, 3, 193, 251, 171, 4, 85, 246, 193, 0, 0, 0, 0, 2, 0, 0, 254, 80, 4, 205, 3, 206, 0, 3, 0, 11, 0, 57, 64, 54, 0, 4, 3, 4, 132, 0, 0, 6, 1, 1, 2, 0, 1, 101, 0, 2, 3, 3, 2, 85, 0, 2, 2, 3, 93, 7, 5, 2, 3, 2, 3, 77, 4, 4, 0, 0, 4, 11, 4, 11, 10, 9, 8, 7, 6, 5, 0, 3, 0, 3, 17, 8, 11, 21, 43, 17, 53, 33, 21, 1, 53, 33, 21, 33, 17, 35, 17, 4, 205, 251, 51, 4, 205, 253, 228, 148, 3, 58, 148, 148, 254, 216, 148, 148, 252, 62, 3, 194, 0, 0, 0, 1, 0, 0, 254, 80, 4, 205, 3, 58, 0, 11, 0, 42, 64, 39, 4, 1, 2, 1, 2, 132, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 6, 5, 3, 3, 1, 0, 1, 77, 0, 0, 0, 11, 0, 11, 17, 17, 17, 17, 17, 7, 11, 25, 43, 17, 53, 33, 21, 33, 17, 35, 17, 35, 17, 35, 17, 4, 205, 254, 120, 148, 148, 148, 2, 166, 148, 148, 251, 170, 4, 86, 251, 170, 4, 86, 0, 0, 3, 0, 0, 254, 80, 4, 205, 3, 206, 0, 3, 0, 9, 0, 15, 0, 64, 64, 61, 6, 1, 3, 4, 3, 132, 0, 0, 8, 1, 1, 2, 0, 1, 101, 7, 1, 2, 4, 4, 2, 85, 7, 1, 2, 2, 4, 93, 5, 9, 2, 4, 2, 4, 77, 4, 4, 0, 0, 15, 14, 13, 12, 11, 10, 4, 9, 4, 9, 8, 7, 6, 5, 0, 3, 0, 3, 17, 10, 11, 21, 43, 17, 53, 33, 21, 1, 53, 33, 17, 35, 17, 33, 33, 17, 35, 17, 33, 4, 205, 251, 51, 2, 29, 148, 3, 68, 254, 120, 148, 2, 28, 3, 58, 148, 148, 254, 216, 148, 251, 170, 3, 194, 252, 62, 4, 86, 0, 0, 2, 0, 0, 2, 18, 4, 205, 7, 143, 0, 7, 0, 11, 0, 55, 64, 52, 0, 1, 0, 1, 131, 2, 1, 0, 6, 1, 3, 4, 0, 3, 101, 0, 4, 5, 5, 4, 85, 0, 4, 4, 5, 93, 7, 1, 5, 4, 5, 77, 8, 8, 0, 0, 8, 11, 8, 11, 10, 9, 0, 7, 0, 7, 17, 17, 17, 8, 11, 23, 43, 17, 53, 33, 17, 51, 17, 33, 21, 1, 53, 33, 21, 2, 29, 148, 2, 28, 251, 51, 4, 205, 3, 58, 148, 3, 193, 252, 63, 148, 254, 216, 148, 148, 0, 1, 0, 0, 2, 166, 4, 205, 7, 143, 0, 11, 0, 44, 64, 41, 3, 1, 1, 0, 1, 131, 4, 2, 2, 0, 5, 5, 0, 85, 4, 2, 2, 0, 0, 5, 93, 6, 1, 5, 0, 5, 77, 0, 0, 0, 11, 0, 11, 17, 17, 17, 17, 17, 7, 11, 25, 43, 17, 53, 33, 17, 51, 17, 51, 17, 51, 17, 33, 21, 1, 137, 148, 148, 148, 1, 136, 2, 166, 148, 4, 85, 251, 171, 4, 85, 251, 171, 148, 0, 0, 0, 0, 3, 0, 0, 2, 18, 4, 205, 7, 143, 0, 5, 0, 11, 0, 15, 0, 62, 64, 59, 4, 1, 1, 0, 1, 131, 5, 1, 0, 3, 8, 2, 2, 6, 0, 2, 101, 0, 6, 7, 7, 6, 85, 0, 6, 6, 7, 93, 9, 1, 7, 6, 7, 77, 12, 12, 0, 0, 12, 15, 12, 15, 14, 13, 11, 10, 9, 8, 7, 6, 0, 5, 0, 5, 17, 17, 10, 11, 22, 43, 17, 53, 33, 17, 51, 17, 33, 33, 17, 51, 17, 33, 1, 53, 33, 21, 1, 137, 148, 2, 176, 253, 228, 148, 1, 136, 251, 51, 4, 205, 3, 58, 148, 3, 193, 251, 171, 4, 85, 252, 63, 254, 68, 148, 148, 0, 0, 0, 0, 1, 0, 0, 254, 80, 4, 205, 7, 143, 0, 19, 0, 61, 64, 58, 0, 1, 0, 1, 131, 0, 6, 5, 6, 132, 2, 1, 0, 10, 9, 2, 3, 4, 0, 3, 101, 8, 1, 4, 5, 5, 4, 85, 8, 1, 4, 4, 5, 93, 7, 1, 5, 4, 5, 77, 0, 0, 0, 19, 0, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11, 11, 29, 43, 17, 53, 33, 17, 51, 17, 33, 21, 33, 21, 33, 21, 33, 17, 35, 17, 33, 53, 33, 53, 2, 29, 148, 2, 28, 253, 228, 2, 28, 253, 228, 148, 253, 227, 2, 29, 3, 58, 148, 3, 193, 252, 63, 148, 148, 148, 252, 62, 3, 194, 148, 148, 0, 0, 1, 0, 0, 254, 80, 4, 205, 7, 143, 0, 19, 0, 56, 64, 53, 4, 1, 2, 1, 2, 131, 10, 9, 2, 7, 0, 7, 132, 5, 3, 2, 1, 0, 0, 1, 85, 5, 3, 2, 1, 1, 0, 93, 8, 6, 2, 0, 1, 0, 77, 0, 0, 0, 19, 0, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11, 11, 29, 43, 1, 17, 33, 53, 33, 17, 51, 17, 51, 17, 51, 17, 33, 21, 33, 17, 35, 17, 35, 17, 1, 137, 254, 119, 1, 137, 148, 148, 148, 1, 136, 254, 120, 148, 148, 254, 80, 4, 86, 148, 4, 85, 251, 171, 4, 85, 251, 171, 148, 251, 170, 4, 86, 251, 170, 0, 0, 0, 0, 4, 0, 0, 254, 80, 4, 205, 7, 143, 0, 5, 0, 11, 0, 17, 0, 23, 0, 79, 64, 76, 7, 1, 4, 3, 4, 131, 10, 1, 1, 2, 1, 132, 8, 1, 3, 6, 13, 2, 5, 0, 3, 5, 101, 11, 1, 0, 2, 2, 0, 85, 11, 1, 0, 0, 2, 93, 9, 12, 2, 2, 0, 2, 77, 6, 6, 0, 0, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 6, 11, 6, 11, 10, 9, 8, 7, 0, 5, 0, 5, 17, 17, 14, 11, 22, 43, 17, 53, 33, 17, 35, 17, 1, 53, 33, 17, 51, 17, 33, 33, 17, 51, 17, 33, 17, 33, 17, 35, 17, 33, 2, 29, 148, 254, 119, 1, 137, 148, 2, 176, 253, 228, 148, 1, 136, 254, 120, 148, 2, 28, 2, 18, 148, 251, 170, 3, 194, 1, 40, 148, 3, 193, 251, 171, 4, 85, 252, 63, 254, 68, 252, 62, 4, 86, 0, 0, 1, 0, 0, 2, 240, 4, 205, 7, 143, 0, 3, 0, 23, 64, 20, 0, 0, 1, 0, 131, 2, 1, 1, 1, 116, 0, 0, 0, 3, 0, 3, 17, 3, 11, 21, 43, 17, 17, 33, 17, 4, 205, 2, 240, 4, 159, 251, 97, 0, 0, 0, 0, 1, 0, 0, 254, 80, 4, 205, 2, 240, 0, 3, 0, 17, 64, 14, 0, 0, 1, 0, 131, 0, 1, 1, 116, 17, 16, 2, 11, 22, 43, 17, 33, 17, 33, 4, 205, 251, 51, 2, 240, 251, 96, 0, 0, 1, 0, 0, 254, 80, 4, 205, 7, 143, 0, 3, 0, 17, 64, 14, 0, 0, 1, 0, 131, 0, 1, 1, 116, 17, 16, 2, 11, 22, 43, 17, 33, 17, 33, 4, 205, 251, 51, 7, 143, 246, 193, 0, 0, 1, 0, 0, 254, 80, 2, 103, 7, 143, 0, 3, 0, 17, 64, 14, 0, 0, 1, 0, 131, 0, 1, 1, 116, 17, 16, 2, 11, 22, 43, 17, 33, 17, 33, 2, 103, 253, 153, 7, 143, 246, 193, 0, 0, 1, 2, 102, 254, 80, 4, 205, 7, 143, 0, 3, 0, 17, 64, 14, 0, 0, 1, 0, 131, 0, 1, 1, 116, 17, 16, 2, 11, 22, 43, 1, 33, 17, 33, 2, 102, 2, 103, 253, 153, 7, 143, 246, 193, 0, 0, 0, 0, 18, 0, 0, 254, 80, 4, 205, 6, 203, 0, 3, 0, 7, 0, 11, 0, 15, 0, 19, 0, 23, 0, 27, 0, 31, 0, 35, 0, 39, 0, 43, 0, 47, 0, 51, 0, 55, 0, 59, 0, 63, 0, 67, 0, 71, 0, 249, 64, 246, 20, 10, 2, 0, 46, 21, 41, 11, 36, 5, 1, 2, 0, 1, 101, 22, 12, 2, 2, 47, 23, 42, 13, 37, 5, 3, 4, 2, 3, 101, 24, 14, 2, 4, 48, 25, 43, 15, 38, 5, 5, 6, 4, 5, 101, 26, 16, 2, 6, 49, 27, 44, 17, 39, 5, 7, 8, 6, 7, 101, 28, 18, 2, 8, 50, 29, 45, 19, 40, 5, 9, 30, 8, 9, 101, 34, 32, 2, 30, 31, 31, 30, 85, 34, 32, 2, 30, 30, 31, 93, 53, 35, 52, 33, 51, 5, 31, 30, 31, 77, 68, 68, 64, 64, 60, 60, 56, 56, 52, 52, 48, 48, 44, 44, 40, 40, 36, 36, 32, 32, 28, 28, 24, 24, 20, 20, 16, 16, 12, 12, 8, 8, 4, 4, 0, 0, 68, 71, 68, 71, 70, 69, 64, 67, 64, 67, 66, 65, 60, 63, 60, 63, 62, 61, 56, 59, 56, 59, 58, 57, 52, 55, 52, 55, 54, 53, 48, 51, 48, 51, 50, 49, 44, 47, 44, 47, 46, 45, 40, 43, 40, 43, 42, 41, 36, 39, 36, 39, 38, 37, 32, 35, 32, 35, 34, 33, 28, 31, 28, 31, 30, 29, 24, 27, 24, 27, 26, 25, 20, 23, 20, 23, 22, 21, 16, 19, 16, 19, 18, 17, 12, 15, 12, 15, 14, 13, 8, 11, 8, 11, 10, 9, 4, 7, 4, 7, 6, 5, 0, 3, 0, 3, 17, 54, 11, 21, 43, 17, 53, 51, 21, 3, 53, 51, 21, 1, 53, 51, 21, 3, 53, 51, 21, 1, 53, 51, 21, 19, 53, 51, 21, 3, 53, 51, 21, 1, 53, 51, 21, 3, 53, 51, 21, 1, 53, 51, 21, 19, 53, 51, 21, 3, 53, 51, 21, 1, 53, 51, 21, 3, 53, 51, 21, 1, 53, 51, 21, 1, 53, 51, 21, 51, 53, 51, 21, 51, 53, 51, 21, 206, 1, 206, 254, 101, 206, 1, 206, 254, 101, 206, 203, 206, 1, 206, 254, 101, 206, 1, 206, 254, 101, 206, 203, 206, 1, 206, 254, 101, 206, 1, 206, 254, 101, 206, 252, 206, 205, 203, 206, 203, 206, 6, 6, 197, 197, 254, 117, 197, 197, 254, 118, 197, 197, 254, 116, 197, 197, 254, 118, 197, 197, 6, 43, 197, 197, 254, 117, 197, 197, 254, 118, 197, 197, 254, 116, 197, 197, 254, 118, 197, 197, 6, 43, 197, 197, 254, 117, 197, 197, 254, 118, 197, 197, 254, 116, 197, 197, 254, 118, 197, 197, 254, 117, 196, 196, 196, 196, 196, 196, 0, 0, 36, 0, 0, 254, 80, 4, 205, 7, 143, 0, 3, 0, 7, 0, 11, 0, 15, 0, 19, 0, 23, 0, 27, 0, 31, 0, 35, 0, 39, 0, 43, 0, 47, 0, 51, 0, 55, 0, 59, 0, 63, 0, 67, 0, 71, 0, 75, 0, 79, 0, 83, 0, 87, 0, 91, 0, 95, 0, 99, 0, 103, 0, 107, 0, 111, 0, 115, 0, 119, 0, 123, 0, 127, 0, 131, 0, 135, 0, 139, 0, 143, 0, 0, 17, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 19, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 19, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 19, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 19, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 19, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 3, 53, 51, 21, 1, 53, 51, 21, 51, 53, 51, 21, 51, 53, 51, 21, 1, 53, 51, 21, 51, 53, 51, 21, 51, 53, 51, 21, 204, 204, 204, 204, 204, 204, 204, 204, 204, 2, 204, 204, 204, 204, 204, 204, 204, 204, 204, 2, 204, 204, 204, 204, 204, 204, 204, 204, 204, 2, 204, 204, 204, 204, 204, 204, 204, 204, 204, 2, 204, 204, 204, 204, 204, 204, 204, 204, 204, 2, 199, 199, 199, 199, 199, 199, 199, 199, 199, 251, 51, 204, 208, 204, 208, 204, 252, 202, 204, 208, 204, 208, 199, 5, 65, 195, 195, 254, 117, 196, 196, 254, 117, 195, 195, 254, 117, 195, 195, 254, 116, 196, 196, 6, 243, 195, 195, 254, 117, 195, 195, 254, 116, 196, 196, 254, 117, 196, 196, 254, 117, 196, 196, 5, 103, 195, 195, 254, 117, 196, 196, 254, 117, 195, 195, 254, 117, 195, 195, 254, 116, 196, 196, 6, 243, 195, 195, 254, 117, 195, 195, 254, 116, 196, 196, 254, 117, 196, 196, 254, 117, 196, 196, 5, 103, 195, 195, 254, 117, 196, 196, 254, 117, 195, 195, 254, 117, 195, 195, 254, 116, 196, 196, 6, 243, 195, 195, 254, 117, 195, 195, 254, 116, 196, 196, 254, 117, 196, 196, 254, 117, 196, 196, 6, 241, 196, 196, 196, 196, 196, 196, 247, 133, 195, 195, 195, 195, 195, 195, 0, 0, 0, 0, 19, 0, 0, 254, 80, 4, 205, 7, 143, 0, 3, 0, 7, 0, 11, 0, 15, 0, 19, 0, 23, 0, 27, 0, 31, 0, 35, 0, 39, 0, 43, 0, 47, 0, 51, 0, 55, 0, 59, 0, 63, 0, 67, 0, 71, 0, 75, 0, 0, 19, 53, 35, 21, 1, 53, 35, 21, 19, 53, 35, 21, 1, 53, 35, 21, 19, 53, 35, 21, 1, 53, 35, 21, 1, 53, 35, 21, 19, 53, 35, 21, 1, 53, 35, 21, 19, 53, 35, 21, 1, 53, 35, 21, 1, 53, 35, 21, 19, 53, 35, 21, 1, 53, 35, 21, 19, 53, 35, 21, 1, 53, 35, 21, 33, 53, 35, 21, 33, 53, 35, 21, 1, 33, 17, 33, 206, 206, 1, 155, 206, 1, 206, 1, 155, 206, 1, 206, 2, 103, 206, 1, 155, 206, 1, 206, 1, 155, 206, 1, 206, 2, 103, 206, 1, 155, 206, 1, 206, 1, 155, 206, 1, 206, 254, 105, 205, 2, 102, 206, 2, 103, 206, 252, 1, 4, 205, 251, 51, 6, 6, 197, 197, 254, 117, 197, 197, 254, 118, 197, 197, 254, 116, 197, 197, 254, 118, 197, 197, 6, 43, 197, 197, 254, 117, 197, 197, 254, 118, 197, 197, 254, 116, 197, 197, 254, 118, 197, 197, 6, 43, 197, 197, 254, 117, 197, 197, 254, 118, 197, 197, 254, 116, 197, 197, 254, 118, 197, 197, 254, 117, 196, 196, 196, 196, 196, 196, 9, 63, 246, 193, 0, 0, 1, 0, 72, 0, 0, 4, 134, 4, 62, 0, 3, 0, 23, 64, 20, 0, 0, 1, 0, 131, 2, 1, 1, 1, 116, 0, 0, 0, 3, 0, 3, 17, 3, 11, 21, 43, 51, 17, 33, 17, 72, 4, 62, 4, 62, 251, 194, 0, 2, 0, 72, 0, 0, 4, 134, 4, 62, 0, 3, 0, 7, 0, 42, 64, 39, 0, 0, 0, 3, 2, 0, 3, 101, 0, 2, 1, 1, 2, 85, 0, 2, 2, 1, 93, 4, 1, 1, 2, 1, 77, 0, 0, 7, 6, 5, 4, 0, 3, 0, 3, 17, 5, 11, 21, 43, 51, 17, 33, 17, 37, 33, 17, 33, 72, 4, 62, 252, 37, 3, 120, 252, 136, 4, 62, 251, 194, 99, 3, 120, 0, 0, 0, 1, 1, 63, 1, 40, 3, 143, 3, 120, 0, 3, 0, 23, 64, 20, 0, 0, 1, 0, 131, 2, 1, 1, 1, 116, 0, 0, 0, 3, 0, 3, 17, 3, 11, 21, 43, 1, 17, 33, 17, 1, 63, 2, 80, 1, 40, 2, 80, 253, 176, 0, 0, 2, 1, 63, 1, 40, 3, 143, 3, 120, 0, 3, 0, 7, 0, 42, 64, 39, 0, 0, 0, 3, 2, 0, 3, 101, 0, 2, 1, 1, 2, 85, 0, 2, 2, 1, 93, 4, 1, 1, 2, 1, 77, 0, 0, 7, 6, 5, 4, 0, 3, 0, 3, 17, 5, 11, 21, 43, 1, 17, 33, 17, 37, 33, 17, 33, 1, 63, 2, 80, 254, 19, 1, 138, 254, 118, 1, 40, 2, 80, 253, 176, 99, 1, 138, 0, 0, 0, 0, 1, 0, 72, 2, 113, 4, 134, 3, 219, 0, 3, 0, 30, 64, 27, 0, 0, 1, 1, 0, 85, 0, 0, 0, 1, 93, 2, 1, 1, 0, 1, 77, 0, 0, 0, 3, 0, 3, 17, 3, 11, 21, 43, 19, 17, 33, 17, 72, 4, 62, 2, 113, 1, 106, 254, 150, 0, 0, 0, 0, 1, 0, 53, 0, 0, 4, 152, 4, 160, 0, 2, 0, 15, 64, 12, 2, 1, 0, 72, 0, 0, 0, 116, 16, 1, 11, 21, 43, 33, 33, 1, 4, 152, 251, 157, 2, 49, 4, 160, 0, 1, 0, 54, 0, 0, 4, 153, 4, 160, 0, 2, 0, 6, 179, 1, 0, 1, 48, 43, 51, 17, 1, 54, 4, 99, 4, 160, 253, 176, 0, 0, 0, 1, 0, 53, 0, 0, 4, 152, 4, 160, 0, 2, 0, 15, 64, 12, 2, 1, 0, 71, 0, 0, 0, 116, 16, 1, 11, 21, 43, 19, 33, 1, 53, 4, 99, 253, 206, 4, 160, 251, 96, 0, 0, 0, 0, 1, 0, 52, 0, 0, 4, 151, 4, 160, 0, 2, 0, 6, 179, 1, 0, 1, 48, 43, 1, 17, 1, 4, 151, 251, 157, 4, 160, 251, 96, 2, 80, 0, 0, 0, 0, 2, 0, 47, 255, 231, 4, 158, 4, 86, 0, 3, 0, 7, 0, 8, 181, 6, 4, 2, 0, 2, 48, 43, 5, 9, 6, 2, 102, 253, 201, 2, 56, 2, 55, 253, 201, 1, 102, 254, 154, 254, 153, 25, 2, 56, 2, 55, 253, 201, 254, 154, 1, 102, 1, 102, 254, 154, 0, 0, 0, 2, 0, 60, 255, 244, 4, 146, 4, 74, 0, 11, 0, 23, 0, 49, 64, 46, 0, 1, 0, 3, 2, 1, 3, 103, 5, 1, 2, 0, 0, 2, 87, 5, 1, 2, 2, 0, 95, 4, 1, 0, 2, 0, 79, 13, 12, 1, 0, 19, 17, 12, 23, 13, 23, 7, 5, 0, 11, 1, 11, 6, 11, 20, 43, 5, 34, 0, 53, 52, 0, 51, 50, 0, 21, 20, 0, 39, 50, 54, 53, 52, 38, 35, 34, 6, 21, 20, 22, 2, 96, 225, 254, 189, 1, 69, 230, 230, 1, 69, 254, 186, 234, 183, 254, 253, 179, 179, 253, 252, 12, 1, 71, 228, 230, 1, 69, 254, 187, 229, 233, 254, 189, 123, 251, 182, 178, 253, 253, 179, 178, 254, 0, 1, 0, 60, 255, 244, 4, 146, 4, 74, 0, 11, 0, 24, 64, 21, 0, 1, 0, 1, 131, 2, 1, 0, 0, 116, 1, 0, 7, 5, 0, 11, 1, 11, 3, 11, 20, 43, 5, 34, 0, 53, 52, 0, 51, 50, 0, 21, 20, 0, 2, 96, 225, 254, 189, 1, 69, 230, 230, 1, 69, 254, 186, 12, 1, 71, 228, 230, 1, 69, 254, 187, 229, 233, 254, 189, 0, 2, 0, 0, 254, 80, 4, 205, 7, 143, 0, 3, 0, 15, 0, 36, 64, 33, 0, 1, 3, 1, 131, 0, 3, 2, 3, 131, 4, 1, 2, 0, 2, 131, 0, 0, 0, 116, 5, 4, 11, 9, 4, 15, 5, 15, 17, 16, 5, 11, 22, 43, 1, 33, 17, 33, 1, 50, 0, 53, 52, 0, 35, 34, 0, 21, 20, 0, 4, 205, 251, 51, 4, 205, 253, 147, 188, 1, 7, 254, 253, 185, 184, 254, 252, 1, 2, 254, 80, 9, 63, 249, 165, 1, 1, 184, 186, 1, 5, 254, 252, 184, 181, 254, 249, 0, 0, 0, 0, 3, 0, 0, 254, 80, 4, 205, 7, 143, 0, 3, 0, 15, 0, 27, 0, 55, 64, 52, 0, 0, 3, 0, 131, 0, 3, 5, 3, 131, 0, 5, 4, 5, 131, 7, 1, 4, 2, 4, 131, 6, 1, 2, 1, 2, 131, 0, 1, 1, 116, 17, 16, 5, 4, 23, 21, 16, 27, 17, 27, 11, 9, 4, 15, 5, 15, 17, 16, 8, 11, 22, 43, 17, 33, 17, 33, 1, 50, 0, 53, 52, 0, 35, 34, 0, 21, 20, 0, 55, 34, 38, 53, 52, 54, 51, 50, 22, 21, 20, 6, 4, 205, 251, 51, 2, 96, 236, 1, 70, 254, 186, 229, 230, 254, 187, 1, 67, 226, 174, 252, 253, 179, 178, 254, 254, 7, 143, 246, 193, 2, 117, 1, 66, 234, 229, 1, 69, 254, 187, 230, 228, 254, 185, 123, 255, 177, 179, 253, 253, 178, 182, 251, 0, 0, 0, 0, 2, 0, 171, 0, 222, 4, 35, 4, 86, 0, 11, 0, 23, 0, 49, 64, 46, 0, 1, 0, 3, 2, 1, 3, 103, 5, 1, 2, 0, 0, 2, 87, 5, 1, 2, 2, 0, 95, 4, 1, 0, 2, 0, 79, 13, 12, 1, 0, 19, 17, 12, 23, 13, 23, 7, 5, 0, 11, 1, 11, 6, 11, 20, 43, 37, 34, 0, 53, 52, 0, 51, 50, 0, 21, 20, 0, 39, 50, 54, 53, 52, 38, 35, 34, 6, 21, 20, 22, 2, 96, 179, 254, 254, 1, 4, 184, 185, 1, 3, 254, 249, 186, 135, 191, 187, 134, 133, 188, 187, 222, 1, 7, 181, 184, 1, 4, 254, 251, 186, 184, 254, 255, 123, 186, 133, 134, 189, 188, 133, 131, 190, 0, 5, 0, 60, 255, 244, 4, 146, 4, 74, 0, 11, 0, 23, 0, 35, 0, 43, 0, 51, 0, 102, 64, 99, 6, 1, 4, 8, 5, 8, 4, 5, 126, 0, 1, 0, 3, 9, 1, 3, 103, 11, 1, 9, 15, 10, 14, 3, 8, 4, 9, 8, 103, 0, 5, 0, 7, 2, 5, 7, 103, 13, 1, 2, 0, 0, 2, 87, 13, 1, 2, 2, 0, 95, 12, 1, 0, 2, 0, 79, 45, 44, 37, 36, 13, 12, 1, 0, 49, 47, 44, 51, 45, 51, 41, 39, 36, 43, 37, 43, 34, 32, 30, 29, 28, 26, 25, 24, 19, 17, 12, 23, 13, 23, 7, 5, 0, 11, 1, 11, 16, 11, 20, 43, 5, 34, 0, 53, 52, 0, 51, 50, 0, 21, 20, 0, 39, 50, 0, 53, 52, 0, 35, 34, 0, 21, 20, 0, 3, 51, 22, 51, 50, 55, 51, 6, 6, 35, 34, 38, 19, 34, 53, 52, 51, 50, 21, 20, 33, 34, 53, 52, 51, 50, 21, 20, 2, 96, 225, 254, 189, 1, 69, 230, 230, 1, 69, 254, 186, 234, 191, 1, 8, 254, 248, 186, 186, 254, 249, 1, 5, 155, 79, 52, 212, 212, 52, 80, 22, 186, 136, 136, 186, 145, 87, 88, 88, 1, 7, 87, 88, 88, 12, 1, 71, 228, 230, 1, 69, 254, 187, 229, 233, 254, 189, 105, 1, 6, 189, 185, 1, 7, 254, 249, 186, 185, 254, 247, 1, 163, 216, 216, 152, 178, 179, 1, 14, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0, 0, 0, 4, 0, 59, 255, 244, 4, 146, 4, 74, 0, 11, 0, 23, 0, 31, 0, 39, 0, 89, 64, 86, 11, 5, 2, 3, 6, 4, 6, 3, 4, 126, 0, 1, 9, 1, 7, 6, 1, 7, 103, 13, 8, 12, 3, 6, 0, 4, 2, 6, 4, 103, 0, 2, 0, 0, 2, 87, 0, 2, 2, 0, 95, 10, 1, 0, 2, 0, 79, 33, 32, 25, 24, 12, 12, 1, 0, 37, 35, 32, 39, 33, 39, 29, 27, 24, 31, 25, 31, 12, 23, 12, 23, 22, 20, 19, 18, 16, 14, 7, 5, 0, 11, 1, 11, 14, 11, 20, 43, 5, 34, 0, 53, 52, 0, 51, 50, 0, 21, 20, 0, 1, 22, 22, 51, 50, 54, 55, 35, 6, 35, 34, 39, 55, 50, 53, 52, 35, 34, 21, 20, 33, 50, 53, 52, 35, 34, 21, 20, 2, 96, 225, 254, 188, 1, 69, 230, 230, 1, 70, 254, 185, 253, 196, 21, 187, 135, 136, 186, 22, 79, 52, 213, 212, 52, 87, 89, 88, 88, 1, 184, 89, 88, 89, 12, 1, 71, 228, 230, 1, 69, 254, 187, 229, 233, 254, 189, 2, 12, 151, 179, 178, 152, 216, 216, 119, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0, 0, 2, 0, 59, 0, 123, 4, 146, 4, 210, 0, 11, 0, 51, 0, 101, 64, 98, 37, 36, 35, 33, 30, 28, 27, 26, 8, 1, 4, 38, 25, 2, 3, 1, 45, 18, 2, 0, 2, 50, 48, 47, 46, 17, 16, 15, 13, 8, 7, 0, 4, 74, 0, 4, 0, 1, 3, 4, 1, 103, 5, 1, 3, 6, 1, 2, 0, 3, 2, 101, 8, 1, 0, 7, 7, 0, 87, 8, 1, 0, 0, 7, 93, 9, 1, 7, 0, 7, 77, 12, 12, 1, 0, 12, 51, 12, 51, 43, 42, 41, 40, 32, 31, 23, 22, 21, 20, 7, 5, 0, 11, 1, 11, 10, 11, 20, 43, 1, 50, 54, 53, 52, 38, 35, 34, 6, 21, 20, 22, 19, 53, 38, 39, 7, 39, 55, 38, 39, 35, 53, 51, 54, 55, 39, 55, 23, 54, 55, 53, 51, 21, 22, 23, 55, 23, 7, 22, 23, 51, 21, 35, 6, 7, 23, 7, 39, 6, 7, 21, 2, 100, 105, 145, 145, 102, 102, 145, 144, 29, 81, 67, 119, 104, 118, 44, 17, 168, 168, 16, 45, 118, 104, 119, 67, 81, 148, 81, 67, 118, 105, 118, 45, 16, 167, 167, 17, 44, 118, 105, 119, 66, 81, 1, 176, 144, 103, 102, 145, 145, 102, 101, 146, 254, 203, 168, 18, 43, 118, 104, 118, 70, 79, 148, 76, 72, 118, 105, 119, 43, 19, 167, 167, 19, 43, 119, 105, 118, 72, 76, 148, 79, 70, 118, 104, 118, 43, 18, 168, 0, 0, 0, 2, 0, 121, 0, 0, 4, 84, 5, 200, 0, 22, 0, 34, 0, 127, 182, 17, 5, 2, 1, 6, 1, 74, 75, 176, 9, 80, 88, 64, 41, 9, 1, 6, 7, 1, 1, 6, 112, 8, 1, 5, 0, 5, 132, 0, 2, 0, 7, 6, 2, 7, 103, 3, 1, 1, 0, 0, 1, 85, 3, 1, 1, 1, 0, 94, 4, 1, 0, 1, 0, 78, 27, 64, 42, 9, 1, 6, 7, 1, 7, 6, 1, 126, 8, 1, 5, 0, 5, 132, 0, 2, 0, 7, 6, 2, 7, 103, 3, 1, 1, 0, 0, 1, 85, 3, 1, 1, 1, 0, 94, 4, 1, 0, 1, 0, 78, 89, 64, 22, 24, 23, 0, 0, 30, 28, 23, 34, 24, 34, 0, 22, 0, 22, 17, 22, 38, 17, 17, 10, 11, 25, 43, 33, 53, 35, 53, 51, 53, 38, 2, 53, 52, 0, 51, 50, 0, 21, 20, 2, 7, 21, 51, 21, 35, 21, 3, 50, 54, 53, 52, 38, 35, 34, 6, 21, 20, 22, 2, 28, 246, 246, 180, 239, 1, 33, 204, 205, 1, 33, 240, 180, 247, 247, 78, 146, 204, 203, 143, 142, 203, 202, 197, 148, 156, 25, 1, 22, 185, 203, 1, 32, 254, 224, 203, 185, 254, 234, 25, 156, 148, 197, 2, 130, 204, 146, 140, 200, 200, 141, 143, 206, 0, 2, 0, 1, 0, 0, 4, 205, 5, 237, 0, 20, 0, 32, 0, 50, 64, 47, 20, 7, 5, 3, 3, 1, 1, 74, 6, 4, 3, 2, 1, 5, 1, 72, 0, 1, 0, 3, 2, 1, 3, 103, 0, 2, 0, 0, 2, 87, 0, 2, 2, 0, 95, 0, 0, 2, 0, 79, 36, 36, 36, 43, 4, 11, 24, 43, 1, 5, 39, 37, 19, 7, 3, 3, 22, 21, 20, 0, 35, 34, 0, 53, 52, 0, 51, 50, 23, 1, 20, 22, 51, 50, 54, 53, 52, 38, 35, 34, 6, 3, 106, 254, 241, 41, 2, 9, 146, 143, 79, 206, 187, 254, 221, 207, 202, 254, 225, 1, 37, 212, 75, 94, 253, 242, 202, 146, 141, 202, 201, 146, 140, 204, 5, 23, 76, 145, 145, 253, 243, 40, 1, 29, 254, 159, 165, 223, 206, 254, 222, 1, 34, 204, 207, 1, 30, 29, 254, 55, 148, 205, 203, 142, 145, 201, 200, 0, 0, 0, 0, 1, 0, 22, 0, 0, 4, 183, 5, 200, 0, 26, 0, 32, 64, 29, 25, 13, 1, 3, 0, 72, 1, 1, 0, 2, 0, 131, 3, 1, 2, 2, 116, 0, 0, 0, 26, 0, 26, 24, 22, 34, 4, 11, 21, 43, 33, 19, 6, 35, 34, 38, 53, 52, 63, 2, 54, 55, 55, 23, 22, 31, 2, 22, 21, 20, 6, 35, 34, 39, 19, 1, 210, 105, 139, 147, 109, 154, 147, 60, 65, 144, 144, 32, 32, 145, 144, 64, 61, 147, 155, 109, 147, 139, 105, 2, 18, 185, 162, 114, 137, 162, 64, 69, 153, 225, 49, 49, 225, 153, 69, 64, 162, 138, 114, 161, 185, 253, 238, 0, 0, 1, 0, 23, 0, 0, 4, 183, 5, 200, 0, 32, 0, 48, 64, 45, 31, 21, 11, 1, 4, 0, 1, 1, 74, 0, 2, 1, 2, 131, 3, 1, 1, 0, 1, 131, 4, 1, 0, 5, 0, 131, 6, 1, 5, 5, 116, 0, 0, 0, 32, 0, 32, 36, 37, 37, 36, 34, 7, 11, 25, 43, 33, 19, 6, 35, 34, 38, 53, 52, 54, 51, 50, 23, 38, 53, 52, 54, 51, 50, 22, 21, 20, 7, 54, 51, 50, 22, 21, 20, 6, 35, 34, 39, 19, 1, 211, 99, 119, 145, 118, 161, 147, 109, 84, 104, 136, 165, 119, 120, 164, 136, 104, 84, 109, 147, 161, 118, 145, 118, 98, 2, 80, 185, 165, 120, 115, 155, 55, 133, 148, 123, 169, 169, 123, 148, 133, 55, 155, 115, 120, 165, 185, 253, 176, 0, 0, 0, 0, 1, 0, 22, 0, 0, 4, 183, 5, 200, 0, 15, 0, 17, 64, 14, 8, 1, 0, 71, 1, 1, 0, 0, 116, 34, 37, 2, 11, 22, 43, 33, 38, 0, 53, 52, 54, 51, 50, 23, 54, 51, 50, 22, 21, 20, 0, 2, 102, 245, 254, 165, 163, 133, 195, 101, 102, 194, 133, 164, 254, 163, 189, 2, 99, 241, 197, 242, 234, 234, 242, 197, 241, 253, 156, 0, 0, 1, 0, 23, 0, 0, 4, 183, 5, 200, 0, 11, 0, 6, 179, 9, 3, 1, 48, 43, 1, 6, 2, 3, 2, 2, 39, 54, 18, 55, 22, 18, 4, 183, 216, 212, 164, 164, 210, 218, 209, 232, 151, 151, 232, 2, 228, 213, 254, 247, 254, 250, 1, 7, 1, 7, 214, 199, 1, 33, 252, 251, 254, 222, 0, 1, 0, 88, 255, 219, 4, 76, 5, 200, 0, 32, 0, 44, 64, 41, 20, 11, 10, 3, 2, 0, 0, 1, 1, 2, 2, 74, 0, 0, 2, 0, 131, 0, 2, 1, 1, 2, 87, 0, 2, 2, 1, 95, 0, 1, 2, 1, 79, 32, 30, 26, 24, 17, 3, 11, 21, 43, 1, 17, 51, 21, 20, 23, 23, 22, 21, 20, 7, 39, 54, 53, 52, 39, 39, 38, 39, 38, 39, 17, 16, 7, 6, 35, 34, 38, 53, 52, 54, 51, 50, 1, 241, 99, 217, 70, 217, 107, 69, 62, 88, 74, 22, 52, 90, 64, 99, 99, 143, 73, 94, 174, 117, 60, 1, 45, 4, 155, 26, 131, 166, 53, 165, 140, 104, 135, 52, 84, 61, 61, 78, 67, 19, 37, 65, 65, 253, 45, 254, 255, 103, 103, 76, 60, 90, 135, 0, 0, 0, 1, 0, 23, 254, 216, 4, 120, 5, 237, 0, 27, 0, 51, 64, 48, 26, 1, 1, 3, 11, 1, 0, 2, 2, 74, 27, 13, 12, 0, 4, 3, 72, 0, 1, 2, 0, 1, 87, 0, 3, 0, 2, 0, 3, 2, 103, 0, 1, 1, 0, 95, 0, 0, 1, 0, 79, 35, 40, 35, 35, 4, 11, 24, 43, 1, 17, 20, 6, 35, 34, 53, 52, 54, 51, 50, 23, 17, 1, 17, 20, 6, 7, 6, 35, 34, 53, 52, 54, 51, 50, 23, 17, 2, 15, 169, 163, 172, 172, 118, 64, 51, 2, 204, 38, 56, 98, 139, 170, 172, 123, 51, 56, 3, 228, 252, 198, 229, 237, 140, 92, 133, 24, 4, 103, 1, 89, 252, 15, 150, 145, 59, 105, 135, 91, 130, 22, 3, 95, 0, 0, 13, 0, 81, 255, 114, 4, 124, 4, 85, 0, 23, 0, 35, 0, 47, 0, 70, 0, 91, 0, 105, 0, 117, 0, 128, 0, 154, 0, 238, 1, 6, 1, 20, 1, 32, 8, 68, 75, 176, 11, 80, 88, 65, 35, 0, 236, 0, 158, 0, 2, 0, 1, 0, 16, 0, 223, 0, 171, 0, 2, 0, 2, 0, 1, 0, 39, 0, 17, 0, 2, 0, 3, 0, 2, 0, 245, 0, 1, 0, 4, 0, 9, 1, 24, 1, 10, 0, 2, 0, 26, 0, 22, 0, 145, 0, 1, 0, 14, 0, 6, 0, 215, 0, 181, 0, 2, 0, 18, 0, 7, 0, 7, 0, 74, 27, 75, 176, 12, 80, 88, 65, 35, 0, 236, 0, 158, 0, 2, 0, 1, 0, 16, 0, 223, 0, 171, 0, 2, 0, 2, 0, 1, 0, 39, 0, 17, 0, 2, 0, 3, 0, 2, 0, 245, 0, 1, 0, 4, 0, 8, 1, 24, 1, 10, 0, 2, 0, 26, 0, 22, 0, 145, 0, 1, 0, 14, 0, 6, 0, 215, 0, 181, 0, 2, 0, 18, 0, 7, 0, 7, 0, 74, 27, 75, 176, 14, 80, 88, 65, 35, 0, 236, 0, 158, 0, 2, 0, 1, 0, 16, 0, 223, 0, 171, 0, 2, 0, 2, 0, 1, 0, 39, 0, 17, 0, 2, 0, 3, 0, 2, 0, 245, 0, 1, 0, 4, 0, 9, 1, 24, 1, 10, 0, 2, 0, 26, 0, 22, 0, 145, 0, 1, 0, 14, 0, 6, 0, 215, 0, 181, 0, 2, 0, 18, 0, 7, 0, 7, 0, 74, 27, 75, 176, 15, 80, 88, 65, 35, 0, 236, 0, 158, 0, 2, 0, 1, 0, 16, 0, 223, 0, 171, 0, 2, 0, 2, 0, 1, 0, 39, 0, 17, 0, 2, 0, 3, 0, 2, 0, 245, 0, 1, 0, 4, 0, 8, 1, 24, 1, 10, 0, 2, 0, 26, 0, 22, 0, 145, 0, 1, 0, 14, 0, 6, 0, 215, 0, 181, 0, 2, 0, 18, 0, 7, 0, 7, 0, 74, 27, 75, 176, 17, 80, 88, 65, 35, 0, 236, 0, 158, 0, 2, 0, 1, 0, 16, 0, 223, 0, 171, 0, 2, 0, 2, 0, 1, 0, 39, 0, 17, 0, 2, 0, 3, 0, 2, 0, 245, 0, 1, 0, 4, 0, 9, 1, 24, 1, 10, 0, 2, 0, 26, 0, 22, 0, 145, 0, 1, 0, 14, 0, 6, 0, 215, 0, 181, 0, 2, 0, 18, 0, 7, 0, 7, 0, 74, 27, 75, 176, 18, 80, 88, 65, 35, 0, 236, 0, 158, 0, 2, 0, 1, 0, 16, 0, 223, 0, 171, 0, 2, 0, 2, 0, 1, 0, 39, 0, 17, 0, 2, 0, 3, 0, 2, 0, 245, 0, 1, 0, 4, 0, 8, 1, 24, 1, 10, 0, 2, 0, 26, 0, 22, 0, 145, 0, 1, 0, 14, 0, 6, 0, 215, 0, 181, 0, 2, 0, 18, 0, 7, 0, 7, 0, 74, 27, 75, 176, 27, 80, 88, 65, 35, 0, 236, 0, 158, 0, 2, 0, 1, 0, 16, 0, 223, 0, 171, 0, 2, 0, 2, 0, 1, 0, 39, 0, 17, 0, 2, 0, 3, 0, 2, 0, 245, 0, 1, 0, 4, 0, 9, 1, 24, 1, 10, 0, 2, 0, 26, 0, 22, 0, 145, 0, 1, 0, 14, 0, 6, 0, 215, 0, 181, 0, 2, 0, 18, 0, 7, 0, 7, 0, 74, 27, 75, 176, 28, 80, 88, 65, 35, 0, 236, 0, 158, 0, 2, 0, 1, 0, 16, 0, 223, 0, 171, 0, 2, 0, 2, 0, 1, 0, 39, 0, 17, 0, 2, 0, 3, 0, 2, 0, 245, 0, 1, 0, 4, 0, 8, 1, 24, 1, 10, 0, 2, 0, 26, 0, 22, 0, 145, 0, 1, 0, 14, 0, 6, 0, 215, 0, 181, 0, 2, 0, 18, 0, 7, 0, 7, 0, 74, 27, 65, 35, 0, 236, 0, 158, 0, 2, 0, 1, 0, 16, 0, 223, 0, 171, 0, 2, 0, 2, 0, 1, 0, 39, 0, 17, 0, 2, 0, 3, 0, 2, 0, 245, 0, 1, 0, 4, 0, 9, 1, 24, 1, 10, 0, 2, 0, 26, 0, 22, 0, 145, 0, 1, 0, 14, 0, 6, 0, 215, 0, 181, 0, 2, 0, 18, 0, 7, 0, 7, 0, 74, 89, 89, 89, 89, 89, 89, 89, 89, 75, 176, 11, 80, 88, 64, 125, 21, 1, 16, 15, 1, 15, 16, 1, 126, 5, 1, 1, 2, 15, 1, 2, 124, 28, 1, 0, 23, 25, 23, 0, 25, 126, 0, 25, 22, 23, 25, 22, 124, 24, 35, 2, 22, 26, 23, 22, 26, 124, 13, 1, 6, 26, 14, 26, 6, 14, 126, 0, 14, 7, 7, 14, 110, 32, 10, 29, 3, 2, 11, 1, 3, 9, 2, 3, 103, 34, 1, 15, 0, 9, 4, 15, 9, 103, 31, 8, 30, 3, 4, 0, 23, 0, 4, 23, 103, 33, 12, 2, 7, 18, 17, 7, 87, 0, 18, 19, 26, 18, 85, 27, 1, 26, 0, 19, 17, 26, 19, 103, 33, 12, 2, 7, 7, 17, 96, 20, 1, 17, 7, 17, 80, 27, 75, 176, 12, 80, 88, 64, 132, 21, 1, 16, 15, 1, 15, 16, 1, 126, 5, 1, 1, 2, 15, 1, 2, 124, 30, 1, 4, 8, 23, 8, 4, 23, 126, 28, 1, 0, 23, 25, 23, 0, 25, 126, 0, 25, 22, 23, 25, 22, 124, 24, 35, 2, 22, 26, 23, 22, 26, 124, 13, 1, 6, 26, 14, 26, 6, 14, 126, 0, 14, 7, 7, 14, 110, 32, 10, 29, 3, 2, 11, 1, 3, 9, 2, 3, 103, 34, 1, 15, 0, 9, 8, 15, 9, 103, 31, 1, 8, 0, 23, 0, 8, 23, 103, 33, 12, 2, 7, 18, 17, 7, 87, 0, 18, 19, 26, 18, 85, 27, 1, 26, 0, 19, 17, 26, 19, 103, 33, 12, 2, 7, 7, 17, 96, 20, 1, 17, 7, 17, 80, 27, 75, 176, 14, 80, 88, 64, 125, 21, 1, 16, 15, 1, 15, 16, 1, 126, 5, 1, 1, 2, 15, 1, 2, 124, 28, 1, 0, 23, 25, 23, 0, 25, 126, 0, 25, 22, 23, 25, 22, 124, 24, 35, 2, 22, 26, 23, 22, 26, 124, 13, 1, 6, 26, 14, 26, 6, 14, 126, 0, 14, 7, 7, 14, 110, 32, 10, 29, 3, 2, 11, 1, 3, 9, 2, 3, 103, 34, 1, 15, 0, 9, 4, 15, 9, 103, 31, 8, 30, 3, 4, 0, 23, 0, 4, 23, 103, 33, 12, 2, 7, 18, 17, 7, 87, 0, 18, 19, 26, 18, 85, 27, 1, 26, 0, 19, 17, 26, 19, 103, 33, 12, 2, 7, 7, 17, 96, 20, 1, 17, 7, 17, 80, 27, 75, 176, 15, 80, 88, 64, 132, 21, 1, 16, 15, 1, 15, 16, 1, 126, 5, 1, 1, 2, 15, 1, 2, 124, 30, 1, 4, 8, 23, 8, 4, 23, 126, 28, 1, 0, 23, 25, 23, 0, 25, 126, 0, 25, 22, 23, 25, 22, 124, 24, 35, 2, 22, 26, 23, 22, 26, 124, 13, 1, 6, 26, 14, 26, 6, 14, 126, 0, 14, 7, 7, 14, 110, 32, 10, 29, 3, 2, 11, 1, 3, 9, 2, 3, 103, 34, 1, 15, 0, 9, 8, 15, 9, 103, 31, 1, 8, 0, 23, 0, 8, 23, 103, 33, 12, 2, 7, 18, 17, 7, 87, 0, 18, 19, 26, 18, 85, 27, 1, 26, 0, 19, 17, 26, 19, 103, 33, 12, 2, 7, 7, 17, 96, 20, 1, 17, 7, 17, 80, 27, 75, 176, 17, 80, 88, 64, 125, 21, 1, 16, 15, 1, 15, 16, 1, 126, 5, 1, 1, 2, 15, 1, 2, 124, 28, 1, 0, 23, 25, 23, 0, 25, 126, 0, 25, 22, 23, 25, 22, 124, 24, 35, 2, 22, 26, 23, 22, 26, 124, 13, 1, 6, 26, 14, 26, 6, 14, 126, 0, 14, 7, 7, 14, 110, 32, 10, 29, 3, 2, 11, 1, 3, 9, 2, 3, 103, 34, 1, 15, 0, 9, 4, 15, 9, 103, 31, 8, 30, 3, 4, 0, 23, 0, 4, 23, 103, 33, 12, 2, 7, 18, 17, 7, 87, 0, 18, 19, 26, 18, 85, 27, 1, 26, 0, 19, 17, 26, 19, 103, 33, 12, 2, 7, 7, 17, 96, 20, 1, 17, 7, 17, 80, 27, 75, 176, 18, 80, 88, 64, 132, 21, 1, 16, 15, 1, 15, 16, 1, 126, 5, 1, 1, 2, 15, 1, 2, 124, 30, 1, 4, 8, 23, 8, 4, 23, 126, 28, 1, 0, 23, 25, 23, 0, 25, 126, 0, 25, 22, 23, 25, 22, 124, 24, 35, 2, 22, 26, 23, 22, 26, 124, 13, 1, 6, 26, 14, 26, 6, 14, 126, 0, 14, 7, 7, 14, 110, 32, 10, 29, 3, 2, 11, 1, 3, 9, 2, 3, 103, 34, 1, 15, 0, 9, 8, 15, 9, 103, 31, 1, 8, 0, 23, 0, 8, 23, 103, 33, 12, 2, 7, 18, 17, 7, 87, 0, 18, 19, 26, 18, 85, 27, 1, 26, 0, 19, 17, 26, 19, 103, 33, 12, 2, 7, 7, 17, 96, 20, 1, 17, 7, 17, 80, 27, 75, 176, 27, 80, 88, 64, 125, 21, 1, 16, 15, 1, 15, 16, 1, 126, 5, 1, 1, 2, 15, 1, 2, 124, 28, 1, 0, 23, 25, 23, 0, 25, 126, 0, 25, 22, 23, 25, 22, 124, 24, 35, 2, 22, 26, 23, 22, 26, 124, 13, 1, 6, 26, 14, 26, 6, 14, 126, 0, 14, 7, 7, 14, 110, 32, 10, 29, 3, 2, 11, 1, 3, 9, 2, 3, 103, 34, 1, 15, 0, 9, 4, 15, 9, 103, 31, 8, 30, 3, 4, 0, 23, 0, 4, 23, 103, 33, 12, 2, 7, 18, 17, 7, 87, 0, 18, 19, 26, 18, 85, 27, 1, 26, 0, 19, 17, 26, 19, 103, 33, 12, 2, 7, 7, 17, 96, 20, 1, 17, 7, 17, 80, 27, 75, 176, 28, 80, 88, 64, 132, 21, 1, 16, 15, 1, 15, 16, 1, 126, 5, 1, 1, 2, 15, 1, 2, 124, 30, 1, 4, 8, 23, 8, 4, 23, 126, 28, 1, 0, 23, 25, 23, 0, 25, 126, 0, 25, 22, 23, 25, 22, 124, 24, 35, 2, 22, 26, 23, 22, 26, 124, 13, 1, 6, 26, 14, 26, 6, 14, 126, 0, 14, 7, 7, 14, 110, 32, 10, 29, 3, 2, 11, 1, 3, 9, 2, 3, 103, 34, 1, 15, 0, 9, 8, 15, 9, 103, 31, 1, 8, 0, 23, 0, 8, 23, 103, 33, 12, 2, 7, 18, 17, 7, 87, 0, 18, 19, 26, 18, 85, 27, 1, 26, 0, 19, 17, 26, 19, 103, 33, 12, 2, 7, 7, 17, 96, 20, 1, 17, 7, 17, 80, 27, 64, 125, 21, 1, 16, 15, 1, 15, 16, 1, 126, 5, 1, 1, 2, 15, 1, 2, 124, 28, 1, 0, 23, 25, 23, 0, 25, 126, 0, 25, 22, 23, 25, 22, 124, 24, 35, 2, 22, 26, 23, 22, 26, 124, 13, 1, 6, 26, 14, 26, 6, 14, 126, 0, 14, 7, 7, 14, 110, 32, 10, 29, 3, 2, 11, 1, 3, 9, 2, 3, 103, 34, 1, 15, 0, 9, 4, 15, 9, 103, 31, 8, 30, 3, 4, 0, 23, 0, 4, 23, 103, 33, 12, 2, 7, 18, 17, 7, 87, 0, 18, 19, 26, 18, 85, 27, 1, 26, 0, 19, 17, 26, 19, 103, 33, 12, 2, 7, 7, 17, 96, 20, 1, 17, 7, 17, 80, 89, 89, 89, 89, 89, 89, 89, 89, 65, 91, 0, 240, 0, 239, 0, 156, 0, 155, 0, 130, 0, 129, 0, 107, 0, 106, 0, 93, 0, 92, 0, 49, 0, 48, 0, 25, 0, 24, 0, 1, 0, 0, 1, 28, 1, 26, 1, 16, 1, 14, 1, 5, 1, 3, 1, 2, 1, 0, 0, 249, 0, 247, 0, 239, 1, 6, 0, 240, 1, 6, 0, 231, 0, 230, 0, 211, 0, 209, 0, 204, 0, 201, 0, 200, 0, 194, 0, 188, 0, 186, 0, 164, 0, 162, 0, 155, 0, 238, 0, 156, 0, 238, 0, 151, 0, 149, 0, 143, 0, 141, 0, 129, 0, 154, 0, 130, 0, 154, 0, 113, 0, 111, 0, 106, 0, 117, 0, 107, 0, 117, 0, 99, 0, 97, 0, 92, 0, 105, 0, 93, 0, 105, 0, 83, 0, 81, 0, 75, 0, 73, 0, 61, 0, 59, 0, 48, 0, 70, 0, 49, 0, 70, 0, 31, 0, 29, 0, 24, 0, 35, 0, 25, 0, 35, 0, 12, 0, 10, 0, 0, 0, 23, 0, 1, 0, 23, 0, 36, 0, 11, 0, 20, 43, 1, 50, 54, 55, 54, 53, 52, 38, 39, 38, 38, 35, 34, 6, 7, 6, 6, 21, 20, 22, 23, 22, 23, 22, 39, 50, 22, 21, 20, 6, 35, 34, 38, 53, 52, 54, 23, 20, 22, 51, 50, 54, 53, 52, 38, 35, 34, 6, 5, 50, 54, 55, 54, 54, 53, 52, 38, 39, 38, 38, 35, 34, 6, 7, 6, 6, 21, 20, 23, 22, 22, 23, 52, 38, 35, 34, 14, 2, 21, 20, 22, 51, 50, 62, 2, 55, 62, 3, 37, 50, 54, 53, 52, 38, 35, 34, 6, 21, 20, 30, 2, 37, 50, 22, 21, 20, 6, 35, 34, 38, 53, 52, 54, 23, 20, 51, 50, 54, 53, 52, 38, 35, 34, 6, 1, 50, 54, 53, 52, 46, 2, 39, 46, 3, 35, 34, 6, 21, 20, 30, 2, 51, 50, 30, 2, 1, 50, 22, 23, 62, 3, 51, 50, 22, 21, 20, 14, 2, 7, 30, 3, 21, 20, 14, 2, 7, 22, 22, 21, 20, 6, 35, 34, 38, 39, 46, 3, 39, 6, 6, 35, 34, 14, 2, 35, 34, 39, 14, 3, 35, 34, 53, 52, 54, 55, 46, 3, 53, 52, 54, 55, 46, 3, 53, 52, 54, 51, 50, 30, 2, 23, 54, 54, 19, 50, 54, 53, 52, 38, 39, 6, 6, 35, 34, 38, 39, 6, 6, 21, 20, 22, 51, 50, 54, 55, 50, 22, 23, 6, 38, 39, 20, 30, 2, 51, 51, 50, 62, 2, 39, 6, 6, 7, 20, 22, 55, 55, 50, 62, 2, 1, 124, 28, 60, 23, 53, 29, 29, 26, 59, 23, 32, 60, 23, 23, 27, 11, 22, 19, 33, 38, 25, 23, 26, 29, 20, 25, 28, 27, 13, 9, 5, 6, 9, 5, 8, 4, 12, 2, 39, 33, 59, 23, 22, 23, 29, 29, 22, 54, 29, 42, 54, 16, 20, 25, 36, 16, 62, 218, 12, 28, 20, 48, 44, 29, 27, 10, 14, 11, 6, 7, 10, 24, 36, 24, 12, 254, 112, 26, 25, 23, 28, 27, 28, 3, 11, 22, 1, 61, 23, 26, 29, 20, 26, 26, 26, 14, 13, 6, 9, 5, 9, 4, 10, 253, 216, 14, 18, 19, 33, 43, 24, 3, 8, 10, 14, 7, 16, 26, 24, 33, 33, 9, 12, 14, 14, 17, 1, 22, 111, 165, 57, 33, 42, 30, 28, 20, 23, 21, 11, 27, 45, 35, 18, 19, 9, 2, 10, 28, 48, 37, 16, 27, 17, 24, 34, 52, 10, 1, 4, 5, 5, 1, 32, 74, 44, 36, 46, 40, 44, 34, 29, 25, 8, 23, 28, 31, 16, 52, 18, 6, 64, 73, 37, 9, 25, 37, 18, 38, 30, 19, 23, 27, 16, 22, 27, 37, 32, 57, 173, 193, 16, 15, 20, 18, 5, 41, 19, 15, 36, 6, 13, 26, 19, 13, 18, 29, 17, 17, 40, 26, 9, 37, 23, 1, 4, 10, 9, 27, 7, 7, 3, 1, 85, 14, 35, 20, 8, 14, 33, 5, 5, 3, 1, 2, 116, 22, 20, 47, 78, 40, 66, 21, 20, 12, 25, 25, 25, 63, 32, 17, 56, 27, 26, 14, 16, 212, 29, 17, 20, 27, 25, 19, 20, 29, 31, 7, 8, 9, 6, 3, 10, 7, 172, 25, 22, 22, 57, 31, 35, 59, 22, 17, 21, 29, 17, 20, 60, 34, 51, 45, 20, 35, 232, 12, 20, 24, 35, 41, 17, 20, 20, 10, 15, 17, 8, 18, 19, 14, 13, 252, 18, 14, 16, 17, 15, 19, 5, 11, 9, 6, 188, 28, 17, 20, 27, 25, 19, 19, 29, 31, 15, 10, 5, 3, 10, 6, 253, 246, 20, 17, 18, 18, 15, 20, 18, 2, 10, 10, 8, 23, 22, 17, 27, 21, 11, 11, 13, 11, 3, 47, 44, 57, 15, 28, 23, 14, 22, 17, 18, 38, 38, 37, 17, 37, 81, 89, 97, 51, 113, 169, 123, 81, 25, 29, 69, 30, 22, 22, 37, 36, 3, 14, 18, 18, 7, 6, 5, 3, 5, 3, 3, 19, 42, 35, 23, 53, 26, 50, 26, 33, 107, 129, 141, 65, 106, 199, 79, 19, 40, 41, 41, 20, 24, 31, 19, 26, 27, 9, 54, 48, 253, 219, 15, 11, 18, 27, 17, 4, 9, 10, 5, 10, 35, 19, 14, 13, 16, 1, 16, 19, 2, 4, 11, 18, 35, 28, 18, 15, 25, 31, 32, 9, 7, 2, 36, 49, 1, 1, 20, 30, 36, 0, 2, 0, 69, 0, 0, 4, 143, 6, 68, 0, 33, 0, 37, 0, 208, 181, 13, 1, 13, 3, 1, 74, 75, 176, 27, 80, 88, 64, 50, 0, 5, 5, 3, 95, 0, 3, 3, 64, 75, 16, 14, 2, 4, 4, 13, 93, 0, 13, 13, 58, 75, 10, 1, 1, 1, 2, 93, 6, 1, 2, 2, 59, 75, 11, 9, 7, 3, 0, 0, 8, 93, 15, 12, 2, 8, 8, 57, 8, 76, 27, 75, 176, 42, 80, 88, 64, 48, 0, 13, 16, 14, 2, 4, 2, 13, 4, 101, 0, 5, 5, 3, 95, 0, 3, 3, 64, 75, 10, 1, 1, 1, 2, 93, 6, 1, 2, 2, 59, 75, 11, 9, 7, 3, 0, 0, 8, 93, 15, 12, 2, 8, 8, 57, 8, 76, 27, 64, 48, 0, 13, 16, 14, 2, 4, 2, 13, 4, 101, 0, 5, 5, 3, 95, 0, 3, 3, 64, 75, 10, 1, 1, 1, 2, 93, 6, 1, 2, 2, 59, 75, 11, 9, 7, 3, 0, 0, 8, 93, 15, 12, 2, 8, 8, 60, 8, 76, 89, 89, 64, 32, 34, 34, 0, 0, 34, 37, 34, 37, 36, 35, 0, 33, 0, 33, 32, 31, 30, 29, 28, 27, 17, 17, 18, 34, 18, 36, 17, 17, 17, 17, 9, 29, 43, 51, 53, 51, 17, 35, 53, 51, 53, 52, 55, 54, 51, 50, 23, 21, 35, 39, 38, 35, 34, 21, 21, 33, 17, 51, 21, 33, 53, 51, 17, 33, 17, 51, 21, 1, 53, 51, 21, 69, 123, 117, 117, 86, 87, 143, 94, 121, 123, 25, 36, 29, 120, 2, 142, 123, 254, 93, 98, 254, 56, 111, 1, 89, 198, 123, 3, 47, 135, 174, 163, 97, 97, 49, 210, 123, 19, 186, 228, 252, 74, 123, 123, 3, 47, 252, 209, 123, 5, 65, 197, 197, 0, 0, 1, 0, 69, 255, 234, 4, 193, 6, 68, 0, 42, 0, 167, 64, 10, 8, 1, 1, 0, 1, 74, 0, 1, 4, 71, 75, 176, 40, 80, 88, 64, 40, 0, 9, 9, 58, 75, 0, 0, 0, 8, 95, 0, 8, 8, 64, 75, 6, 1, 2, 2, 1, 93, 7, 1, 1, 1, 59, 75, 10, 5, 2, 3, 3, 4, 93, 0, 4, 4, 57, 4, 76, 27, 75, 176, 42, 80, 88, 64, 38, 7, 1, 1, 6, 1, 2, 3, 1, 2, 101, 0, 9, 9, 58, 75, 0, 0, 0, 8, 95, 0, 8, 8, 64, 75, 10, 5, 2, 3, 3, 4, 93, 0, 4, 4, 57, 4, 76, 27, 64, 38, 7, 1, 1, 6, 1, 2, 3, 1, 2, 101, 0, 9, 9, 58, 75, 0, 0, 0, 8, 95, 0, 8, 8, 64, 75, 10, 5, 2, 3, 3, 4, 93, 0, 4, 4, 60, 4, 76, 89, 89, 64, 16, 42, 41, 35, 34, 34, 17, 17, 17, 17, 17, 17, 20, 41, 11, 9, 29, 43, 33, 6, 7, 6, 46, 2, 53, 17, 38, 35, 34, 7, 6, 21, 21, 33, 21, 33, 17, 51, 21, 33, 53, 51, 17, 35, 53, 51, 53, 16, 33, 50, 23, 23, 51, 17, 22, 23, 30, 2, 51, 4, 193, 21, 28, 104, 114, 73, 31, 135, 114, 117, 46, 44, 1, 40, 254, 216, 111, 254, 80, 123, 117, 117, 1, 140, 86, 110, 62, 197, 1, 6, 7, 41, 76, 43, 6, 3, 13, 40, 93, 146, 102, 4, 67, 37, 40, 40, 106, 240, 136, 252, 222, 123, 123, 3, 34, 136, 186, 1, 101, 16, 9, 251, 90, 69, 47, 59, 66, 25, 0, 0, 3, 0, 0, 255, 220, 4, 205, 6, 68, 0, 3, 0, 7, 0, 39, 0, 82, 64, 79, 22, 1, 4, 2, 2, 1, 5, 3, 2, 74, 1, 1, 2, 72, 3, 1, 1, 71, 0, 2, 4, 2, 131, 0, 4, 3, 4, 131, 0, 3, 5, 3, 131, 6, 1, 1, 0, 1, 132, 7, 1, 5, 0, 0, 5, 85, 7, 1, 5, 5, 0, 93, 0, 0, 5, 0, 77, 8, 8, 4, 4, 8, 39, 8, 39, 28, 26, 24, 23, 21, 19, 4, 7, 4, 7, 21, 8, 11, 21, 43, 17, 9, 2, 55, 53, 35, 21, 19, 53, 52, 55, 54, 55, 55, 54, 53, 52, 39, 38, 35, 34, 7, 21, 51, 55, 54, 51, 50, 23, 22, 21, 20, 7, 7, 6, 7, 6, 21, 21, 2, 103, 2, 102, 253, 154, 85, 170, 165, 19, 17, 56, 22, 101, 78, 75, 136, 89, 146, 108, 13, 45, 49, 57, 36, 43, 63, 21, 71, 23, 24, 3, 16, 3, 52, 252, 204, 252, 204, 214, 177, 177, 1, 61, 51, 65, 48, 47, 66, 26, 116, 95, 117, 57, 56, 46, 249, 143, 31, 24, 33, 71, 73, 95, 28, 87, 58, 58, 68, 28, 0, 0, 0, 0, 3, 0, 96, 255, 219, 4, 108, 5, 237, 0, 15, 0, 29, 0, 33, 0, 65, 64, 62, 6, 1, 0, 7, 1, 2, 4, 0, 2, 103, 0, 4, 8, 1, 5, 3, 4, 5, 101, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 95, 0, 1, 3, 1, 79, 30, 30, 17, 16, 1, 0, 30, 33, 30, 33, 32, 31, 25, 23, 16, 29, 17, 29, 9, 7, 0, 15, 1, 15, 9, 11, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 32, 17, 16, 39, 38, 1, 53, 51, 21, 2, 102, 240, 139, 139, 139, 139, 248, 211, 132, 167, 139, 139, 240, 147, 79, 79, 79, 78, 147, 1, 51, 79, 80, 254, 243, 245, 5, 237, 208, 207, 254, 151, 254, 147, 206, 207, 169, 214, 1, 139, 1, 105, 207, 208, 123, 170, 171, 254, 200, 254, 202, 173, 172, 2, 143, 1, 60, 168, 169, 252, 251, 247, 247, 0, 0, 0, 0, 2, 0, 96, 255, 219, 4, 108, 5, 237, 0, 15, 0, 29, 0, 48, 64, 45, 4, 1, 0, 5, 1, 2, 3, 0, 2, 103, 0, 3, 1, 1, 3, 87, 0, 3, 3, 1, 95, 0, 1, 3, 1, 79, 17, 16, 1, 0, 25, 23, 16, 29, 17, 29, 9, 7, 0, 15, 1, 15, 6, 11, 20, 43, 1, 50, 23, 22, 17, 16, 7, 6, 35, 34, 39, 38, 17, 16, 55, 54, 23, 34, 7, 6, 17, 16, 23, 22, 51, 32, 17, 16, 39, 38, 2, 102, 240, 139, 139, 139, 139, 248, 211, 132, 167, 139, 139, 240, 147, 79, 79, 79, 78, 147, 1, 51, 79, 80, 5, 237, 208, 207, 254, 151, 254, 147, 206, 207, 169, 214, 1, 139, 1, 105, 207, 208, 123, 170, 171, 254, 200, 254, 202, 173, 172, 2, 143, 1, 60, 168, 169, 0, 0, 1, 0, 0, 0, 2, 2, 12, 9, 196, 218, 208, 95, 15, 60, 245, 0, 15, 8, 0, 0, 0, 0, 0, 212, 73, 105, 0, 0, 0, 0, 0, 212, 250, 0, 174, 0, 0, 254, 80, 4, 205, 8, 179, 0, 0, 0, 9, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 7, 143, 254, 80, 0, 0, 4, 205, 0, 0, 0, 0, 4, 205, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 205, 0, 123, 0, 0, 0, 0, 0, 0, 1, 244, 0, 240, 0, 41, 0, 143, 0, 21, 0, 57, 1, 210, 1, 65, 0, 247, 0, 104, 0, 99, 1, 191, 0, 99, 1, 190, 0, 99, 0, 96, 0, 113, 0, 133, 0, 185, 0, 84, 0, 249, 0, 122, 0, 145, 0, 120, 0, 96, 1, 244, 1, 244, 0, 99, 0, 99, 0, 99, 0, 222, 0, 87, 0, 25, 0, 74, 0, 123, 0, 49, 0, 74, 0, 111, 0, 74, 0, 62, 0, 160, 0, 111, 0, 74, 0, 86, 0, 25, 0, 74, 0, 62, 0, 86, 0, 62, 0, 86, 0, 151, 0, 62, 0, 62, 0, 26, 0, 23, 0, 49, 0, 27, 0, 148, 1, 139, 0, 99, 1, 35, 0, 99, 0, 0, 1, 136, 0, 148, 0, 62, 0, 110, 0, 111, 0, 123, 0, 148, 0, 111, 0, 69, 0, 148, 0, 159, 0, 74, 0, 90, 0, 26, 0, 72, 0, 111, 0, 62, 0, 111, 0, 74, 0, 173, 0, 119, 0, 68, 0, 55, 0, 23, 0, 59, 0, 55, 0, 123, 0, 183, 2, 28, 0, 227, 0, 99, 0, 0, 1, 235, 0, 173, 0, 149, 0, 85, 0, 49, 2, 28, 0, 154, 1, 25, 0, 62, 0, 136, 0, 82, 0, 99, 0, 148, 0, 62, 0, 0, 1, 62, 0, 99, 1, 1, 1, 7, 1, 136, 0, 68, 0, 100, 1, 190, 1, 185, 1, 10, 0, 148, 0, 123, 0, 12, 0, 16, 0, 42, 0, 126, 0, 25, 0, 25, 0, 25, 0, 25, 0, 25, 0, 25, 0, 12, 0, 123, 0, 74, 0, 74, 0, 74, 0, 74, 0, 160, 0, 160, 0, 160, 0, 160, 0, 49, 0, 74, 0, 62, 0, 62, 0, 62, 0, 62, 0, 62, 0, 99, 0, 62, 0, 62, 0, 62, 0, 62, 0, 62, 0, 27, 0, 86, 0, 62, 0, 148, 0, 148, 0, 148, 0, 148, 0, 148, 0, 148, 0, 42, 0, 110, 0, 123, 0, 123, 0, 123, 0, 123, 0, 148, 0, 148, 0, 148, 0, 148, 0, 111, 0, 72, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 99, 0, 111, 0, 68, 0, 68, 0, 68, 0, 68, 0, 55, 0, 62, 0, 55, 0, 25, 0, 148, 0, 25, 0, 148, 0, 25, 0, 148, 0, 123, 0, 110, 0, 123, 0, 110, 0, 123, 0, 110, 0, 123, 0, 110, 0, 49, 0, 111, 0, 49, 0, 111, 0, 74, 0, 123, 0, 74, 0, 123, 0, 74, 0, 123, 0, 74, 0, 123, 0, 74, 0, 123, 0, 74, 0, 111, 0, 74, 0, 111, 0, 74, 0, 111, 0, 74, 0, 111, 0, 62, 0, 69, 0, 37, 0, 69, 0, 160, 0, 148, 0, 160, 0, 148, 0, 160, 0, 148, 0, 160, 0, 148, 0, 160, 0, 148, 0, 45, 0, 57, 0, 111, 0, 159, 0, 74, 0, 74, 0, 74, 0, 86, 0, 90, 0, 86, 0, 90, 0, 86, 0, 90, 0, 86, 0, 90, 0, 86, 0, 90, 0, 74, 0, 72, 0, 74, 0, 72, 0, 74, 0, 72, 0, 8, 0, 74, 0, 69, 0, 62, 0, 111, 0, 62, 0, 111, 0, 62, 0, 111, 0, 37, 0, 49, 0, 86, 0, 74, 0, 86, 0, 74, 0, 86, 0, 74, 0, 151, 0, 173, 0, 151, 0, 173, 0, 151, 0, 173, 0, 151, 0, 173, 0, 62, 0, 119, 0, 62, 0, 119, 0, 62, 0, 119, 0, 62, 0, 68, 0, 62, 0, 68, 0, 62, 0, 68, 0, 62, 0, 68, 0, 62, 0, 68, 0, 62, 0, 68, 0, 23, 0, 23, 0, 27, 0, 55, 0, 27, 0, 148, 0, 123, 0, 148, 0, 123, 0, 148, 0, 123, 0, 148, 0, 84, 0, 25, 0, 148, 0, 12, 0, 42, 0, 62, 0, 111, 0, 151, 0, 173, 0, 62, 0, 119, 0, 248, 0, 248, 1, 13, 1, 13, 2, 4, 1, 132, 1, 188, 1, 25, 0, 223, 1, 249, 0, 214, 0, 25, 1, 211, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 123, 0, 25, 0, 74, 0, 111, 0, 26, 0, 74, 0, 148, 0, 62, 0, 62, 0, 160, 0, 74, 0, 25, 0, 25, 0, 74, 0, 74, 0, 62, 0, 62, 0, 86, 0, 66, 0, 62, 0, 13, 0, 40, 0, 49, 0, 15, 0, 58, 0, 160, 0, 13, 0, 93, 0, 148, 0, 116, 1, 131, 0, 179, 0, 93, 0, 197, 0, 1, 0, 123, 0, 148, 0, 31, 0, 116, 0, 123, 1, 131, 0, 207, 0, 58, 0, 182, 0, 25, 0, 12, 0, 111, 0, 36, 0, 179, 0, 133, 0, 62, 0, 56, 0, 179, 0, 49, 0, 54, 0, 44, 0, 47, 0, 222, 0, 179, 0, 111, 0, 179, 0, 47, 0, 74, 0, 74, 0, 0, 0, 100, 0, 115, 0, 151, 0, 161, 0, 161, 0, 111, 0, 10, 0, 11, 0, 0, 0, 75, 0, 70, 0, 32, 0, 63, 0, 25, 0, 70, 0, 74, 0, 100, 0, 30, 0, 74, 0, 0, 0, 112, 0, 70, 0, 70, 0, 75, 0, 34, 0, 25, 0, 63, 0, 62, 0, 62, 0, 86, 0, 123, 0, 62, 0, 32, 0, 40, 0, 49, 0, 62, 0, 41, 0, 62, 0, 63, 0, 20, 0, 57, 0, 95, 0, 71, 0, 35, 0, 0, 0, 148, 0, 118, 0, 84, 0, 100, 0, 40, 0, 123, 0, 23, 0, 176, 0, 73, 0, 73, 0, 125, 0, 43, 0, 25, 0, 73, 0, 111, 0, 73, 0, 69, 0, 110, 0, 72, 0, 54, 0, 59, 0, 59, 0, 73, 0, 63, 0, 70, 0, 70, 0, 40, 0, 50, 0, 100, 0, 145, 0, 45, 0, 78, 0, 123, 0, 123, 0, 47, 0, 100, 0, 140, 0, 173, 0, 148, 0, 148, 0, 159, 0, 14, 0, 17, 0, 34, 0, 125, 0, 70, 0, 54, 0, 73, 0, 100, 0, 100, 0, 23, 0, 23, 0, 23, 0, 23, 0, 23, 0, 23, 0, 27, 0, 55, 0, 120, 0, 20, 0, 0, 0, 0, 1, 158, 1, 190, 1, 191, 1, 190, 0, 180, 0, 190, 0, 190, 0, 170, 0, 170, 1, 62, 0, 81, 0, 12, 1, 160, 0, 193, 0, 234, 1, 27, 1, 13, 0, 0, 0, 155, 1, 1, 0, 70, 0, 213, 0, 25, 0, 6, 0, 43, 0, 40, 0, 60, 0, 43, 0, 49, 0, 97, 0, 60, 0, 40, 0, 60, 0, 52, 0, 84, 1, 63, 0, 84, 1, 63, 0, 84, 1, 63, 1, 63, 0, 169, 0, 29, 0, 62, 0, 50, 0, 99, 0, 155, 1, 62, 0, 0, 0, 34, 0, 123, 0, 84, 0, 234, 0, 84, 0, 84, 0, 84, 0, 84, 0, 84, 0, 134, 0, 84, 2, 3, 0, 234, 0, 0, 2, 29, 2, 29, 0, 0, 2, 29, 0, 0, 2, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 137, 2, 29, 1, 137, 1, 137, 0, 0, 0, 0, 0, 0, 2, 29, 1, 137, 1, 137, 0, 0, 0, 0, 0, 0, 2, 29, 1, 137, 1, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 102, 0, 0, 0, 0, 0, 0, 0, 72, 0, 72, 1, 63, 1, 63, 0, 72, 0, 53, 0, 54, 0, 53, 0, 52, 0, 47, 0, 60, 0, 60, 0, 0, 0, 0, 0, 171, 0, 60, 0, 59, 0, 59, 0, 121, 0, 1, 0, 22, 0, 23, 0, 22, 0, 23, 0, 88, 0, 23, 0, 81, 0, 69, 0, 69, 0, 0, 0, 96, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 88, 0, 0, 0, 88, 0, 0, 0, 88, 0, 0, 0, 212, 0, 0, 1, 36, 0, 0, 2, 68, 0, 0, 3, 164, 0, 0, 5, 28, 0, 0, 6, 176, 0, 0, 6, 232, 0, 0, 7, 64, 0, 0, 7, 152, 0, 0, 8, 68, 0, 0, 8, 196, 0, 0, 9, 52, 0, 0, 9, 108, 0, 0, 9, 184, 0, 0, 9, 240, 0, 0, 10, 200, 0, 0, 11, 48, 0, 0, 11, 252, 0, 0, 13, 4, 0, 0, 13, 164, 0, 0, 14, 112, 0, 0, 15, 112, 0, 0, 15, 236, 0, 0, 16, 240, 0, 0, 17, 240, 0, 0, 18, 104, 0, 0, 19, 8, 0, 0, 19, 56, 0, 0, 19, 144, 0, 0, 19, 188, 0, 0, 20, 160, 0, 0, 21, 236, 0, 0, 22, 156, 0, 0, 23, 116, 0, 0, 24, 48, 0, 0, 24, 200, 0, 0, 25, 228, 0, 0, 26, 220, 0, 0, 27, 176, 0, 0, 28, 120, 0, 0, 28, 240, 0, 0, 29, 144, 0, 0, 30, 84, 0, 0, 30, 220, 0, 0, 31, 168, 0, 0, 32, 72, 0, 0, 33, 4, 0, 0, 33, 180, 0, 0, 34, 132, 0, 0, 35, 80, 0, 0, 36, 56, 0, 0, 36, 248, 0, 0, 37, 148, 0, 0, 38, 32, 0, 0, 38, 212, 0, 0, 39, 160, 0, 0, 40, 72, 0, 0, 41, 28, 0, 0, 41, 100, 0, 0, 41, 148, 0, 0, 41, 216, 0, 0, 42, 32, 0, 0, 42, 88, 0, 0, 42, 144, 0, 0, 43, 196, 0, 0, 44, 144, 0, 0, 45, 32, 0, 0, 46, 8, 0, 0, 46, 160, 0, 0, 47, 168, 0, 0, 49, 24, 0, 0, 49, 216, 0, 0, 50, 116, 0, 0, 51, 4, 0, 0, 51, 228, 0, 0, 52, 80, 0, 0, 53, 168, 0, 0, 54, 188, 0, 0, 55, 64, 0, 0, 56, 88, 0, 0, 57, 84, 0, 0, 58, 164, 0, 0, 59, 92, 0, 0, 60, 4, 0, 0, 60, 188, 0, 0, 61, 72, 0, 0, 61, 252, 0, 0, 62, 200, 0, 0, 63, 128, 0, 0, 64, 84, 0, 0, 65, 20, 0, 0, 65, 72, 0, 0, 66, 8, 0, 0, 66, 200, 0, 0, 66, 200, 0, 0, 67, 36, 0, 0, 68, 20, 0, 0, 68, 236, 0, 0, 69, 184, 0, 0, 70, 196, 0, 0, 71, 24, 0, 0, 72, 76, 0, 0, 72, 164, 0, 0, 73, 204, 0, 0, 75, 32, 0, 0, 75, 108, 0, 0, 75, 180, 0, 0, 75, 236, 0, 0, 77, 28, 0, 0, 77, 88, 0, 0, 77, 244, 0, 0, 78, 144, 0, 0, 79, 80, 0, 0, 80, 60, 0, 0, 80, 124, 0, 0, 81, 72, 0, 0, 82, 0, 0, 0, 82, 84, 0, 0, 82, 248, 0, 0, 83, 80, 0, 0, 84, 4, 0, 0, 84, 84, 0, 0, 85, 28, 0, 0, 85, 244, 0, 0, 87, 16, 0, 0, 87, 208, 0, 0, 88, 164, 0, 0, 89, 128, 0, 0, 90, 116, 0, 0, 91, 160, 0, 0, 92, 144, 0, 0, 93, 196, 0, 0, 95, 120, 0, 0, 96, 148, 0, 0, 97, 228, 0, 0, 99, 68, 0, 0, 100, 188, 0, 0, 102, 48, 0, 0, 102, 208, 0, 0, 103, 120, 0, 0, 104, 56, 0, 0, 104, 240, 0, 0, 105, 188, 0, 0, 106, 212, 0, 0, 107, 180, 0, 0, 108, 156, 0, 0, 109, 152, 0, 0, 110, 196, 0, 0, 111, 188, 0, 0, 112, 4, 0, 0, 112, 224, 0, 0, 113, 164, 0, 0, 114, 112, 0, 0, 115, 80, 0, 0, 116, 40, 0, 0, 117, 0, 0, 0, 117, 196, 0, 0, 119, 108, 0, 0, 121, 24, 0, 0, 122, 216, 0, 0, 124, 172, 0, 0, 126, 116, 0, 0, 128, 0, 0, 0, 129, 220, 0, 0, 130, 224, 0, 0, 131, 192, 0, 0, 132, 168, 0, 0, 133, 160, 0, 0, 134, 172, 0, 0, 135, 180, 0, 0, 136, 124, 0, 0, 137, 76, 0, 0, 138, 52, 0, 0, 138, 232, 0, 0, 139, 184, 0, 0, 141, 128, 0, 0, 142, 80, 0, 0, 143, 44, 0, 0, 144, 28, 0, 0, 145, 64, 0, 0, 146, 40, 0, 0, 146, 192, 0, 0, 147, 116, 0, 0, 148, 140, 0, 0, 149, 180, 0, 0, 150, 240, 0, 0, 151, 240, 0, 0, 153, 16, 0, 0, 153, 204, 0, 0, 154, 200, 0, 0, 155, 160, 0, 0, 157, 12, 0, 0, 158, 16, 0, 0, 159, 228, 0, 0, 161, 0, 0, 0, 162, 192, 0, 0, 163, 172, 0, 0, 164, 160, 0, 0, 165, 156, 0, 0, 166, 160, 0, 0, 167, 128, 0, 0, 168, 104, 0, 0, 169, 96, 0, 0, 170, 96, 0, 0, 171, 64, 0, 0, 172, 88, 0, 0, 173, 36, 0, 0, 174, 64, 0, 0, 175, 140, 0, 0, 176, 68, 0, 0, 177, 192, 0, 0, 178, 208, 0, 0, 180, 28, 0, 0, 181, 12, 0, 0, 182, 192, 0, 0, 183, 188, 0, 0, 185, 40, 0, 0, 186, 48, 0, 0, 187, 76, 0, 0, 189, 96, 0, 0, 190, 120, 0, 0, 192, 148, 0, 0, 193, 148, 0, 0, 195, 132, 0, 0, 196, 240, 0, 0, 198, 144, 0, 0, 199, 156, 0, 0, 200, 176, 0, 0, 201, 184, 0, 0, 202, 168, 0, 0, 203, 152, 0, 0, 204, 132, 0, 0, 205, 36, 0, 0, 205, 192, 0, 0, 206, 140, 0, 0, 207, 128, 0, 0, 208, 100, 0, 0, 209, 120, 0, 0, 210, 24, 0, 0, 210, 140, 0, 0, 211, 156, 0, 0, 212, 184, 0, 0, 213, 164, 0, 0, 214, 132, 0, 0, 215, 220, 0, 0, 217, 96, 0, 0, 218, 48, 0, 0, 218, 228, 0, 0, 219, 120, 0, 0, 220, 152, 0, 0, 221, 128, 0, 0, 222, 48, 0, 0, 222, 192, 0, 0, 223, 108, 0, 0, 223, 248, 0, 0, 224, 172, 0, 0, 225, 72, 0, 0, 226, 24, 0, 0, 227, 200, 0, 0, 228, 252, 0, 0, 230, 224, 0, 0, 231, 196, 0, 0, 233, 140, 0, 0, 235, 20, 0, 0, 236, 8, 0, 0, 237, 120, 0, 0, 238, 88, 0, 0, 238, 252, 0, 0, 240, 4, 0, 0, 241, 0, 0, 0, 242, 0, 0, 0, 242, 244, 0, 0, 244, 220, 0, 0, 246, 76, 0, 0, 247, 72, 0, 0, 249, 32, 0, 0, 250, 136, 0, 0, 252, 172, 0, 0, 253, 188, 0, 0, 255, 180, 0, 1, 0, 208, 0, 1, 2, 36, 0, 1, 3, 84, 0, 1, 4, 128, 0, 1, 5, 204, 0, 1, 6, 216, 0, 1, 8, 4, 0, 1, 9, 44, 0, 1, 10, 108, 0, 1, 11, 124, 0, 1, 12, 148, 0, 1, 13, 112, 0, 1, 14, 108, 0, 1, 15, 64, 0, 1, 16, 84, 0, 1, 17, 136, 0, 1, 18, 72, 0, 1, 19, 44, 0, 1, 20, 24, 0, 1, 21, 92, 0, 1, 22, 132, 0, 1, 23, 208, 0, 1, 24, 180, 0, 1, 25, 244, 0, 1, 26, 248, 0, 1, 28, 36, 0, 1, 29, 28, 0, 1, 30, 76, 0, 1, 31, 56, 0, 1, 32, 108, 0, 1, 33, 84, 0, 1, 34, 108, 0, 1, 35, 196, 0, 1, 36, 208, 0, 1, 37, 224, 0, 1, 39, 12, 0, 1, 40, 120, 0, 1, 41, 108, 0, 1, 42, 84, 0, 1, 43, 176, 0, 1, 45, 144, 0, 1, 47, 136, 0, 1, 48, 248, 0, 1, 50, 8, 0, 1, 51, 20, 0, 1, 52, 148, 0, 1, 53, 212, 0, 1, 55, 8, 0, 1, 56, 68, 0, 1, 56, 148, 0, 1, 56, 228, 0, 1, 57, 36, 0, 1, 57, 136, 0, 1, 57, 200, 0, 1, 58, 100, 0, 1, 58, 228, 0, 1, 59, 104, 0, 1, 59, 200, 0, 1, 60, 12, 0, 1, 60, 128, 0, 1, 61, 92, 0, 1, 61, 148, 0, 1, 63, 44, 0, 1, 64, 24, 0, 1, 64, 184, 0, 1, 65, 156, 0, 1, 66, 160, 0, 1, 67, 132, 0, 1, 68, 96, 0, 1, 69, 16, 0, 1, 69, 228, 0, 1, 70, 148, 0, 1, 71, 16, 0, 1, 72, 120, 0, 1, 73, 76, 0, 1, 74, 20, 0, 1, 75, 32, 0, 1, 75, 152, 0, 1, 76, 92, 0, 1, 76, 216, 0, 1, 77, 164, 0, 1, 78, 68, 0, 1, 79, 212, 0, 1, 80, 144, 0, 1, 81, 40, 0, 1, 81, 216, 0, 1, 82, 176, 0, 1, 83, 112, 0, 1, 84, 16, 0, 1, 85, 4, 0, 1, 85, 208, 0, 1, 86, 208, 0, 1, 87, 140, 0, 1, 88, 68, 0, 1, 89, 44, 0, 1, 90, 116, 0, 1, 91, 52, 0, 1, 92, 80, 0, 1, 92, 200, 0, 1, 93, 208, 0, 1, 94, 232, 0, 1, 95, 172, 0, 1, 96, 148, 0, 1, 97, 56, 0, 1, 97, 216, 0, 1, 98, 224, 0, 1, 99, 192, 0, 1, 100, 80, 0, 1, 100, 168, 0, 1, 101, 60, 0, 1, 102, 4, 0, 1, 102, 184, 0, 1, 103, 104, 0, 1, 105, 52, 0, 1, 105, 184, 0, 1, 106, 76, 0, 1, 107, 0, 0, 1, 108, 4, 0, 1, 108, 232, 0, 1, 109, 100, 0, 1, 109, 224, 0, 1, 110, 240, 0, 1, 111, 168, 0, 1, 112, 116, 0, 1, 113, 28, 0, 1, 113, 208, 0, 1, 114, 172, 0, 1, 115, 84, 0, 1, 115, 244, 0, 1, 116, 188, 0, 1, 118, 8, 0, 1, 119, 112, 0, 1, 120, 148, 0, 1, 121, 124, 0, 1, 122, 104, 0, 1, 123, 80, 0, 1, 123, 200, 0, 1, 124, 128, 0, 1, 125, 32, 0, 1, 125, 244, 0, 1, 126, 232, 0, 1, 128, 0, 0, 1, 129, 60, 0, 1, 130, 4, 0, 1, 131, 64, 0, 1, 131, 240, 0, 1, 132, 160, 0, 1, 133, 156, 0, 1, 134, 112, 0, 1, 135, 32, 0, 1, 135, 236, 0, 1, 137, 84, 0, 1, 138, 252, 0, 1, 140, 0, 0, 1, 140, 160, 0, 1, 141, 180, 0, 1, 142, 192, 0, 1, 143, 108, 0, 1, 144, 56, 0, 1, 145, 0, 0, 1, 145, 188, 0, 1, 146, 132, 0, 1, 147, 52, 0, 1, 147, 240, 0, 1, 148, 176, 0, 1, 149, 160, 0, 1, 150, 148, 0, 1, 151, 96, 0, 1, 152, 24, 0, 1, 152, 232, 0, 1, 153, 160, 0, 1, 154, 168, 0, 1, 155, 136, 0, 1, 156, 176, 0, 1, 157, 152, 0, 1, 158, 136, 0, 1, 159, 144, 0, 1, 160, 120, 0, 1, 161, 116, 0, 1, 162, 80, 0, 1, 163, 28, 0, 1, 163, 204, 0, 1, 164, 184, 0, 1, 165, 80, 0, 1, 166, 204, 0, 1, 167, 160, 0, 1, 168, 64, 0, 1, 169, 84, 0, 1, 170, 128, 0, 1, 171, 56, 0, 1, 172, 8, 0, 1, 172, 208, 0, 1, 173, 84, 0, 1, 174, 32, 0, 1, 175, 56, 0, 1, 175, 200, 0, 1, 176, 140, 0, 1, 177, 20, 0, 1, 178, 48, 0, 1, 178, 252, 0, 1, 180, 8, 0, 1, 180, 220, 0, 1, 181, 200, 0, 1, 182, 244, 0, 1, 183, 156, 0, 1, 184, 124, 0, 1, 185, 36, 0, 1, 185, 192, 0, 1, 186, 192, 0, 1, 187, 180, 0, 1, 188, 104, 0, 1, 189, 112, 0, 1, 190, 188, 0, 1, 191, 172, 0, 1, 192, 72, 0, 1, 193, 0, 0, 1, 193, 152, 0, 1, 194, 84, 0, 1, 194, 228, 0, 1, 195, 176, 0, 1, 196, 156, 0, 1, 197, 188, 0, 1, 199, 24, 0, 1, 199, 248, 0, 1, 200, 228, 0, 1, 201, 248, 0, 1, 202, 160, 0, 1, 203, 72, 0, 1, 204, 36, 0, 1, 205, 52, 0, 1, 206, 24, 0, 1, 207, 48, 0, 1, 208, 36, 0, 1, 209, 28, 0, 1, 209, 236, 0, 1, 211, 0, 0, 1, 211, 56, 0, 1, 211, 112, 0, 1, 211, 168, 0, 1, 212, 4, 0, 1, 212, 88, 0, 1, 212, 208, 0, 1, 213, 64, 0, 1, 213, 184, 0, 1, 214, 60, 0, 1, 214, 232, 0, 1, 215, 140, 0, 1, 216, 24, 0, 1, 216, 212, 0, 1, 217, 40, 0, 1, 217, 160, 0, 1, 219, 40, 0, 1, 219, 96, 0, 1, 219, 180, 0, 1, 219, 228, 0, 1, 220, 20, 0, 1, 220, 208, 0, 1, 221, 12, 0, 1, 221, 88, 0, 1, 222, 76, 0, 1, 224, 68, 0, 1, 225, 116, 0, 1, 227, 80, 0, 1, 228, 160, 0, 1, 229, 140, 0, 1, 230, 80, 0, 1, 231, 4, 0, 1, 232, 40, 0, 1, 232, 200, 0, 1, 233, 152, 0, 1, 234, 224, 0, 1, 237, 72, 0, 1, 238, 220, 0, 1, 240, 64, 0, 1, 240, 204, 0, 1, 241, 40, 0, 1, 241, 176, 0, 1, 242, 12, 0, 1, 242, 188, 0, 1, 243, 56, 0, 1, 243, 220, 0, 1, 244, 128, 0, 1, 244, 224, 0, 1, 245, 88, 0, 1, 246, 16, 0, 1, 246, 72, 0, 1, 246, 124, 0, 1, 246, 208, 0, 1, 247, 28, 0, 1, 247, 220, 0, 1, 248, 32, 0, 1, 248, 128, 0, 1, 249, 100, 0, 1, 250, 80, 0, 1, 251, 8, 0, 1, 251, 124, 0, 1, 251, 216, 0, 1, 252, 52, 0, 1, 252, 148, 0, 1, 252, 212, 0, 1, 253, 108, 0, 1, 254, 4, 0, 1, 254, 60, 0, 1, 254, 104, 0, 1, 254, 168, 0, 1, 254, 236, 0, 1, 255, 44, 0, 1, 255, 112, 0, 1, 255, 188, 0, 2, 0, 12, 0, 2, 0, 88, 0, 2, 0, 164, 0, 2, 1, 4, 0, 2, 1, 92, 0, 2, 1, 168, 0, 2, 2, 4, 0, 2, 2, 88, 0, 2, 2, 192, 0, 2, 3, 24, 0, 2, 3, 108, 0, 2, 3, 216, 0, 2, 4, 44, 0, 2, 4, 124, 0, 2, 4, 220, 0, 2, 5, 52, 0, 2, 5, 132, 0, 2, 5, 240, 0, 2, 6, 80, 0, 2, 6, 188, 0, 2, 7, 48, 0, 2, 7, 148, 0, 2, 7, 252, 0, 2, 8, 128, 0, 2, 8, 236, 0, 2, 9, 68, 0, 2, 9, 196, 0, 2, 10, 44, 0, 2, 10, 136, 0, 2, 11, 8, 0, 2, 11, 136, 0, 2, 12, 8, 0, 2, 12, 176, 0, 2, 12, 228, 0, 2, 13, 16, 0, 2, 13, 60, 0, 2, 13, 104, 0, 2, 13, 152, 0, 2, 15, 120, 0, 2, 17, 48, 0, 2, 18, 44, 0, 2, 18, 92, 0, 2, 18, 176, 0, 2, 18, 228, 0, 2, 19, 60, 0, 2, 19, 120, 0, 2, 19, 160, 0, 2, 19, 192, 0, 2, 19, 236, 0, 2, 20, 16, 0, 2, 20, 76, 0, 2, 20, 208, 0, 2, 21, 28, 0, 2, 21, 136, 0, 2, 22, 36, 0, 2, 22, 168, 0, 2, 23, 180, 0, 2, 24, 140, 0, 2, 25, 144, 0, 2, 26, 120, 0, 2, 27, 32, 0, 2, 27, 152, 0, 2, 28, 44, 0, 2, 28, 120, 0, 2, 28, 184, 0, 2, 29, 76, 0, 2, 29, 216, 0, 2, 41, 40, 0, 2, 42, 100, 0, 2, 43, 136, 0, 2, 44, 92, 0, 2, 45, 20, 0, 2, 45, 172, 0, 1, 0, 0, 2, 154, 1, 33, 0, 36, 0, 0, 0, 0, 0, 2, 0, 216, 0, 234, 0, 139, 0, 0, 1, 244, 13, 109, 0, 0, 0, 0, 0, 0, 0, 25, 1, 50, 0, 1, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 7, 0, 65, 0, 1, 0, 0, 0, 0, 0, 2, 0, 7, 0, 72, 0, 1, 0, 0, 0, 0, 0, 3, 0, 33, 0, 79, 0, 1, 0, 0, 0, 0, 0, 4, 0, 7, 0, 112, 0, 1, 0, 0, 0, 0, 0, 5, 0, 33, 0, 119, 0, 1, 0, 0, 0, 0, 0, 6, 0, 6, 0, 152, 0, 1, 0, 0, 0, 0, 0, 8, 0, 21, 0, 158, 0, 1, 0, 0, 0, 0, 0, 9, 0, 31, 0, 179, 0, 1, 0, 0, 0, 0, 0, 10, 1, 83, 0, 210, 0, 1, 0, 0, 0, 0, 0, 12, 0, 15, 2, 37, 0, 1, 0, 0, 0, 0, 0, 13, 6, 130, 2, 52, 0, 1, 0, 0, 0, 0, 0, 18, 0, 7, 8, 182, 0, 3, 0, 1, 4, 9, 0, 0, 0, 130, 8, 189, 0, 3, 0, 1, 4, 9, 0, 1, 0, 14, 9, 63, 0, 3, 0, 1, 4, 9, 0, 2, 0, 14, 9, 77, 0, 3, 0, 1, 4, 9, 0, 3, 0, 66, 9, 91, 0, 3, 0, 1, 4, 9, 0, 4, 0, 14, 9, 157, 0, 3, 0, 1, 4, 9, 0, 5, 0, 66, 9, 171, 0, 3, 0, 1, 4, 9, 0, 6, 0, 12, 9, 237, 0, 3, 0, 1, 4, 9, 0, 8, 0, 42, 9, 249, 0, 3, 0, 1, 4, 9, 0, 9, 0, 62, 10, 35, 0, 3, 0, 1, 4, 9, 0, 10, 2, 166, 10, 97, 0, 3, 0, 1, 4, 9, 0, 12, 0, 30, 13, 7, 0, 3, 0, 1, 4, 9, 0, 13, 13, 4, 13, 37, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 99, 41, 32, 50, 48, 49, 54, 32, 98, 121, 32, 66, 105, 103, 101, 108, 111, 119, 32, 38, 32, 72, 111, 108, 109, 101, 115, 32, 73, 110, 99, 46, 46, 32, 65, 108, 108, 32, 114, 105, 103, 104, 116, 115, 32, 114, 101, 115, 101, 114, 118, 101, 100, 46, 71, 111, 32, 77, 111, 110, 111, 82, 101, 103, 117, 108, 97, 114, 66, 105, 103, 101, 108, 111, 119, 38, 72, 111, 108, 109, 101, 115, 73, 110, 99, 46, 58, 32, 71, 111, 32, 77, 111, 110, 111, 58, 32, 50, 48, 49, 54, 71, 111, 32, 77, 111, 110, 111, 86, 101, 114, 115, 105, 111, 110, 32, 50, 46, 48, 48, 56, 59, 32, 116, 116, 102, 97, 117, 116, 111, 104, 105, 110, 116, 32, 40, 118, 49, 46, 54, 41, 71, 111, 77, 111, 110, 111, 66, 105, 103, 101, 108, 111, 119, 32, 38, 32, 72, 111, 108, 109, 101, 115, 32, 73, 110, 99, 46, 75, 114, 105, 115, 32, 72, 111, 108, 109, 101, 115, 32, 97, 110, 100, 32, 67, 104, 97, 114, 108, 101, 115, 32, 66, 105, 103, 101, 108, 111, 119, 71, 111, 32, 77, 111, 110, 111, 32, 105, 115, 32, 97, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 100, 44, 32, 115, 108, 97, 98, 45, 115, 101, 114, 105, 102, 32, 102, 111, 110, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 71, 111, 32, 108, 97, 110, 103, 117, 97, 103, 101, 46, 32, 73, 116, 115, 32, 120, 45, 104, 101, 105, 103, 104, 116, 44, 32, 115, 116, 101, 109, 32, 119, 101, 105, 103, 104, 116, 44, 32, 97, 110, 100, 32, 100, 105, 115, 116, 105, 110, 99, 116, 105, 118, 101, 32, 102, 111, 114, 109, 115, 32, 111, 102, 32, 122, 101, 114, 111, 44, 32, 99, 97, 112, 105, 116, 97, 108, 32, 79, 44, 32, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 108, 44, 32, 102, 105, 103, 117, 114, 101, 32, 111, 110, 101, 44, 32, 97, 110, 100, 32, 99, 97, 112, 105, 116, 97, 108, 32, 73, 32, 102, 111, 108, 108, 111, 119, 32, 116, 104, 101, 32, 68, 73, 78, 32, 49, 52, 53, 48, 32, 102, 111, 110, 116, 32, 108, 101, 103, 105, 98, 105, 108, 105, 116, 121, 32, 115, 116, 97, 110, 100, 97, 114, 100, 46, 32, 84, 104, 105, 115, 32, 71, 111, 32, 102, 111, 110, 116, 39, 115, 32, 87, 71, 76, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 115, 101, 116, 32, 105, 110, 99, 108, 117, 100, 101, 115, 32, 76, 97, 116, 105, 110, 44, 32, 71, 114, 101, 101, 107, 32, 97, 110, 100, 32, 67, 121, 114, 105, 108, 108, 105, 99, 32, 97, 108, 112, 104, 97, 98, 101, 116, 115, 32, 112, 108, 117, 115, 32, 110, 117, 109, 101, 114, 111, 117, 115, 32, 115, 121, 109, 98, 111, 108, 115, 32, 97, 110, 100, 32, 103, 114, 97, 112, 104, 105, 99, 97, 108, 32, 101, 108, 101, 109, 101, 110, 116, 115, 46, 108, 117, 99, 105, 100, 97, 102, 111, 110, 116, 115, 46, 99, 111, 109, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 99, 41, 32, 50, 48, 49, 54, 32, 66, 105, 103, 101, 108, 111, 119, 32, 38, 32, 72, 111, 108, 109, 101, 115, 32, 73, 110, 99, 46, 46, 32, 65, 108, 108, 32, 114, 105, 103, 104, 116, 115, 32, 114, 101, 115, 101, 114, 118, 101, 100, 46, 10, 10, 68, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 32, 111, 102, 32, 116, 104, 105, 115, 32, 102, 111, 110, 116, 32, 105, 115, 32, 103, 111, 118, 101, 114, 110, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 108, 105, 99, 101, 110, 115, 101, 46, 32, 73, 102, 32, 121, 111, 117, 32, 100, 111, 32, 110, 111, 116, 32, 97, 103, 114, 101, 101, 32, 116, 111, 32, 116, 104, 105, 115, 32, 108, 105, 99, 101, 110, 115, 101, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 116, 104, 101, 32, 100, 105, 115, 99, 108, 97, 105, 109, 101, 114, 44, 32, 100, 111, 32, 110, 111, 116, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 111, 114, 32, 109, 111, 100, 105, 102, 121, 32, 116, 104, 105, 115, 32, 102, 111, 110, 116, 46, 10, 10, 82, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 32, 97, 110, 100, 32, 117, 115, 101, 32, 105, 110, 32, 115, 111, 117, 114, 99, 101, 32, 97, 110, 100, 32, 98, 105, 110, 97, 114, 121, 32, 102, 111, 114, 109, 115, 44, 32, 119, 105, 116, 104, 32, 111, 114, 32, 119, 105, 116, 104, 111, 117, 116, 32, 109, 111, 100, 105, 102, 105, 99, 97, 116, 105, 111, 110, 44, 32, 97, 114, 101, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 97, 114, 101, 32, 109, 101, 116, 58, 10, 10, 32, 32, 32, 42, 32, 82, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 115, 32, 111, 102, 32, 115, 111, 117, 114, 99, 101, 32, 99, 111, 100, 101, 32, 109, 117, 115, 116, 32, 114, 101, 116, 97, 105, 110, 32, 116, 104, 101, 32, 97, 98, 111, 118, 101, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 110, 111, 116, 105, 99, 101, 44, 32, 116, 104, 105, 115, 32, 108, 105, 115, 116, 32, 111, 102, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 97, 110, 100, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 100, 105, 115, 99, 108, 97, 105, 109, 101, 114, 46, 10, 10, 32, 32, 32, 42, 32, 82, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 115, 32, 105, 110, 32, 98, 105, 110, 97, 114, 121, 32, 102, 111, 114, 109, 32, 109, 117, 115, 116, 32, 114, 101, 112, 114, 111, 100, 117, 99, 101, 32, 116, 104, 101, 32, 97, 98, 111, 118, 101, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 110, 111, 116, 105, 99, 101, 44, 32, 116, 104, 105, 115, 32, 108, 105, 115, 116, 32, 111, 102, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 97, 110, 100, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 100, 105, 115, 99, 108, 97, 105, 109, 101, 114, 32, 105, 110, 32, 116, 104, 101, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 97, 110, 100, 47, 111, 114, 32, 111, 116, 104, 101, 114, 32, 109, 97, 116, 101, 114, 105, 97, 108, 115, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 46, 10, 10, 32, 32, 32, 42, 32, 78, 101, 105, 116, 104, 101, 114, 32, 116, 104, 101, 32, 110, 97, 109, 101, 32, 111, 102, 32, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 46, 32, 110, 111, 114, 32, 116, 104, 101, 32, 110, 97, 109, 101, 115, 32, 111, 102, 32, 105, 116, 115, 32, 99, 111, 110, 116, 114, 105, 98, 117, 116, 111, 114, 115, 32, 109, 97, 121, 32, 98, 101, 32, 117, 115, 101, 100, 32, 116, 111, 32, 101, 110, 100, 111, 114, 115, 101, 32, 111, 114, 32, 112, 114, 111, 109, 111, 116, 101, 32, 112, 114, 111, 100, 117, 99, 116, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 116, 104, 105, 115, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 112, 114, 105, 111, 114, 32, 119, 114, 105, 116, 116, 101, 110, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 10, 10, 68, 73, 83, 67, 76, 65, 73, 77, 69, 82, 58, 32, 84, 72, 73, 83, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 73, 83, 32, 80, 82, 79, 86, 73, 68, 69, 68, 32, 66, 89, 32, 84, 72, 69, 32, 67, 79, 80, 89, 82, 73, 71, 72, 84, 32, 72, 79, 76, 68, 69, 82, 83, 32, 65, 78, 68, 32, 67, 79, 78, 84, 82, 73, 66, 85, 84, 79, 82, 83, 32, 34, 65, 83, 32, 73, 83, 34, 32, 65, 78, 68, 32, 65, 78, 89, 32, 69, 88, 80, 82, 69, 83, 83, 32, 79, 82, 32, 73, 77, 80, 76, 73, 69, 68, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 44, 32, 73, 78, 67, 76, 85, 68, 73, 78, 71, 44, 32, 66, 85, 84, 32, 78, 79, 84, 32, 76, 73, 77, 73, 84, 69, 68, 32, 84, 79, 44, 32, 84, 72, 69, 32, 73, 77, 80, 76, 73, 69, 68, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 70, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 65, 78, 68, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 32, 65, 82, 69, 32, 68, 73, 83, 67, 76, 65, 73, 77, 69, 68, 46, 32, 73, 78, 32, 78, 79, 32, 69, 86, 69, 78, 84, 32, 83, 72, 65, 76, 76, 32, 84, 72, 69, 32, 67, 79, 80, 89, 82, 73, 71, 72, 84, 32, 79, 87, 78, 69, 82, 32, 79, 82, 32, 67, 79, 78, 84, 82, 73, 66, 85, 84, 79, 82, 83, 32, 66, 69, 32, 76, 73, 65, 66, 76, 69, 32, 70, 79, 82, 32, 65, 78, 89, 32, 68, 73, 82, 69, 67, 84, 44, 32, 73, 78, 68, 73, 82, 69, 67, 84, 44, 32, 73, 78, 67, 73, 68, 69, 78, 84, 65, 76, 44, 32, 83, 80, 69, 67, 73, 65, 76, 44, 32, 69, 88, 69, 77, 80, 76, 65, 82, 89, 44, 32, 79, 82, 32, 67, 79, 78, 83, 69, 81, 85, 69, 78, 84, 73, 65, 76, 32, 68, 65, 77, 65, 71, 69, 83, 32, 40, 73, 78, 67, 76, 85, 68, 73, 78, 71, 44, 32, 66, 85, 84, 32, 78, 79, 84, 32, 76, 73, 77, 73, 84, 69, 68, 32, 84, 79, 44, 32, 80, 82, 79, 67, 85, 82, 69, 77, 69, 78, 84, 32, 79, 70, 32, 83, 85, 66, 83, 84, 73, 84, 85, 84, 69, 32, 71, 79, 79, 68, 83, 32, 79, 82, 32, 83, 69, 82, 86, 73, 67, 69, 83, 59, 32, 76, 79, 83, 83, 32, 79, 70, 32, 85, 83, 69, 44, 32, 68, 65, 84, 65, 44, 32, 79, 82, 32, 80, 82, 79, 70, 73, 84, 83, 59, 32, 79, 82, 32, 66, 85, 83, 73, 78, 69, 83, 83, 32, 73, 78, 84, 69, 82, 82, 85, 80, 84, 73, 79, 78, 41, 32, 72, 79, 87, 69, 86, 69, 82, 32, 67, 65, 85, 83, 69, 68, 32, 65, 78, 68, 32, 79, 78, 32, 65, 78, 89, 32, 84, 72, 69, 79, 82, 89, 32, 79, 70, 32, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 87, 72, 69, 84, 72, 69, 82, 32, 73, 78, 32, 67, 79, 78, 84, 82, 65, 67, 84, 44, 32, 83, 84, 82, 73, 67, 84, 32, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 79, 82, 32, 84, 79, 82, 84, 32, 40, 73, 78, 67, 76, 85, 68, 73, 78, 71, 32, 78, 69, 71, 76, 73, 71, 69, 78, 67, 69, 32, 79, 82, 32, 79, 84, 72, 69, 82, 87, 73, 83, 69, 41, 32, 65, 82, 73, 83, 73, 78, 71, 32, 73, 78, 32, 65, 78, 89, 32, 87, 65, 89, 32, 79, 85, 84, 32, 79, 70, 32, 84, 72, 69, 32, 85, 83, 69, 32, 79, 70, 32, 84, 72, 73, 83, 32, 83, 79, 70, 84, 87, 65, 82, 69, 44, 32, 69, 86, 69, 78, 32, 73, 70, 32, 65, 68, 86, 73, 83, 69, 68, 32, 79, 70, 32, 84, 72, 69, 32, 80, 79, 83, 83, 73, 66, 73, 76, 73, 84, 89, 32, 79, 70, 32, 83, 85, 67, 72, 32, 68, 65, 77, 65, 71, 69, 46, 71, 111, 32, 77, 111, 110, 111, 0, 67, 0, 111, 0, 112, 0, 121, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 40, 0, 99, 0, 41, 0, 32, 0, 50, 0, 48, 0, 49, 0, 54, 0, 32, 0, 98, 0, 121, 0, 32, 0, 66, 0, 105, 0, 103, 0, 101, 0, 108, 0, 111, 0, 119, 0, 32, 0, 38, 0, 32, 0, 72, 0, 111, 0, 108, 0, 109, 0, 101, 0, 115, 0, 32, 0, 73, 0, 110, 0, 99, 0, 46, 0, 46, 0, 32, 0, 65, 0, 108, 0, 108, 0, 32, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 115, 0, 32, 0, 114, 0, 101, 0, 115, 0, 101, 0, 114, 0, 118, 0, 101, 0, 100, 0, 46, 0, 71, 0, 111, 0, 32, 0, 77, 0, 111, 0, 110, 0, 111, 0, 82, 0, 101, 0, 103, 0, 117, 0, 108, 0, 97, 0, 114, 0, 66, 0, 105, 0, 103, 0, 101, 0, 108, 0, 111, 0, 119, 0, 38, 0, 72, 0, 111, 0, 108, 0, 109, 0, 101, 0, 115, 0, 73, 0, 110, 0, 99, 0, 46, 0, 58, 0, 32, 0, 71, 0, 111, 0, 32, 0, 77, 0, 111, 0, 110, 0, 111, 0, 58, 0, 32, 0, 50, 0, 48, 0, 49, 0, 54, 0, 71, 0, 111, 0, 32, 0, 77, 0, 111, 0, 110, 0, 111, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 32, 0, 50, 0, 46, 0, 48, 0, 48, 0, 56, 0, 59, 0, 32, 0, 116, 0, 116, 0, 102, 0, 97, 0, 117, 0, 116, 0, 111, 0, 104, 0, 105, 0, 110, 0, 116, 0, 32, 0, 40, 0, 118, 0, 49, 0, 46, 0, 54, 0, 41, 0, 71, 0, 111, 0, 77, 0, 111, 0, 110, 0, 111, 0, 66, 0, 105, 0, 103, 0, 101, 0, 108, 0, 111, 0, 119, 0, 32, 0, 38, 0, 32, 0, 72, 0, 111, 0, 108, 0, 109, 0, 101, 0, 115, 0, 32, 0, 73, 0, 110, 0, 99, 0, 46, 0, 75, 0, 114, 0, 105, 0, 115, 0, 32, 0, 72, 0, 111, 0, 108, 0, 109, 0, 101, 0, 115, 0, 32, 0, 97, 0, 110, 0, 100, 0, 32, 0, 67, 0, 104, 0, 97, 0, 114, 0, 108, 0, 101, 0, 115, 0, 32, 0, 66, 0, 105, 0, 103, 0, 101, 0, 108, 0, 111, 0, 119, 0, 71, 0, 111, 0, 32, 0, 77, 0, 111, 0, 110, 0, 111, 0, 32, 0, 105, 0, 115, 0, 32, 0, 97, 0, 32, 0, 109, 0, 111, 0, 110, 0, 111, 0, 115, 0, 112, 0, 97, 0, 99, 0, 101, 0, 100, 0, 44, 0, 32, 0, 115, 0, 108, 0, 97, 0, 98, 0, 45, 0, 115, 0, 101, 0, 114, 0, 105, 0, 102, 0, 32, 0, 102, 0, 111, 0, 110, 0, 116, 0, 32, 0, 102, 0, 111, 0, 114, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 71, 0, 111, 0, 32, 0, 108, 0, 97, 0, 110, 0, 103, 0, 117, 0, 97, 0, 103, 0, 101, 0, 46, 0, 32, 0, 73, 0, 116, 0, 115, 0, 32, 0, 120, 0, 45, 0, 104, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 44, 0, 32, 0, 115, 0, 116, 0, 101, 0, 109, 0, 32, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 44, 0, 32, 0, 97, 0, 110, 0, 100, 0, 32, 0, 100, 0, 105, 0, 115, 0, 116, 0, 105, 0, 110, 0, 99, 0, 116, 0, 105, 0, 118, 0, 101, 0, 32, 0, 102, 0, 111, 0, 114, 0, 109, 0, 115, 0, 32, 0, 111, 0, 102, 0, 32, 0, 122, 0, 101, 0, 114, 0, 111, 0, 44, 0, 32, 0, 99, 0, 97, 0, 112, 0, 105, 0, 116, 0, 97, 0, 108, 0, 32, 0, 79, 0, 44, 0, 32, 0, 108, 0, 111, 0, 119, 0, 101, 0, 114, 0, 99, 0, 97, 0, 115, 0, 101, 0, 32, 0, 108, 0, 44, 0, 32, 0, 102, 0, 105, 0, 103, 0, 117, 0, 114, 0, 101, 0, 32, 0, 111, 0, 110, 0, 101, 0, 44, 0, 32, 0, 97, 0, 110, 0, 100, 0, 32, 0, 99, 0, 97, 0, 112, 0, 105, 0, 116, 0, 97, 0, 108, 0, 32, 0, 73, 0, 32, 0, 102, 0, 111, 0, 108, 0, 108, 0, 111, 0, 119, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 68, 0, 73, 0, 78, 0, 32, 0, 49, 0, 52, 0, 53, 0, 48, 0, 32, 0, 102, 0, 111, 0, 110, 0, 116, 0, 32, 0, 108, 0, 101, 0, 103, 0, 105, 0, 98, 0, 105, 0, 108, 0, 105, 0, 116, 0, 121, 0, 32, 0, 115, 0, 116, 0, 97, 0, 110, 0, 100, 0, 97, 0, 114, 0, 100, 0, 46, 0, 32, 0, 84, 0, 104, 0, 105, 0, 115, 0, 32, 0, 71, 0, 111, 0, 32, 0, 102, 0, 111, 0, 110, 0, 116, 0, 39, 0, 115, 0, 32, 0, 87, 0, 71, 0, 76, 0, 32, 0, 99, 0, 104, 0, 97, 0, 114, 0, 97, 0, 99, 0, 116, 0, 101, 0, 114, 0, 32, 0, 115, 0, 101, 0, 116, 0, 32, 0, 105, 0, 110, 0, 99, 0, 108, 0, 117, 0, 100, 0, 101, 0, 115, 0, 32, 0, 76, 0, 97, 0, 116, 0, 105, 0, 110, 0, 44, 0, 32, 0, 71, 0, 114, 0, 101, 0, 101, 0, 107, 0, 32, 0, 97, 0, 110, 0, 100, 0, 32, 0, 67, 0, 121, 0, 114, 0, 105, 0, 108, 0, 108, 0, 105, 0, 99, 0, 32, 0, 97, 0, 108, 0, 112, 0, 104, 0, 97, 0, 98, 0, 101, 0, 116, 0, 115, 0, 32, 0, 112, 0, 108, 0, 117, 0, 115, 0, 32, 0, 110, 0, 117, 0, 109, 0, 101, 0, 114, 0, 111, 0, 117, 0, 115, 0, 32, 0, 115, 0, 121, 0, 109, 0, 98, 0, 111, 0, 108, 0, 115, 0, 32, 0, 97, 0, 110, 0, 100, 0, 32, 0, 103, 0, 114, 0, 97, 0, 112, 0, 104, 0, 105, 0, 99, 0, 97, 0, 108, 0, 32, 0, 101, 0, 108, 0, 101, 0, 109, 0, 101, 0, 110, 0, 116, 0, 115, 0, 46, 0, 108, 0, 117, 0, 99, 0, 105, 0, 100, 0, 97, 0, 102, 0, 111, 0, 110, 0, 116, 0, 115, 0, 46, 0, 99, 0, 111, 0, 109, 0, 67, 0, 111, 0, 112, 0, 121, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 40, 0, 99, 0, 41, 0, 32, 0, 50, 0, 48, 0, 49, 0, 54, 0, 32, 0, 66, 0, 105, 0, 103, 0, 101, 0, 108, 0, 111, 0, 119, 0, 32, 0, 38, 0, 32, 0, 72, 0, 111, 0, 108, 0, 109, 0, 101, 0, 115, 0, 32, 0, 73, 0, 110, 0, 99, 0, 46, 0, 46, 0, 32, 0, 65, 0, 108, 0, 108, 0, 32, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 115, 0, 32, 0, 114, 0, 101, 0, 115, 0, 101, 0, 114, 0, 118, 0, 101, 0, 100, 0, 46, 0, 10, 0, 10, 0, 68, 0, 105, 0, 115, 0, 116, 0, 114, 0, 105, 0, 98, 0, 117, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 111, 0, 102, 0, 32, 0, 116, 0, 104, 0, 105, 0, 115, 0, 32, 0, 102, 0, 111, 0, 110, 0, 116, 0, 32, 0, 105, 0, 115, 0, 32, 0, 103, 0, 111, 0, 118, 0, 101, 0, 114, 0, 110, 0, 101, 0, 100, 0, 32, 0, 98, 0, 121, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 102, 0, 111, 0, 108, 0, 108, 0, 111, 0, 119, 0, 105, 0, 110, 0, 103, 0, 32, 0, 108, 0, 105, 0, 99, 0, 101, 0, 110, 0, 115, 0, 101, 0, 46, 0, 32, 0, 73, 0, 102, 0, 32, 0, 121, 0, 111, 0, 117, 0, 32, 0, 100, 0, 111, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 97, 0, 103, 0, 114, 0, 101, 0, 101, 0, 32, 0, 116, 0, 111, 0, 32, 0, 116, 0, 104, 0, 105, 0, 115, 0, 32, 0, 108, 0, 105, 0, 99, 0, 101, 0, 110, 0, 115, 0, 101, 0, 44, 0, 32, 0, 105, 0, 110, 0, 99, 0, 108, 0, 117, 0, 100, 0, 105, 0, 110, 0, 103, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 100, 0, 105, 0, 115, 0, 99, 0, 108, 0, 97, 0, 105, 0, 109, 0, 101, 0, 114, 0, 44, 0, 32, 0, 100, 0, 111, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 100, 0, 105, 0, 115, 0, 116, 0, 114, 0, 105, 0, 98, 0, 117, 0, 116, 0, 101, 0, 32, 0, 111, 0, 114, 0, 32, 0, 109, 0, 111, 0, 100, 0, 105, 0, 102, 0, 121, 0, 32, 0, 116, 0, 104, 0, 105, 0, 115, 0, 32, 0, 102, 0, 111, 0, 110, 0, 116, 0, 46, 0, 10, 0, 10, 0, 82, 0, 101, 0, 100, 0, 105, 0, 115, 0, 116, 0, 114, 0, 105, 0, 98, 0, 117, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 97, 0, 110, 0, 100, 0, 32, 0, 117, 0, 115, 0, 101, 0, 32, 0, 105, 0, 110, 0, 32, 0, 115, 0, 111, 0, 117, 0, 114, 0, 99, 0, 101, 0, 32, 0, 97, 0, 110, 0, 100, 0, 32, 0, 98, 0, 105, 0, 110, 0, 97, 0, 114, 0, 121, 0, 32, 0, 102, 0, 111, 0, 114, 0, 109, 0, 115, 0, 44, 0, 32, 0, 119, 0, 105, 0, 116, 0, 104, 0, 32, 0, 111, 0, 114, 0, 32, 0, 119, 0, 105, 0, 116, 0, 104, 0, 111, 0, 117, 0, 116, 0, 32, 0, 109, 0, 111, 0, 100, 0, 105, 0, 102, 0, 105, 0, 99, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 44, 0, 32, 0, 97, 0, 114, 0, 101, 0, 32, 0, 112, 0, 101, 0, 114, 0, 109, 0, 105, 0, 116, 0, 116, 0, 101, 0, 100, 0, 32, 0, 112, 0, 114, 0, 111, 0, 118, 0, 105, 0, 100, 0, 101, 0, 100, 0, 32, 0, 116, 0, 104, 0, 97, 0, 116, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 102, 0, 111, 0, 108, 0, 108, 0, 111, 0, 119, 0, 105, 0, 110, 0, 103, 0, 32, 0, 99, 0, 111, 0, 110, 0, 100, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 32, 0, 97, 0, 114, 0, 101, 0, 32, 0, 109, 0, 101, 0, 116, 0, 58, 0, 10, 0, 10, 0, 32, 0, 32, 0, 32, 0, 42, 0, 32, 0, 82, 0, 101, 0, 100, 0, 105, 0, 115, 0, 116, 0, 114, 0, 105, 0, 98, 0, 117, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 32, 0, 111, 0, 102, 0, 32, 0, 115, 0, 111, 0, 117, 0, 114, 0, 99, 0, 101, 0, 32, 0, 99, 0, 111, 0, 100, 0, 101, 0, 32, 0, 109, 0, 117, 0, 115, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 97, 0, 105, 0, 110, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 97, 0, 98, 0, 111, 0, 118, 0, 101, 0, 32, 0, 99, 0, 111, 0, 112, 0, 121, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 110, 0, 111, 0, 116, 0, 105, 0, 99, 0, 101, 0, 44, 0, 32, 0, 116, 0, 104, 0, 105, 0, 115, 0, 32, 0, 108, 0, 105, 0, 115, 0, 116, 0, 32, 0, 111, 0, 102, 0, 32, 0, 99, 0, 111, 0, 110, 0, 100, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 32, 0, 97, 0, 110, 0, 100, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 102, 0, 111, 0, 108, 0, 108, 0, 111, 0, 119, 0, 105, 0, 110, 0, 103, 0, 32, 0, 100, 0, 105, 0, 115, 0, 99, 0, 108, 0, 97, 0, 105, 0, 109, 0, 101, 0, 114, 0, 46, 0, 10, 0, 10, 0, 32, 0, 32, 0, 32, 0, 42, 0, 32, 0, 82, 0, 101, 0, 100, 0, 105, 0, 115, 0, 116, 0, 114, 0, 105, 0, 98, 0, 117, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 32, 0, 105, 0, 110, 0, 32, 0, 98, 0, 105, 0, 110, 0, 97, 0, 114, 0, 121, 0, 32, 0, 102, 0, 111, 0, 114, 0, 109, 0, 32, 0, 109, 0, 117, 0, 115, 0, 116, 0, 32, 0, 114, 0, 101, 0, 112, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 101, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 97, 0, 98, 0, 111, 0, 118, 0, 101, 0, 32, 0, 99, 0, 111, 0, 112, 0, 121, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 110, 0, 111, 0, 116, 0, 105, 0, 99, 0, 101, 0, 44, 0, 32, 0, 116, 0, 104, 0, 105, 0, 115, 0, 32, 0, 108, 0, 105, 0, 115, 0, 116, 0, 32, 0, 111, 0, 102, 0, 32, 0, 99, 0, 111, 0, 110, 0, 100, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 32, 0, 97, 0, 110, 0, 100, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 102, 0, 111, 0, 108, 0, 108, 0, 111, 0, 119, 0, 105, 0, 110, 0, 103, 0, 32, 0, 100, 0, 105, 0, 115, 0, 99, 0, 108, 0, 97, 0, 105, 0, 109, 0, 101, 0, 114, 0, 32, 0, 105, 0, 110, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 100, 0, 111, 0, 99, 0, 117, 0, 109, 0, 101, 0, 110, 0, 116, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 97, 0, 110, 0, 100, 0, 47, 0, 111, 0, 114, 0, 32, 0, 111, 0, 116, 0, 104, 0, 101, 0, 114, 0, 32, 0, 109, 0, 97, 0, 116, 0, 101, 0, 114, 0, 105, 0, 97, 0, 108, 0, 115, 0, 32, 0, 112, 0, 114, 0, 111, 0, 118, 0, 105, 0, 100, 0, 101, 0, 100, 0, 32, 0, 119, 0, 105, 0, 116, 0, 104, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 100, 0, 105, 0, 115, 0, 116, 0, 114, 0, 105, 0, 98, 0, 117, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 10, 0, 10, 0, 32, 0, 32, 0, 32, 0, 42, 0, 32, 0, 78, 0, 101, 0, 105, 0, 116, 0, 104, 0, 101, 0, 114, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 110, 0, 97, 0, 109, 0, 101, 0, 32, 0, 111, 0, 102, 0, 32, 0, 71, 0, 111, 0, 111, 0, 103, 0, 108, 0, 101, 0, 32, 0, 73, 0, 110, 0, 99, 0, 46, 0, 32, 0, 110, 0, 111, 0, 114, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 110, 0, 97, 0, 109, 0, 101, 0, 115, 0, 32, 0, 111, 0, 102, 0, 32, 0, 105, 0, 116, 0, 115, 0, 32, 0, 99, 0, 111, 0, 110, 0, 116, 0, 114, 0, 105, 0, 98, 0, 117, 0, 116, 0, 111, 0, 114, 0, 115, 0, 32, 0, 109, 0, 97, 0, 121, 0, 32, 0, 98, 0, 101, 0, 32, 0, 117, 0, 115, 0, 101, 0, 100, 0, 32, 0, 116, 0, 111, 0, 32, 0, 101, 0, 110, 0, 100, 0, 111, 0, 114, 0, 115, 0, 101, 0, 32, 0, 111, 0, 114, 0, 32, 0, 112, 0, 114, 0, 111, 0, 109, 0, 111, 0, 116, 0, 101, 0, 32, 0, 112, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 115, 0, 32, 0, 100, 0, 101, 0, 114, 0, 105, 0, 118, 0, 101, 0, 100, 0, 32, 0, 102, 0, 114, 0, 111, 0, 109, 0, 32, 0, 116, 0, 104, 0, 105, 0, 115, 0, 32, 0, 115, 0, 111, 0, 102, 0, 116, 0, 119, 0, 97, 0, 114, 0, 101, 0, 32, 0, 119, 0, 105, 0, 116, 0, 104, 0, 111, 0, 117, 0, 116, 0, 32, 0, 115, 0, 112, 0, 101, 0, 99, 0, 105, 0, 102, 0, 105, 0, 99, 0, 32, 0, 112, 0, 114, 0, 105, 0, 111, 0, 114, 0, 32, 0, 119, 0, 114, 0, 105, 0, 116, 0, 116, 0, 101, 0, 110, 0, 32, 0, 112, 0, 101, 0, 114, 0, 109, 0, 105, 0, 115, 0, 115, 0, 105, 0, 111, 0, 110, 0, 46, 0, 10, 0, 10, 0, 68, 0, 73, 0, 83, 0, 67, 0, 76, 0, 65, 0, 73, 0, 77, 0, 69, 0, 82, 0, 58, 0, 32, 0, 84, 0, 72, 0, 73, 0, 83, 0, 32, 0, 83, 0, 79, 0, 70, 0, 84, 0, 87, 0, 65, 0, 82, 0, 69, 0, 32, 0, 73, 0, 83, 0, 32, 0, 80, 0, 82, 0, 79, 0, 86, 0, 73, 0, 68, 0, 69, 0, 68, 0, 32, 0, 66, 0, 89, 0, 32, 0, 84, 0, 72, 0, 69, 0, 32, 0, 67, 0, 79, 0, 80, 0, 89, 0, 82, 0, 73, 0, 71, 0, 72, 0, 84, 0, 32, 0, 72, 0, 79, 0, 76, 0, 68, 0, 69, 0, 82, 0, 83, 0, 32, 0, 65, 0, 78, 0, 68, 0, 32, 0, 67, 0, 79, 0, 78, 0, 84, 0, 82, 0, 73, 0, 66, 0, 85, 0, 84, 0, 79, 0, 82, 0, 83, 0, 32, 0, 34, 0, 65, 0, 83, 0, 32, 0, 73, 0, 83, 0, 34, 0, 32, 0, 65, 0, 78, 0, 68, 0, 32, 0, 65, 0, 78, 0, 89, 0, 32, 0, 69, 0, 88, 0, 80, 0, 82, 0, 69, 0, 83, 0, 83, 0, 32, 0, 79, 0, 82, 0, 32, 0, 73, 0, 77, 0, 80, 0, 76, 0, 73, 0, 69, 0, 68, 0, 32, 0, 87, 0, 65, 0, 82, 0, 82, 0, 65, 0, 78, 0, 84, 0, 73, 0, 69, 0, 83, 0, 44, 0, 32, 0, 73, 0, 78, 0, 67, 0, 76, 0, 85, 0, 68, 0, 73, 0, 78, 0, 71, 0, 44, 0, 32, 0, 66, 0, 85, 0, 84, 0, 32, 0, 78, 0, 79, 0, 84, 0, 32, 0, 76, 0, 73, 0, 77, 0, 73, 0, 84, 0, 69, 0, 68, 0, 32, 0, 84, 0, 79, 0, 44, 0, 32, 0, 84, 0, 72, 0, 69, 0, 32, 0, 73, 0, 77, 0, 80, 0, 76, 0, 73, 0, 69, 0, 68, 0, 32, 0, 87, 0, 65, 0, 82, 0, 82, 0, 65, 0, 78, 0, 84, 0, 73, 0, 69, 0, 83, 0, 32, 0, 79, 0, 70, 0, 32, 0, 77, 0, 69, 0, 82, 0, 67, 0, 72, 0, 65, 0, 78, 0, 84, 0, 65, 0, 66, 0, 73, 0, 76, 0, 73, 0, 84, 0, 89, 0, 32, 0, 65, 0, 78, 0, 68, 0, 32, 0, 70, 0, 73, 0, 84, 0, 78, 0, 69, 0, 83, 0, 83, 0, 32, 0, 70, 0, 79, 0, 82, 0, 32, 0, 65, 0, 32, 0, 80, 0, 65, 0, 82, 0, 84, 0, 73, 0, 67, 0, 85, 0, 76, 0, 65, 0, 82, 0, 32, 0, 80, 0, 85, 0, 82, 0, 80, 0, 79, 0, 83, 0, 69, 0, 32, 0, 65, 0, 82, 0, 69, 0, 32, 0, 68, 0, 73, 0, 83, 0, 67, 0, 76, 0, 65, 0, 73, 0, 77, 0, 69, 0, 68, 0, 46, 0, 32, 0, 73, 0, 78, 0, 32, 0, 78, 0, 79, 0, 32, 0, 69, 0, 86, 0, 69, 0, 78, 0, 84, 0, 32, 0, 83, 0, 72, 0, 65, 0, 76, 0, 76, 0, 32, 0, 84, 0, 72, 0, 69, 0, 32, 0, 67, 0, 79, 0, 80, 0, 89, 0, 82, 0, 73, 0, 71, 0, 72, 0, 84, 0, 32, 0, 79, 0, 87, 0, 78, 0, 69, 0, 82, 0, 32, 0, 79, 0, 82, 0, 32, 0, 67, 0, 79, 0, 78, 0, 84, 0, 82, 0, 73, 0, 66, 0, 85, 0, 84, 0, 79, 0, 82, 0, 83, 0, 32, 0, 66, 0, 69, 0, 32, 0, 76, 0, 73, 0, 65, 0, 66, 0, 76, 0, 69, 0, 32, 0, 70, 0, 79, 0, 82, 0, 32, 0, 65, 0, 78, 0, 89, 0, 32, 0, 68, 0, 73, 0, 82, 0, 69, 0, 67, 0, 84, 0, 44, 0, 32, 0, 73, 0, 78, 0, 68, 0, 73, 0, 82, 0, 69, 0, 67, 0, 84, 0, 44, 0, 32, 0, 73, 0, 78, 0, 67, 0, 73, 0, 68, 0, 69, 0, 78, 0, 84, 0, 65, 0, 76, 0, 44, 0, 32, 0, 83, 0, 80, 0, 69, 0, 67, 0, 73, 0, 65, 0, 76, 0, 44, 0, 32, 0, 69, 0, 88, 0, 69, 0, 77, 0, 80, 0, 76, 0, 65, 0, 82, 0, 89, 0, 44, 0, 32, 0, 79, 0, 82, 0, 32, 0, 67, 0, 79, 0, 78, 0, 83, 0, 69, 0, 81, 0, 85, 0, 69, 0, 78, 0, 84, 0, 73, 0, 65, 0, 76, 0, 32, 0, 68, 0, 65, 0, 77, 0, 65, 0, 71, 0, 69, 0, 83, 0, 32, 0, 40, 0, 73, 0, 78, 0, 67, 0, 76, 0, 85, 0, 68, 0, 73, 0, 78, 0, 71, 0, 44, 0, 32, 0, 66, 0, 85, 0, 84, 0, 32, 0, 78, 0, 79, 0, 84, 0, 32, 0, 76, 0, 73, 0, 77, 0, 73, 0, 84, 0, 69, 0, 68, 0, 32, 0, 84, 0, 79, 0, 44, 0, 32, 0, 80, 0, 82, 0, 79, 0, 67, 0, 85, 0, 82, 0, 69, 0, 77, 0, 69, 0, 78, 0, 84, 0, 32, 0, 79, 0, 70, 0, 32, 0, 83, 0, 85, 0, 66, 0, 83, 0, 84, 0, 73, 0, 84, 0, 85, 0, 84, 0, 69, 0, 32, 0, 71, 0, 79, 0, 79, 0, 68, 0, 83, 0, 32, 0, 79, 0, 82, 0, 32, 0, 83, 0, 69, 0, 82, 0, 86, 0, 73, 0, 67, 0, 69, 0, 83, 0, 59, 0, 32, 0, 76, 0, 79, 0, 83, 0, 83, 0, 32, 0, 79, 0, 70, 0, 32, 0, 85, 0, 83, 0, 69, 0, 44, 0, 32, 0, 68, 0, 65, 0, 84, 0, 65, 0, 44, 0, 32, 0, 79, 0, 82, 0, 32, 0, 80, 0, 82, 0, 79, 0, 70, 0, 73, 0, 84, 0, 83, 0, 59, 0, 32, 0, 79, 0, 82, 0, 32, 0, 66, 0, 85, 0, 83, 0, 73, 0, 78, 0, 69, 0, 83, 0, 83, 0, 32, 0, 73, 0, 78, 0, 84, 0, 69, 0, 82, 0, 82, 0, 85, 0, 80, 0, 84, 0, 73, 0, 79, 0, 78, 0, 41, 0, 32, 0, 72, 0, 79, 0, 87, 0, 69, 0, 86, 0, 69, 0, 82, 0, 32, 0, 67, 0, 65, 0, 85, 0, 83, 0, 69, 0, 68, 0, 32, 0, 65, 0, 78, 0, 68, 0, 32, 0, 79, 0, 78, 0, 32, 0, 65, 0, 78, 0, 89, 0, 32, 0, 84, 0, 72, 0, 69, 0, 79, 0, 82, 0, 89, 0, 32, 0, 79, 0, 70, 0, 32, 0, 76, 0, 73, 0, 65, 0, 66, 0, 73, 0, 76, 0, 73, 0, 84, 0, 89, 0, 44, 0, 32, 0, 87, 0, 72, 0, 69, 0, 84, 0, 72, 0, 69, 0, 82, 0, 32, 0, 73, 0, 78, 0, 32, 0, 67, 0, 79, 0, 78, 0, 84, 0, 82, 0, 65, 0, 67, 0, 84, 0, 44, 0, 32, 0, 83, 0, 84, 0, 82, 0, 73, 0, 67, 0, 84, 0, 32, 0, 76, 0, 73, 0, 65, 0, 66, 0, 73, 0, 76, 0, 73, 0, 84, 0, 89, 0, 44, 0, 32, 0, 79, 0, 82, 0, 32, 0, 84, 0, 79, 0, 82, 0, 84, 0, 32, 0, 40, 0, 73, 0, 78, 0, 67, 0, 76, 0, 85, 0, 68, 0, 73, 0, 78, 0, 71, 0, 32, 0, 78, 0, 69, 0, 71, 0, 76, 0, 73, 0, 71, 0, 69, 0, 78, 0, 67, 0, 69, 0, 32, 0, 79, 0, 82, 0, 32, 0, 79, 0, 84, 0, 72, 0, 69, 0, 82, 0, 87, 0, 73, 0, 83, 0, 69, 0, 41, 0, 32, 0, 65, 0, 82, 0, 73, 0, 83, 0, 73, 0, 78, 0, 71, 0, 32, 0, 73, 0, 78, 0, 32, 0, 65, 0, 78, 0, 89, 0, 32, 0, 87, 0, 65, 0, 89, 0, 32, 0, 79, 0, 85, 0, 84, 0, 32, 0, 79, 0, 70, 0, 32, 0, 84, 0, 72, 0, 69, 0, 32, 0, 85, 0, 83, 0, 69, 0, 32, 0, 79, 0, 70, 0, 32, 0, 84, 0, 72, 0, 73, 0, 83, 0, 32, 0, 83, 0, 79, 0, 70, 0, 84, 0, 87, 0, 65, 0, 82, 0, 69, 0, 44, 0, 32, 0, 69, 0, 86, 0, 69, 0, 78, 0, 32, 0, 73, 0, 70, 0, 32, 0, 65, 0, 68, 0, 86, 0, 73, 0, 83, 0, 69, 0, 68, 0, 32, 0, 79, 0, 70, 0, 32, 0, 84, 0, 72, 0, 69, 0, 32, 0, 80, 0, 79, 0, 83, 0, 83, 0, 73, 0, 66, 0, 73, 0, 76, 0, 73, 0, 84, 0, 89, 0, 32, 0, 79, 0, 70, 0, 32, 0, 83, 0, 85, 0, 67, 0, 72, 0, 32, 0, 68, 0, 65, 0, 77, 0, 65, 0, 71, 0, 69, 0, 46, 0, 0, 2, 0, 0, 0, 0, 0, 0, 254, 237, 0, 50, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 154, 0, 0, 2, 7, 2, 8, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0, 20, 0, 21, 0, 22, 0, 23, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0, 30, 0, 31, 0, 32, 0, 33, 0, 34, 0, 35, 0, 36, 0, 37, 0, 38, 0, 39, 0, 40, 0, 41, 0, 42, 0, 43, 0, 44, 0, 45, 0, 46, 0, 47, 0, 48, 0, 49, 0, 50, 0, 51, 0, 52, 0, 53, 0, 54, 0, 55, 0, 56, 0, 57, 0, 58, 0, 59, 0, 60, 0, 61, 0, 62, 0, 63, 0, 64, 0, 65, 0, 66, 0, 67, 0, 68, 0, 69, 0, 70, 0, 71, 0, 72, 0, 73, 0, 74, 0, 75, 0, 76, 0, 77, 0, 78, 0, 79, 0, 80, 0, 81, 0, 82, 0, 83, 0, 84, 0, 85, 0, 86, 0, 87, 0, 88, 0, 89, 0, 90, 0, 91, 0, 92, 0, 93, 0, 94, 0, 95, 0, 96, 0, 97, 2, 9, 0, 163, 0, 132, 0, 133, 0, 189, 0, 150, 0, 232, 0, 134, 0, 142, 0, 139, 0, 157, 0, 169, 0, 164, 2, 10, 0, 138, 0, 218, 0, 131, 0, 147, 2, 11, 2, 12, 0, 141, 0, 151, 0, 136, 0, 195, 0, 222, 2, 13, 0, 158, 0, 170, 0, 245, 0, 244, 0, 246, 0, 162, 0, 173, 0, 201, 0, 199, 0, 174, 0, 98, 0, 99, 0, 144, 0, 100, 0, 203, 0, 101, 0, 200, 0, 202, 0, 207, 0, 204, 0, 205, 0, 206, 0, 233, 0, 102, 0, 211, 0, 208, 0, 209, 0, 175, 0, 103, 0, 240, 0, 145, 0, 214, 0, 212, 0, 213, 0, 104, 0, 235, 0, 237, 0, 137, 0, 106, 0, 105, 0, 107, 0, 109, 0, 108, 0, 110, 0, 160, 0, 111, 0, 113, 0, 112, 0, 114, 0, 115, 0, 117, 0, 116, 0, 118, 0, 119, 0, 234, 0, 120, 0, 122, 0, 121, 0, 123, 0, 125, 0, 124, 0, 184, 0, 161, 0, 127, 0, 126, 0, 128, 0, 129, 0, 236, 0, 238, 0, 186, 1, 6, 1, 136, 1, 3, 1, 132, 1, 7, 1, 138, 0, 253, 0, 254, 1, 10, 1, 149, 1, 11, 1, 150, 0, 255, 1, 0, 1, 13, 1, 154, 1, 14, 1, 1, 1, 18, 1, 163, 1, 15, 1, 160, 1, 17, 1, 162, 1, 20, 1, 165, 1, 16, 1, 161, 1, 27, 1, 178, 0, 248, 0, 249, 1, 28, 1, 179, 2, 14, 2, 15, 1, 34, 1, 182, 1, 33, 1, 181, 1, 42, 1, 199, 1, 37, 1, 187, 1, 36, 1, 185, 1, 38, 1, 194, 0, 250, 0, 215, 1, 35, 1, 186, 1, 43, 1, 200, 2, 16, 2, 17, 1, 202, 1, 45, 1, 203, 2, 18, 2, 19, 1, 47, 1, 205, 1, 48, 1, 206, 0, 226, 0, 227, 1, 50, 1, 215, 2, 20, 2, 21, 1, 51, 1, 217, 1, 216, 1, 19, 1, 164, 1, 55, 1, 221, 1, 53, 1, 219, 1, 54, 1, 220, 0, 176, 0, 177, 1, 63, 1, 234, 2, 22, 2, 23, 1, 64, 1, 235, 1, 106, 1, 239, 1, 107, 1, 240, 0, 251, 0, 252, 0, 228, 0, 229, 2, 24, 2, 25, 1, 111, 1, 251, 1, 110, 1, 250, 1, 121, 2, 150, 1, 115, 2, 5, 1, 113, 2, 3, 1, 120, 2, 149, 1, 114, 2, 4, 1, 116, 2, 143, 1, 123, 2, 152, 1, 127, 2, 156, 0, 187, 1, 129, 2, 158, 1, 130, 2, 159, 0, 230, 0, 231, 1, 209, 0, 166, 1, 8, 1, 139, 1, 2, 1, 133, 1, 59, 1, 229, 2, 26, 2, 27, 2, 28, 2, 29, 0, 216, 0, 225, 2, 30, 0, 219, 0, 220, 0, 221, 0, 224, 0, 217, 0, 223, 1, 254, 1, 157, 1, 5, 1, 137, 1, 22, 1, 24, 1, 41, 1, 58, 1, 119, 1, 56, 1, 197, 1, 4, 1, 9, 1, 26, 2, 31, 1, 21, 1, 131, 1, 23, 1, 112, 1, 39, 1, 44, 1, 46, 1, 49, 1, 52, 1, 126, 1, 57, 1, 61, 1, 65, 1, 108, 1, 109, 1, 117, 1, 60, 1, 12, 1, 62, 2, 32, 1, 40, 1, 118, 1, 135, 1, 167, 1, 171, 1, 198, 2, 147, 1, 134, 1, 147, 1, 177, 1, 155, 1, 166, 2, 162, 1, 170, 1, 252, 1, 195, 1, 201, 1, 204, 2, 33, 1, 218, 2, 155, 1, 224, 0, 155, 1, 237, 1, 245, 1, 244, 1, 249, 2, 145, 1, 231, 1, 151, 1, 232, 1, 222, 1, 196, 2, 146, 1, 225, 2, 148, 1, 223, 2, 34, 2, 35, 2, 36, 2, 37, 2, 38, 2, 39, 2, 40, 2, 41, 2, 42, 2, 43, 2, 44, 2, 45, 2, 46, 2, 47, 2, 48, 2, 49, 2, 50, 2, 51, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 2, 58, 2, 59, 2, 60, 2, 61, 2, 62, 2, 63, 2, 64, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 91, 2, 92, 2, 93, 2, 94, 2, 95, 2, 96, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 123, 2, 124, 2, 125, 2, 126, 2, 127, 2, 128, 2, 129, 2, 130, 2, 131, 1, 125, 2, 154, 1, 122, 2, 151, 1, 124, 2, 153, 1, 128, 2, 157, 0, 178, 0, 179, 2, 132, 2, 6, 0, 182, 0, 183, 0, 196, 1, 233, 0, 180, 0, 181, 0, 197, 0, 130, 0, 194, 0, 135, 0, 171, 0, 198, 1, 212, 1, 241, 0, 190, 0, 191, 1, 172, 2, 133, 0, 188, 2, 134, 0, 247, 1, 208, 1, 230, 1, 25, 2, 135, 2, 136, 2, 137, 0, 140, 0, 159, 1, 169, 1, 226, 1, 253, 1, 176, 1, 242, 1, 142, 1, 144, 1, 143, 1, 141, 1, 140, 1, 145, 1, 146, 0, 152, 0, 168, 0, 154, 0, 153, 0, 239, 2, 138, 2, 139, 0, 165, 0, 146, 1, 228, 1, 190, 0, 156, 0, 167, 0, 143, 1, 168, 0, 148, 0, 149, 1, 184, 1, 236, 1, 189, 1, 188, 1, 75, 1, 76, 1, 66, 1, 68, 1, 67, 1, 69, 1, 73, 1, 74, 1, 71, 1, 72, 1, 70, 1, 94, 1, 82, 1, 102, 1, 103, 1, 90, 1, 80, 1, 79, 1, 83, 1, 101, 1, 100, 1, 89, 1, 86, 1, 85, 1, 84, 1, 87, 1, 88, 1, 93, 1, 77, 1, 78, 1, 81, 1, 98, 1, 99, 1, 92, 1, 96, 1, 97, 1, 91, 1, 105, 1, 104, 1, 95, 2, 144, 1, 159, 1, 148, 1, 207, 1, 238, 1, 210, 1, 243, 1, 158, 1, 174, 1, 32, 1, 30, 1, 31, 1, 175, 2, 2, 2, 1, 1, 255, 2, 0, 0, 185, 1, 152, 1, 29, 1, 191, 1, 192, 1, 227, 1, 246, 1, 193, 1, 248, 1, 173, 1, 211, 1, 247, 1, 153, 1, 183, 1, 156, 1, 213, 1, 214, 1, 180, 2, 140, 2, 141, 2, 142, 2, 160, 2, 161, 7, 65, 69, 97, 99, 117, 116, 101, 6, 65, 98, 114, 101, 118, 101, 5, 65, 108, 112, 104, 97, 10, 65, 108, 112, 104, 97, 116, 111, 110, 111, 115, 7, 65, 109, 97, 99, 114, 111, 110, 7, 65, 111, 103, 111, 110, 101, 107, 10, 65, 114, 105, 110, 103, 97, 99, 117, 116, 101, 4, 66, 101, 116, 97, 11, 67, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 10, 67, 100, 111, 116, 97, 99, 99, 101, 110, 116, 3, 67, 104, 105, 6, 68, 99, 97, 114, 111, 110, 6, 68, 99, 114, 111, 97, 116, 6, 69, 98, 114, 101, 118, 101, 6, 69, 99, 97, 114, 111, 110, 10, 69, 100, 111, 116, 97, 99, 99, 101, 110, 116, 7, 69, 109, 97, 99, 114, 111, 110, 3, 69, 110, 103, 7, 69, 111, 103, 111, 110, 101, 107, 7, 69, 112, 115, 105, 108, 111, 110, 12, 69, 112, 115, 105, 108, 111, 110, 116, 111, 110, 111, 115, 3, 69, 116, 97, 8, 69, 116, 97, 116, 111, 110, 111, 115, 4, 69, 117, 114, 111, 5, 71, 97, 109, 109, 97, 11, 71, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 10, 71, 100, 111, 116, 97, 99, 99, 101, 110, 116, 6, 72, 49, 56, 53, 51, 51, 6, 72, 49, 56, 53, 52, 51, 6, 72, 49, 56, 53, 53, 49, 6, 72, 50, 50, 48, 55, 51, 4, 72, 98, 97, 114, 11, 72, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 2, 73, 74, 6, 73, 98, 114, 101, 118, 101, 7, 73, 109, 97, 99, 114, 111, 110, 7, 73, 111, 103, 111, 110, 101, 107, 4, 73, 111, 116, 97, 12, 73, 111, 116, 97, 100, 105, 101, 114, 101, 115, 105, 115, 9, 73, 111, 116, 97, 116, 111, 110, 111, 115, 6, 73, 116, 105, 108, 100, 101, 11, 74, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 5, 75, 97, 112, 112, 97, 6, 76, 97, 99, 117, 116, 101, 6, 76, 97, 109, 98, 100, 97, 6, 76, 99, 97, 114, 111, 110, 4, 76, 100, 111, 116, 2, 77, 117, 6, 78, 97, 99, 117, 116, 101, 6, 78, 99, 97, 114, 111, 110, 2, 78, 117, 6, 79, 98, 114, 101, 118, 101, 13, 79, 104, 117, 110, 103, 97, 114, 117, 109, 108, 97, 117, 116, 7, 79, 109, 97, 99, 114, 111, 110, 10, 79, 109, 101, 103, 97, 116, 111, 110, 111, 115, 7, 79, 109, 105, 99, 114, 111, 110, 12, 79, 109, 105, 99, 114, 111, 110, 116, 111, 110, 111, 115, 11, 79, 115, 108, 97, 115, 104, 97, 99, 117, 116, 101, 3, 80, 104, 105, 2, 80, 105, 3, 80, 115, 105, 6, 82, 97, 99, 117, 116, 101, 6, 82, 99, 97, 114, 111, 110, 3, 82, 104, 111, 8, 83, 70, 48, 49, 48, 48, 48, 48, 8, 83, 70, 48, 50, 48, 48, 48, 48, 8, 83, 70, 48, 51, 48, 48, 48, 48, 8, 83, 70, 48, 52, 48, 48, 48, 48, 8, 83, 70, 48, 53, 48, 48, 48, 48, 8, 83, 70, 48, 54, 48, 48, 48, 48, 8, 83, 70, 48, 55, 48, 48, 48, 48, 8, 83, 70, 48, 56, 48, 48, 48, 48, 8, 83, 70, 48, 57, 48, 48, 48, 48, 8, 83, 70, 49, 48, 48, 48, 48, 48, 8, 83, 70, 49, 49, 48, 48, 48, 48, 8, 83, 70, 49, 57, 48, 48, 48, 48, 8, 83, 70, 50, 48, 48, 48, 48, 48, 8, 83, 70, 50, 49, 48, 48, 48, 48, 8, 83, 70, 50, 50, 48, 48, 48, 48, 8, 83, 70, 50, 51, 48, 48, 48, 48, 8, 83, 70, 50, 52, 48, 48, 48, 48, 8, 83, 70, 50, 53, 48, 48, 48, 48, 8, 83, 70, 50, 54, 48, 48, 48, 48, 8, 83, 70, 50, 55, 48, 48, 48, 48, 8, 83, 70, 50, 56, 48, 48, 48, 48, 8, 83, 70, 51, 54, 48, 48, 48, 48, 8, 83, 70, 51, 55, 48, 48, 48, 48, 8, 83, 70, 51, 56, 48, 48, 48, 48, 8, 83, 70, 51, 57, 48, 48, 48, 48, 8, 83, 70, 52, 48, 48, 48, 48, 48, 8, 83, 70, 52, 49, 48, 48, 48, 48, 8, 83, 70, 52, 50, 48, 48, 48, 48, 8, 83, 70, 52, 51, 48, 48, 48, 48, 8, 83, 70, 52, 52, 48, 48, 48, 48, 8, 83, 70, 52, 53, 48, 48, 48, 48, 8, 83, 70, 52, 54, 48, 48, 48, 48, 8, 83, 70, 52, 55, 48, 48, 48, 48, 8, 83, 70, 52, 56, 48, 48, 48, 48, 8, 83, 70, 52, 57, 48, 48, 48, 48, 8, 83, 70, 53, 48, 48, 48, 48, 48, 8, 83, 70, 53, 49, 48, 48, 48, 48, 8, 83, 70, 53, 50, 48, 48, 48, 48, 8, 83, 70, 53, 51, 48, 48, 48, 48, 8, 83, 70, 53, 52, 48, 48, 48, 48, 6, 83, 97, 99, 117, 116, 101, 11, 83, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 5, 83, 105, 103, 109, 97, 3, 84, 97, 117, 4, 84, 98, 97, 114, 6, 84, 99, 97, 114, 111, 110, 5, 84, 104, 101, 116, 97, 6, 85, 98, 114, 101, 118, 101, 13, 85, 104, 117, 110, 103, 97, 114, 117, 109, 108, 97, 117, 116, 7, 85, 109, 97, 99, 114, 111, 110, 7, 85, 111, 103, 111, 110, 101, 107, 7, 85, 112, 115, 105, 108, 111, 110, 15, 85, 112, 115, 105, 108, 111, 110, 100, 105, 101, 114, 101, 115, 105, 115, 12, 85, 112, 115, 105, 108, 111, 110, 116, 111, 110, 111, 115, 5, 85, 114, 105, 110, 103, 6, 85, 116, 105, 108, 100, 101, 6, 87, 97, 99, 117, 116, 101, 11, 87, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 9, 87, 100, 105, 101, 114, 101, 115, 105, 115, 6, 87, 103, 114, 97, 118, 101, 2, 88, 105, 11, 89, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 6, 89, 103, 114, 97, 118, 101, 6, 90, 97, 99, 117, 116, 101, 10, 90, 100, 111, 116, 97, 99, 99, 101, 110, 116, 4, 90, 101, 116, 97, 6, 97, 98, 114, 101, 118, 101, 7, 97, 101, 97, 99, 117, 116, 101, 5, 97, 108, 112, 104, 97, 10, 97, 108, 112, 104, 97, 116, 111, 110, 111, 115, 7, 97, 109, 97, 99, 114, 111, 110, 9, 97, 110, 111, 116, 101, 108, 101, 105, 97, 7, 97, 111, 103, 111, 110, 101, 107, 10, 97, 114, 105, 110, 103, 97, 99, 117, 116, 101, 9, 97, 114, 114, 111, 119, 98, 111, 116, 104, 9, 97, 114, 114, 111, 119, 100, 111, 119, 110, 9, 97, 114, 114, 111, 119, 108, 101, 102, 116, 10, 97, 114, 114, 111, 119, 114, 105, 103, 104, 116, 7, 97, 114, 114, 111, 119, 117, 112, 9, 97, 114, 114, 111, 119, 117, 112, 100, 110, 12, 97, 114, 114, 111, 119, 117, 112, 100, 110, 98, 115, 101, 4, 98, 101, 116, 97, 5, 98, 108, 111, 99, 107, 11, 99, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 10, 99, 100, 111, 116, 97, 99, 99, 101, 110, 116, 3, 99, 104, 105, 6, 99, 105, 114, 99, 108, 101, 4, 99, 108, 117, 98, 6, 100, 99, 97, 114, 111, 110, 5, 100, 101, 108, 116, 97, 7, 100, 105, 97, 109, 111, 110, 100, 13, 100, 105, 101, 114, 101, 115, 105, 115, 116, 111, 110, 111, 115, 7, 100, 107, 115, 104, 97, 100, 101, 7, 100, 110, 98, 108, 111, 99, 107, 6, 101, 98, 114, 101, 118, 101, 6, 101, 99, 97, 114, 111, 110, 10, 101, 100, 111, 116, 97, 99, 99, 101, 110, 116, 7, 101, 109, 97, 99, 114, 111, 110, 3, 101, 110, 103, 7, 101, 111, 103, 111, 110, 101, 107, 7, 101, 112, 115, 105, 108, 111, 110, 12, 101, 112, 115, 105, 108, 111, 110, 116, 111, 110, 111, 115, 11, 101, 113, 117, 105, 118, 97, 108, 101, 110, 99, 101, 9, 101, 115, 116, 105, 109, 97, 116, 101, 100, 3, 101, 116, 97, 8, 101, 116, 97, 116, 111, 110, 111, 115, 9, 101, 120, 99, 108, 97, 109, 100, 98, 108, 6, 102, 101, 109, 97, 108, 101, 9, 102, 105, 108, 108, 101, 100, 98, 111, 120, 10, 102, 105, 108, 108, 101, 100, 114, 101, 99, 116, 11, 102, 105, 118, 101, 101, 105, 103, 104, 116, 104, 115, 5, 103, 97, 109, 109, 97, 11, 103, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 10, 103, 100, 111, 116, 97, 99, 99, 101, 110, 116, 6, 103, 111, 112, 104, 101, 114, 4, 104, 98, 97, 114, 11, 104, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 5, 104, 101, 97, 114, 116, 5, 104, 111, 117, 115, 101, 6, 105, 98, 114, 101, 118, 101, 2, 105, 106, 7, 105, 109, 97, 99, 114, 111, 110, 10, 105, 110, 116, 101, 103, 114, 97, 108, 98, 116, 10, 105, 110, 116, 101, 103, 114, 97, 108, 116, 112, 12, 105, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 9, 105, 110, 118, 98, 117, 108, 108, 101, 116, 9, 105, 110, 118, 99, 105, 114, 99, 108, 101, 12, 105, 110, 118, 115, 109, 105, 108, 101, 102, 97, 99, 101, 7, 105, 111, 103, 111, 110, 101, 107, 4, 105, 111, 116, 97, 12, 105, 111, 116, 97, 100, 105, 101, 114, 101, 115, 105, 115, 17, 105, 111, 116, 97, 100, 105, 101, 114, 101, 115, 105, 115, 116, 111, 110, 111, 115, 9, 105, 111, 116, 97, 116, 111, 110, 111, 115, 6, 105, 116, 105, 108, 100, 101, 11, 106, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 5, 107, 97, 112, 112, 97, 12, 107, 103, 114, 101, 101, 110, 108, 97, 110, 100, 105, 99, 6, 108, 97, 99, 117, 116, 101, 6, 108, 97, 109, 98, 100, 97, 6, 108, 99, 97, 114, 111, 110, 4, 108, 100, 111, 116, 7, 108, 102, 98, 108, 111, 99, 107, 4, 108, 105, 114, 97, 5, 108, 111, 110, 103, 115, 7, 108, 116, 115, 104, 97, 100, 101, 4, 109, 97, 108, 101, 6, 109, 105, 110, 117, 116, 101, 11, 109, 117, 115, 105, 99, 97, 108, 110, 111, 116, 101, 14, 109, 117, 115, 105, 99, 97, 108, 110, 111, 116, 101, 100, 98, 108, 6, 110, 97, 99, 117, 116, 101, 11, 110, 97, 112, 111, 115, 116, 114, 111, 112, 104, 101, 6, 110, 99, 97, 114, 111, 110, 2, 110, 117, 6, 111, 98, 114, 101, 118, 101, 13, 111, 104, 117, 110, 103, 97, 114, 117, 109, 108, 97, 117, 116, 7, 111, 109, 97, 99, 114, 111, 110, 5, 111, 109, 101, 103, 97, 10, 111, 109, 101, 103, 97, 116, 111, 110, 111, 115, 7, 111, 109, 105, 99, 114, 111, 110, 12, 111, 109, 105, 99, 114, 111, 110, 116, 111, 110, 111, 115, 9, 111, 110, 101, 101, 105, 103, 104, 116, 104, 10, 111, 112, 101, 110, 98, 117, 108, 108, 101, 116, 10, 111, 114, 116, 104, 111, 103, 111, 110, 97, 108, 11, 111, 115, 108, 97, 115, 104, 97, 99, 117, 116, 101, 6, 112, 101, 115, 101, 116, 97, 3, 112, 104, 105, 3, 112, 115, 105, 13, 113, 117, 111, 116, 101, 114, 101, 118, 101, 114, 115, 101, 100, 6, 114, 97, 99, 117, 116, 101, 6, 114, 99, 97, 114, 111, 110, 13, 114, 101, 118, 108, 111, 103, 105, 99, 97, 108, 110, 111, 116, 3, 114, 104, 111, 7, 114, 116, 98, 108, 111, 99, 107, 6, 115, 97, 99, 117, 116, 101, 11, 115, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 6, 115, 101, 99, 111, 110, 100, 12, 115, 101, 118, 101, 110, 101, 105, 103, 104, 116, 104, 115, 5, 115, 104, 97, 100, 101, 5, 115, 105, 103, 109, 97, 6, 115, 105, 103, 109, 97, 49, 9, 115, 109, 105, 108, 101, 102, 97, 99, 101, 5, 115, 112, 97, 100, 101, 3, 115, 117, 110, 3, 116, 97, 117, 4, 116, 98, 97, 114, 6, 116, 99, 97, 114, 111, 110, 5, 116, 104, 101, 116, 97, 12, 116, 104, 114, 101, 101, 101, 105, 103, 104, 116, 104, 115, 5, 116, 111, 110, 111, 115, 7, 116, 114, 105, 97, 103, 100, 110, 7, 116, 114, 105, 97, 103, 108, 102, 7, 116, 114, 105, 97, 103, 114, 116, 7, 116, 114, 105, 97, 103, 117, 112, 6, 117, 98, 114, 101, 118, 101, 13, 117, 104, 117, 110, 103, 97, 114, 117, 109, 108, 97, 117, 116, 7, 117, 109, 97, 99, 114, 111, 110, 13, 117, 110, 100, 101, 114, 115, 99, 111, 114, 101, 100, 98, 108, 7, 117, 110, 105, 48, 48, 48, 48, 7, 117, 110, 105, 48, 48, 48, 68, 7, 117, 110, 105, 48, 48, 65, 48, 7, 117, 110, 105, 48, 48, 65, 68, 7, 117, 110, 105, 48, 48, 66, 50, 7, 117, 110, 105, 48, 48, 66, 51, 7, 117, 110, 105, 48, 48, 66, 57, 7, 117, 110, 105, 48, 49, 50, 50, 7, 117, 110, 105, 48, 49, 50, 51, 7, 117, 110, 105, 48, 49, 51, 54, 7, 117, 110, 105, 48, 49, 51, 55, 7, 117, 110, 105, 48, 49, 51, 66, 7, 117, 110, 105, 48, 49, 51, 67, 7, 117, 110, 105, 48, 49, 52, 53, 7, 117, 110, 105, 48, 49, 52, 54, 7, 117, 110, 105, 48, 49, 53, 54, 7, 117, 110, 105, 48, 49, 53, 55, 7, 117, 110, 105, 48, 49, 54, 50, 7, 117, 110, 105, 48, 49, 54, 51, 7, 117, 110, 105, 48, 50, 49, 56, 7, 117, 110, 105, 48, 50, 49, 57, 7, 117, 110, 105, 48, 50, 49, 65, 7, 117, 110, 105, 48, 50, 49, 66, 7, 117, 110, 105, 48, 50, 67, 57, 7, 117, 110, 105, 48, 51, 57, 52, 7, 117, 110, 105, 48, 51, 65, 57, 7, 117, 110, 105, 48, 51, 66, 67, 7, 117, 110, 105, 48, 52, 48, 48, 7, 117, 110, 105, 48, 52, 48, 49, 7, 117, 110, 105, 48, 52, 48, 50, 7, 117, 110, 105, 48, 52, 48, 51, 7, 117, 110, 105, 48, 52, 48, 52, 7, 117, 110, 105, 48, 52, 48, 53, 7, 117, 110, 105, 48, 52, 48, 54, 7, 117, 110, 105, 48, 52, 48, 55, 7, 117, 110, 105, 48, 52, 48, 56, 7, 117, 110, 105, 48, 52, 48, 57, 7, 117, 110, 105, 48, 52, 48, 65, 7, 117, 110, 105, 48, 52, 48, 66, 7, 117, 110, 105, 48, 52, 48, 67, 7, 117, 110, 105, 48, 52, 48, 68, 7, 117, 110, 105, 48, 52, 48, 69, 7, 117, 110, 105, 48, 52, 48, 70, 7, 117, 110, 105, 48, 52, 49, 48, 7, 117, 110, 105, 48, 52, 49, 49, 7, 117, 110, 105, 48, 52, 49, 50, 7, 117, 110, 105, 48, 52, 49, 51, 7, 117, 110, 105, 48, 52, 49, 52, 7, 117, 110, 105, 48, 52, 49, 53, 7, 117, 110, 105, 48, 52, 49, 54, 7, 117, 110, 105, 48, 52, 49, 55, 7, 117, 110, 105, 48, 52, 49, 56, 7, 117, 110, 105, 48, 52, 49, 57, 7, 117, 110, 105, 48, 52, 49, 65, 7, 117, 110, 105, 48, 52, 49, 66, 7, 117, 110, 105, 48, 52, 49, 67, 7, 117, 110, 105, 48, 52, 49, 68, 7, 117, 110, 105, 48, 52, 49, 69, 7, 117, 110, 105, 48, 52, 49, 70, 7, 117, 110, 105, 48, 52, 50, 48, 7, 117, 110, 105, 48, 52, 50, 49, 7, 117, 110, 105, 48, 52, 50, 50, 7, 117, 110, 105, 48, 52, 50, 51, 7, 117, 110, 105, 48, 52, 50, 52, 7, 117, 110, 105, 48, 52, 50, 53, 7, 117, 110, 105, 48, 52, 50, 54, 7, 117, 110, 105, 48, 52, 50, 55, 7, 117, 110, 105, 48, 52, 50, 56, 7, 117, 110, 105, 48, 52, 50, 57, 7, 117, 110, 105, 48, 52, 50, 65, 7, 117, 110, 105, 48, 52, 50, 66, 7, 117, 110, 105, 48, 52, 50, 67, 7, 117, 110, 105, 48, 52, 50, 68, 7, 117, 110, 105, 48, 52, 50, 69, 7, 117, 110, 105, 48, 52, 50, 70, 7, 117, 110, 105, 48, 52, 51, 48, 7, 117, 110, 105, 48, 52, 51, 49, 7, 117, 110, 105, 48, 52, 51, 50, 7, 117, 110, 105, 48, 52, 51, 51, 7, 117, 110, 105, 48, 52, 51, 52, 7, 117, 110, 105, 48, 52, 51, 53, 7, 117, 110, 105, 48, 52, 51, 54, 7, 117, 110, 105, 48, 52, 51, 55, 7, 117, 110, 105, 48, 52, 51, 56, 7, 117, 110, 105, 48, 52, 51, 57, 7, 117, 110, 105, 48, 52, 51, 65, 7, 117, 110, 105, 48, 52, 51, 66, 7, 117, 110, 105, 48, 52, 51, 67, 7, 117, 110, 105, 48, 52, 51, 68, 7, 117, 110, 105, 48, 52, 51, 69, 7, 117, 110, 105, 48, 52, 51, 70, 7, 117, 110, 105, 48, 52, 52, 48, 7, 117, 110, 105, 48, 52, 52, 49, 7, 117, 110, 105, 48, 52, 52, 50, 7, 117, 110, 105, 48, 52, 52, 51, 7, 117, 110, 105, 48, 52, 52, 52, 7, 117, 110, 105, 48, 52, 52, 53, 7, 117, 110, 105, 48, 52, 52, 54, 7, 117, 110, 105, 48, 52, 52, 55, 7, 117, 110, 105, 48, 52, 52, 56, 7, 117, 110, 105, 48, 52, 52, 57, 7, 117, 110, 105, 48, 52, 52, 65, 7, 117, 110, 105, 48, 52, 52, 66, 7, 117, 110, 105, 48, 52, 52, 67, 7, 117, 110, 105, 48, 52, 52, 68, 7, 117, 110, 105, 48, 52, 52, 69, 7, 117, 110, 105, 48, 52, 52, 70, 7, 117, 110, 105, 48, 52, 53, 48, 7, 117, 110, 105, 48, 52, 53, 49, 7, 117, 110, 105, 48, 52, 53, 50, 7, 117, 110, 105, 48, 52, 53, 51, 7, 117, 110, 105, 48, 52, 53, 52, 7, 117, 110, 105, 48, 52, 53, 53, 7, 117, 110, 105, 48, 52, 53, 54, 7, 117, 110, 105, 48, 52, 53, 55, 7, 117, 110, 105, 48, 52, 53, 56, 7, 117, 110, 105, 48, 52, 53, 57, 7, 117, 110, 105, 48, 52, 53, 65, 7, 117, 110, 105, 48, 52, 53, 66, 7, 117, 110, 105, 48, 52, 53, 67, 7, 117, 110, 105, 48, 52, 53, 68, 7, 117, 110, 105, 48, 52, 53, 69, 7, 117, 110, 105, 48, 52, 53, 70, 7, 117, 110, 105, 48, 52, 57, 48, 7, 117, 110, 105, 48, 52, 57, 49, 7, 117, 110, 105, 50, 48, 49, 53, 7, 117, 110, 105, 50, 48, 51, 69, 7, 117, 110, 105, 50, 48, 55, 70, 7, 117, 110, 105, 50, 49, 48, 53, 7, 117, 110, 105, 50, 49, 49, 51, 7, 117, 110, 105, 50, 49, 49, 54, 7, 117, 110, 105, 50, 50, 49, 53, 7, 117, 110, 105, 50, 50, 49, 57, 7, 117, 110, 105, 70, 66, 48, 49, 7, 117, 110, 105, 70, 66, 48, 50, 7, 117, 110, 105, 70, 70, 70, 68, 7, 117, 111, 103, 111, 110, 101, 107, 7, 117, 112, 98, 108, 111, 99, 107, 7, 117, 112, 115, 105, 108, 111, 110, 15, 117, 112, 115, 105, 108, 111, 110, 100, 105, 101, 114, 101, 115, 105, 115, 20, 117, 112, 115, 105, 108, 111, 110, 100, 105, 101, 114, 101, 115, 105, 115, 116, 111, 110, 111, 115, 12, 117, 112, 115, 105, 108, 111, 110, 116, 111, 110, 111, 115, 5, 117, 114, 105, 110, 103, 6, 117, 116, 105, 108, 100, 101, 6, 119, 97, 99, 117, 116, 101, 11, 119, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 9, 119, 100, 105, 101, 114, 101, 115, 105, 115, 6, 119, 103, 114, 97, 118, 101, 2, 120, 105, 11, 121, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 6, 121, 103, 114, 97, 118, 101, 6, 122, 97, 99, 117, 116, 101, 10, 122, 100, 111, 116, 97, 99, 99, 101, 110, 116, 8, 122, 101, 114, 111, 46, 100, 111, 116, 10, 122, 101, 114, 111, 46, 101, 109, 112, 116, 121, 4, 122, 101, 116, 97, 0, 0, 0, 1, 0, 1, 255, 255, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 213, 0, 213, 0, 123, 0, 123, 5, 200, 0, 0, 4, 62, 0, 0, 254, 117, 5, 237, 255, 219, 4, 86, 255, 231, 254, 92, 0, 213, 0, 213, 0, 123, 0, 123, 5, 200, 0, 0, 6, 68, 4, 62, 0, 0, 254, 117, 5, 237, 255, 219, 6, 68, 4, 86, 255, 231, 254, 117, 0, 213, 0, 213, 0, 123, 0, 123, 5, 200, 0, 0, 6, 43, 4, 62, 0, 0, 254, 117, 5, 237, 255, 219, 6, 68, 4, 86, 255, 231, 254, 92, 0, 213, 0, 213, 0, 123, 0, 123, 5, 200, 2, 216, 6, 43, 4, 62, 0, 0, 254, 117, 5, 237, 255, 219, 6, 68, 4, 86, 255, 231, 254, 92, 0, 50, 0, 50, 0, 50, 0, 50, 176, 0, 44, 32, 176, 0, 85, 88, 69, 89, 32, 32, 75, 184, 0, 14, 81, 75, 176, 6, 83, 90, 88, 176, 52, 27, 176, 40, 89, 96, 102, 32, 138, 85, 88, 176, 2, 37, 97, 185, 8, 0, 8, 0, 99, 99, 35, 98, 27, 33, 33, 176, 0, 89, 176, 0, 67, 35, 68, 178, 0, 1, 0, 67, 96, 66, 45, 176, 1, 44, 176, 32, 96, 102, 45, 176, 2, 44, 32, 100, 32, 176, 192, 80, 176, 4, 38, 90, 178, 40, 1, 11, 67, 69, 99, 69, 176, 6, 69, 88, 33, 176, 3, 37, 89, 82, 91, 88, 33, 35, 33, 27, 138, 88, 32, 176, 80, 80, 88, 33, 176, 64, 89, 27, 32, 176, 56, 80, 88, 33, 176, 56, 89, 89, 32, 177, 1, 11, 67, 69, 99, 69, 97, 100, 176, 40, 80, 88, 33, 177, 1, 11, 67, 69, 99, 69, 32, 176, 48, 80, 88, 33, 176, 48, 89, 27, 32, 176, 192, 80, 88, 32, 102, 32, 138, 138, 97, 32, 176, 10, 80, 88, 96, 27, 32, 176, 32, 80, 88, 33, 176, 10, 96, 27, 32, 176, 54, 80, 88, 33, 176, 54, 96, 27, 96, 89, 89, 89, 27, 176, 2, 37, 176, 10, 67, 99, 176, 0, 82, 88, 176, 0, 75, 176, 10, 80, 88, 33, 176, 10, 67, 27, 75, 176, 30, 80, 88, 33, 176, 30, 75, 97, 184, 16, 0, 99, 176, 10, 67, 99, 184, 5, 0, 98, 89, 89, 100, 97, 89, 176, 1, 43, 89, 89, 35, 176, 0, 80, 88, 101, 89, 89, 45, 176, 3, 44, 32, 69, 32, 176, 4, 37, 97, 100, 32, 176, 5, 67, 80, 88, 176, 5, 35, 66, 176, 6, 35, 66, 27, 33, 33, 89, 176, 1, 96, 45, 176, 4, 44, 35, 33, 35, 33, 32, 100, 177, 5, 98, 66, 32, 176, 6, 35, 66, 176, 6, 69, 88, 27, 177, 1, 11, 67, 69, 99, 177, 1, 11, 67, 176, 5, 96, 69, 99, 176, 3, 42, 33, 32, 176, 6, 67, 32, 138, 32, 138, 176, 1, 43, 177, 48, 5, 37, 176, 4, 38, 81, 88, 96, 80, 27, 97, 82, 89, 88, 35, 89, 33, 89, 32, 176, 64, 83, 88, 176, 1, 43, 27, 33, 176, 64, 89, 35, 176, 0, 80, 88, 101, 89, 45, 176, 5, 44, 176, 7, 67, 43, 178, 0, 2, 0, 67, 96, 66, 45, 176, 6, 44, 176, 7, 35, 66, 35, 32, 176, 0, 35, 66, 97, 176, 2, 98, 102, 176, 1, 99, 176, 1, 96, 176, 5, 42, 45, 176, 7, 44, 32, 32, 69, 32, 176, 12, 67, 99, 184, 4, 0, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 96, 68, 176, 1, 96, 45, 176, 8, 44, 178, 7, 12, 0, 67, 69, 66, 42, 33, 178, 0, 1, 0, 67, 96, 66, 45, 176, 9, 44, 176, 0, 67, 35, 68, 178, 0, 1, 0, 67, 96, 66, 45, 176, 10, 44, 32, 32, 69, 32, 176, 1, 43, 35, 176, 0, 67, 176, 4, 37, 96, 32, 69, 138, 35, 97, 32, 100, 32, 176, 32, 80, 88, 33, 176, 0, 27, 176, 48, 80, 88, 176, 32, 27, 176, 64, 89, 89, 35, 176, 0, 80, 88, 101, 89, 176, 3, 37, 35, 97, 68, 68, 176, 1, 96, 45, 176, 11, 44, 32, 32, 69, 32, 176, 1, 43, 35, 176, 0, 67, 176, 4, 37, 96, 32, 69, 138, 35, 97, 32, 100, 176, 36, 80, 88, 176, 0, 27, 176, 64, 89, 35, 176, 0, 80, 88, 101, 89, 176, 3, 37, 35, 97, 68, 68, 176, 1, 96, 45, 176, 12, 44, 32, 176, 0, 35, 66, 178, 11, 10, 3, 69, 88, 33, 27, 35, 33, 89, 42, 33, 45, 176, 13, 44, 177, 2, 2, 69, 176, 100, 97, 68, 45, 176, 14, 44, 176, 1, 96, 32, 32, 176, 13, 67, 74, 176, 0, 80, 88, 32, 176, 13, 35, 66, 89, 176, 14, 67, 74, 176, 0, 82, 88, 32, 176, 14, 35, 66, 89, 45, 176, 15, 44, 32, 176, 16, 98, 102, 176, 1, 99, 32, 184, 4, 0, 99, 138, 35, 97, 176, 15, 67, 96, 32, 138, 96, 32, 176, 15, 35, 66, 35, 45, 176, 16, 44, 75, 84, 88, 177, 4, 100, 68, 89, 36, 176, 13, 101, 35, 120, 45, 176, 17, 44, 75, 81, 88, 75, 83, 88, 177, 4, 100, 68, 89, 27, 33, 89, 36, 176, 19, 101, 35, 120, 45, 176, 18, 44, 177, 0, 16, 67, 85, 88, 177, 16, 16, 67, 176, 1, 97, 66, 176, 15, 43, 89, 176, 0, 67, 176, 2, 37, 66, 177, 13, 2, 37, 66, 177, 14, 2, 37, 66, 176, 1, 22, 35, 32, 176, 3, 37, 80, 88, 177, 1, 0, 67, 96, 176, 4, 37, 66, 138, 138, 32, 138, 35, 97, 176, 14, 42, 33, 35, 176, 1, 97, 32, 138, 35, 97, 176, 14, 42, 33, 27, 177, 1, 0, 67, 96, 176, 2, 37, 66, 176, 2, 37, 97, 176, 14, 42, 33, 89, 176, 13, 67, 71, 176, 14, 67, 71, 96, 176, 2, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 32, 176, 12, 67, 99, 184, 4, 0, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 96, 177, 0, 0, 19, 35, 68, 176, 1, 67, 176, 0, 62, 178, 1, 1, 1, 67, 96, 66, 45, 176, 19, 44, 0, 177, 0, 2, 69, 84, 88, 176, 16, 35, 66, 32, 69, 176, 12, 35, 66, 176, 11, 35, 176, 5, 96, 66, 32, 96, 176, 1, 97, 181, 18, 18, 1, 0, 15, 0, 66, 66, 138, 96, 177, 18, 6, 43, 176, 137, 43, 27, 34, 89, 45, 176, 20, 44, 177, 0, 19, 43, 45, 176, 21, 44, 177, 1, 19, 43, 45, 176, 22, 44, 177, 2, 19, 43, 45, 176, 23, 44, 177, 3, 19, 43, 45, 176, 24, 44, 177, 4, 19, 43, 45, 176, 25, 44, 177, 5, 19, 43, 45, 176, 26, 44, 177, 6, 19, 43, 45, 176, 27, 44, 177, 7, 19, 43, 45, 176, 28, 44, 177, 8, 19, 43, 45, 176, 29, 44, 177, 9, 19, 43, 45, 176, 41, 44, 35, 32, 176, 16, 98, 102, 176, 1, 99, 176, 6, 96, 75, 84, 88, 35, 32, 46, 176, 1, 93, 27, 33, 33, 89, 45, 176, 42, 44, 35, 32, 176, 16, 98, 102, 176, 1, 99, 176, 22, 96, 75, 84, 88, 35, 32, 46, 176, 1, 113, 27, 33, 33, 89, 45, 176, 43, 44, 35, 32, 176, 16, 98, 102, 176, 1, 99, 176, 38, 96, 75, 84, 88, 35, 32, 46, 176, 1, 114, 27, 33, 33, 89, 45, 176, 30, 44, 0, 176, 13, 43, 177, 0, 2, 69, 84, 88, 176, 16, 35, 66, 32, 69, 176, 12, 35, 66, 176, 11, 35, 176, 5, 96, 66, 32, 96, 176, 1, 97, 181, 18, 18, 1, 0, 15, 0, 66, 66, 138, 96, 177, 18, 6, 43, 176, 137, 43, 27, 34, 89, 45, 176, 31, 44, 177, 0, 30, 43, 45, 176, 32, 44, 177, 1, 30, 43, 45, 176, 33, 44, 177, 2, 30, 43, 45, 176, 34, 44, 177, 3, 30, 43, 45, 176, 35, 44, 177, 4, 30, 43, 45, 176, 36, 44, 177, 5, 30, 43, 45, 176, 37, 44, 177, 6, 30, 43, 45, 176, 38, 44, 177, 7, 30, 43, 45, 176, 39, 44, 177, 8, 30, 43, 45, 176, 40, 44, 177, 9, 30, 43, 45, 176, 44, 44, 32, 60, 176, 1, 96, 45, 176, 45, 44, 32, 96, 176, 18, 96, 32, 67, 35, 176, 1, 96, 67, 176, 2, 37, 97, 176, 1, 96, 176, 44, 42, 33, 45, 176, 46, 44, 176, 45, 43, 176, 45, 42, 45, 176, 47, 44, 32, 32, 71, 32, 32, 176, 12, 67, 99, 184, 4, 0, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 96, 35, 97, 56, 35, 32, 138, 85, 88, 32, 71, 32, 32, 176, 12, 67, 99, 184, 4, 0, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 96, 35, 97, 56, 27, 33, 89, 45, 176, 48, 44, 0, 177, 0, 2, 69, 84, 88, 177, 12, 11, 69, 66, 176, 1, 22, 176, 47, 42, 177, 5, 1, 21, 69, 88, 48, 89, 27, 34, 89, 45, 176, 49, 44, 0, 176, 13, 43, 177, 0, 2, 69, 84, 88, 177, 12, 11, 69, 66, 176, 1, 22, 176, 47, 42, 177, 5, 1, 21, 69, 88, 48, 89, 27, 34, 89, 45, 176, 50, 44, 32, 53, 176, 1, 96, 45, 176, 51, 44, 0, 177, 12, 11, 69, 66, 176, 1, 69, 99, 184, 4, 0, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 176, 1, 43, 176, 12, 67, 99, 184, 4, 0, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 176, 1, 43, 176, 0, 22, 180, 0, 0, 0, 0, 0, 68, 62, 35, 56, 177, 50, 1, 21, 42, 33, 45, 176, 52, 44, 32, 60, 32, 71, 32, 176, 12, 67, 99, 184, 4, 0, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 96, 176, 0, 67, 97, 56, 45, 176, 53, 44, 46, 23, 60, 45, 176, 54, 44, 32, 60, 32, 71, 32, 176, 12, 67, 99, 184, 4, 0, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 96, 176, 0, 67, 97, 176, 1, 67, 99, 56, 45, 176, 55, 44, 177, 2, 0, 22, 37, 32, 46, 32, 71, 176, 0, 35, 66, 176, 2, 37, 73, 138, 138, 71, 35, 71, 35, 97, 32, 88, 98, 27, 33, 89, 176, 1, 35, 66, 178, 54, 1, 1, 21, 20, 42, 45, 176, 56, 44, 176, 0, 22, 176, 17, 35, 66, 176, 4, 37, 176, 4, 37, 71, 35, 71, 35, 97, 177, 10, 0, 66, 176, 9, 67, 43, 101, 138, 46, 35, 32, 32, 60, 138, 56, 45, 176, 57, 44, 176, 0, 22, 176, 17, 35, 66, 176, 4, 37, 176, 4, 37, 32, 46, 71, 35, 71, 35, 97, 32, 176, 4, 35, 66, 177, 10, 0, 66, 176, 9, 67, 43, 32, 176, 96, 80, 88, 32, 176, 64, 81, 88, 179, 2, 32, 3, 32, 27, 179, 2, 38, 3, 26, 89, 66, 66, 35, 32, 176, 8, 67, 32, 138, 35, 71, 35, 71, 35, 97, 35, 70, 96, 176, 4, 67, 176, 2, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 96, 32, 176, 1, 43, 32, 138, 138, 97, 32, 176, 2, 67, 96, 100, 35, 176, 3, 67, 97, 100, 80, 88, 176, 2, 67, 97, 27, 176, 3, 67, 96, 89, 176, 3, 37, 176, 2, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 97, 35, 32, 32, 176, 4, 38, 35, 70, 97, 56, 27, 35, 176, 8, 67, 70, 176, 2, 37, 176, 8, 67, 71, 35, 71, 35, 97, 96, 32, 176, 4, 67, 176, 2, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 96, 35, 32, 176, 1, 43, 35, 176, 4, 67, 96, 176, 1, 43, 176, 5, 37, 97, 176, 5, 37, 176, 2, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 176, 4, 38, 97, 32, 176, 4, 37, 96, 100, 35, 176, 3, 37, 96, 100, 80, 88, 33, 27, 35, 33, 89, 35, 32, 32, 176, 4, 38, 35, 70, 97, 56, 89, 45, 176, 58, 44, 176, 0, 22, 176, 17, 35, 66, 32, 32, 32, 176, 5, 38, 32, 46, 71, 35, 71, 35, 97, 35, 60, 56, 45, 176, 59, 44, 176, 0, 22, 176, 17, 35, 66, 32, 176, 8, 35, 66, 32, 32, 32, 70, 35, 71, 176, 1, 43, 35, 97, 56, 45, 176, 60, 44, 176, 0, 22, 176, 17, 35, 66, 176, 3, 37, 176, 2, 37, 71, 35, 71, 35, 97, 176, 0, 84, 88, 46, 32, 60, 35, 33, 27, 176, 2, 37, 176, 2, 37, 71, 35, 71, 35, 97, 32, 176, 5, 37, 176, 4, 37, 71, 35, 71, 35, 97, 176, 6, 37, 176, 5, 37, 73, 176, 2, 37, 97, 185, 8, 0, 8, 0, 99, 99, 35, 32, 88, 98, 27, 33, 89, 99, 184, 4, 0, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 96, 35, 46, 35, 32, 32, 60, 138, 56, 35, 33, 89, 45, 176, 61, 44, 176, 0, 22, 176, 17, 35, 66, 32, 176, 8, 67, 32, 46, 71, 35, 71, 35, 97, 32, 96, 176, 32, 96, 102, 176, 2, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 35, 32, 32, 60, 138, 56, 45, 176, 62, 44, 35, 32, 46, 70, 176, 2, 37, 70, 176, 17, 67, 88, 80, 27, 82, 89, 88, 32, 60, 89, 46, 177, 46, 1, 20, 43, 45, 176, 63, 44, 35, 32, 46, 70, 176, 2, 37, 70, 176, 17, 67, 88, 82, 27, 80, 89, 88, 32, 60, 89, 46, 177, 46, 1, 20, 43, 45, 176, 64, 44, 35, 32, 46, 70, 176, 2, 37, 70, 176, 17, 67, 88, 80, 27, 82, 89, 88, 32, 60, 89, 35, 32, 46, 70, 176, 2, 37, 70, 176, 17, 67, 88, 82, 27, 80, 89, 88, 32, 60, 89, 46, 177, 46, 1, 20, 43, 45, 176, 65, 44, 176, 56, 43, 35, 32, 46, 70, 176, 2, 37, 70, 176, 17, 67, 88, 80, 27, 82, 89, 88, 32, 60, 89, 46, 177, 46, 1, 20, 43, 45, 176, 66, 44, 176, 57, 43, 138, 32, 32, 60, 176, 4, 35, 66, 138, 56, 35, 32, 46, 70, 176, 2, 37, 70, 176, 17, 67, 88, 80, 27, 82, 89, 88, 32, 60, 89, 46, 177, 46, 1, 20, 43, 176, 4, 67, 46, 176, 46, 43, 45, 176, 67, 44, 176, 0, 22, 176, 4, 37, 176, 4, 38, 32, 32, 32, 70, 35, 71, 97, 176, 10, 35, 66, 46, 71, 35, 71, 35, 97, 176, 9, 67, 43, 35, 32, 60, 32, 46, 35, 56, 177, 46, 1, 20, 43, 45, 176, 68, 44, 177, 8, 4, 37, 66, 176, 0, 22, 176, 4, 37, 176, 4, 37, 32, 46, 71, 35, 71, 35, 97, 32, 176, 4, 35, 66, 177, 10, 0, 66, 176, 9, 67, 43, 32, 176, 96, 80, 88, 32, 176, 64, 81, 88, 179, 2, 32, 3, 32, 27, 179, 2, 38, 3, 26, 89, 66, 66, 35, 32, 71, 176, 4, 67, 176, 2, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 96, 32, 176, 1, 43, 32, 138, 138, 97, 32, 176, 2, 67, 96, 100, 35, 176, 3, 67, 97, 100, 80, 88, 176, 2, 67, 97, 27, 176, 3, 67, 96, 89, 176, 3, 37, 176, 2, 98, 32, 176, 0, 80, 88, 176, 64, 96, 89, 102, 176, 1, 99, 97, 176, 2, 37, 70, 97, 56, 35, 32, 60, 35, 56, 27, 33, 32, 32, 70, 35, 71, 176, 1, 43, 35, 97, 56, 33, 89, 177, 46, 1, 20, 43, 45, 176, 69, 44, 177, 0, 56, 43, 46, 177, 46, 1, 20, 43, 45, 176, 70, 44, 177, 0, 57, 43, 33, 35, 32, 32, 60, 176, 4, 35, 66, 35, 56, 177, 46, 1, 20, 43, 176, 4, 67, 46, 176, 46, 43, 45, 176, 71, 44, 176, 0, 21, 32, 71, 176, 0, 35, 66, 178, 0, 1, 1, 21, 20, 19, 46, 176, 52, 42, 45, 176, 72, 44, 176, 0, 21, 32, 71, 176, 0, 35, 66, 178, 0, 1, 1, 21, 20, 19, 46, 176, 52, 42, 45, 176, 73, 44, 177, 0, 1, 20, 19, 176, 53, 42, 45, 176, 74, 44, 176, 55, 42, 45, 176, 75, 44, 176, 0, 22, 69, 35, 32, 46, 32, 70, 138, 35, 97, 56, 177, 46, 1, 20, 43, 45, 176, 76, 44, 176, 8, 35, 66, 176, 75, 43, 45, 176, 77, 44, 178, 0, 0, 68, 43, 45, 176, 78, 44, 178, 0, 1, 68, 43, 45, 176, 79, 44, 178, 1, 0, 68, 43, 45, 176, 80, 44, 178, 1, 1, 68, 43, 45, 176, 81, 44, 178, 0, 0, 69, 43, 45, 176, 82, 44, 178, 0, 1, 69, 43, 45, 176, 83, 44, 178, 1, 0, 69, 43, 45, 176, 84, 44, 178, 1, 1, 69, 43, 45, 176, 85, 44, 179, 0, 0, 0, 65, 43, 45, 176, 86, 44, 179, 0, 1, 0, 65, 43, 45, 176, 87, 44, 179, 1, 0, 0, 65, 43, 45, 176, 88, 44, 179, 1, 1, 0, 65, 43, 45, 176, 89, 44, 179, 0, 0, 1, 65, 43, 45, 176, 90, 44, 179, 0, 1, 1, 65, 43, 45, 176, 91, 44, 179, 1, 0, 1, 65, 43, 45, 176, 92, 44, 179, 1, 1, 1, 65, 43, 45, 176, 93, 44, 178, 0, 0, 67, 43, 45, 176, 94, 44, 178, 0, 1, 67, 43, 45, 176, 95, 44, 178, 1, 0, 67, 43, 45, 176, 96, 44, 178, 1, 1, 67, 43, 45, 176, 97, 44, 178, 0, 0, 70, 43, 45, 176, 98, 44, 178, 0, 1, 70, 43, 45, 176, 99, 44, 178, 1, 0, 70, 43, 45, 176, 100, 44, 178, 1, 1, 70, 43, 45, 176, 101, 44, 179, 0, 0, 0, 66, 43, 45, 176, 102, 44, 179, 0, 1, 0, 66, 43, 45, 176, 103, 44, 179, 1, 0, 0, 66, 43, 45, 176, 104, 44, 179, 1, 1, 0, 66, 43, 45, 176, 105, 44, 179, 0, 0, 1, 66, 43, 45, 176, 106, 44, 179, 0, 1, 1, 66, 43, 45, 176, 107, 44, 179, 1, 0, 1, 66, 43, 45, 176, 108, 44, 179, 1, 1, 1, 66, 43, 45, 176, 109, 44, 177, 0, 58, 43, 46, 177, 46, 1, 20, 43, 45, 176, 110, 44, 177, 0, 58, 43, 176, 62, 43, 45, 176, 111, 44, 177, 0, 58, 43, 176, 63, 43, 45, 176, 112, 44, 176, 0, 22, 177, 0, 58, 43, 176, 64, 43, 45, 176, 113, 44, 177, 1, 58, 43, 176, 62, 43, 45, 176, 114, 44, 177, 1, 58, 43, 176, 63, 43, 45, 176, 115, 44, 176, 0, 22, 177, 1, 58, 43, 176, 64, 43, 45, 176, 116, 44, 177, 0, 59, 43, 46, 177, 46, 1, 20, 43, 45, 176, 117, 44, 177, 0, 59, 43, 176, 62, 43, 45, 176, 118, 44, 177, 0, 59, 43, 176, 63, 43, 45, 176, 119, 44, 177, 0, 59, 43, 176, 64, 43, 45, 176, 120, 44, 177, 1, 59, 43, 176, 62, 43, 45, 176, 121, 44, 177, 1, 59, 43, 176, 63, 43, 45, 176, 122, 44, 177, 1, 59, 43, 176, 64, 43, 45, 176, 123, 44, 177, 0, 60, 43, 46, 177, 46, 1, 20, 43, 45, 176, 124, 44, 177, 0, 60, 43, 176, 62, 43, 45, 176, 125, 44, 177, 0, 60, 43, 176, 63, 43, 45, 176, 126, 44, 177, 0, 60, 43, 176, 64, 43, 45, 176, 127, 44, 177, 1, 60, 43, 176, 62, 43, 45, 176, 128, 44, 177, 1, 60, 43, 176, 63, 43, 45, 176, 129, 44, 177, 1, 60, 43, 176, 64, 43, 45, 176, 130, 44, 177, 0, 61, 43, 46, 177, 46, 1, 20, 43, 45, 176, 131, 44, 177, 0, 61, 43, 176, 62, 43, 45, 176, 132, 44, 177, 0, 61, 43, 176, 63, 43, 45, 176, 133, 44, 177, 0, 61, 43, 176, 64, 43, 45, 176, 134, 44, 177, 1, 61, 43, 176, 62, 43, 45, 176, 135, 44, 177, 1, 61, 43, 176, 63, 43, 45, 176, 136, 44, 177, 1, 61, 43, 176, 64, 43, 45, 176, 137, 44, 179, 9, 4, 2, 3, 69, 88, 33, 27, 35, 33, 89, 66, 43, 176, 8, 101, 176, 3, 36, 80, 120, 177, 5, 1, 21, 69, 88, 48, 89, 45, 0, 0, 0, 0, 75, 184, 0, 200, 82, 88, 177, 1, 1, 142, 89, 176, 1, 185, 8, 0, 8, 0, 99, 112, 177, 0, 7, 66, 182, 0, 81, 65, 49, 33, 5, 0, 42, 177, 0, 7, 66, 64, 12, 86, 2, 70, 8, 54, 8, 38, 8, 24, 7, 5, 8, 42, 177, 0, 7, 66, 64, 12, 88, 0, 78, 6, 62, 6, 46, 6, 31, 5, 5, 8, 42, 177, 0, 12, 66, 190, 21, 192, 17, 192, 13, 192, 9, 192, 6, 64, 0, 5, 0, 9, 42, 177, 0, 17, 66, 190, 0, 64, 0, 64, 0, 64, 0, 64, 0, 64, 0, 5, 0, 9, 42, 177, 3, 0, 68, 177, 36, 1, 136, 81, 88, 176, 64, 136, 88, 177, 3, 100, 68, 177, 38, 1, 136, 81, 88, 186, 8, 128, 0, 1, 4, 64, 136, 99, 84, 88, 177, 3, 0, 68, 89, 89, 89, 89, 64, 12, 88, 0, 72, 6, 56, 6, 40, 6, 26, 5, 5, 12, 42, 184, 1, 255, 133, 176, 4, 141, 177, 2, 0, 68, 179, 5, 100, 6, 0, 68, 68]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/png"] = (function() {
	var $pkg = {}, $init, bufio, zlib, binary, fmt, hash, crc32, image, color, io, strconv, interlaceScan, decoder, FormatError, UnsupportedError, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, arrayType, arrayType$1, arrayType$2, ptrType$14, interlacing, chunkOrderError, abs, filterPaeth, cbPaletted, min, Decode, DecodeConfig, init;
	bufio = $packages["bufio"];
	zlib = $packages["compress/zlib"];
	binary = $packages["encoding/binary"];
	fmt = $packages["fmt"];
	hash = $packages["hash"];
	crc32 = $packages["hash/crc32"];
	image = $packages["image"];
	color = $packages["image/color"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	interlaceScan = $pkg.interlaceScan = $newType(0, $kindStruct, "png.interlaceScan", true, "image/png", false, function(xFactor_, yFactor_, xOffset_, yOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.xFactor = 0;
			this.yFactor = 0;
			this.xOffset = 0;
			this.yOffset = 0;
			return;
		}
		this.xFactor = xFactor_;
		this.yFactor = yFactor_;
		this.xOffset = xOffset_;
		this.yOffset = yOffset_;
	});
	decoder = $pkg.decoder = $newType(0, $kindStruct, "png.decoder", true, "image/png", false, function(r_, img_, crc_, width_, height_, depth_, palette_, cb_, stage_, idatLength_, tmp_, interlace_, useTransparent_, transparent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.img = $ifaceNil;
			this.crc = $ifaceNil;
			this.width = 0;
			this.height = 0;
			this.depth = 0;
			this.palette = color.Palette.nil;
			this.cb = 0;
			this.stage = 0;
			this.idatLength = 0;
			this.tmp = arrayType$1.zero();
			this.interlace = 0;
			this.useTransparent = false;
			this.transparent = arrayType$2.zero();
			return;
		}
		this.r = r_;
		this.img = img_;
		this.crc = crc_;
		this.width = width_;
		this.height = height_;
		this.depth = depth_;
		this.palette = palette_;
		this.cb = cb_;
		this.stage = stage_;
		this.idatLength = idatLength_;
		this.tmp = tmp_;
		this.interlace = interlace_;
		this.useTransparent = useTransparent_;
		this.transparent = transparent_;
	});
	FormatError = $pkg.FormatError = $newType(8, $kindString, "png.FormatError", true, "image/png", true, null);
	UnsupportedError = $pkg.UnsupportedError = $newType(8, $kindString, "png.UnsupportedError", true, "image/png", true, null);
	sliceType = $sliceType(interlaceScan);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType = $ptrType(image.Gray);
	ptrType$1 = $ptrType(image.RGBA);
	ptrType$2 = $ptrType(image.Paletted);
	ptrType$3 = $ptrType(image.NRGBA);
	ptrType$4 = $ptrType(image.Gray16);
	ptrType$5 = $ptrType(image.RGBA64);
	ptrType$6 = $ptrType(image.NRGBA64);
	ptrType$7 = $ptrType(image.Alpha);
	ptrType$8 = $ptrType(image.Alpha16);
	arrayType = $arrayType($Uint8, 4096);
	arrayType$1 = $arrayType($Uint8, 768);
	arrayType$2 = $arrayType($Uint8, 6);
	ptrType$14 = $ptrType(decoder);
	abs = function(x) {
		var m, x;
		m = x >> 31 >> 0;
		return (((x ^ m) >> 0)) - m >> 0;
	};
	filterPaeth = function(cdat, pdat, bytesPerPixel) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, a, b, bytesPerPixel, c, cdat, i, j, pa, pb, pc, pdat;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 0;
		_tmp$4 = 0;
		_tmp$5 = 0;
		a = _tmp;
		b = _tmp$1;
		c = _tmp$2;
		pa = _tmp$3;
		pb = _tmp$4;
		pc = _tmp$5;
		i = 0;
		while (true) {
			if (!(i < bytesPerPixel)) { break; }
			_tmp$6 = 0;
			_tmp$7 = 0;
			a = _tmp$6;
			c = _tmp$7;
			j = i;
			while (true) {
				if (!(j < cdat.$length)) { break; }
				b = ((((j < 0 || j >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + j]) >> 0));
				pa = b - c >> 0;
				pb = a - c >> 0;
				pc = abs(pa + pb >> 0);
				pa = abs(pa);
				pb = abs(pb);
				if (pa <= pb && pa <= pc) {
				} else if (pb <= pc) {
					a = b;
				} else {
					a = c;
				}
				a = a + (((((j < 0 || j >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + j]) >> 0))) >> 0;
				a = a & (255);
				((j < 0 || j >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + j] = ((a << 24 >>> 24)));
				c = b;
				j = j + (bytesPerPixel) >> 0;
			}
			i = i + (1) >> 0;
		}
	};
	cbPaletted = function(cb) {
		var cb;
		return 7 <= cb && cb <= 10;
	};
	FormatError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "png: invalid format: " + (e);
	};
	$ptrType(FormatError).prototype.Error = function() { return new FormatError(this.$get()).Error(); };
	UnsupportedError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "png: unsupported feature: " + (e);
	};
	$ptrType(UnsupportedError).prototype.Error = function() { return new UnsupportedError(this.$get()).Error(); };
	min = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	decoder.ptr.prototype.parseIHDR = function(length) {
		var _1, _2, _3, _4, _5, _6, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, d, err, h, length, nPixels, w, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; d = $f.d; err = $f.err; h = $f.h; length = $f.length; nPixels = $f.nPixels; w = $f.w; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((length === 13))) {
			$s = -1; return new FormatError("bad IHDR length");
		}
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 13)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, 13)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		if (!((d.tmp[10] === 0))) {
			$s = -1; return new UnsupportedError("compression method");
		}
		if (!((d.tmp[11] === 0))) {
			$s = -1; return new UnsupportedError("filter method");
		}
		if (!((d.tmp[12] === 0)) && !((d.tmp[12] === 1))) {
			$s = -1; return new FormatError("invalid interlace method");
		}
		d.interlace = ((d.tmp[12] >> 0));
		w = (($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4)) >> 0));
		h = (($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 4, 8)) >> 0));
		if (w <= 0 || h <= 0) {
			$s = -1; return new FormatError("non-positive dimension");
		}
		nPixels = $mul64((new $Int64(0, w)), (new $Int64(0, h)));
		if (!((x = (new $Int64(0, (((nPixels.$low + ((nPixels.$high >> 31) * 4294967296)) >> 0)))), (nPixels.$high === x.$high && nPixels.$low === x.$low)))) {
			$s = -1; return new UnsupportedError("dimension overflow");
		}
		if (!((x$1 = $div64(($mul64(nPixels, new $Int64(0, 8))), new $Int64(0, 8), false), (nPixels.$high === x$1.$high && nPixels.$low === x$1.$low)))) {
			$s = -1; return new UnsupportedError("dimension overflow");
		}
		d.cb = 0;
		d.depth = ((d.tmp[8] >> 0));
		_1 = d.depth;
		if (_1 === (1)) {
			_2 = d.tmp[9];
			if (_2 === (0)) {
				d.cb = 1;
			} else if (_2 === (3)) {
				d.cb = 7;
			}
		} else if (_1 === (2)) {
			_3 = d.tmp[9];
			if (_3 === (0)) {
				d.cb = 2;
			} else if (_3 === (3)) {
				d.cb = 8;
			}
		} else if (_1 === (4)) {
			_4 = d.tmp[9];
			if (_4 === (0)) {
				d.cb = 3;
			} else if (_4 === (3)) {
				d.cb = 9;
			}
		} else if (_1 === (8)) {
			_5 = d.tmp[9];
			if (_5 === (0)) {
				d.cb = 4;
			} else if (_5 === (2)) {
				d.cb = 6;
			} else if (_5 === (3)) {
				d.cb = 10;
			} else if (_5 === (4)) {
				d.cb = 5;
			} else if (_5 === (6)) {
				d.cb = 11;
			}
		} else if (_1 === (16)) {
			_6 = d.tmp[9];
			if (_6 === (0)) {
				d.cb = 12;
			} else if (_6 === (2)) {
				d.cb = 14;
			} else if (_6 === (4)) {
				d.cb = 13;
			} else if (_6 === (6)) {
				d.cb = 15;
			}
		}
		/* */ if (d.cb === 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (d.cb === 0) { */ case 3:
			_r$2 = fmt.Sprintf("bit depth %d, color type %d", new sliceType$2([new $Uint8(d.tmp[8]), new $Uint8(d.tmp[9])])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return new UnsupportedError((_r$2));
		/* } */ case 4:
		_tmp = ((w >> 0));
		_tmp$1 = ((h >> 0));
		d.width = _tmp;
		d.height = _tmp$1;
		_r$3 = d.verifyChecksum(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseIHDR }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.h = h; $f.length = length; $f.nPixels = nPixels; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseIHDR = function(length) { return this.$val.parseIHDR(length); };
	decoder.ptr.prototype.parsePLTE = function(length) {
		var _1, _q, _r, _r$1, _r$2, _r$3, _tuple, d, err, i, i$1, length, n, np, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; d = $f.d; err = $f.err; i = $f.i; i$1 = $f.i$1; length = $f.length; n = $f.n; np = $f.np; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		np = (((_q = length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		if (!(((_r = length % 3, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0)) || np <= 0 || np > 256 || np > ((y = ((d.depth >>> 0)), y < 32 ? (1 << y) : 0) >> 0)) {
			$s = -1; return new FormatError("bad PLTE length");
		}
		_r$1 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, ($imul(3, np)))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$2 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_1 = d.cb;
		if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			d.palette = $makeSlice(color.Palette, 256);
			i = 0;
			while (true) {
				if (!(i < np)) { break; }
				(x$7 = d.palette, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i] = (x = new color.RGBA.ptr((x$1 = d.tmp, x$2 = ($imul(3, i)) + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), (x$3 = d.tmp, x$4 = ($imul(3, i)) + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4])), (x$5 = d.tmp, x$6 = ($imul(3, i)) + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[x$6])), 255), new x.constructor.elem(x))));
				i = i + (1) >> 0;
			}
			i$1 = np;
			while (true) {
				if (!(i$1 < 256)) { break; }
				(x$9 = d.palette, ((i$1 < 0 || i$1 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i$1] = (x$8 = new color.RGBA.ptr(0, 0, 0, 255), new x$8.constructor.elem(x$8))));
				i$1 = i$1 + (1) >> 0;
			}
			d.palette = $subslice(d.palette, 0, np);
		} else if ((_1 === (6)) || (_1 === (11)) || (_1 === (14)) || (_1 === (15))) {
		} else {
			$s = -1; return new FormatError("PLTE, color type mismatch");
		}
		_r$3 = d.verifyChecksum(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parsePLTE }; } $f._1 = _1; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.length = length; $f.n = n; $f.np = np; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parsePLTE = function(length) { return this.$val.parsePLTE(length); };
	decoder.ptr.prototype.parsetRNS = function(length) {
		var _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, d, err, err$1, err$2, i, length, n, n$1, n$2, rgba, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; i = $f.i; length = $f.length; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; rgba = $f.rgba; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
			_1 = d.cb;
			/* */ if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (12))) { $s = 2; continue; }
			/* */ if ((_1 === (6)) || (_1 === (14))) { $s = 3; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (12))) { */ case 2:
				if (!((length === 2))) {
					$s = -1; return new FormatError("bad tRNS length");
				}
				_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, length)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				_r$1 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$copySlice(new sliceType$1(d.transparent), $subslice(new sliceType$1(d.tmp), 0, length));
				_2 = d.cb;
				if (_2 === (1)) {
					d.transparent[1] = (d.transparent[1] * (255) << 24 >>> 24);
				} else if (_2 === (2)) {
					d.transparent[1] = (d.transparent[1] * (85) << 24 >>> 24);
				} else if (_2 === (3)) {
					d.transparent[1] = (d.transparent[1] * (17) << 24 >>> 24);
				}
				d.useTransparent = true;
				$s = 6; continue;
			/* } else if ((_1 === (6)) || (_1 === (14))) { */ case 3:
				if (!((length === 6))) {
					$s = -1; return new FormatError("bad tRNS length");
				}
				_r$2 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, length)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				n$1 = _tuple$1[0];
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				_r$3 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n$1)); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$copySlice(new sliceType$1(d.transparent), $subslice(new sliceType$1(d.tmp), 0, length));
				d.useTransparent = true;
				$s = 6; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) { */ case 4:
				if (length > 256) {
					$s = -1; return new FormatError("bad tRNS length");
				}
				_r$4 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, length)); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$2 = _r$4;
				n$2 = _tuple$2[0];
				err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return err$2;
				}
				_r$5 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n$2)); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				if (d.palette.$length < n$2) {
					d.palette = $subslice(d.palette, 0, n$2);
				}
				i = 0;
				while (true) {
					if (!(i < n$2)) { break; }
					rgba = $clone($assertType((x = d.palette, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), color.RGBA), color.RGBA);
					(x$3 = d.palette, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$1 = new color.NRGBA.ptr(rgba.R, rgba.G, rgba.B, (x$2 = d.tmp, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i]))), new x$1.constructor.elem(x$1))));
					i = i + (1) >> 0;
				}
				$s = 6; continue;
			/* } else { */ case 5:
				$s = -1; return new FormatError("tRNS, color type mismatch");
			/* } */ case 6:
		case 1:
		_r$6 = d.verifyChecksum(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parsetRNS }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.i = i; $f.length = length; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.rgba = rgba; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parsetRNS = function(length) { return this.$val.parsetRNS(length); };
	decoder.ptr.prototype.Read = function(p) {
		var _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, d, err, err$1, err$2, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (p.$length === 0) {
			$s = -1; return [0, $ifaceNil];
		}
		/* while (true) { */ case 1:
			/* if (!(d.idatLength === 0)) { break; } */ if(!(d.idatLength === 0)) { $s = 2; continue; }
			_r = d.verifyChecksum(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
			_r$1 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 8)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [0, err$1];
			}
			d.idatLength = $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4));
			if (!(($bytesToString($subslice(new sliceType$1(d.tmp), 4, 8))) === "IDAT")) {
				$s = -1; return [0, new FormatError("not enough pixel data")];
			}
			$r = d.crc.Reset(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = d.crc.Write($subslice(new sliceType$1(d.tmp), 4, 8)); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ $s = 1; continue; case 2:
		if (((d.idatLength >> 0)) < 0) {
			$s = -1; return [0, new UnsupportedError("IDAT chunk length overflow")];
		}
		_r$3 = d.r.Read($subslice(p, 0, min(p.$length, ((d.idatLength >> 0))))); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		n = _tuple$1[0];
		err$2 = _tuple$1[1];
		_r$4 = d.crc.Write($subslice(p, 0, n)); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		d.idatLength = d.idatLength - (((n >>> 0))) >>> 0;
		$s = -1; return [n, err$2];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.Read = function(p) { return this.$val.Read(p); };
	decoder.ptr.prototype.decode = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, d, err, err$1, i, imagePass, img, n, pass, r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; d = $f.d; err = $f.err; err$1 = $f.err$1; i = $f.i; imagePass = $f.imagePass; img = $f.img; n = $f.n; pass = $f.pass; r = $f.r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		_r = zlib.NewReader(d); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$deferred.push([$methodVal(r, "Close"), []]);
		img = $ifaceNil;
		/* */ if (d.interlace === 0) { $s = 2; continue; }
		/* */ if (d.interlace === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (d.interlace === 0) { */ case 2:
			_r$1 = d.readImagePass(r, 0, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			img = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err];
			}
			$s = 4; continue;
		/* } else if (d.interlace === 1) { */ case 3:
			_r$2 = d.readImagePass($ifaceNil, 0, true); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			img = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err];
			}
			pass = 0;
			/* while (true) { */ case 7:
				/* if (!(pass < 7)) { break; } */ if(!(pass < 7)) { $s = 8; continue; }
				_r$3 = d.readImagePass(r, pass, false); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$3 = _r$3;
				imagePass = _tuple$3[0];
				err$1 = _tuple$3[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [$ifaceNil, err$1];
				}
				/* */ if (!($interfaceIsEqual(imagePass, $ifaceNil))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!($interfaceIsEqual(imagePass, $ifaceNil))) { */ case 10:
					$r = d.mergePassInto(img, imagePass, pass); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 11:
				pass = pass + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
		/* } */ case 4:
		n = 0;
		i = 0;
		/* while (true) { */ case 13:
			/* if (!((n === 0) && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!((n === 0) && $interfaceIsEqual(err, $ifaceNil))) { $s = 14; continue; }
			if (i === 100) {
				$s = -1; return [$ifaceNil, io.ErrNoProgress];
			}
			_r$4 = r.Read($subslice(new sliceType$1(d.tmp), 0, 1)); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$4 = _r$4;
			n = _tuple$4[0];
			err = _tuple$4[1];
			i = i + (1) >> 0;
		/* } */ $s = 13; continue; case 14:
		/* */ if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual(err, io.EOF))) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual(err, io.EOF))) { */ case 16:
			_r$5 = err.Error(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, new FormatError((_r$5))];
		/* } */ case 17:
		if (!((n === 0)) || !((d.idatLength === 0))) {
			$s = -1; return [$ifaceNil, new FormatError("too much pixel data")];
		}
		$s = -1; return [img, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [$ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decode }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.imagePass = imagePass; $f.img = img; $f.n = n; $f.pass = pass; $f.r = r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	decoder.prototype.decode = function() { return this.$val.decode(); };
	decoder.ptr.prototype.readImagePass = function(r, pass, allocateOnly) {
		var _1, _2, _3, _i, _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$14, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, _r, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, acol, acol$1, acol$2, acol$3, acol$4, acol$5, acol$6, acol$7, allocateOnly, b, b$1, b$2, b$3, b$4, b$5, b$6, b$7, b$8, b$9, bcol, bcol$1, bcol$2, bitsPerPixel, bytesPerPixel, cdat, cr, d, err, g, gcol, gcol$1, gcol$2, gray, gray16, height, i, i$1, i$2, i$3, i$4, i$5, idx, idx$1, idx$2, img, j, j$1, nrgba, nrgba64, p, p$1, paletted, pass, pdat, pix, pix$1, pixOffset, pr, r, r$1, rcol, rcol$1, rcol$2, rgba, rgba64, rowSize, tb, tb$1, tg, tg$1, tr, tr$1, ty, ty$1, ty$2, ty$3, ty$4, width, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$8, x$9, x2, x2$1, x2$2, x2$3, x2$4, x2$5, x2$6, x2$7, x2$8, y, y$1, y$2, y$3, y$4, y$5, y$6, y$7, y$8, y$9, ycol, ycol$1, ycol$2, ycol$3, ycol$4, ycol$5, ycol$6, ycol$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _i = $f._i; _q = $f._q; _q$1 = $f._q$1; _q$10 = $f._q$10; _q$11 = $f._q$11; _q$12 = $f._q$12; _q$13 = $f._q$13; _q$14 = $f._q$14; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _q$6 = $f._q$6; _q$7 = $f._q$7; _q$8 = $f._q$8; _q$9 = $f._q$9; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; a = $f.a; acol = $f.acol; acol$1 = $f.acol$1; acol$2 = $f.acol$2; acol$3 = $f.acol$3; acol$4 = $f.acol$4; acol$5 = $f.acol$5; acol$6 = $f.acol$6; acol$7 = $f.acol$7; allocateOnly = $f.allocateOnly; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; b$3 = $f.b$3; b$4 = $f.b$4; b$5 = $f.b$5; b$6 = $f.b$6; b$7 = $f.b$7; b$8 = $f.b$8; b$9 = $f.b$9; bcol = $f.bcol; bcol$1 = $f.bcol$1; bcol$2 = $f.bcol$2; bitsPerPixel = $f.bitsPerPixel; bytesPerPixel = $f.bytesPerPixel; cdat = $f.cdat; cr = $f.cr; d = $f.d; err = $f.err; g = $f.g; gcol = $f.gcol; gcol$1 = $f.gcol$1; gcol$2 = $f.gcol$2; gray = $f.gray; gray16 = $f.gray16; height = $f.height; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; idx = $f.idx; idx$1 = $f.idx$1; idx$2 = $f.idx$2; img = $f.img; j = $f.j; j$1 = $f.j$1; nrgba = $f.nrgba; nrgba64 = $f.nrgba64; p = $f.p; p$1 = $f.p$1; paletted = $f.paletted; pass = $f.pass; pdat = $f.pdat; pix = $f.pix; pix$1 = $f.pix$1; pixOffset = $f.pixOffset; pr = $f.pr; r = $f.r; r$1 = $f.r$1; rcol = $f.rcol; rcol$1 = $f.rcol$1; rcol$2 = $f.rcol$2; rgba = $f.rgba; rgba64 = $f.rgba64; rowSize = $f.rowSize; tb = $f.tb; tb$1 = $f.tb$1; tg = $f.tg; tg$1 = $f.tg$1; tr = $f.tr; tr$1 = $f.tr$1; ty = $f.ty; ty$1 = $f.ty$1; ty$2 = $f.ty$2; ty$3 = $f.ty$3; ty$4 = $f.ty$4; width = $f.width; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$25 = $f.x$25; x$26 = $f.x$26; x$27 = $f.x$27; x$28 = $f.x$28; x$29 = $f.x$29; x$3 = $f.x$3; x$30 = $f.x$30; x$31 = $f.x$31; x$32 = $f.x$32; x$33 = $f.x$33; x$34 = $f.x$34; x$35 = $f.x$35; x$36 = $f.x$36; x$37 = $f.x$37; x$38 = $f.x$38; x$39 = $f.x$39; x$4 = $f.x$4; x$40 = $f.x$40; x$41 = $f.x$41; x$42 = $f.x$42; x$43 = $f.x$43; x$44 = $f.x$44; x$45 = $f.x$45; x$46 = $f.x$46; x$47 = $f.x$47; x$48 = $f.x$48; x$49 = $f.x$49; x$5 = $f.x$5; x$50 = $f.x$50; x$51 = $f.x$51; x$52 = $f.x$52; x$53 = $f.x$53; x$54 = $f.x$54; x$55 = $f.x$55; x$56 = $f.x$56; x$57 = $f.x$57; x$58 = $f.x$58; x$59 = $f.x$59; x$6 = $f.x$6; x$60 = $f.x$60; x$61 = $f.x$61; x$62 = $f.x$62; x$63 = $f.x$63; x$64 = $f.x$64; x$65 = $f.x$65; x$66 = $f.x$66; x$67 = $f.x$67; x$68 = $f.x$68; x$69 = $f.x$69; x$7 = $f.x$7; x$70 = $f.x$70; x$71 = $f.x$71; x$72 = $f.x$72; x$73 = $f.x$73; x$74 = $f.x$74; x$8 = $f.x$8; x$9 = $f.x$9; x2 = $f.x2; x2$1 = $f.x2$1; x2$2 = $f.x2$2; x2$3 = $f.x2$3; x2$4 = $f.x2$4; x2$5 = $f.x2$5; x2$6 = $f.x2$6; x2$7 = $f.x2$7; x2$8 = $f.x2$8; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; y$7 = $f.y$7; y$8 = $f.y$8; y$9 = $f.y$9; ycol = $f.ycol; ycol$1 = $f.ycol$1; ycol$2 = $f.ycol$2; ycol$3 = $f.ycol$3; ycol$4 = $f.ycol$4; ycol$5 = $f.ycol$5; ycol$6 = $f.ycol$6; ycol$7 = $f.ycol$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		bitsPerPixel = 0;
		pixOffset = 0;
		gray = ptrType.nil;
		rgba = ptrType$1.nil;
		paletted = ptrType$2.nil;
		nrgba = ptrType$3.nil;
		gray16 = ptrType$4.nil;
		rgba64 = ptrType$5.nil;
		nrgba64 = ptrType$6.nil;
		img = $ifaceNil;
		_tmp = d.width;
		_tmp$1 = d.height;
		width = _tmp;
		height = _tmp$1;
		if ((d.interlace === 1) && !allocateOnly) {
			p = $clone(((pass < 0 || pass >= interlacing.$length) ? ($throwRuntimeError("index out of range"), undefined) : interlacing.$array[interlacing.$offset + pass]), interlaceScan);
			width = (_q = ((((width - p.xOffset >> 0) + p.xFactor >> 0) - 1 >> 0)) / p.xFactor, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			height = (_q$1 = ((((height - p.yOffset >> 0) + p.yFactor >> 0) - 1 >> 0)) / p.yFactor, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			if ((width === 0) || (height === 0)) {
				$s = -1; return [$ifaceNil, $ifaceNil];
			}
		}
		_1 = d.cb;
		if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4))) {
			bitsPerPixel = d.depth;
			if (d.useTransparent) {
				nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba;
			} else {
				gray = image.NewGray($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = gray;
			}
		} else if (_1 === (5)) {
			bitsPerPixel = 16;
			nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba;
		} else if (_1 === (6)) {
			bitsPerPixel = 24;
			if (d.useTransparent) {
				nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba;
			} else {
				rgba = image.NewRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = rgba;
			}
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			bitsPerPixel = d.depth;
			paletted = image.NewPaletted($clone(image.Rect(0, 0, width, height), image.Rectangle), d.palette);
			img = paletted;
		} else if (_1 === (11)) {
			bitsPerPixel = 32;
			nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba;
		} else if (_1 === (12)) {
			bitsPerPixel = 16;
			if (d.useTransparent) {
				nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba64;
			} else {
				gray16 = image.NewGray16($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = gray16;
			}
		} else if (_1 === (13)) {
			bitsPerPixel = 32;
			nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba64;
		} else if (_1 === (14)) {
			bitsPerPixel = 48;
			if (d.useTransparent) {
				nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba64;
			} else {
				rgba64 = image.NewRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = rgba64;
			}
		} else if (_1 === (15)) {
			bitsPerPixel = 64;
			nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba64;
		}
		if (allocateOnly) {
			$s = -1; return [img, $ifaceNil];
		}
		bytesPerPixel = (_q$2 = ((bitsPerPixel + 7 >> 0)) / 8, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
		rowSize = 1 + (_q$3 = ((($imul(bitsPerPixel, width)) + 7 >> 0)) / 8, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		cr = $makeSlice(sliceType$1, rowSize);
		pr = $makeSlice(sliceType$1, rowSize);
		y = 0;
		/* while (true) { */ case 1:
			/* if (!(y < height)) { break; } */ if(!(y < height)) { $s = 2; continue; }
			_r = io.ReadFull(r, cr); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF) || $interfaceIsEqual(err, io.ErrUnexpectedEOF)) {
					$s = -1; return [$ifaceNil, new FormatError("not enough pixel data")];
				}
				$s = -1; return [$ifaceNil, err];
			}
			cdat = $subslice(cr, 1);
			pdat = $subslice(pr, 1);
			_2 = (0 >= cr.$length ? ($throwRuntimeError("index out of range"), undefined) : cr.$array[cr.$offset + 0]);
			if (_2 === (0)) {
			} else if (_2 === (1)) {
				i = bytesPerPixel;
				while (true) {
					if (!(i < cdat.$length)) { break; }
					((i < 0 || i >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i] = (((i < 0 || i >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i]) + ((x = i - bytesPerPixel >> 0, ((x < 0 || x >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x]))) << 24 >>> 24));
					i = i + (1) >> 0;
				}
			} else if (_2 === (2)) {
				_ref = pdat;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$1 = _i;
					p$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					((i$1 < 0 || i$1 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$1] = (((i$1 < 0 || i$1 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$1]) + (p$1) << 24 >>> 24));
					_i++;
				}
			} else if (_2 === (3)) {
				i$2 = 0;
				while (true) {
					if (!(i$2 < bytesPerPixel)) { break; }
					((i$2 < 0 || i$2 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$2] = (((i$2 < 0 || i$2 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$2]) + ((_q$4 = ((i$2 < 0 || i$2 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i$2]) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero"))) << 24 >>> 24));
					i$2 = i$2 + (1) >> 0;
				}
				i$3 = bytesPerPixel;
				while (true) {
					if (!(i$3 < cdat.$length)) { break; }
					((i$3 < 0 || i$3 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$3] = (((i$3 < 0 || i$3 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$3]) + ((((_q$5 = (((((x$1 = i$3 - bytesPerPixel >> 0, ((x$1 < 0 || x$1 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$1])) >> 0)) + ((((i$3 < 0 || i$3 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i$3]) >> 0)) >> 0)) / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24))) << 24 >>> 24));
					i$3 = i$3 + (1) >> 0;
				}
			} else if (_2 === (4)) {
				filterPaeth(cdat, pdat, bytesPerPixel);
			} else {
				$s = -1; return [$ifaceNil, new FormatError("bad filter type")];
			}
			_3 = d.cb;
			if (_3 === (1)) {
				if (d.useTransparent) {
					ty = d.transparent[1];
					x$2 = 0;
					while (true) {
						if (!(x$2 < width)) { break; }
						b = (x$3 = (_q$6 = x$2 / 8, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$3 < 0 || x$3 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$3]));
						x2 = 0;
						while (true) {
							if (!(x2 < 8 && (x$2 + x2 >> 0) < width)) { break; }
							ycol = ((b >>> 7 << 24 >>> 24)) * 255 << 24 >>> 24;
							acol = 255;
							if (ycol === ty) {
								acol = 0;
							}
							nrgba.SetNRGBA(x$2 + x2 >> 0, y, new color.NRGBA.ptr(ycol, ycol, ycol, acol));
							b = (y$1 = (1), y$1 < 32 ? (b << y$1) : 0) << 24 >>> 24;
							x2 = x2 + (1) >> 0;
						}
						x$2 = x$2 + (8) >> 0;
					}
				} else {
					x$4 = 0;
					while (true) {
						if (!(x$4 < width)) { break; }
						b$1 = (x$5 = (_q$7 = x$4 / 8, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$5 < 0 || x$5 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$5]));
						x2$1 = 0;
						while (true) {
							if (!(x2$1 < 8 && (x$4 + x2$1 >> 0) < width)) { break; }
							gray.SetGray(x$4 + x2$1 >> 0, y, new color.Gray.ptr(((b$1 >>> 7 << 24 >>> 24)) * 255 << 24 >>> 24));
							b$1 = (y$2 = (1), y$2 < 32 ? (b$1 << y$2) : 0) << 24 >>> 24;
							x2$1 = x2$1 + (1) >> 0;
						}
						x$4 = x$4 + (8) >> 0;
					}
				}
			} else if (_3 === (2)) {
				if (d.useTransparent) {
					ty$1 = d.transparent[1];
					x$6 = 0;
					while (true) {
						if (!(x$6 < width)) { break; }
						b$2 = (x$7 = (_q$8 = x$6 / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$7 < 0 || x$7 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$7]));
						x2$2 = 0;
						while (true) {
							if (!(x2$2 < 4 && (x$6 + x2$2 >> 0) < width)) { break; }
							ycol$1 = ((b$2 >>> 6 << 24 >>> 24)) * 85 << 24 >>> 24;
							acol$1 = 255;
							if (ycol$1 === ty$1) {
								acol$1 = 0;
							}
							nrgba.SetNRGBA(x$6 + x2$2 >> 0, y, new color.NRGBA.ptr(ycol$1, ycol$1, ycol$1, acol$1));
							b$2 = (y$3 = (2), y$3 < 32 ? (b$2 << y$3) : 0) << 24 >>> 24;
							x2$2 = x2$2 + (1) >> 0;
						}
						x$6 = x$6 + (4) >> 0;
					}
				} else {
					x$8 = 0;
					while (true) {
						if (!(x$8 < width)) { break; }
						b$3 = (x$9 = (_q$9 = x$8 / 4, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$9 < 0 || x$9 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$9]));
						x2$3 = 0;
						while (true) {
							if (!(x2$3 < 4 && (x$8 + x2$3 >> 0) < width)) { break; }
							gray.SetGray(x$8 + x2$3 >> 0, y, new color.Gray.ptr(((b$3 >>> 6 << 24 >>> 24)) * 85 << 24 >>> 24));
							b$3 = (y$4 = (2), y$4 < 32 ? (b$3 << y$4) : 0) << 24 >>> 24;
							x2$3 = x2$3 + (1) >> 0;
						}
						x$8 = x$8 + (4) >> 0;
					}
				}
			} else if (_3 === (3)) {
				if (d.useTransparent) {
					ty$2 = d.transparent[1];
					x$10 = 0;
					while (true) {
						if (!(x$10 < width)) { break; }
						b$4 = (x$11 = (_q$10 = x$10 / 2, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$11 < 0 || x$11 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$11]));
						x2$4 = 0;
						while (true) {
							if (!(x2$4 < 2 && (x$10 + x2$4 >> 0) < width)) { break; }
							ycol$2 = ((b$4 >>> 4 << 24 >>> 24)) * 17 << 24 >>> 24;
							acol$2 = 255;
							if (ycol$2 === ty$2) {
								acol$2 = 0;
							}
							nrgba.SetNRGBA(x$10 + x2$4 >> 0, y, new color.NRGBA.ptr(ycol$2, ycol$2, ycol$2, acol$2));
							b$4 = (y$5 = (4), y$5 < 32 ? (b$4 << y$5) : 0) << 24 >>> 24;
							x2$4 = x2$4 + (1) >> 0;
						}
						x$10 = x$10 + (2) >> 0;
					}
				} else {
					x$12 = 0;
					while (true) {
						if (!(x$12 < width)) { break; }
						b$5 = (x$13 = (_q$11 = x$12 / 2, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$13 < 0 || x$13 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$13]));
						x2$5 = 0;
						while (true) {
							if (!(x2$5 < 2 && (x$12 + x2$5 >> 0) < width)) { break; }
							gray.SetGray(x$12 + x2$5 >> 0, y, new color.Gray.ptr(((b$5 >>> 4 << 24 >>> 24)) * 17 << 24 >>> 24));
							b$5 = (y$6 = (4), y$6 < 32 ? (b$5 << y$6) : 0) << 24 >>> 24;
							x2$5 = x2$5 + (1) >> 0;
						}
						x$12 = x$12 + (2) >> 0;
					}
				}
			} else if (_3 === (4)) {
				if (d.useTransparent) {
					ty$3 = d.transparent[1];
					x$14 = 0;
					while (true) {
						if (!(x$14 < width)) { break; }
						ycol$3 = ((x$14 < 0 || x$14 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$14]);
						acol$3 = 255;
						if (ycol$3 === ty$3) {
							acol$3 = 0;
						}
						nrgba.SetNRGBA(x$14, y, new color.NRGBA.ptr(ycol$3, ycol$3, ycol$3, acol$3));
						x$14 = x$14 + (1) >> 0;
					}
				} else {
					$copySlice($subslice(gray.Pix, pixOffset), cdat);
					pixOffset = pixOffset + (gray.Stride) >> 0;
				}
			} else if (_3 === (5)) {
				x$15 = 0;
				while (true) {
					if (!(x$15 < width)) { break; }
					ycol$4 = (x$16 = ($imul(2, x$15)) + 0 >> 0, ((x$16 < 0 || x$16 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$16]));
					nrgba.SetNRGBA(x$15, y, new color.NRGBA.ptr(ycol$4, ycol$4, ycol$4, (x$17 = ($imul(2, x$15)) + 1 >> 0, ((x$17 < 0 || x$17 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$17]))));
					x$15 = x$15 + (1) >> 0;
				}
			} else if (_3 === (6)) {
				if (d.useTransparent) {
					_tmp$2 = nrgba.Pix;
					_tmp$3 = pixOffset;
					_tmp$4 = 0;
					pix = _tmp$2;
					i$4 = _tmp$3;
					j = _tmp$4;
					_tmp$5 = d.transparent[1];
					_tmp$6 = d.transparent[3];
					_tmp$7 = d.transparent[5];
					tr = _tmp$5;
					tg = _tmp$6;
					tb = _tmp$7;
					x$18 = 0;
					while (true) {
						if (!(x$18 < width)) { break; }
						r$1 = (x$19 = j + 0 >> 0, ((x$19 < 0 || x$19 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$19]));
						g = (x$20 = j + 1 >> 0, ((x$20 < 0 || x$20 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$20]));
						b$6 = (x$21 = j + 2 >> 0, ((x$21 < 0 || x$21 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$21]));
						a = 255;
						if ((r$1 === tr) && (g === tg) && (b$6 === tb)) {
							a = 0;
						}
						(x$22 = i$4 + 0 >> 0, ((x$22 < 0 || x$22 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$22] = r$1));
						(x$23 = i$4 + 1 >> 0, ((x$23 < 0 || x$23 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$23] = g));
						(x$24 = i$4 + 2 >> 0, ((x$24 < 0 || x$24 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$24] = b$6));
						(x$25 = i$4 + 3 >> 0, ((x$25 < 0 || x$25 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$25] = a));
						i$4 = i$4 + (4) >> 0;
						j = j + (3) >> 0;
						x$18 = x$18 + (1) >> 0;
					}
					pixOffset = pixOffset + (nrgba.Stride) >> 0;
				} else {
					_tmp$8 = rgba.Pix;
					_tmp$9 = pixOffset;
					_tmp$10 = 0;
					pix$1 = _tmp$8;
					i$5 = _tmp$9;
					j$1 = _tmp$10;
					x$26 = 0;
					while (true) {
						if (!(x$26 < width)) { break; }
						(x$28 = i$5 + 0 >> 0, ((x$28 < 0 || x$28 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$28] = (x$27 = j$1 + 0 >> 0, ((x$27 < 0 || x$27 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$27]))));
						(x$30 = i$5 + 1 >> 0, ((x$30 < 0 || x$30 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$30] = (x$29 = j$1 + 1 >> 0, ((x$29 < 0 || x$29 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$29]))));
						(x$32 = i$5 + 2 >> 0, ((x$32 < 0 || x$32 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$32] = (x$31 = j$1 + 2 >> 0, ((x$31 < 0 || x$31 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$31]))));
						(x$33 = i$5 + 3 >> 0, ((x$33 < 0 || x$33 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$33] = 255));
						i$5 = i$5 + (4) >> 0;
						j$1 = j$1 + (3) >> 0;
						x$26 = x$26 + (1) >> 0;
					}
					pixOffset = pixOffset + (rgba.Stride) >> 0;
				}
			} else if (_3 === (7)) {
				x$34 = 0;
				while (true) {
					if (!(x$34 < width)) { break; }
					b$7 = (x$35 = (_q$12 = x$34 / 8, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$35 < 0 || x$35 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$35]));
					x2$6 = 0;
					while (true) {
						if (!(x2$6 < 8 && (x$34 + x2$6 >> 0) < width)) { break; }
						idx = b$7 >>> 7 << 24 >>> 24;
						if (paletted.Palette.$length <= ((idx >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((idx >> 0)) + 1 >> 0));
						}
						paletted.SetColorIndex(x$34 + x2$6 >> 0, y, idx);
						b$7 = (y$7 = (1), y$7 < 32 ? (b$7 << y$7) : 0) << 24 >>> 24;
						x2$6 = x2$6 + (1) >> 0;
					}
					x$34 = x$34 + (8) >> 0;
				}
			} else if (_3 === (8)) {
				x$36 = 0;
				while (true) {
					if (!(x$36 < width)) { break; }
					b$8 = (x$37 = (_q$13 = x$36 / 4, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$37 < 0 || x$37 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$37]));
					x2$7 = 0;
					while (true) {
						if (!(x2$7 < 4 && (x$36 + x2$7 >> 0) < width)) { break; }
						idx$1 = b$8 >>> 6 << 24 >>> 24;
						if (paletted.Palette.$length <= ((idx$1 >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((idx$1 >> 0)) + 1 >> 0));
						}
						paletted.SetColorIndex(x$36 + x2$7 >> 0, y, idx$1);
						b$8 = (y$8 = (2), y$8 < 32 ? (b$8 << y$8) : 0) << 24 >>> 24;
						x2$7 = x2$7 + (1) >> 0;
					}
					x$36 = x$36 + (4) >> 0;
				}
			} else if (_3 === (9)) {
				x$38 = 0;
				while (true) {
					if (!(x$38 < width)) { break; }
					b$9 = (x$39 = (_q$14 = x$38 / 2, (_q$14 === _q$14 && _q$14 !== 1/0 && _q$14 !== -1/0) ? _q$14 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$39 < 0 || x$39 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$39]));
					x2$8 = 0;
					while (true) {
						if (!(x2$8 < 2 && (x$38 + x2$8 >> 0) < width)) { break; }
						idx$2 = b$9 >>> 4 << 24 >>> 24;
						if (paletted.Palette.$length <= ((idx$2 >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((idx$2 >> 0)) + 1 >> 0));
						}
						paletted.SetColorIndex(x$38 + x2$8 >> 0, y, idx$2);
						b$9 = (y$9 = (4), y$9 < 32 ? (b$9 << y$9) : 0) << 24 >>> 24;
						x2$8 = x2$8 + (1) >> 0;
					}
					x$38 = x$38 + (2) >> 0;
				}
			} else if (_3 === (10)) {
				if (!((paletted.Palette.$length === 255))) {
					x$40 = 0;
					while (true) {
						if (!(x$40 < width)) { break; }
						if (paletted.Palette.$length <= ((((x$40 < 0 || x$40 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$40]) >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((((x$40 < 0 || x$40 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$40]) >> 0)) + 1 >> 0));
						}
						x$40 = x$40 + (1) >> 0;
					}
				}
				$copySlice($subslice(paletted.Pix, pixOffset), cdat);
				pixOffset = pixOffset + (paletted.Stride) >> 0;
			} else if (_3 === (11)) {
				$copySlice($subslice(nrgba.Pix, pixOffset), cdat);
				pixOffset = pixOffset + (nrgba.Stride) >> 0;
			} else if (_3 === (12)) {
				if (d.useTransparent) {
					ty$4 = ((((d.transparent[0] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[1] << 16 >>> 16))) >>> 0;
					x$41 = 0;
					while (true) {
						if (!(x$41 < width)) { break; }
						ycol$5 = (((((x$42 = ($imul(2, x$41)) + 0 >> 0, ((x$42 < 0 || x$42 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$42])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$43 = ($imul(2, x$41)) + 1 >> 0, ((x$43 < 0 || x$43 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$43])) << 16 >>> 16))) >>> 0;
						acol$4 = 65535;
						if (ycol$5 === ty$4) {
							acol$4 = 0;
						}
						nrgba64.SetNRGBA64(x$41, y, new color.NRGBA64.ptr(ycol$5, ycol$5, ycol$5, acol$4));
						x$41 = x$41 + (1) >> 0;
					}
				} else {
					x$44 = 0;
					while (true) {
						if (!(x$44 < width)) { break; }
						ycol$6 = (((((x$45 = ($imul(2, x$44)) + 0 >> 0, ((x$45 < 0 || x$45 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$45])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$46 = ($imul(2, x$44)) + 1 >> 0, ((x$46 < 0 || x$46 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$46])) << 16 >>> 16))) >>> 0;
						gray16.SetGray16(x$44, y, new color.Gray16.ptr(ycol$6));
						x$44 = x$44 + (1) >> 0;
					}
				}
			} else if (_3 === (13)) {
				x$47 = 0;
				while (true) {
					if (!(x$47 < width)) { break; }
					ycol$7 = (((((x$48 = ($imul(4, x$47)) + 0 >> 0, ((x$48 < 0 || x$48 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$48])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$49 = ($imul(4, x$47)) + 1 >> 0, ((x$49 < 0 || x$49 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$49])) << 16 >>> 16))) >>> 0;
					acol$5 = (((((x$50 = ($imul(4, x$47)) + 2 >> 0, ((x$50 < 0 || x$50 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$50])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$51 = ($imul(4, x$47)) + 3 >> 0, ((x$51 < 0 || x$51 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$51])) << 16 >>> 16))) >>> 0;
					nrgba64.SetNRGBA64(x$47, y, new color.NRGBA64.ptr(ycol$7, ycol$7, ycol$7, acol$5));
					x$47 = x$47 + (1) >> 0;
				}
			} else if (_3 === (14)) {
				if (d.useTransparent) {
					tr$1 = ((((d.transparent[0] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[1] << 16 >>> 16))) >>> 0;
					tg$1 = ((((d.transparent[2] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[3] << 16 >>> 16))) >>> 0;
					tb$1 = ((((d.transparent[4] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[5] << 16 >>> 16))) >>> 0;
					x$52 = 0;
					while (true) {
						if (!(x$52 < width)) { break; }
						rcol = (((((x$53 = ($imul(6, x$52)) + 0 >> 0, ((x$53 < 0 || x$53 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$53])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$54 = ($imul(6, x$52)) + 1 >> 0, ((x$54 < 0 || x$54 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$54])) << 16 >>> 16))) >>> 0;
						gcol = (((((x$55 = ($imul(6, x$52)) + 2 >> 0, ((x$55 < 0 || x$55 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$55])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$56 = ($imul(6, x$52)) + 3 >> 0, ((x$56 < 0 || x$56 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$56])) << 16 >>> 16))) >>> 0;
						bcol = (((((x$57 = ($imul(6, x$52)) + 4 >> 0, ((x$57 < 0 || x$57 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$57])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$58 = ($imul(6, x$52)) + 5 >> 0, ((x$58 < 0 || x$58 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$58])) << 16 >>> 16))) >>> 0;
						acol$6 = 65535;
						if ((rcol === tr$1) && (gcol === tg$1) && (bcol === tb$1)) {
							acol$6 = 0;
						}
						nrgba64.SetNRGBA64(x$52, y, new color.NRGBA64.ptr(rcol, gcol, bcol, acol$6));
						x$52 = x$52 + (1) >> 0;
					}
				} else {
					x$59 = 0;
					while (true) {
						if (!(x$59 < width)) { break; }
						rcol$1 = (((((x$60 = ($imul(6, x$59)) + 0 >> 0, ((x$60 < 0 || x$60 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$60])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$61 = ($imul(6, x$59)) + 1 >> 0, ((x$61 < 0 || x$61 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$61])) << 16 >>> 16))) >>> 0;
						gcol$1 = (((((x$62 = ($imul(6, x$59)) + 2 >> 0, ((x$62 < 0 || x$62 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$62])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$63 = ($imul(6, x$59)) + 3 >> 0, ((x$63 < 0 || x$63 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$63])) << 16 >>> 16))) >>> 0;
						bcol$1 = (((((x$64 = ($imul(6, x$59)) + 4 >> 0, ((x$64 < 0 || x$64 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$64])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$65 = ($imul(6, x$59)) + 5 >> 0, ((x$65 < 0 || x$65 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$65])) << 16 >>> 16))) >>> 0;
						rgba64.SetRGBA64(x$59, y, new color.RGBA64.ptr(rcol$1, gcol$1, bcol$1, 65535));
						x$59 = x$59 + (1) >> 0;
					}
				}
			} else if (_3 === (15)) {
				x$66 = 0;
				while (true) {
					if (!(x$66 < width)) { break; }
					rcol$2 = (((((x$67 = ($imul(8, x$66)) + 0 >> 0, ((x$67 < 0 || x$67 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$67])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$68 = ($imul(8, x$66)) + 1 >> 0, ((x$68 < 0 || x$68 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$68])) << 16 >>> 16))) >>> 0;
					gcol$2 = (((((x$69 = ($imul(8, x$66)) + 2 >> 0, ((x$69 < 0 || x$69 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$69])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$70 = ($imul(8, x$66)) + 3 >> 0, ((x$70 < 0 || x$70 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$70])) << 16 >>> 16))) >>> 0;
					bcol$2 = (((((x$71 = ($imul(8, x$66)) + 4 >> 0, ((x$71 < 0 || x$71 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$71])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$72 = ($imul(8, x$66)) + 5 >> 0, ((x$72 < 0 || x$72 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$72])) << 16 >>> 16))) >>> 0;
					acol$7 = (((((x$73 = ($imul(8, x$66)) + 6 >> 0, ((x$73 < 0 || x$73 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$73])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$74 = ($imul(8, x$66)) + 7 >> 0, ((x$74 < 0 || x$74 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$74])) << 16 >>> 16))) >>> 0;
					nrgba64.SetNRGBA64(x$66, y, new color.NRGBA64.ptr(rcol$2, gcol$2, bcol$2, acol$7));
					x$66 = x$66 + (1) >> 0;
				}
			}
			_tmp$11 = cr;
			_tmp$12 = pr;
			pr = _tmp$11;
			cr = _tmp$12;
			y = y + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [img, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readImagePass }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._i = _i; $f._q = _q; $f._q$1 = _q$1; $f._q$10 = _q$10; $f._q$11 = _q$11; $f._q$12 = _q$12; $f._q$13 = _q$13; $f._q$14 = _q$14; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._q$6 = _q$6; $f._q$7 = _q$7; $f._q$8 = _q$8; $f._q$9 = _q$9; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.a = a; $f.acol = acol; $f.acol$1 = acol$1; $f.acol$2 = acol$2; $f.acol$3 = acol$3; $f.acol$4 = acol$4; $f.acol$5 = acol$5; $f.acol$6 = acol$6; $f.acol$7 = acol$7; $f.allocateOnly = allocateOnly; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.b$3 = b$3; $f.b$4 = b$4; $f.b$5 = b$5; $f.b$6 = b$6; $f.b$7 = b$7; $f.b$8 = b$8; $f.b$9 = b$9; $f.bcol = bcol; $f.bcol$1 = bcol$1; $f.bcol$2 = bcol$2; $f.bitsPerPixel = bitsPerPixel; $f.bytesPerPixel = bytesPerPixel; $f.cdat = cdat; $f.cr = cr; $f.d = d; $f.err = err; $f.g = g; $f.gcol = gcol; $f.gcol$1 = gcol$1; $f.gcol$2 = gcol$2; $f.gray = gray; $f.gray16 = gray16; $f.height = height; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.idx = idx; $f.idx$1 = idx$1; $f.idx$2 = idx$2; $f.img = img; $f.j = j; $f.j$1 = j$1; $f.nrgba = nrgba; $f.nrgba64 = nrgba64; $f.p = p; $f.p$1 = p$1; $f.paletted = paletted; $f.pass = pass; $f.pdat = pdat; $f.pix = pix; $f.pix$1 = pix$1; $f.pixOffset = pixOffset; $f.pr = pr; $f.r = r; $f.r$1 = r$1; $f.rcol = rcol; $f.rcol$1 = rcol$1; $f.rcol$2 = rcol$2; $f.rgba = rgba; $f.rgba64 = rgba64; $f.rowSize = rowSize; $f.tb = tb; $f.tb$1 = tb$1; $f.tg = tg; $f.tg$1 = tg$1; $f.tr = tr; $f.tr$1 = tr$1; $f.ty = ty; $f.ty$1 = ty$1; $f.ty$2 = ty$2; $f.ty$3 = ty$3; $f.ty$4 = ty$4; $f.width = width; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$25 = x$25; $f.x$26 = x$26; $f.x$27 = x$27; $f.x$28 = x$28; $f.x$29 = x$29; $f.x$3 = x$3; $f.x$30 = x$30; $f.x$31 = x$31; $f.x$32 = x$32; $f.x$33 = x$33; $f.x$34 = x$34; $f.x$35 = x$35; $f.x$36 = x$36; $f.x$37 = x$37; $f.x$38 = x$38; $f.x$39 = x$39; $f.x$4 = x$4; $f.x$40 = x$40; $f.x$41 = x$41; $f.x$42 = x$42; $f.x$43 = x$43; $f.x$44 = x$44; $f.x$45 = x$45; $f.x$46 = x$46; $f.x$47 = x$47; $f.x$48 = x$48; $f.x$49 = x$49; $f.x$5 = x$5; $f.x$50 = x$50; $f.x$51 = x$51; $f.x$52 = x$52; $f.x$53 = x$53; $f.x$54 = x$54; $f.x$55 = x$55; $f.x$56 = x$56; $f.x$57 = x$57; $f.x$58 = x$58; $f.x$59 = x$59; $f.x$6 = x$6; $f.x$60 = x$60; $f.x$61 = x$61; $f.x$62 = x$62; $f.x$63 = x$63; $f.x$64 = x$64; $f.x$65 = x$65; $f.x$66 = x$66; $f.x$67 = x$67; $f.x$68 = x$68; $f.x$69 = x$69; $f.x$7 = x$7; $f.x$70 = x$70; $f.x$71 = x$71; $f.x$72 = x$72; $f.x$73 = x$73; $f.x$74 = x$74; $f.x$8 = x$8; $f.x$9 = x$9; $f.x2 = x2; $f.x2$1 = x2$1; $f.x2$2 = x2$2; $f.x2$3 = x2$3; $f.x2$4 = x2$4; $f.x2$5 = x2$5; $f.x2$6 = x2$6; $f.x2$7 = x2$7; $f.x2$8 = x2$8; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.y$7 = y$7; $f.y$8 = y$8; $f.y$9 = y$9; $f.ycol = ycol; $f.ycol$1 = ycol$1; $f.ycol$2 = ycol$2; $f.ycol$3 = ycol$3; $f.ycol$4 = ycol$4; $f.ycol$5 = ycol$5; $f.ycol$6 = ycol$6; $f.ycol$7 = ycol$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readImagePass = function(r, pass, allocateOnly) { return this.$val.readImagePass(r, pass, allocateOnly); };
	decoder.ptr.prototype.mergePassInto = function(dst, src, pass) {
		var _r, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, bounds, bytesPerPixel, d, d$1, dBase, dst, dstPix, p, pass, rect, s, src, srcPix, stride, target, target$1, target$2, target$3, target$4, target$5, target$6, target$7, target$8, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; bounds = $f.bounds; bytesPerPixel = $f.bytesPerPixel; d = $f.d; d$1 = $f.d$1; dBase = $f.dBase; dst = $f.dst; dstPix = $f.dstPix; p = $f.p; pass = $f.pass; rect = $f.rect; s = $f.s; src = $f.src; srcPix = $f.srcPix; stride = $f.stride; target = $f.target; target$1 = $f.target$1; target$2 = $f.target$2; target$3 = $f.target$3; target$4 = $f.target$4; target$5 = $f.target$5; target$6 = $f.target$6; target$7 = $f.target$7; target$8 = $f.target$8; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		p = $clone(((pass < 0 || pass >= interlacing.$length) ? ($throwRuntimeError("index out of range"), undefined) : interlacing.$array[interlacing.$offset + pass]), interlaceScan);
		srcPix = sliceType$1.nil;
		dstPix = sliceType$1.nil;
		stride = 0;
		rect = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
		bytesPerPixel = 0;
		_ref = dst;
		if ($assertType(_ref, ptrType$7, true)[1]) {
			target = _ref.$val;
			srcPix = $assertType(src, ptrType$7).Pix;
			_tmp = target.Pix;
			_tmp$1 = target.Stride;
			_tmp$2 = $clone(target.Rect, image.Rectangle);
			dstPix = _tmp;
			stride = _tmp$1;
			image.Rectangle.copy(rect, _tmp$2);
			bytesPerPixel = 1;
		} else if ($assertType(_ref, ptrType$8, true)[1]) {
			target$1 = _ref.$val;
			srcPix = $assertType(src, ptrType$8).Pix;
			_tmp$3 = target$1.Pix;
			_tmp$4 = target$1.Stride;
			_tmp$5 = $clone(target$1.Rect, image.Rectangle);
			dstPix = _tmp$3;
			stride = _tmp$4;
			image.Rectangle.copy(rect, _tmp$5);
			bytesPerPixel = 2;
		} else if ($assertType(_ref, ptrType, true)[1]) {
			target$2 = _ref.$val;
			srcPix = $assertType(src, ptrType).Pix;
			_tmp$6 = target$2.Pix;
			_tmp$7 = target$2.Stride;
			_tmp$8 = $clone(target$2.Rect, image.Rectangle);
			dstPix = _tmp$6;
			stride = _tmp$7;
			image.Rectangle.copy(rect, _tmp$8);
			bytesPerPixel = 1;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			target$3 = _ref.$val;
			srcPix = $assertType(src, ptrType$4).Pix;
			_tmp$9 = target$3.Pix;
			_tmp$10 = target$3.Stride;
			_tmp$11 = $clone(target$3.Rect, image.Rectangle);
			dstPix = _tmp$9;
			stride = _tmp$10;
			image.Rectangle.copy(rect, _tmp$11);
			bytesPerPixel = 2;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			target$4 = _ref.$val;
			srcPix = $assertType(src, ptrType$3).Pix;
			_tmp$12 = target$4.Pix;
			_tmp$13 = target$4.Stride;
			_tmp$14 = $clone(target$4.Rect, image.Rectangle);
			dstPix = _tmp$12;
			stride = _tmp$13;
			image.Rectangle.copy(rect, _tmp$14);
			bytesPerPixel = 4;
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			target$5 = _ref.$val;
			srcPix = $assertType(src, ptrType$6).Pix;
			_tmp$15 = target$5.Pix;
			_tmp$16 = target$5.Stride;
			_tmp$17 = $clone(target$5.Rect, image.Rectangle);
			dstPix = _tmp$15;
			stride = _tmp$16;
			image.Rectangle.copy(rect, _tmp$17);
			bytesPerPixel = 8;
		} else if ($assertType(_ref, ptrType$2, true)[1]) {
			target$6 = _ref.$val;
			srcPix = $assertType(src, ptrType$2).Pix;
			_tmp$18 = target$6.Pix;
			_tmp$19 = target$6.Stride;
			_tmp$20 = $clone(target$6.Rect, image.Rectangle);
			dstPix = _tmp$18;
			stride = _tmp$19;
			image.Rectangle.copy(rect, _tmp$20);
			bytesPerPixel = 1;
		} else if ($assertType(_ref, ptrType$1, true)[1]) {
			target$7 = _ref.$val;
			srcPix = $assertType(src, ptrType$1).Pix;
			_tmp$21 = target$7.Pix;
			_tmp$22 = target$7.Stride;
			_tmp$23 = $clone(target$7.Rect, image.Rectangle);
			dstPix = _tmp$21;
			stride = _tmp$22;
			image.Rectangle.copy(rect, _tmp$23);
			bytesPerPixel = 4;
		} else if ($assertType(_ref, ptrType$5, true)[1]) {
			target$8 = _ref.$val;
			srcPix = $assertType(src, ptrType$5).Pix;
			_tmp$24 = target$8.Pix;
			_tmp$25 = target$8.Stride;
			_tmp$26 = $clone(target$8.Rect, image.Rectangle);
			dstPix = _tmp$24;
			stride = _tmp$25;
			image.Rectangle.copy(rect, _tmp$26);
			bytesPerPixel = 8;
		}
		_tmp$27 = 0;
		_r = src.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp$28 = $clone(_r, image.Rectangle);
		s = _tmp$27;
		bounds = $clone(_tmp$28, image.Rectangle);
		y = bounds.Min.Y;
		while (true) {
			if (!(y < bounds.Max.Y)) { break; }
			dBase = ($imul((((($imul(y, p.yFactor)) + p.yOffset >> 0) - rect.Min.Y >> 0)), stride)) + ($imul(((p.xOffset - rect.Min.X >> 0)), bytesPerPixel)) >> 0;
			x = bounds.Min.X;
			while (true) {
				if (!(x < bounds.Max.X)) { break; }
				d$1 = dBase + ($imul(($imul(x, p.xFactor)), bytesPerPixel)) >> 0;
				$copySlice($subslice(dstPix, d$1), $subslice(srcPix, s, (s + bytesPerPixel >> 0)));
				s = s + (bytesPerPixel) >> 0;
				x = x + (1) >> 0;
			}
			y = y + (1) >> 0;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.mergePassInto }; } $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.bounds = bounds; $f.bytesPerPixel = bytesPerPixel; $f.d = d; $f.d$1 = d$1; $f.dBase = dBase; $f.dst = dst; $f.dstPix = dstPix; $f.p = p; $f.pass = pass; $f.rect = rect; $f.s = s; $f.src = src; $f.srcPix = srcPix; $f.stride = stride; $f.target = target; $f.target$1 = target$1; $f.target$2 = target$2; $f.target$3 = target$3; $f.target$4 = target$4; $f.target$5 = target$5; $f.target$6 = target$6; $f.target$7 = target$7; $f.target$8 = target$8; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.mergePassInto = function(dst, src, pass) { return this.$val.mergePassInto(dst, src, pass); };
	decoder.ptr.prototype.parseIDAT = function(length) {
		var _r, _r$1, _tuple, d, err, length, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; d = $f.d; err = $f.err; length = $f.length; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		d = this;
		d.idatLength = length;
		_r = d.decode(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		d.img = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		_r$1 = d.verifyChecksum(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseIDAT }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.length = length; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseIDAT = function(length) { return this.$val.parseIDAT(length); };
	decoder.ptr.prototype.parseIEND = function(length) {
		var _r, d, length, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; length = $f.length; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((length === 0))) {
			$s = -1; return new FormatError("bad IEND length");
		}
		_r = d.verifyChecksum(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseIEND }; } $f._r = _r; $f.d = d; $f.length = length; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseIEND = function(length) { return this.$val.parseIEND(length); };
	decoder.ptr.prototype.parseChunk = function() {
		var _1, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, d, err, ignored, length, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; ignored = $f.ignored; length = $f.length; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 8)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		length = $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4));
		$r = d.crc.Reset(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = d.crc.Write($subslice(new sliceType$1(d.tmp), 4, 8)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
			_1 = ($bytesToString($subslice(new sliceType$1(d.tmp), 4, 8)));
			/* */ if (_1 === ("IHDR")) { $s = 5; continue; }
			/* */ if (_1 === ("PLTE")) { $s = 6; continue; }
			/* */ if (_1 === ("tRNS")) { $s = 7; continue; }
			/* */ if (_1 === ("IDAT")) { $s = 8; continue; }
			/* */ if (_1 === ("IEND")) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === ("IHDR")) { */ case 5:
				if (!((d.stage === 0))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 1;
				_r$2 = d.parseIHDR(length); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } else if (_1 === ("PLTE")) { */ case 6:
				if (!((d.stage === 1))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 2;
				_r$3 = d.parsePLTE(length); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } else if (_1 === ("tRNS")) { */ case 7:
				if (cbPaletted(d.cb)) {
					if (!((d.stage === 2))) {
						$s = -1; return new FormatError(chunkOrderError);
					}
				} else if (!((d.stage === 1))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 3;
				_r$4 = d.parsetRNS(length); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } else if (_1 === ("IDAT")) { */ case 8:
				if (d.stage < 1 || d.stage > 4 || ((d.stage === 1) && cbPaletted(d.cb))) {
					$s = -1; return new FormatError(chunkOrderError);
				} else if (d.stage === 4) {
					/* break; */ $s = 4; continue;
				}
				d.stage = 4;
				_r$5 = d.parseIDAT(length); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } else if (_1 === ("IEND")) { */ case 9:
				if (!((d.stage === 4))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 5;
				_r$6 = d.parseIEND(length); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
			/* } */ case 10:
		case 4:
		/* */ if (length > 2147483647) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (length > 2147483647) { */ case 16:
			_r$7 = fmt.Sprintf("Bad chunk length: %d", new sliceType$2([new $Uint32(length)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r$7));
		/* } */ case 17:
		ignored = arrayType.zero();
		/* while (true) { */ case 19:
			/* if (!(length > 0)) { break; } */ if(!(length > 0)) { $s = 20; continue; }
			_r$8 = io.ReadFull(d.r, $subslice(new sliceType$1(ignored), 0, min(4096, ((length >> 0))))); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$1 = _r$8;
			n = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_r$9 = d.crc.Write($subslice(new sliceType$1(ignored), 0, n)); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			length = length - (((n >>> 0))) >>> 0;
		/* } */ $s = 19; continue; case 20:
		_r$10 = d.verifyChecksum(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		$s = -1; return _r$10;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseChunk }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.ignored = ignored; $f.length = length; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseChunk = function() { return this.$val.parseChunk(); };
	decoder.ptr.prototype.verifyChecksum = function() {
		var _r, _r$1, _tuple, d, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; d = $f.d; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 4)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = d.crc.Sum32(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!(($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4)) === _r$1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4)) === _r$1))) { */ case 2:
			$s = -1; return new FormatError("invalid checksum");
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.verifyChecksum }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.verifyChecksum = function() { return this.$val.verifyChecksum(); };
	decoder.ptr.prototype.checkHeader = function() {
		var _r, _tuple, d, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; d = $f.d; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 8)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (!(($bytesToString($subslice(new sliceType$1(d.tmp), 0, 8))) === "\x89PNG\r\n\x1A\n")) {
			$s = -1; return new FormatError("not a PNG file");
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.checkHeader }; } $f._r = _r; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.checkHeader = function() { return this.$val.checkHeader(); };
	Decode = function(r) {
		var _r, _r$1, _r$2, d, err, err$1, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; d = $f.d; err = $f.err; err$1 = $f.err$1; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = crc32.NewIEEE(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		d = new decoder.ptr(r, $ifaceNil, _r, 0, 0, 0, color.Palette.nil, 0, 0, 0, arrayType$1.zero(), 0, false, arrayType$2.zero());
		_r$1 = d.checkHeader(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return [$ifaceNil, err];
		}
		/* while (true) { */ case 3:
			/* if (!(!((d.stage === 5)))) { break; } */ if(!(!((d.stage === 5)))) { $s = 4; continue; }
			_r$2 = d.parseChunk(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$1 = _r$2;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				if ($interfaceIsEqual(err$1, io.EOF)) {
					err$1 = io.ErrUnexpectedEOF;
				}
				$s = -1; return [$ifaceNil, err$1];
			}
		/* } */ $s = 3; continue; case 4:
		$s = -1; return [d.img, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decode }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Decode = Decode;
	DecodeConfig = function(r) {
		var _1, _r, _r$1, _r$2, cm, d, err, err$1, paletted, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; cm = $f.cm; d = $f.d; err = $f.err; err$1 = $f.err$1; paletted = $f.paletted; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = crc32.NewIEEE(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		d = new decoder.ptr(r, $ifaceNil, _r, 0, 0, 0, color.Palette.nil, 0, 0, 0, arrayType$1.zero(), 0, false, arrayType$2.zero());
		_r$1 = d.checkHeader(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return [new image.Config.ptr($ifaceNil, 0, 0), err];
		}
		/* while (true) { */ case 3:
			_r$2 = d.parseChunk(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$1 = _r$2;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				if ($interfaceIsEqual(err$1, io.EOF)) {
					err$1 = io.ErrUnexpectedEOF;
				}
				$s = -1; return [new image.Config.ptr($ifaceNil, 0, 0), err$1];
			}
			paletted = cbPaletted(d.cb);
			if ((d.stage === 1) && !paletted) {
				/* break; */ $s = 4; continue;
			}
			if ((d.stage === 2) && paletted) {
				/* break; */ $s = 4; continue;
			}
		/* } */ $s = 3; continue; case 4:
		cm = $ifaceNil;
		_1 = d.cb;
		if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4))) {
			cm = color.GrayModel;
		} else if (_1 === (5)) {
			cm = color.NRGBAModel;
		} else if (_1 === (6)) {
			cm = color.RGBAModel;
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			cm = d.palette;
		} else if (_1 === (11)) {
			cm = color.NRGBAModel;
		} else if (_1 === (12)) {
			cm = color.Gray16Model;
		} else if (_1 === (13)) {
			cm = color.NRGBA64Model;
		} else if (_1 === (14)) {
			cm = color.RGBA64Model;
		} else if (_1 === (15)) {
			cm = color.NRGBA64Model;
		}
		$s = -1; return [new image.Config.ptr(cm, d.width, d.height), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: DecodeConfig }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.cm = cm; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.paletted = paletted; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DecodeConfig = DecodeConfig;
	init = function() {
		image.RegisterFormat("png", "\x89PNG\r\n\x1A\n", Decode, DecodeConfig);
	};
	ptrType$14.methods = [{prop: "parseIHDR", name: "parseIHDR", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parsePLTE", name: "parsePLTE", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parsetRNS", name: "parsetRNS", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "decode", name: "decode", pkg: "image/png", typ: $funcType([], [image.Image, $error], false)}, {prop: "readImagePass", name: "readImagePass", pkg: "image/png", typ: $funcType([io.Reader, $Int, $Bool], [image.Image, $error], false)}, {prop: "mergePassInto", name: "mergePassInto", pkg: "image/png", typ: $funcType([image.Image, image.Image, $Int], [], false)}, {prop: "parseIDAT", name: "parseIDAT", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parseIEND", name: "parseIEND", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parseChunk", name: "parseChunk", pkg: "image/png", typ: $funcType([], [$error], false)}, {prop: "verifyChecksum", name: "verifyChecksum", pkg: "image/png", typ: $funcType([], [$error], false)}, {prop: "checkHeader", name: "checkHeader", pkg: "image/png", typ: $funcType([], [$error], false)}];
	FormatError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnsupportedError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	interlaceScan.init("image/png", [{prop: "xFactor", name: "xFactor", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "yFactor", name: "yFactor", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "xOffset", name: "xOffset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "yOffset", name: "yOffset", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	decoder.init("image/png", [{prop: "r", name: "r", anonymous: false, exported: false, typ: io.Reader, tag: ""}, {prop: "img", name: "img", anonymous: false, exported: false, typ: image.Image, tag: ""}, {prop: "crc", name: "crc", anonymous: false, exported: false, typ: hash.Hash32, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "depth", name: "depth", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "palette", name: "palette", anonymous: false, exported: false, typ: color.Palette, tag: ""}, {prop: "cb", name: "cb", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "stage", name: "stage", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "idatLength", name: "idatLength", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tmp", name: "tmp", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "interlace", name: "interlace", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "useTransparent", name: "useTransparent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "transparent", name: "transparent", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = zlib.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crc32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		interlacing = new sliceType([new interlaceScan.ptr(8, 8, 0, 0), new interlaceScan.ptr(8, 8, 4, 0), new interlaceScan.ptr(4, 8, 0, 4), new interlaceScan.ptr(4, 4, 2, 0), new interlaceScan.ptr(2, 4, 0, 2), new interlaceScan.ptr(2, 2, 1, 0), new interlaceScan.ptr(1, 2, 0, 1)]);
		chunkOrderError = "chunk out of order";
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["log"] = (function() {
	var $pkg = {}, $init, fmt, nosync, io, os, runtime, time, Logger, sliceType, arrayType, ptrType, sliceType$1, ptrType$1, std, New, itoa, Fatal;
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	time = $packages["time"];
	Logger = $pkg.Logger = $newType(0, $kindStruct, "log.Logger", true, "log", true, function(mu_, prefix_, flag_, out_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new nosync.Mutex.ptr(false);
			this.prefix = "";
			this.flag = 0;
			this.out = $ifaceNil;
			this.buf = sliceType.nil;
			return;
		}
		this.mu = mu_;
		this.prefix = prefix_;
		this.flag = flag_;
		this.out = out_;
		this.buf = buf_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 20);
	ptrType = $ptrType(sliceType);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Logger);
	New = function(out, prefix, flag) {
		var flag, out, prefix;
		return new Logger.ptr(new nosync.Mutex.ptr(false), prefix, flag, out, sliceType.nil);
	};
	$pkg.New = New;
	Logger.ptr.prototype.SetOutput = function(w) {
		var l, w, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.out = w;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetOutput = function(w) { return this.$val.SetOutput(w); };
	itoa = function(buf, i, wid) {
		var _q, b, bp, buf, i, q, wid;
		b = arrayType.zero();
		bp = 19;
		while (true) {
			if (!(i >= 10 || wid > 1)) { break; }
			wid = wid - (1) >> 0;
			q = (_q = i / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((bp < 0 || bp >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[bp] = ((((48 + i >> 0) - ($imul(q, 10)) >> 0) << 24 >>> 24)));
			bp = bp - (1) >> 0;
			i = q;
		}
		((bp < 0 || bp >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[bp] = (((48 + i >> 0) << 24 >>> 24)));
		buf.$set($appendSlice(buf.$get(), $subslice(new sliceType(b), bp)));
	};
	Logger.ptr.prototype.formatHeader = function(buf, t, file, line) {
		var _q, _r, _r$1, _tuple, _tuple$1, buf, day, file, hour, i, l, line, min, month, sec, short$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; day = $f.day; file = $f.file; hour = $f.hour; i = $f.i; l = $f.l; line = $f.line; min = $f.min; month = $f.month; sec = $f.sec; short$1 = $f.short$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		buf.$set($appendSlice(buf.$get(), l.prefix));
		/* */ if (!(((l.flag & 7) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((l.flag & 7) === 0))) { */ case 1:
			if (!(((l.flag & 32) === 0))) {
				time.Time.copy(t, $clone(t, time.Time).UTC());
			}
			/* */ if (!(((l.flag & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((l.flag & 1) === 0))) { */ case 3:
				_r = $clone(t, time.Time).Date(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				year = _tuple[0];
				month = _tuple[1];
				day = _tuple[2];
				itoa(buf, year, 4);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, ((month >> 0)), 2);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, day, 2);
				buf.$set($append(buf.$get(), 32));
			/* } */ case 4:
			/* */ if (!(((l.flag & 6) === 0))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(((l.flag & 6) === 0))) { */ case 6:
				_r$1 = $clone(t, time.Time).Clock(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				hour = _tuple$1[0];
				min = _tuple$1[1];
				sec = _tuple$1[2];
				itoa(buf, hour, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, min, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, sec, 2);
				if (!(((l.flag & 4) === 0))) {
					buf.$set($append(buf.$get(), 46));
					itoa(buf, (_q = $clone(t, time.Time).Nanosecond() / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 6);
				}
				buf.$set($append(buf.$get(), 32));
			/* } */ case 7:
		/* } */ case 2:
		if (!(((l.flag & 24) === 0))) {
			if (!(((l.flag & 16) === 0))) {
				short$1 = file;
				i = file.length - 1 >> 0;
				while (true) {
					if (!(i > 0)) { break; }
					if (file.charCodeAt(i) === 47) {
						short$1 = $substring(file, (i + 1 >> 0));
						break;
					}
					i = i - (1) >> 0;
				}
				file = short$1;
			}
			buf.$set($appendSlice(buf.$get(), file));
			buf.$set($append(buf.$get(), 58));
			itoa(buf, line, -1);
			buf.$set($appendSlice(buf.$get(), ": "));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.formatHeader }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.day = day; $f.file = file; $f.hour = hour; $f.i = i; $f.l = l; $f.line = line; $f.min = min; $f.month = month; $f.sec = sec; $f.short$1 = short$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.formatHeader = function(buf, t, file, line) { return this.$val.formatHeader(buf, t, file, line); };
	Logger.ptr.prototype.Output = function(calldepth, s) {
		var _r, _tuple, _tuple$1, calldepth, err, file, l, line, now, ok, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; calldepth = $f.calldepth; err = $f.err; file = $f.file; l = $f.l; line = $f.line; now = $f.now; ok = $f.ok; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		now = $clone(time.Now(), time.Time);
		file = "";
		line = 0;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		if (!(((l.flag & 24) === 0))) {
			l.mu.Unlock();
			ok = false;
			_tuple = runtime.Caller(calldepth);
			file = _tuple[1];
			line = _tuple[2];
			ok = _tuple[3];
			if (!ok) {
				file = "???";
				line = 0;
			}
			l.mu.Lock();
		}
		l.buf = $subslice(l.buf, 0, 0);
		$r = l.formatHeader((l.$ptr_buf || (l.$ptr_buf = new ptrType(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, l))), $clone(now, time.Time), file, line); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.buf = $appendSlice(l.buf, s);
		if ((s.length === 0) || !((s.charCodeAt((s.length - 1 >> 0)) === 10))) {
			l.buf = $append(l.buf, 10);
		}
		_r = l.out.Write(l.buf); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		err = _tuple$1[1];
		$s = -1; return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Output }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.calldepth = calldepth; $f.err = err; $f.file = file; $f.l = l; $f.line = line; $f.now = now; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Logger.prototype.Output = function(calldepth, s) { return this.$val.Output(calldepth, s); };
	Logger.ptr.prototype.Printf = function(format, v) {
		var _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Printf }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Printf = function(format, v) { return this.$val.Printf(format, v); };
	Logger.ptr.prototype.Print = function(v) {
		var _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Print }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Print = function(v) { return this.$val.Print(v); };
	Logger.ptr.prototype.Println = function(v) {
		var _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Println }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Println = function(v) { return this.$val.Println(v); };
	Logger.ptr.prototype.Fatal = function(v) {
		var _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatal }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatal = function(v) { return this.$val.Fatal(v); };
	Logger.ptr.prototype.Fatalf = function(format, v) {
		var _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalf }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalf = function(format, v) { return this.$val.Fatalf(format, v); };
	Logger.ptr.prototype.Fatalln = function(v) {
		var _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalln }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalln = function(v) { return this.$val.Fatalln(v); };
	Logger.ptr.prototype.Panic = function(v) {
		var _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panic }; } $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panic = function(v) { return this.$val.Panic(v); };
	Logger.ptr.prototype.Panicf = function(format, v) {
		var _r, _r$1, format, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicf }; } $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicf = function(format, v) { return this.$val.Panicf(format, v); };
	Logger.ptr.prototype.Panicln = function(v) {
		var _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicln }; } $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicln = function(v) { return this.$val.Panicln(v); };
	Logger.ptr.prototype.Flags = function() {
		var l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.flag;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Flags = function() { return this.$val.Flags(); };
	Logger.ptr.prototype.SetFlags = function(flag) {
		var flag, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.flag = flag;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetFlags = function(flag) { return this.$val.SetFlags(flag); };
	Logger.ptr.prototype.Prefix = function() {
		var l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.prefix;
		/* */ } catch(err) { $err = err; return ""; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Prefix = function() { return this.$val.Prefix(); };
	Logger.ptr.prototype.SetPrefix = function(prefix) {
		var l, prefix, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.prefix = prefix;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetPrefix = function(prefix) { return this.$val.SetPrefix(prefix); };
	Fatal = function(v) {
		var _arg, _r, _r$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fatal }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fatal = Fatal;
	ptrType$1.methods = [{prop: "SetOutput", name: "SetOutput", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "formatHeader", name: "formatHeader", pkg: "log", typ: $funcType([ptrType, time.Time, $String, $Int], [], false)}, {prop: "Output", name: "Output", pkg: "", typ: $funcType([$Int, $String], [$error], false)}, {prop: "Printf", name: "Printf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Print", name: "Print", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Println", name: "Println", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatal", name: "Fatal", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatalf", name: "Fatalf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Fatalln", name: "Fatalln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panic", name: "Panic", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panicf", name: "Panicf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Panicln", name: "Panicln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Flags", name: "Flags", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetFlags", name: "SetFlags", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetPrefix", name: "SetPrefix", pkg: "", typ: $funcType([$String], [], false)}];
	Logger.init("log", [{prop: "mu", name: "mu", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "prefix", name: "prefix", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "flag", name: "flag", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "out", name: "out", anonymous: false, exported: false, typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		std = New(os.Stderr, "", 3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/lei-cao/programming/code/algoman/pkg/ui"] = (function() {
	var $pkg = {}, $init, bytes, truetype, ebiten, inpututil, text, defaults, images, font, gomono, image, color, png, log, strings, imageType, Button, CheckBox, ToggleButton, ptrType, sliceType, ptrType$1, ptrType$2, sliceType$1, ptrType$4, funcType, ptrType$5, funcType$1, ptrType$9, funcType$4, uiImage, uiFont, uiFontMHeight, imageSrcRects, cbImageSrcRects, playImg, pauseImg, tbImageSrcRects, init, drawNinePatches, NewButton, init$1, NewToggleButton;
	bytes = $packages["bytes"];
	truetype = $packages["github.com/golang/freetype/truetype"];
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	inpututil = $packages["github.com/hajimehoshi/ebiten/inpututil"];
	text = $packages["github.com/hajimehoshi/ebiten/text"];
	defaults = $packages["github.com/lei-cao/programming/code/algoman/pkg/defaults"];
	images = $packages["github.com/lei-cao/programming/code/algoman/resources/images"];
	font = $packages["golang.org/x/image/font"];
	gomono = $packages["golang.org/x/image/font/gofont/gomono"];
	image = $packages["image"];
	color = $packages["image/color"];
	png = $packages["image/png"];
	log = $packages["log"];
	strings = $packages["strings"];
	imageType = $pkg.imageType = $newType(4, $kindInt, "ui.imageType", true, "github.com/lei-cao/programming/code/algoman/pkg/ui", false, null);
	Button = $pkg.Button = $newType(0, $kindStruct, "ui.Button", true, "github.com/lei-cao/programming/code/algoman/pkg/ui", true, function(Rect_, Text_, mouseDown_, onPressed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Rect = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
			this.Text = "";
			this.mouseDown = false;
			this.onPressed = $throwNilPointerError;
			return;
		}
		this.Rect = Rect_;
		this.Text = Text_;
		this.mouseDown = mouseDown_;
		this.onPressed = onPressed_;
	});
	CheckBox = $pkg.CheckBox = $newType(0, $kindStruct, "ui.CheckBox", true, "github.com/lei-cao/programming/code/algoman/pkg/ui", true, function(X_, Y_, Text_, checked_, value_, mouseDown_, onCheckChanged_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			this.Text = "";
			this.checked = false;
			this.value = "";
			this.mouseDown = false;
			this.onCheckChanged = $throwNilPointerError;
			return;
		}
		this.X = X_;
		this.Y = Y_;
		this.Text = Text_;
		this.checked = checked_;
		this.value = value_;
		this.mouseDown = mouseDown_;
		this.onCheckChanged = onCheckChanged_;
	});
	ToggleButton = $pkg.ToggleButton = $newType(0, $kindStruct, "ui.ToggleButton", true, "github.com/lei-cao/programming/code/algoman/pkg/ui", true, function(Rect_, TextOn_, TextOff_, On_, mouseDown_, onPressed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Rect = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
			this.TextOn = "";
			this.TextOff = "";
			this.On = false;
			this.mouseDown = false;
			this.onPressed = $throwNilPointerError;
			return;
		}
		this.Rect = Rect_;
		this.TextOn = TextOn_;
		this.TextOff = TextOff_;
		this.On = On_;
		this.mouseDown = mouseDown_;
		this.onPressed = onPressed_;
	});
	ptrType = $ptrType(ebiten.Image);
	sliceType = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(image.Rectangle);
	ptrType$2 = $ptrType($packages["github.com/hajimehoshi/ebiten/internal/affine"].ColorM);
	sliceType$1 = $sliceType(ebiten.ImagePart);
	ptrType$4 = $ptrType(Button);
	funcType = $funcType([ptrType$4], [], false);
	ptrType$5 = $ptrType(CheckBox);
	funcType$1 = $funcType([ptrType$5], [], false);
	ptrType$9 = $ptrType(ToggleButton);
	funcType$4 = $funcType([ptrType$9], [], false);
	init = function() {
		var _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, _tuple$3, b, err, img, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; b = $f.b; err = $f.err; img = $f.img; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = image.Decode(bytes.NewReader(images.UI_png)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		img = _tuple[0];
		err = _tuple[2];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$1 = ebiten.NewImageFromImage(img, 0); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		uiImage = _tuple$1[0];
		_r$2 = truetype.Parse(gomono.TTF); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		tt = _tuple$2[0];
		err = _tuple$2[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:
			$r = log.Fatal(new sliceType([err])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		uiFont = truetype.NewFace(tt, new truetype.Options.ptr((($imul(12, defaults.DeviceScale))), 72, 2, 0, 0, 0));
		_r$3 = uiFont.GlyphBounds(77); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3;
		b = $clone(_tuple$3[0], $packages["golang.org/x/image/math/fixed"].Rectangle26_6);
		uiFontMHeight = new $packages["golang.org/x/image/math/fixed"].Int26_6(((b.Max.Y - b.Min.Y >> 0))).Ceil();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.b = b; $f.err = err; $f.img = img; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	drawNinePatches = function(dst, dstRect, srcRect) {
		var _1, _2, _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, _r, dh, dst, dstH, dstRect, dstW, dstX, dstY, dw, dx, dy, i, j, op, r, sh, srcH, srcRect, srcW, srcX, srcY, sw, sx, sy, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _q = $f._q; _q$1 = $f._q$1; _q$10 = $f._q$10; _q$11 = $f._q$11; _q$12 = $f._q$12; _q$13 = $f._q$13; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _q$6 = $f._q$6; _q$7 = $f._q$7; _q$8 = $f._q$8; _q$9 = $f._q$9; _r = $f._r; dh = $f.dh; dst = $f.dst; dstH = $f.dstH; dstRect = $f.dstRect; dstW = $f.dstW; dstX = $f.dstX; dstY = $f.dstY; dw = $f.dw; dx = $f.dx; dy = $f.dy; i = $f.i; j = $f.j; op = $f.op; r = $f.r; sh = $f.sh; srcH = $f.srcH; srcRect = $f.srcRect; srcW = $f.srcW; srcX = $f.srcX; srcY = $f.srcY; sw = $f.sw; sx = $f.sx; sy = $f.sy; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		srcX = srcRect.Min.X;
		srcY = srcRect.Min.Y;
		srcW = $clone(srcRect, image.Rectangle).Dx();
		srcH = $clone(srcRect, image.Rectangle).Dy();
		dstX = dstRect.Min.X;
		dstY = dstRect.Min.Y;
		dstW = $clone(dstRect, image.Rectangle).Dx();
		dstH = $clone(dstRect, image.Rectangle).Dy();
		op = new ebiten.DrawImageOptions.ptr(ptrType$1.nil, new ebiten.GeoM.ptr(0, 0, 0, 0, 0, 0), new ebiten.ColorM.ptr(ptrType$2.nil), 0, 0, $ifaceNil, sliceType$1.nil);
		j = 0;
		/* while (true) { */ case 1:
			/* if (!(j < 3)) { break; } */ if(!(j < 3)) { $s = 2; continue; }
			i = 0;
			/* while (true) { */ case 3:
				/* if (!(i < 3)) { break; } */ if(!(i < 3)) { $s = 4; continue; }
				r = [r];
				op.GeoM.Reset();
				sx = srcX;
				sy = srcY;
				sw = (_q = srcW / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				sh = (_q$1 = srcH / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
				dx = 0;
				dy = 0;
				dw = sw;
				dh = sh;
				_1 = i;
				if (_1 === (1)) {
					sx = srcX + (_q$2 = srcW / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					sw = (_q$3 = srcW / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
					dx = (_q$4 = srcW / 4, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
					dw = dstW - (_q$5 = ($imul(2, srcW)) / 4, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				} else if (_1 === (2)) {
					sx = srcX + (_q$6 = ($imul(3, srcW)) / 4, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					dx = dstW - (_q$7 = srcW / 4, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				}
				_2 = j;
				if (_2 === (1)) {
					sy = srcY + (_q$8 = srcH / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					sh = (_q$9 = srcH / 2, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero"));
					dy = (_q$10 = srcH / 4, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero"));
					dh = dstH - (_q$11 = ($imul(2, srcH)) / 4, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				} else if (_2 === (2)) {
					sy = srcY + (_q$12 = ($imul(3, srcH)) / 4, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					dy = dstH - (_q$13 = srcH / 4, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				}
				op.GeoM.Scale((dw) / (sw), (dh) / (sh));
				op.GeoM.Translate((dx), (dy));
				op.GeoM.Translate((dstX), (dstY));
				r[0] = $clone(image.Rect(sx, sy, sx + sw >> 0, sy + sh >> 0), image.Rectangle);
				op.SourceRect = r[0];
				_r = dst.DrawImage(uiImage, op); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			j = j + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawNinePatches }; } $f._1 = _1; $f._2 = _2; $f._q = _q; $f._q$1 = _q$1; $f._q$10 = _q$10; $f._q$11 = _q$11; $f._q$12 = _q$12; $f._q$13 = _q$13; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._q$6 = _q$6; $f._q$7 = _q$7; $f._q$8 = _q$8; $f._q$9 = _q$9; $f._r = _r; $f.dh = dh; $f.dst = dst; $f.dstH = dstH; $f.dstRect = dstRect; $f.dstW = dstW; $f.dstX = dstX; $f.dstY = dstY; $f.dw = dw; $f.dx = dx; $f.dy = dy; $f.i = i; $f.j = j; $f.op = op; $f.r = r; $f.sh = sh; $f.srcH = srcH; $f.srcRect = srcRect; $f.srcW = srcW; $f.srcX = srcX; $f.srcY = srcY; $f.sw = sw; $f.sx = sx; $f.sy = sy; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewButton = function(rect, text$1) {
		var _r, _tuple, bounds, btn, rect, text$1, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; bounds = $f.bounds; btn = $f.btn; rect = $f.rect; text$1 = $f.text$1; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = font.BoundString(uiFont, text$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bounds = $clone(_tuple[0], $packages["golang.org/x/image/math/fixed"].Rectangle26_6);
		w = new $packages["golang.org/x/image/math/fixed"].Int26_6(((bounds.Max.X - bounds.Min.X >> 0))).Ceil();
		if (w < defaults.ButtonMinWidth) {
			w = defaults.ButtonMinWidth;
		}
		rect.Max.X = (rect.Min.X + w >> 0) + defaults.ButtonPadding >> 0;
		btn = new Button.ptr($clone(rect, image.Rectangle), text$1, false, $throwNilPointerError);
		$s = -1; return btn;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewButton }; } $f._r = _r; $f._tuple = _tuple; $f.bounds = bounds; $f.btn = btn; $f.rect = rect; $f.text$1 = text$1; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewButton = NewButton;
	Button.ptr.prototype.Update = function() {
		var _i, _r, _r$1, _r$2, _r$3, _ref, _tuple, _tuple$1, b, t, x, x$1, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; t = $f.t; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = ebiten.TouchIDs(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r.$length > 0) { $s = 1; continue; }
		/* */ if (ebiten.IsMouseButtonPressed(0)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r.$length > 0) { */ case 1:
			_r$1 = ebiten.TouchIDs(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_ref = _r$1;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
				t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$2 = ebiten.TouchPosition(t); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				x = _tuple[0];
				y = _tuple[1];
				if (b.Rect.Min.X <= x && x < b.Rect.Max.X && b.Rect.Min.Y <= y && y < b.Rect.Max.Y) {
					b.mouseDown = true;
				} else {
					b.mouseDown = false;
				}
				_i++;
			/* } */ $s = 7; continue; case 8:
			$s = 4; continue;
		/* } else if (ebiten.IsMouseButtonPressed(0)) { */ case 2:
			_r$3 = ebiten.CursorPosition(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			x$1 = _tuple$1[0];
			y$1 = _tuple$1[1];
			if (b.Rect.Min.X <= x$1 && x$1 < b.Rect.Max.X && b.Rect.Min.Y <= y$1 && y$1 < b.Rect.Max.Y) {
				b.mouseDown = true;
			} else {
				b.mouseDown = false;
			}
			$s = 4; continue;
		/* } else { */ case 3:
			/* */ if (b.mouseDown) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (b.mouseDown) { */ case 11:
				/* */ if (!(b.onPressed === $throwNilPointerError)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!(b.onPressed === $throwNilPointerError)) { */ case 13:
					$r = b.onPressed(b); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
			/* } */ case 12:
			b.mouseDown = false;
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Button.ptr.prototype.Update }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Button.prototype.Update = function() { return this.$val.Update(); };
	Button.ptr.prototype.Draw = function(dst) {
		var _entry, _q, _q$1, _r, _tuple, b, bounds, dst, t, w, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _tuple = $f._tuple; b = $f.b; bounds = $f.bounds; dst = $f.dst; t = $f.t; w = $f.w; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		t = 0;
		if (b.mouseDown) {
			t = 1;
		}
		$r = drawNinePatches(dst, $clone(b.Rect, image.Rectangle), $clone((_entry = imageSrcRects[imageType.keyFor(t)], _entry !== undefined ? _entry.v : new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0))), image.Rectangle)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = font.BoundString(uiFont, b.Text); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bounds = $clone(_tuple[0], $packages["golang.org/x/image/math/fixed"].Rectangle26_6);
		w = new $packages["golang.org/x/image/math/fixed"].Int26_6(((bounds.Max.X - bounds.Min.X >> 0))).Ceil();
		x = b.Rect.Min.X + (_q = (($clone(b.Rect, image.Rectangle).Dx() - w >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		y = b.Rect.Max.Y - (_q$1 = (($clone(b.Rect, image.Rectangle).Dy() - uiFontMHeight >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		$r = text.Draw(dst, b.Text, uiFont, x, y, (x$1 = color.Black, new x$1.constructor.elem(x$1))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Button.ptr.prototype.Draw }; } $f._entry = _entry; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.bounds = bounds; $f.dst = dst; $f.t = t; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Button.prototype.Draw = function(dst) { return this.$val.Draw(dst); };
	Button.ptr.prototype.SetOnPressed = function(f) {
		var b, f;
		b = this;
		b.onPressed = f;
	};
	Button.prototype.SetOnPressed = function(f) { return this.$val.SetOnPressed(f); };
	CheckBox.ptr.prototype.width = function() {
		var _r, _tuple, b, c, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; c = $f.c; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = font.BoundString(uiFont, c.Text); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		b = $clone(_tuple[0], $packages["golang.org/x/image/math/fixed"].Rectangle26_6);
		w = new $packages["golang.org/x/image/math/fixed"].Int26_6(((b.Max.X - b.Min.X >> 0))).Ceil();
		$s = -1; return 44 + w >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CheckBox.ptr.prototype.width }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.c = c; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	CheckBox.prototype.width = function() { return this.$val.width(); };
	CheckBox.ptr.prototype.Update = function() {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _tuple, _tuple$1, _v, _v$1, c, t, x, x$1, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; c = $f.c; t = $f.t; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = ebiten.TouchIDs(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r.$length > 0) { $s = 1; continue; }
		/* */ if (ebiten.IsMouseButtonPressed(0)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r.$length > 0) { */ case 1:
			_r$1 = ebiten.TouchIDs(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_ref = _r$1;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
				t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$2 = ebiten.TouchPosition(t); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				x = _tuple[0];
				y = _tuple[1];
				if (!(c.X <= x)) { _v = false; $s = 13; continue s; }
				_r$3 = c.width(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v = x < (c.X + _r$3 >> 0); case 13:
				/* */ if (_v && c.Y <= y && y < (c.Y + 36 >> 0)) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v && c.Y <= y && y < (c.Y + 36 >> 0)) { */ case 10:
					c.mouseDown = true;
					$s = 12; continue;
				/* } else { */ case 11:
					c.mouseDown = false;
				/* } */ case 12:
				_i++;
			/* } */ $s = 7; continue; case 8:
			$s = 4; continue;
		/* } else if (ebiten.IsMouseButtonPressed(0)) { */ case 2:
			_r$4 = ebiten.CursorPosition(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			x$1 = _tuple$1[0];
			y$1 = _tuple$1[1];
			if (!(c.X <= x$1)) { _v$1 = false; $s = 19; continue s; }
			_r$5 = c.width(); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_v$1 = x$1 < (c.X + _r$5 >> 0); case 19:
			/* */ if (_v$1 && c.Y <= y$1 && y$1 < (c.Y + 36 >> 0)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_v$1 && c.Y <= y$1 && y$1 < (c.Y + 36 >> 0)) { */ case 16:
				c.mouseDown = true;
				$s = 18; continue;
			/* } else { */ case 17:
				c.mouseDown = false;
			/* } */ case 18:
			$s = 4; continue;
		/* } else { */ case 3:
			/* */ if (c.mouseDown) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (c.mouseDown) { */ case 21:
				c.checked = !c.checked;
				/* */ if (!(c.onCheckChanged === $throwNilPointerError)) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (!(c.onCheckChanged === $throwNilPointerError)) { */ case 23:
					$r = c.onCheckChanged(c); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 24:
			/* } */ case 22:
			c.mouseDown = false;
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CheckBox.ptr.prototype.Update }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f.c = c; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	CheckBox.prototype.Update = function() { return this.$val.Update(); };
	CheckBox.ptr.prototype.Draw = function(dst) {
		var _entry, _entry$1, _q, c, dst, r, t, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _q = $f._q; c = $f.c; dst = $f.dst; r = $f.r; t = $f.t; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		t = 0;
		if (c.mouseDown) {
			t = 1;
		}
		r = $clone(image.Rect(c.X, c.Y, c.X + 36 >> 0, c.Y + 36 >> 0), image.Rectangle);
		$r = drawNinePatches(dst, $clone(r, image.Rectangle), $clone((_entry = cbImageSrcRects[imageType.keyFor(t)], _entry !== undefined ? _entry.v : new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0))), image.Rectangle)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (c.checked) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (c.checked) { */ case 2:
			$r = drawNinePatches(dst, $clone(r, image.Rectangle), $clone((_entry$1 = cbImageSrcRects[imageType.keyFor(2)], _entry$1 !== undefined ? _entry$1.v : new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0))), image.Rectangle)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		x = (c.X + 36 >> 0) + 8 >> 0;
		y = ((c.Y + 32 >> 0)) - (_q = ((32 - uiFontMHeight >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		$r = text.Draw(dst, c.Text, uiFont, x, y, (x$1 = defaults.BarColor, new x$1.constructor.elem(x$1))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CheckBox.ptr.prototype.Draw }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._q = _q; $f.c = c; $f.dst = dst; $f.r = r; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	CheckBox.prototype.Draw = function(dst) { return this.$val.Draw(dst); };
	CheckBox.ptr.prototype.Checked = function() {
		var c;
		c = this;
		return c.checked;
	};
	CheckBox.prototype.Checked = function() { return this.$val.Checked(); };
	CheckBox.ptr.prototype.Check = function() {
		var c;
		c = this;
		c.checked = true;
	};
	CheckBox.prototype.Check = function() { return this.$val.Check(); };
	CheckBox.ptr.prototype.UnCheck = function() {
		var c;
		c = this;
		c.checked = false;
	};
	CheckBox.prototype.UnCheck = function() { return this.$val.UnCheck(); };
	CheckBox.ptr.prototype.Value = function() {
		var c;
		c = this;
		return c.value;
	};
	CheckBox.prototype.Value = function() { return this.$val.Value(); };
	CheckBox.ptr.prototype.SetValue = function(v) {
		var c, v;
		c = this;
		c.value = v;
	};
	CheckBox.prototype.SetValue = function(v) { return this.$val.SetValue(v); };
	CheckBox.ptr.prototype.SetOnCheckChanged = function(f) {
		var c, f;
		c = this;
		c.onCheckChanged = f;
	};
	CheckBox.prototype.SetOnCheckChanged = function(f) { return this.$val.SetOnCheckChanged(f); };
	init$1 = function() {
		var _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, _tuple$3, err, pause, play, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; pause = $f.pause; play = $f.play; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = image.Decode(bytes.NewReader(images.PLAY_ON_png)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		play = _tuple[0];
		err = _tuple[2];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$1 = ebiten.NewImageFromImage(play, 0); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		playImg = _tuple$1[0];
		_r$2 = image.Decode(bytes.NewReader(images.PAUSE_ON_png)); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		pause = _tuple$2[0];
		err = _tuple$2[2];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:
			$r = log.Fatal(new sliceType([err])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		_r$3 = ebiten.NewImageFromImage(pause, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3;
		pauseImg = _tuple$3[0];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init$1 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.pause = pause; $f.play = play; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewToggleButton = function(rect, textOn, textOff, isOn) {
		var _r, _tuple, bounds, btn, isOn, rect, text$1, textOff, textOn, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; bounds = $f.bounds; btn = $f.btn; isOn = $f.isOn; rect = $f.rect; text$1 = $f.text$1; textOff = $f.textOff; textOn = $f.textOn; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text$1 = textOn;
		if (textOff.length > textOn.length) {
			text$1 = textOff;
		}
		_r = font.BoundString(uiFont, text$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bounds = $clone(_tuple[0], $packages["golang.org/x/image/math/fixed"].Rectangle26_6);
		w = new $packages["golang.org/x/image/math/fixed"].Int26_6(((bounds.Max.X - bounds.Min.X >> 0))).Ceil();
		rect.Max.X = (rect.Min.X + w >> 0) + defaults.ButtonPadding >> 0;
		btn = new ToggleButton.ptr($clone(rect, image.Rectangle), textOn, textOff, isOn, false, $throwNilPointerError);
		$s = -1; return btn;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewToggleButton }; } $f._r = _r; $f._tuple = _tuple; $f.bounds = bounds; $f.btn = btn; $f.isOn = isOn; $f.rect = rect; $f.text$1 = text$1; $f.textOff = textOff; $f.textOn = textOn; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewToggleButton = NewToggleButton;
	ToggleButton.ptr.prototype.Update = function() {
		var _i, _r, _r$1, _r$2, _r$3, _ref, _tuple, _tuple$1, b, t, x, x$1, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; t = $f.t; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = ebiten.TouchIDs(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r.$length > 0) { $s = 1; continue; }
		/* */ if (ebiten.IsMouseButtonPressed(0)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r.$length > 0) { */ case 1:
			_r$1 = ebiten.TouchIDs(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_ref = _r$1;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
				t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$2 = ebiten.TouchPosition(t); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				x = _tuple[0];
				y = _tuple[1];
				if (b.Rect.Min.X <= x && x < b.Rect.Max.X && b.Rect.Min.Y <= y && y < b.Rect.Max.Y) {
					b.mouseDown = true;
				} else {
					b.mouseDown = false;
				}
				_i++;
			/* } */ $s = 7; continue; case 8:
			$s = 4; continue;
		/* } else if (ebiten.IsMouseButtonPressed(0)) { */ case 2:
			_r$3 = ebiten.CursorPosition(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			x$1 = _tuple$1[0];
			y$1 = _tuple$1[1];
			if (b.Rect.Min.X <= x$1 && x$1 < b.Rect.Max.X && b.Rect.Min.Y <= y$1 && y$1 < b.Rect.Max.Y) {
				b.mouseDown = true;
			} else {
				b.mouseDown = false;
			}
			$s = 4; continue;
		/* } else { */ case 3:
			/* */ if (b.mouseDown) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (b.mouseDown) { */ case 11:
				/* */ if (!(b.onPressed === $throwNilPointerError)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!(b.onPressed === $throwNilPointerError)) { */ case 13:
					b.On = !b.On;
					$r = b.onPressed(b); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
			/* } */ case 12:
			b.mouseDown = false;
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToggleButton.ptr.prototype.Update }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ToggleButton.prototype.Update = function() { return this.$val.Update(); };
	ToggleButton.ptr.prototype.Draw = function(dst) {
		var _entry, _q, _q$1, _r, _tuple, b, bounds, currentText, dst, t, w, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _tuple = $f._tuple; b = $f.b; bounds = $f.bounds; currentText = $f.currentText; dst = $f.dst; t = $f.t; w = $f.w; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		t = 0;
		if (b.mouseDown) {
			t = 1;
		}
		$r = drawNinePatches(dst, $clone(b.Rect, image.Rectangle), $clone((_entry = imageSrcRects[imageType.keyFor(t)], _entry !== undefined ? _entry.v : new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0))), image.Rectangle)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		currentText = "";
		if (b.On) {
			currentText = b.TextOn;
		} else {
			currentText = b.TextOff;
		}
		_r = font.BoundString(uiFont, currentText); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bounds = $clone(_tuple[0], $packages["golang.org/x/image/math/fixed"].Rectangle26_6);
		w = new $packages["golang.org/x/image/math/fixed"].Int26_6(((bounds.Max.X - bounds.Min.X >> 0))).Ceil();
		x = b.Rect.Min.X + (_q = (($clone(b.Rect, image.Rectangle).Dx() - w >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		y = b.Rect.Max.Y - (_q$1 = (($clone(b.Rect, image.Rectangle).Dy() - uiFontMHeight >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		$r = text.Draw(dst, currentText, uiFont, x, y, (x$1 = color.Black, new x$1.constructor.elem(x$1))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToggleButton.ptr.prototype.Draw }; } $f._entry = _entry; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.bounds = bounds; $f.currentText = currentText; $f.dst = dst; $f.t = t; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	ToggleButton.prototype.Draw = function(dst) { return this.$val.Draw(dst); };
	ToggleButton.ptr.prototype.SetOnPressed = function(f) {
		var b, f;
		b = this;
		b.onPressed = f;
	};
	ToggleButton.prototype.SetOnPressed = function(f) { return this.$val.SetOnPressed(f); };
	ptrType$4.methods = [{prop: "Update", name: "Update", pkg: "", typ: $funcType([], [], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "SetOnPressed", name: "SetOnPressed", pkg: "", typ: $funcType([funcType], [], false)}];
	ptrType$5.methods = [{prop: "width", name: "width", pkg: "github.com/lei-cao/programming/code/algoman/pkg/ui", typ: $funcType([], [$Int], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([], [], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "Checked", name: "Checked", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Check", name: "Check", pkg: "", typ: $funcType([], [], false)}, {prop: "UnCheck", name: "UnCheck", pkg: "", typ: $funcType([], [], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetValue", name: "SetValue", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetOnCheckChanged", name: "SetOnCheckChanged", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$9.methods = [{prop: "Update", name: "Update", pkg: "", typ: $funcType([], [], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "SetOnPressed", name: "SetOnPressed", pkg: "", typ: $funcType([funcType$4], [], false)}];
	Button.init("github.com/lei-cao/programming/code/algoman/pkg/ui", [{prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: image.Rectangle, tag: ""}, {prop: "Text", name: "Text", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "mouseDown", name: "mouseDown", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "onPressed", name: "onPressed", anonymous: false, exported: false, typ: funcType, tag: ""}]);
	CheckBox.init("github.com/lei-cao/programming/code/algoman/pkg/ui", [{prop: "X", name: "X", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Text", name: "Text", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "checked", name: "checked", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "value", name: "value", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "mouseDown", name: "mouseDown", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "onCheckChanged", name: "onCheckChanged", anonymous: false, exported: false, typ: funcType$1, tag: ""}]);
	ToggleButton.init("github.com/lei-cao/programming/code/algoman/pkg/ui", [{prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: image.Rectangle, tag: ""}, {prop: "TextOn", name: "TextOn", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "TextOff", name: "TextOff", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "On", name: "On", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "mouseDown", name: "mouseDown", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "onPressed", name: "onPressed", anonymous: false, exported: false, typ: funcType$4, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = truetype.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ebiten.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = inpututil.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = text.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = defaults.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = images.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = font.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gomono.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = png.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		uiImage = ptrType.nil;
		uiFont = $ifaceNil;
		uiFontMHeight = 0;
		playImg = ptrType.nil;
		pauseImg = ptrType.nil;
		imageSrcRects = $makeMap(imageType.keyFor, [{ k: 0, v: $clone(image.Rect(0, 0, 16, 16), image.Rectangle) }, { k: 1, v: $clone(image.Rect(16, 0, 32, 16), image.Rectangle) }]);
		cbImageSrcRects = $makeMap(imageType.keyFor, [{ k: 0, v: $clone(image.Rect(0, 32, 16, 48), image.Rectangle) }, { k: 1, v: $clone(image.Rect(16, 32, 32, 48), image.Rectangle) }, { k: 2, v: $clone(image.Rect(32, 32, 48, 48), image.Rectangle) }]);
		tbImageSrcRects = $makeMap(imageType.keyFor, [{ k: 0, v: $clone(image.Rect(0, 16, 16, 32), image.Rectangle) }, { k: 1, v: $clone(image.Rect(16, 16, 24, 32), image.Rectangle) }, { k: 2, v: $clone(image.Rect(24, 16, 32, 32), image.Rectangle) }]);
		$r = init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = init$1(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, $init, nosync, math, Source, Source64, Rand, lockedSource, rngSource, arrayType, ptrType, ptrType$1, sliceType, ptrType$2, ptrType$3, funcType, sliceType$1, ptrType$5, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, read, Seed, Shuffle, seedrand;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	math = $packages["math"];
	Source = $pkg.Source = $newType(8, $kindInterface, "rand.Source", true, "math/rand", true, null);
	Source64 = $pkg.Source64 = $newType(8, $kindInterface, "rand.Source64", true, "math/rand", true, null);
	Rand = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", true, "math/rand", true, function(src_, s64_, readVal_, readPos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.src = $ifaceNil;
			this.s64 = $ifaceNil;
			this.readVal = new $Int64(0, 0);
			this.readPos = 0;
			return;
		}
		this.src = src_;
		this.s64 = s64_;
		this.readVal = readVal_;
		this.readPos = readPos_;
	});
	lockedSource = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", true, "math/rand", false, function(lk_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lk = new nosync.Mutex.ptr(false);
			this.src = $ifaceNil;
			return;
		}
		this.lk = lk_;
		this.src = src_;
	});
	rngSource = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", true, "math/rand", false, function(tap_, feed_, vec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tap = 0;
			this.feed = 0;
			this.vec = arrayType.zero();
			return;
		}
		this.tap = tap_;
		this.feed = feed_;
		this.vec = vec_;
	});
	arrayType = $arrayType($Int64, 607);
	ptrType = $ptrType(lockedSource);
	ptrType$1 = $ptrType($Int8);
	sliceType = $sliceType($Int);
	ptrType$2 = $ptrType($Int64);
	ptrType$3 = $ptrType(Rand);
	funcType = $funcType([$Int, $Int], [], false);
	sliceType$1 = $sliceType($Uint8);
	ptrType$5 = $ptrType(rngSource);
	Rand.ptr.prototype.ExpFloat64 = function() {
		var _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			i = (j & 255) >>> 0;
			x = (j) * (((i < 0 || i >= we.length) ? ($throwRuntimeError("index out of range"), undefined) : we[i]));
			if (j < ((i < 0 || i >= ke.length) ? ($throwRuntimeError("index out of range"), undefined) : ke[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				_r$1 = r.Float64(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = math.Log(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return 7.69711747013105 - _r$2;
			/* } */ case 5:
			_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { */ case 8:
				$s = -1; return x;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.ExpFloat64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	absInt32 = function(i) {
		var i;
		if (i < 0) {
			return ((-i >>> 0));
		}
		return ((i >>> 0));
	};
	Rand.ptr.prototype.NormFloat64 = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = ((_r >> 0));
			i = j & 127;
			x = (j) * (((i < 0 || i >= wn.length) ? ($throwRuntimeError("index out of range"), undefined) : wn[i]));
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? ($throwRuntimeError("index out of range"), undefined) : kn[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				/* while (true) { */ case 6:
					_r$1 = r.Float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = math.Log(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					x = -_r$2 * 0.29047645161474317;
					_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = math.Log(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					y = -_r$4;
					if (y + y >= x * x) {
						/* break; */ $s = 7; continue;
					}
				/* } */ $s = 6; continue; case 7:
				if (j > 0) {
					$s = -1; return 3.442619855899 + x;
				}
				$s = -1; return -3.442619855899 - x;
			/* } */ case 5:
			_r$5 = r.Float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { */ case 12:
				$s = -1; return x;
			/* } */ case 13:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.NormFloat64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	NewSource = function(seed) {
		var rng, seed;
		rng = new rngSource.ptr(0, 0, arrayType.zero());
		rng.Seed(seed);
		return rng;
	};
	$pkg.NewSource = NewSource;
	New = function(src) {
		var _tuple, s64, src;
		_tuple = $assertType(src, Source64, true);
		s64 = _tuple[0];
		return new Rand.ptr(src, s64, new $Int64(0, 0), 0);
	};
	$pkg.New = New;
	Rand.ptr.prototype.Seed = function(seed) {
		var _tuple, lk, ok, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; lk = $f.lk; ok = $f.ok; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			$r = lk.seedPos(seed, (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		$r = r.src.Seed(seed); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.readPos = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Seed }; } $f._tuple = _tuple; $f.lk = lk; $f.ok = ok; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.ptr.prototype.Int63 = function() {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63 }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.ptr.prototype.Uint32 = function() {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($shiftRightInt64(_r, 31).$low >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint32 }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.ptr.prototype.Uint64 = function() {
		var _r, _r$1, _r$2, r, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (!($interfaceIsEqual(r.s64, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(r.s64, $ifaceNil))) { */ case 1:
			_r = r.s64.Uint64(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = r.Int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return (x = $shiftRightUint64(((x$1 = _r$1, new $Uint64(x$1.$high, x$1.$low))), 31), x$2 = $shiftLeft64(((x$3 = _r$2, new $Uint64(x$3.$high, x$3.$low))), 32), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Rand.ptr.prototype.Int31 = function() {
		var _r, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (((x = $shiftRightInt64(_r, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31 }; } $f._r = _r; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.ptr.prototype.Int = function() {
		var _r, r, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u = ((_r.$low >>> 0));
		$s = -1; return ((((u << 1 >>> 0) >>> 1 >>> 0) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int }; } $f._r = _r; $f.r = r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.ptr.prototype.Int63n = function(n) {
		var _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; max = $f.max; n = $f.n; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		/* */ if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { */ case 1:
			_r = r.Int63(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (x$2 = _r, x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		/* } */ case 2:
		max = ((x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), (new $Uint64(n.$high, n.$low)), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low)));
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		/* while (true) { */ case 5:
			/* if (!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { break; } */ if(!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { $s = 6; continue; }
			_r$2 = r.Int63(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return $div64(v, n, true);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.ptr.prototype.Int31n = function(n) {
		var _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; max = $f.max; n = $f.n; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		/* */ if ((n & ((n - 1 >> 0))) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n & ((n - 1 >> 0))) === 0) { */ case 1:
			_r = r.Int31(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r & ((n - 1 >> 0));
		/* } */ case 2:
		max = (((2147483647 - (_r$1 = 2147483648 % ((n >>> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0));
		_r$2 = r.Int31(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v = _r$2;
		/* while (true) { */ case 5:
			/* if (!(v > max)) { break; } */ if(!(v > max)) { $s = 6; continue; }
			_r$3 = r.Int31(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return (_r$4 = v % n, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.ptr.prototype.int31n = function(n) {
		var _r, _r$1, _r$2, low, n, prod, r, thresh, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; low = $f.low; n = $f.n; prod = $f.prod; r = $f.r; thresh = $f.thresh; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Uint32(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		prod = $mul64((new $Uint64(0, v)), (new $Uint64(0, n)));
		low = ((prod.$low >>> 0));
		/* */ if (low < ((n >>> 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (low < ((n >>> 0))) { */ case 2:
			thresh = (_r$1 = ((-n >>> 0)) % ((n >>> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			/* while (true) { */ case 4:
				/* if (!(low < thresh)) { break; } */ if(!(low < thresh)) { $s = 5; continue; }
				_r$2 = r.Uint32(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				v = _r$2;
				prod = $mul64((new $Uint64(0, v)), (new $Uint64(0, n)));
				low = ((prod.$low >>> 0));
			/* } */ $s = 4; continue; case 5:
		/* } */ case 3:
		$s = -1; return (($shiftRightUint64(prod, 32).$low >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.int31n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.low = low; $f.n = n; $f.prod = prod; $f.r = r; $f.thresh = thresh; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.int31n = function(n) { return this.$val.int31n(n); };
	Rand.ptr.prototype.Intn = function(n) {
		var _r, _r$1, n, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		/* */ if (n <= 2147483647) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n <= 2147483647) { */ case 1:
			_r = r.Int31n(((n >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return ((_r >> 0));
		/* } */ case 2:
		_r$1 = r.Int63n((new $Int64(0, n))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (((x = _r$1, x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Intn }; } $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.ptr.prototype.Float64 = function() {
		var _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Int63(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($flatten64(_r)) / 9.223372036854776e+18;
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float64 }; } $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.ptr.prototype.Float32 = function() {
		var _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($fround(_r));
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float32 }; } $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.ptr.prototype.Perm = function(n) {
		var _r, i, j, m, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; j = $f.j; m = $f.m; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		m = $makeSlice(sliceType, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = r.Intn(i + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j]));
			((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j] = i);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Perm }; } $f._r = _r; $f.i = i; $f.j = j; $f.m = m; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	Rand.ptr.prototype.Shuffle = function(n, swap) {
		var _r, _r$1, i, j, j$1, n, r, swap, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; j = $f.j; j$1 = $f.j$1; n = $f.n; r = $f.r; swap = $f.swap; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n < 0) {
			$panic(new $String("invalid argument to Shuffle"));
		}
		i = n - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i > 2147483646)) { break; } */ if(!(i > 2147483646)) { $s = 2; continue; }
			_r = r.Int63n((new $Int64(0, (i + 1 >> 0)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = (((x = _r, x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
			$r = swap(i, j); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* while (true) { */ case 5:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 6; continue; }
			_r$1 = r.int31n((((i + 1 >> 0) >> 0))); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			j$1 = ((_r$1 >> 0));
			$r = swap(i, j$1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Shuffle }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.j = j; $f.j$1 = j$1; $f.n = n; $f.r = r; $f.swap = swap; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Shuffle = function(n, swap) { return this.$val.Shuffle(n, swap); };
	Rand.ptr.prototype.Read = function(p) {
		var _r, _r$1, _tuple, _tuple$1, _tuple$2, err, lk, n, ok, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; lk = $f.lk; n = $f.n; ok = $f.ok; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = lk.read(p, (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_r$1 = read(p, $methodVal(r, "Int63"), (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.lk = lk; $f.n = n; $f.ok = ok; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Read = function(p) { return this.$val.Read(p); };
	read = function(p, int63, readVal, readPos) {
		var _r, err, int63, n, p, pos, readPos, readVal, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; int63 = $f.int63; n = $f.n; p = $f.p; pos = $f.pos; readPos = $f.readPos; readVal = $f.readVal; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		pos = readPos.$get();
		val = readVal.$get();
		n = 0;
		/* while (true) { */ case 1:
			/* if (!(n < p.$length)) { break; } */ if(!(n < p.$length)) { $s = 2; continue; }
			/* */ if (pos === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (pos === 0) { */ case 3:
				_r = int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				val = _r;
				pos = 7;
			/* } */ case 4:
			((n < 0 || n >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + n] = ((val.$low << 24 >>> 24)));
			val = $shiftRightInt64(val, (8));
			pos = pos - (1) << 24 >> 24;
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		readPos.$set(pos);
		readVal.$set(val);
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: read }; } $f._r = _r; $f.err = err; $f.int63 = int63; $f.n = n; $f.p = p; $f.pos = pos; $f.readPos = readPos; $f.readVal = readVal; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Seed = function(seed) {
		var seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = globalRand.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Seed }; } $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Seed = Seed;
	Shuffle = function(n, swap) {
		var n, swap, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; n = $f.n; swap = $f.swap; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = globalRand.Shuffle(n, swap); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Shuffle }; } $f.n = n; $f.swap = swap; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Shuffle = Shuffle;
	lockedSource.ptr.prototype.Int63 = function() {
		var _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Int63 }; } $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.ptr.prototype.Uint64 = function() {
		var _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Uint64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Uint64 }; } $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	lockedSource.ptr.prototype.Seed = function(seed) {
		var r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Seed }; } $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	lockedSource.ptr.prototype.seedPos = function(seed, readPos) {
		var r, readPos, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; readPos = $f.readPos; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		readPos.$set(0);
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.seedPos }; } $f.r = r; $f.readPos = readPos; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.seedPos = function(seed, readPos) { return this.$val.seedPos(seed, readPos); };
	lockedSource.ptr.prototype.read = function(p, readVal, readPos) {
		var _r, _tuple, err, n, p, r, readPos, readVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; p = $f.p; r = $f.r; readPos = $f.readPos; readVal = $f.readVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		r.lk.Lock();
		_r = read(p, $methodVal(r.src, "Int63"), readVal, readPos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		r.lk.Unlock();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.read }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.p = p; $f.r = r; $f.readPos = readPos; $f.readVal = readVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.read = function(p, readVal, readPos) { return this.$val.read(p, readVal, readPos); };
	seedrand = function(x) {
		var _q, _r, hi, lo, x;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ($imul(48271, lo)) - ($imul(3399, hi)) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.ptr.prototype.Seed = function(seed) {
		var i, rng, seed, u, x, x$1, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = (((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0));
		i = -20;
		while (true) {
			if (!(i < 607)) { break; }
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64((new $Int64(0, x$1)), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64((new $Int64(0, x$1)), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = (new $Int64(0, x$1)), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rng_cooked.length) ? ($throwRuntimeError("index out of range"), undefined) : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i] = u));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.ptr.prototype.Int63 = function() {
		var rng, x, x$1;
		rng = this;
		return ((x = (x$1 = rng.Uint64(), new $Uint64(x$1.$high & 2147483647, (x$1.$low & 4294967295) >>> 0)), new $Int64(x.$high, x.$low)));
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	rngSource.ptr.prototype.Uint64 = function() {
		var rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$6 = (x = (x$1 = rng.vec, x$2 = rng.feed, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), x$3 = (x$4 = rng.vec, x$5 = rng.tap, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5])), new $Int64(x.$high + x$3.$high, x.$low + x$3.$low));
		(x$7 = rng.vec, x$8 = rng.feed, ((x$8 < 0 || x$8 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[x$8] = x$6));
		return (new $Uint64(x$6.$high, x$6.$low));
	};
	rngSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	ptrType$3.methods = [{prop: "ExpFloat64", name: "ExpFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "NormFloat64", name: "NormFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Int31", name: "Int31", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int63n", name: "Int63n", pkg: "", typ: $funcType([$Int64], [$Int64], false)}, {prop: "Int31n", name: "Int31n", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "int31n", name: "int31n", pkg: "math/rand", typ: $funcType([$Int32], [$Int32], false)}, {prop: "Intn", name: "Intn", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "Shuffle", name: "Shuffle", pkg: "", typ: $funcType([$Int, funcType], [], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "seedPos", name: "seedPos", pkg: "math/rand", typ: $funcType([$Int64, ptrType$1], [], false)}, {prop: "read", name: "read", pkg: "math/rand", typ: $funcType([sliceType$1, ptrType$2, ptrType$1], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}];
	Source.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}]);
	Source64.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}]);
	Rand.init("math/rand", [{prop: "src", name: "src", anonymous: false, exported: false, typ: Source, tag: ""}, {prop: "s64", name: "s64", anonymous: false, exported: false, typ: Source64, tag: ""}, {prop: "readVal", name: "readVal", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "readPos", name: "readPos", anonymous: false, exported: false, typ: $Int8, tag: ""}]);
	lockedSource.init("math/rand", [{prop: "lk", name: "lk", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "src", name: "src", anonymous: false, exported: false, typ: Source64, tag: ""}]);
	rngSource.init("math/rand", [{prop: "tap", name: "tap", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "feed", name: "feed", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "vec", name: "vec", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = $toNativeArray($kindInt64, [new $Int64(-973649357, 3952672746), new $Int64(-1065661887, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(-1477934308, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(-1654874170, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(-1374618802, 3467012610), new $Int64(-140526423, 2344407434), new $Int64(-1745367887, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(-968700782, 520164395), new $Int64(-1591572833, 1341358184), new $Int64(-1515085039, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(-2087444114, 998951326), new $Int64(-612324923, 1364957564), new $Int64(63173359, 4090230633), new $Int64(-1498029007, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(-1109106023, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(-1111517500, 3922894967), new $Int64(-1336974714, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(-1094251604, 433121399), new $Int64(2451824, 4162580594), new $Int64(-137262572, 4132415622), new $Int64(-1536231048, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(-624604839, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(-283806096, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(-2067810156, 3430061722), new $Int64(-1484435135, 3820169661), new $Int64(-1665985194, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(-852109057, 2472200560), new $Int64(-560457548, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(-174986835, 95608918), new $Int64(392686347, 3690479145), new $Int64(-1205570926, 1397922290), new $Int64(-1159314025, 1516129515), new $Int64(-320178155, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(-1953469798, 1336785672), new $Int64(-45086614, 4131677129), new $Int64(-1392278100, 4246329084), new $Int64(-1142500187, 3788585631), new $Int64(-66478285, 3080389532), new $Int64(-646438364, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(-519177718, 2276716302), new $Int64(-368453140, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(-1512910664, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(-934256930, 4159821533), new $Int64(-76621938, 1894661), new $Int64(-674493898, 1156868282), new $Int64(348271067, 776219088), new $Int64(-501428838, 2425634259), new $Int64(1716021749, 680510161), new $Int64(-574263456, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(-325695512, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(-2139648704, 1232604732), new $Int64(-1838070714, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(-1626402839, 3589632480), new $Int64(1198416575, 864579159), new $Int64(-1938748161, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(-1744284772, 100794388), new $Int64(-1191421458, 2991674471), new $Int64(-208666741, 2224662036), new $Int64(-173659161, 977097250), new $Int64(1351320195, 726419512), new $Int64(-183459897, 1747974366), new $Int64(-753095183, 1556430604), new $Int64(-1049492215, 1080776742), new $Int64(-385846958, 280794874), new $Int64(117767733, 919835643), new $Int64(-967009426, 3434019658), new $Int64(-1951414480, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(-1267681408, 2724693469), new $Int64(547796833, 598827710), new $Int64(-1846559452, 3452273442), new $Int64(-75778224, 649274915), new $Int64(-801301329, 2585724112), new $Int64(-1510934263, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(-52910178, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(-124804942, 681540375), new $Int64(1375448925, 537050586), new $Int64(-1964768344, 315246468), new $Int64(226402871, 849323088), new $Int64(-885062465, 45543944), new $Int64(-946445250, 2319052083), new $Int64(-40708194, 3613090841), new $Int64(560472520, 2992171180), new $Int64(-381863169, 2068244785), new $Int64(917538188, 4239862634), new $Int64(-1369555809, 3892253031), new $Int64(720683925, 958186149), new $Int64(-423297785, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(-1879761037, 2764496274), new $Int64(-1806480530, 4196182374), new $Int64(-1066765755, 550964545), new $Int64(818747069, 420611474), new $Int64(-1924830376, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(-1367475956, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(-1727621530, 281976339), new $Int64(574970164, 3619802330), new $Int64(-431930823, 3084554784), new $Int64(-1264611183, 4129772886), new $Int64(-2104399043, 1680378557), new $Int64(-1621962591, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(-1935828963, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(-834863562, 3958162143), new $Int64(-1226511573, 2773705983), new $Int64(1876039582, 225908689), new $Int64(-1183735113, 908216283), new $Int64(-605696219, 3574646075), new $Int64(-1827723091, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(-601399488, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(-1239009361, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(-553246738, 807894872), new $Int64(-1781325307, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(-1476242608, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(-1159399429, 1906263026), new $Int64(475781207, 3904421704), new $Int64(-623537128, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(-1742751146, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(-230443691, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(-156574141, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(-889746188, 209092916), new $Int64(-247669406, 1242699167), new $Int64(-713830396, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(-1197583895, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(-1946242443, 1766109365), new $Int64(700596547, 3257093788), new $Int64(-184714929, 2365720207), new $Int64(93384808, 3742754173), new $Int64(-458385235, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(-834260953, 3573511231), new $Int64(-754572527, 1760299077), new $Int64(-1375627191, 2260779833), new $Int64(-866019274, 1452805722), new $Int64(-1229671918, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(-1974867432, 500935732), new $Int64(1403501753, 676580929), new $Int64(-1565912283, 1184984890), new $Int64(-691968413, 1271474274), new $Int64(-1828754738, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(-2053227187, 1488599718), new $Int64(-1180531831, 3408913763), new $Int64(-2086531912, 2501050084), new $Int64(-875130448, 1639124157), new $Int64(-2009482504, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(-165243708, 3414355209), new $Int64(-792329287, 2275136352), new $Int64(-2057774345, 2151835223), new $Int64(-931144933, 1654534827), new $Int64(-679921451, 377892833), new $Int64(-482716010, 660204544), new $Int64(85706799, 390828249), new $Int64(-1422172693, 3402783878), new $Int64(-1468634160, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(-68150572, 2452299106), new $Int64(-896164822, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(-1194967131, 182675323), new $Int64(-1598554764, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(-851859191, 3622207527), new $Int64(338126939, 432729309), new $Int64(-1667470126, 2391914317), new $Int64(-1849558151, 235747924), new $Int64(2120733629, 3088823825), new $Int64(-745079795, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(-740826490, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(-665153481, 1583624461), new $Int64(-885822954, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(-2070568842, 2207265429), new $Int64(-1886797613, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(-356250305, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(-1945755145, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(-952181250, 286492130), new $Int64(2045622690, 2795735007), new $Int64(-715730566, 3703961339), new $Int64(-148436487, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(-1665420098, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(-750579440, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(-748019856, 3573129983), new $Int64(-890581831, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(-1954407413, 268782709), new $Int64(-1002123503, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(-911618704, 2205342611), new $Int64(-672703993, 1411666394), new $Int64(-1528454899, 677744900), new $Int64(-1876628533, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(-1117516959, 1082141470), new $Int64(-1770111792, 4046134367), new $Int64(51415528, 2142943655), new $Int64(-249824333, 3124627521), new $Int64(998228909, 219992939), new $Int64(-1078790951, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(-525858006, 1647770243), new $Int64(-2035959705, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(-2047330906, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(-1992983070, 2011457303), new $Int64(-1351022674, 3057425772), new $Int64(667839456, 81484597), new $Int64(-1681980888, 3646681560), new $Int64(-1372462725, 635548515), new $Int64(602489502, 2508044581), new $Int64(-1794220117, 1014917157), new $Int64(719992433, 3214891315), new $Int64(-1294799037, 959582252), new $Int64(226415134, 3347040449), new $Int64(-362868096, 4102971975), new $Int64(397887437, 4078022210), new $Int64(-536803826, 2851767182), new $Int64(-1398321012, 1540160644), new $Int64(-1549098876, 1057290595), new $Int64(-112592988, 3907769253), new $Int64(579300318, 4248952684), new $Int64(-1054576049, 132554364), new $Int64(-1085862414, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(-1082993397, 2230939180), new $Int64(-1804568072, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(-729261111, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(-1113097690, 3188942166), new $Int64(-74480109, 350070824), new $Int64(144881592, 61758415), new $Int64(-741824226, 3492950336), new $Int64(-2030042720, 3093818430), new $Int64(-453590535, 2962480613), new $Int64(-1912050708, 3154871160), new $Int64(-1636478569, 3228564679), new $Int64(610731502, 888276216), new $Int64(-946702974, 3574998604), new $Int64(-1277068380, 1967526716), new $Int64(-1556147941, 1554691298), new $Int64(-1573024234, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(-1867600880, 3764362170), new $Int64(-1655392592, 266611402), new $Int64(-393255880, 2047856075), new $Int64(-1000726433, 21444105), new $Int64(-949424754, 3065563181), new $Int64(-232418803, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(-485587503, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(-595148528, 2036813414), new $Int64(-1994877121, 3105536507), new $Int64(13954645, 3396176938), new $Int64(-721402003, 1377154485), new $Int64(-61839181, 3807014186), new $Int64(543009040, 3710110597), new $Int64(-1751425519, 916420443), new $Int64(734556788, 2103831255), new $Int64(-1766161494, 717331943), new $Int64(-1574598896, 3550505941), new $Int64(45939673, 378749927), new $Int64(-1997615719, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(-1040454942, 1407468696), new $Int64(-1678191250, 970098704), new $Int64(-285057486, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(-1305165746, 3916463034), new $Int64(-388598655, 3474113316), new $Int64(1036101639, 316544223), new $Int64(-1773744891, 1650844677), new $Int64(-907191419, 4267565603), new $Int64(-1070275024, 2501167616), new $Int64(-1520651863, 3929401789), new $Int64(-2091360852, 337170252), new $Int64(-960502090, 2061966842), new $Int64(-304190848, 2508461464), new $Int64(-1941471116, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(-1002297449, 2887126398), new $Int64(-1447111334, 296561685), new $Int64(700300844, 3729960077), new $Int64(-1572311344, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(-1105595719, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(-1649093095, 2145871984), new $Int64(-1582765715, 3565480803), new $Int64(-1568653827, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(-96556264, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(-1843479747, 2087477361), new $Int64(-1766167800, 2407950639), new $Int64(-1296225558, 3942568569), new $Int64(-1223900450, 4088074412), new $Int64(723260036, 2964773675), new $Int64(-673921829, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(-1604570740, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(-1031359300, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(-853573201, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(-795586925, 2500816079), new $Int64(-490248444, 514015239), new $Int64(1377565129, 543520454), new $Int64(-2039776725, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(-1502927041, 3166972343), new $Int64(372256200, 1517638666), new $Int64(-935275664, 173466846), new $Int64(-695774461, 4241513471), new $Int64(-1413550842, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(-910901561, 1539634186), new $Int64(-595957298, 178241987), new $Int64(-113277636, 182168164), new $Int64(-1102530459, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(-2114679722, 1732699140), new $Int64(-421057745, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(-1509359403, 2228431183), new $Int64(-810313977, 3554678728), new $Int64(-750989047, 173470263), new $Int64(-85886265, 3848297795), new $Int64(-926936977, 246236185), new $Int64(-1984190461, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(-598851901, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(-1906483789, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(-671844857, 3375313137), new $Int64(-1643868040, 881302957), new $Int64(-1508784745, 2514186393), new $Int64(-1703622845, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(-1938982667, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(-89426259, 2884561259), new $Int64(-805741095, 2456511185), new $Int64(983726246, 561175414), new $Int64(-1719489563, 432588903), new $Int64(885133709, 4059399550), new $Int64(-93096266, 1075014784), new $Int64(-1733832628, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(-1158354011, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(-1737578993, 3870530098), new $Int64(-484494257, 1717789158), new $Int64(-232997156, 1153452491), new $Int64(-990424416, 3948827651), new $Int64(-1357145630, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(-1385277313, 1202710438), new $Int64(-564909037, 2072216740), new $Int64(705690639, 2066751068), new $Int64(-2113583312, 173902580), new $Int64(-741983806, 142459001), new $Int64(172391592, 1889151926), new $Int64(-498943125, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(-2078821353, 2953948865), new $Int64(-320938673, 4041040923), new $Int64(-1942517976, 592046130), new $Int64(-705643640, 384297211), new $Int64(-2051649464, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(-1703423246, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(-343047503, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(-298327194, 2675874918), new $Int64(-1831355577, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(-864267462, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(-2091334213, 306752547), new $Int64(-1426688067, 2162363077), new $Int64(-57052633, 2767224719), new $Int64(-1471624099, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(-1744131281, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(-1793706473, 1240875658), new $Int64(-914893422, 2577342868), new $Int64(-1001298215, 4136853496), new $Int64(-1477114974, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(-176562048, 371758825), new $Int64(-441063112, 1528834084), new $Int64(-71688630, 1504757260), new $Int64(-1461820072, 699052551), new $Int64(-505543539, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(false), $assertType(NewSource(new $Int64(0, 1)), Source64)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/lei-cao/programming/code/utils"] = (function() {
	var $pkg = {}, $init, rand, time, sliceType, Shuffle;
	rand = $packages["math/rand"];
	time = $packages["time"];
	sliceType = $sliceType($Int);
	Shuffle = function(size) {
		var i, numbers, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; numbers = $f.numbers; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		numbers = [numbers];
		$r = rand.Seed($clone(time.Now(), time.Time).UnixNano()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		numbers[0] = new sliceType([]);
		i = 0;
		while (true) {
			if (!(i < size)) { break; }
			numbers[0] = $append(numbers[0], i + 1 >> 0);
			i = i + (1) >> 0;
		}
		$r = rand.Shuffle(numbers[0].$length, (function(numbers) { return function(i$1, j) {
			var _tmp, _tmp$1, i$1, j;
			_tmp = ((j < 0 || j >= numbers[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : numbers[0].$array[numbers[0].$offset + j]);
			_tmp$1 = ((i$1 < 0 || i$1 >= numbers[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : numbers[0].$array[numbers[0].$offset + i$1]);
			((i$1 < 0 || i$1 >= numbers[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : numbers[0].$array[numbers[0].$offset + i$1] = _tmp);
			((j < 0 || j >= numbers[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : numbers[0].$array[numbers[0].$offset + j] = _tmp$1);
		}; })(numbers)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return numbers[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Shuffle }; } $f.i = i; $f.numbers = numbers; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Shuffle = Shuffle;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = rand.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/lei-cao/programming/code/algoman/pkg/game"] = (function() {
	var $pkg = {}, $init, ebiten, board, defaults, ui, utils, sorting, basicsort, visualizer, image, color, math, time, btnGroupDirection, BtnGroup, Controller, Game, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, sliceType$1, structType, sliceType$2, ptrType$4, ptrType$5, sliceType$3, ptrType$6, ptrType$7, ptrType$8, funcType, controlY0, gamePlayBtnGroup, NewController, NewGame, makeTimestamp;
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	board = $packages["github.com/lei-cao/programming/code/algoman/pkg/board"];
	defaults = $packages["github.com/lei-cao/programming/code/algoman/pkg/defaults"];
	ui = $packages["github.com/lei-cao/programming/code/algoman/pkg/ui"];
	utils = $packages["github.com/lei-cao/programming/code/utils"];
	sorting = $packages["github.com/lei-cao/programming/code/v2/algorithms/sorting"];
	basicsort = $packages["github.com/lei-cao/programming/code/v2/algorithms/sorting/basicsort"];
	visualizer = $packages["github.com/lei-cao/programming/code/v2/visualizer"];
	image = $packages["image"];
	color = $packages["image/color"];
	math = $packages["math"];
	time = $packages["time"];
	btnGroupDirection = $pkg.btnGroupDirection = $newType(4, $kindInt, "game.btnGroupDirection", true, "github.com/lei-cao/programming/code/algoman/pkg/game", false, null);
	BtnGroup = $pkg.BtnGroup = $newType(0, $kindStruct, "game.BtnGroup", true, "github.com/lei-cao/programming/code/algoman/pkg/game", true, function(x_, y_, margin_, height_, width_, direction_, rects_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = 0;
			this.y = 0;
			this.margin = 0;
			this.height = 0;
			this.width = 0;
			this.direction = 0;
			this.rects = sliceType.nil;
			return;
		}
		this.x = x_;
		this.y = y_;
		this.margin = margin_;
		this.height = height_;
		this.width = width_;
		this.direction = direction_;
		this.rects = rects_;
	});
	Controller = $pkg.Controller = $newType(0, $kindStruct, "game.Controller", true, "github.com/lei-cao/programming/code/algoman/pkg/game", true, function(Image_, PlayToggle_, NextStepBtn_, SpeedUpBtn_, SpeedDownBtn_, RShuffleBtn_, SortSelect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Image = ptrType.nil;
			this.PlayToggle = ptrType$1.nil;
			this.NextStepBtn = ptrType$2.nil;
			this.SpeedUpBtn = ptrType$2.nil;
			this.SpeedDownBtn = ptrType$2.nil;
			this.RShuffleBtn = ptrType$2.nil;
			this.SortSelect = sliceType$1.nil;
			return;
		}
		this.Image = Image_;
		this.PlayToggle = PlayToggle_;
		this.NextStepBtn = NextStepBtn_;
		this.SpeedUpBtn = SpeedUpBtn_;
		this.SpeedDownBtn = SpeedDownBtn_;
		this.RShuffleBtn = RShuffleBtn_;
		this.SortSelect = SortSelect_;
	});
	Game = $pkg.Game = $newType(0, $kindStruct, "game.Game", true, "github.com/lei-cao/programming/code/algoman/pkg/game", true, function(Board_, Screen_, Controller_, then_, now_, startTime_, steps_, sorter_, values_, autoPlay_, timing_, speed_, finished_, finishedWait_, algorithm_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Board = ptrType$4.nil;
			this.Screen = ptrType.nil;
			this.Controller = ptrType$5.nil;
			this.then = 0;
			this.now = 0;
			this.startTime = 0;
			this.steps = $ifaceNil;
			this.sorter = $ifaceNil;
			this.values = sliceType$3.nil;
			this.autoPlay = false;
			this.timing = $throwNilPointerError;
			this.speed = 0;
			this.finished = false;
			this.finishedWait = 0;
			this.algorithm = "";
			return;
		}
		this.Board = Board_;
		this.Screen = Screen_;
		this.Controller = Controller_;
		this.then = then_;
		this.now = now_;
		this.startTime = startTime_;
		this.steps = steps_;
		this.sorter = sorter_;
		this.values = values_;
		this.autoPlay = autoPlay_;
		this.timing = timing_;
		this.speed = speed_;
		this.finished = finished_;
		this.finishedWait = finishedWait_;
		this.algorithm = algorithm_;
	});
	sliceType = $sliceType(image.Rectangle);
	ptrType = $ptrType(ebiten.Image);
	ptrType$1 = $ptrType(ui.ToggleButton);
	ptrType$2 = $ptrType(ui.Button);
	ptrType$3 = $ptrType(ui.CheckBox);
	sliceType$1 = $sliceType(ptrType$3);
	structType = $structType("github.com/lei-cao/programming/code/algoman/pkg/game", [{prop: "k", name: "k", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "v", name: "v", anonymous: false, exported: false, typ: $String, tag: ""}]);
	sliceType$2 = $sliceType(structType);
	ptrType$4 = $ptrType(board.Board);
	ptrType$5 = $ptrType(Controller);
	sliceType$3 = $sliceType($Int);
	ptrType$6 = $ptrType(ebiten.DrawImageOptions);
	ptrType$7 = $ptrType(BtnGroup);
	ptrType$8 = $ptrType(Game);
	funcType = $funcType([$Float64], [$Float64], false);
	BtnGroup.ptr.prototype.nextRect = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, i, x0, x1, y0, y1;
		i = this;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 0;
		x0 = _tmp;
		y0 = _tmp$1;
		x1 = _tmp$2;
		y1 = _tmp$3;
		if (i.direction === 0) {
			x0 = i.x + i.width >> 0;
			y0 = i.y;
			x1 = x0;
			y1 = y0 + i.height >> 0;
		}
		return image.Rect(x0, y0, x1, y1);
	};
	BtnGroup.prototype.nextRect = function() { return this.$val.nextRect(); };
	BtnGroup.ptr.prototype.addRect = function(rect) {
		var i, rect;
		i = this;
		i.width = i.width + (($clone(rect, image.Rectangle).Dx() + i.margin >> 0)) >> 0;
	};
	BtnGroup.prototype.addRect = function(rect) { return this.$val.addRect(rect); };
	NewController = function() {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tuple, c, cb, k, sorters, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; cb = $f.cb; k = $f.k; sorters = $f.sorters; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = new Controller.ptr(ptrType.nil, ptrType$1.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, sliceType$1.nil);
		_tuple = ebiten.NewImage(defaults.ScreenWidth, defaults.ScreenHeight, 0);
		c.Image = _tuple[0];
		_r = ui.NewToggleButton($clone(gamePlayBtnGroup.nextRect(), image.Rectangle), "Pause", "Play", false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c.PlayToggle = _r;
		gamePlayBtnGroup.addRect($clone(c.PlayToggle.Rect, image.Rectangle));
		_r$1 = ui.NewButton($clone(gamePlayBtnGroup.nextRect(), image.Rectangle), "Next"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		c.NextStepBtn = _r$1;
		gamePlayBtnGroup.addRect($clone(c.NextStepBtn.Rect, image.Rectangle));
		_r$2 = ui.NewButton($clone(gamePlayBtnGroup.nextRect(), image.Rectangle), "-"); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		c.SpeedDownBtn = _r$2;
		gamePlayBtnGroup.addRect($clone(c.SpeedDownBtn.Rect, image.Rectangle));
		_r$3 = ui.NewButton($clone(gamePlayBtnGroup.nextRect(), image.Rectangle), "+"); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		c.SpeedUpBtn = _r$3;
		gamePlayBtnGroup.addRect($clone(c.SpeedUpBtn.Rect, image.Rectangle));
		_r$4 = ui.NewButton($clone(gamePlayBtnGroup.nextRect(), image.Rectangle), "ReShuffle"); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		c.RShuffleBtn = _r$4;
		gamePlayBtnGroup.addRect($clone(c.RShuffleBtn.Rect, image.Rectangle));
		sorters = new sliceType$2([new structType.ptr("bubble", "Bubble Sort"), new structType.ptr("selection", "Selection Sort"), new structType.ptr("insertion", "Insertion Sort"), new structType.ptr("quick", "Quick Sort"), new structType.ptr("heap", "Heap Sort")]);
		_ref = sorters;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			k = _i;
			v = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), structType);
			cb = new ui.CheckBox.ptr($imul(10, defaults.DeviceScale), gamePlayBtnGroup.nextRect().Max.Y + ($imul(((20 + ($imul(35, k)) >> 0)), defaults.DeviceScale)) >> 0, v.v, false, "", false, $throwNilPointerError);
			cb.SetValue(v.k);
			c.SortSelect = $append(c.SortSelect, cb);
			_i++;
		}
		$s = -1; return c;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewController }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.cb = cb; $f.k = k; $f.sorters = sorters; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewController = NewController;
	Controller.ptr.prototype.Update = function() {
		var _i, _ref, c, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; c = $f.c; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.PlayToggle.Update(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.NextStepBtn.Update(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.SpeedDownBtn.Update(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.SpeedUpBtn.Update(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.RShuffleBtn.Update(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = c.SortSelect;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = v.Update(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 6; continue; case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Controller.ptr.prototype.Update }; } $f._i = _i; $f._ref = _ref; $f.c = c; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Controller.prototype.Update = function() { return this.$val.Update(); };
	Controller.ptr.prototype.Draw = function() {
		var _i, _ref, c, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; c = $f.c; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.PlayToggle.Draw(c.Image); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.NextStepBtn.Draw(c.Image); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.SpeedDownBtn.Draw(c.Image); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.SpeedUpBtn.Draw(c.Image); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.RShuffleBtn.Draw(c.Image); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = c.SortSelect;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = v.Draw(c.Image); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 6; continue; case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Controller.ptr.prototype.Draw }; } $f._i = _i; $f._ref = _ref; $f.c = c; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Controller.prototype.Draw = function() { return this.$val.Draw(); };
	NewGame = function() {
		var g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = new Game.ptr(ptrType$4.nil, ptrType.nil, ptrType$5.nil, 0, 0, 0, $ifaceNil, $ifaceNil, sliceType$3.nil, false, $throwNilPointerError, 0, false, 0, "");
		g.autoPlay = true;
		g.speed = defaults.Speed;
		g.steps = visualizer.NewFirstStep();
		g.timing = (function(progress) {
			var progress, x;
			x = 0.5;
			return math.Pow(progress, 2) * ((x + 1) * progress - x);
		});
		$r = g.initController(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.initAlgorithm(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return g;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewGame }; } $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewGame = NewGame;
	Game.ptr.prototype.Animate = function() {
		var _r, _r$1, err, g, progress, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; g = $f.g; progress = $f.progress; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		g.now = makeTimestamp();
		progress = (g.now - g.startTime) / (g.speed);
		if (progress > 1) {
			progress = 1;
		}
		g.then = g.now;
		_r = g.timing(progress); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = g.Update(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (ebiten.IsDrawingSkipped()) {
			$s = -1; return $ifaceNil;
		}
		$r = g.Draw(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Game.ptr.prototype.Animate }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.g = g; $f.progress = progress; $f.$s = $s; $f.$r = $r; return $f;
	};
	Game.prototype.Animate = function() { return this.$val.Animate(); };
	Game.ptr.prototype.Update = function(progress) {
		var g, progress, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; g = $f.g; progress = $f.progress; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		g.Board.Update(progress);
		$r = g.Controller.Update(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (progress === 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (progress === 1) { */ case 2:
			/* */ if (g.autoPlay) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (g.autoPlay) { */ case 4:
				$r = g.NextStep(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				g.Stop();
			/* } */ case 6:
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Game.ptr.prototype.Update }; } $f.g = g; $f.progress = progress; $f.$s = $s; $f.$r = $r; return $f;
	};
	Game.prototype.Update = function(progress) { return this.$val.Update(progress); };
	Game.ptr.prototype.Draw = function() {
		var _r, _r$1, _r$2, _r$3, g, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; g = $f.g; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.steps.Finished(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!(_r && g.finishedWait > 5000)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(_r && g.finishedWait > 5000)) { */ case 1:
			$r = g.Board.Draw(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = g.Controller.Draw(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = g.Screen.Fill((x = new color.Gray16.ptr(43690), new x.constructor.elem(x))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = g.Screen.DrawImage(g.Board.BoardImage, ptrType$6.nil); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = g.Screen.DrawImage(g.Controller.Image, ptrType$6.nil); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Game.ptr.prototype.Draw }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.g = g; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Game.prototype.Draw = function() { return this.$val.Draw(); };
	Game.ptr.prototype.NextStep = function() {
		var _r, _r$1, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (!g.Board.Ready()) {
			$s = -1; return;
		}
		_r = g.steps.Finished(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			g.finishedWait = g.finishedWait + (1) >> 0;
			$s = -1; return;
		/* } */ case 2:
		g.startTime = makeTimestamp();
		_r$1 = g.steps.NextStep(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = g.Board.NextStep(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Game.ptr.prototype.NextStep }; } $f._r = _r; $f._r$1 = _r$1; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	Game.prototype.NextStep = function() { return this.$val.NextStep(); };
	Game.ptr.prototype.Stop = function() {
		var g;
		g = this;
		g.autoPlay = false;
	};
	Game.prototype.Stop = function() { return this.$val.Stop(); };
	Game.ptr.prototype.Resume = function() {
		var g;
		g = this;
		g.autoPlay = true;
	};
	Game.prototype.Resume = function() { return this.$val.Resume(); };
	Game.ptr.prototype.SpeedUp = function() {
		var g;
		g = this;
		if (g.speed >= 100) {
			g.speed = g.speed - (100) >> 0;
		}
		if (g.speed <= 0) {
			g.speed = 10;
		}
	};
	Game.prototype.SpeedUp = function() { return this.$val.SpeedUp(); };
	Game.ptr.prototype.SpeedDown = function() {
		var g;
		g = this;
		if (g.speed < 2000) {
			g.speed = g.speed + (100) >> 0;
		}
	};
	Game.prototype.SpeedDown = function() { return this.$val.SpeedDown(); };
	Game.ptr.prototype.Restart = function() {
		var g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		$r = g.initAlgorithm(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Game.ptr.prototype.Restart }; } $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	Game.prototype.Restart = function() { return this.$val.Restart(); };
	Game.ptr.prototype.initAlgorithm = function() {
		var _r, _r$1, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = utils.Shuffle(30); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		g.values = _r;
		_r$1 = board.NewBoard(g.values); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		g.Board = _r$1;
		$r = g.applyAlgorithm(g.algorithm); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Game.ptr.prototype.initAlgorithm }; } $f._r = _r; $f._r$1 = _r$1; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	Game.prototype.initAlgorithm = function() { return this.$val.initAlgorithm(); };
	Game.ptr.prototype.initController = function() {
		var _i, _r, _ref, g, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; g = $f.g; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = [g];
		g[0] = this;
		_r = NewController(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		g[0].Controller = _r;
		g[0].Controller.PlayToggle.On = true;
		g[0].Controller.PlayToggle.SetOnPressed((function(g) { return function(b) {
			var b;
			if (b.On) {
				g[0].Resume();
			} else {
				g[0].Stop();
			}
		}; })(g));
		g[0].Controller.NextStepBtn.SetOnPressed((function(g) { return function $b(b) {
			var b, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = g[0].NextStep(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
		}; })(g));
		g[0].Controller.SpeedUpBtn.SetOnPressed((function(g) { return function(b) {
			var b;
			g[0].SpeedUp();
		}; })(g));
		g[0].Controller.SpeedDownBtn.SetOnPressed((function(g) { return function(b) {
			var b;
			g[0].SpeedDown();
		}; })(g));
		g[0].Controller.RShuffleBtn.SetOnPressed((function(g) { return function $b(b) {
			var b, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = g[0].Restart(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
		}; })(g));
		_ref = g[0].Controller.SortSelect;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ss = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			ss.SetOnCheckChanged((function(g) { return function $b(c) {
				var _i$1, _ref$1, c, ss$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i$1 = $f._i$1; _ref$1 = $f._ref$1; c = $f.c; ss$1 = $f.ss$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				/* */ if (c.Checked()) { $s = 1; continue; }
				/* */ $s = 2; continue;
				/* if (c.Checked()) { */ case 1:
					_ref$1 = g[0].Controller.SortSelect;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						ss$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						ss$1.UnCheck();
						_i$1++;
					}
					c.Check();
					g[0].algorithm = c.Value();
					$r = g[0].Restart(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 2:
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._i$1 = _i$1; $f._ref$1 = _ref$1; $f.c = c; $f.ss$1 = ss$1; $f.$s = $s; $f.$r = $r; return $f;
			}; })(g));
			if (ss.Value() === "quick") {
				ss.Check();
				g[0].algorithm = ss.Value();
			}
			_i++;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Game.ptr.prototype.initController }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.g = g; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Game.prototype.initController = function() { return this.$val.initController(); };
	Game.ptr.prototype.applyAlgorithm = function(id) {
		var _1, _r, g, id, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; g = $f.g; id = $f.id; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_1 = id;
		if (_1 === ("bubble")) {
			g.sorter = basicsort.NewBubbleSort();
		} else if (_1 === ("selection")) {
			g.sorter = basicsort.NewSelectionSort();
		} else if (_1 === ("insertion")) {
			g.sorter = basicsort.NewInsertionSort();
		} else if (_1 === ("quick")) {
			g.sorter = basicsort.NewQuickSort();
		} else if (_1 === ("heap")) {
			g.sorter = basicsort.NewHeapSort();
		}
		$r = g.sorter.Sort(g.values); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = g.sorter.Steps(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		g.steps = _r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Game.ptr.prototype.applyAlgorithm }; } $f._1 = _1; $f._r = _r; $f.g = g; $f.id = id; $f.$s = $s; $f.$r = $r; return $f;
	};
	Game.prototype.applyAlgorithm = function(id) { return this.$val.applyAlgorithm(id); };
	makeTimestamp = function() {
		return ($flatten64($clone(time.Now(), time.Time).UnixNano())) / 1e+06;
	};
	ptrType$7.methods = [{prop: "nextRect", name: "nextRect", pkg: "github.com/lei-cao/programming/code/algoman/pkg/game", typ: $funcType([], [image.Rectangle], false)}, {prop: "addRect", name: "addRect", pkg: "github.com/lei-cao/programming/code/algoman/pkg/game", typ: $funcType([image.Rectangle], [], false)}];
	ptrType$5.methods = [{prop: "Update", name: "Update", pkg: "", typ: $funcType([], [], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([], [], false)}];
	ptrType$8.methods = [{prop: "Animate", name: "Animate", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([$Float64], [$error], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([], [], false)}, {prop: "NextStep", name: "NextStep", pkg: "", typ: $funcType([], [], false)}, {prop: "Stop", name: "Stop", pkg: "", typ: $funcType([], [], false)}, {prop: "Resume", name: "Resume", pkg: "", typ: $funcType([], [], false)}, {prop: "SpeedUp", name: "SpeedUp", pkg: "", typ: $funcType([], [], false)}, {prop: "SpeedDown", name: "SpeedDown", pkg: "", typ: $funcType([], [], false)}, {prop: "Restart", name: "Restart", pkg: "", typ: $funcType([], [], false)}, {prop: "initAlgorithm", name: "initAlgorithm", pkg: "github.com/lei-cao/programming/code/algoman/pkg/game", typ: $funcType([], [], false)}, {prop: "initController", name: "initController", pkg: "github.com/lei-cao/programming/code/algoman/pkg/game", typ: $funcType([], [], false)}, {prop: "applyAlgorithm", name: "applyAlgorithm", pkg: "github.com/lei-cao/programming/code/algoman/pkg/game", typ: $funcType([$String], [], false)}];
	BtnGroup.init("github.com/lei-cao/programming/code/algoman/pkg/game", [{prop: "x", name: "x", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "y", name: "y", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "margin", name: "margin", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "direction", name: "direction", anonymous: false, exported: false, typ: btnGroupDirection, tag: ""}, {prop: "rects", name: "rects", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	Controller.init("", [{prop: "Image", name: "Image", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "PlayToggle", name: "PlayToggle", anonymous: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "NextStepBtn", name: "NextStepBtn", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "SpeedUpBtn", name: "SpeedUpBtn", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "SpeedDownBtn", name: "SpeedDownBtn", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "RShuffleBtn", name: "RShuffleBtn", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "SortSelect", name: "SortSelect", anonymous: false, exported: true, typ: sliceType$1, tag: ""}]);
	Game.init("github.com/lei-cao/programming/code/algoman/pkg/game", [{prop: "Board", name: "Board", anonymous: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "Screen", name: "Screen", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "Controller", name: "Controller", anonymous: false, exported: true, typ: ptrType$5, tag: ""}, {prop: "then", name: "then", anonymous: false, exported: false, typ: $Float64, tag: ""}, {prop: "now", name: "now", anonymous: false, exported: false, typ: $Float64, tag: ""}, {prop: "startTime", name: "startTime", anonymous: false, exported: false, typ: $Float64, tag: ""}, {prop: "steps", name: "steps", anonymous: false, exported: false, typ: visualizer.Stepper, tag: ""}, {prop: "sorter", name: "sorter", anonymous: false, exported: false, typ: sorting.Sorter, tag: ""}, {prop: "values", name: "values", anonymous: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "autoPlay", name: "autoPlay", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "timing", name: "timing", anonymous: false, exported: false, typ: funcType, tag: ""}, {prop: "speed", name: "speed", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "finished", name: "finished", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "finishedWait", name: "finishedWait", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "algorithm", name: "algorithm", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ebiten.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = board.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = defaults.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utils.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sorting.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = basicsort.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = visualizer.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		controlY0 = $imul(175, defaults.DeviceScale);
		gamePlayBtnGroup = new BtnGroup.ptr($imul(10, defaults.DeviceScale), controlY0, $imul(10, defaults.DeviceScale), defaults.ButtonMinHeight, 0, 0, new sliceType([]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, $init, ebiten, defaults, game, ptrType, algoman, update, main;
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	defaults = $packages["github.com/lei-cao/programming/code/algoman/pkg/defaults"];
	game = $packages["github.com/lei-cao/programming/code/algoman/pkg/game"];
	ptrType = $ptrType(game.Game);
	update = function(screen) {
		var _r, screen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; screen = $f.screen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		algoman.Screen = screen;
		_r = algoman.Animate(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: update }; } $f._r = _r; $f.screen = screen; $f.$s = $s; $f.$r = $r; return $f;
	};
	main = function() {
		var _r, _r$1, _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = game.NewGame(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		algoman = _r;
		_r$1 = ebiten.DeviceScaleFactor(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		s = _r$1;
		_r$2 = ebiten.Run(update, defaults.ScreenWidth, defaults.ScreenHeight, 1 / s, "Algoman"); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: main }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ebiten.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = defaults.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = game.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		algoman = ptrType.nil;
		/* */ if ($pkg === $mainPkg) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($pkg === $mainPkg) { */ case 4:
			$r = main(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$mainFinished = true;
		/* } */ case 5:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["main"];
$packages["runtime"].$init();
$go($mainPkg.$init, []);
$flushConsole();

}).call(this);
//# sourceMappingURL=algoman.js.map
